var documenterSearchIndex = {"docs":
[{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = GPPPInput(:f3, randn(5))\n\ny = rand(f(x, 0.1))\n\nlogpdf(f(x, 0.1), y) ≈ elbo(f(x, 0.1), y, f(x, 1e-9))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPINput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the GP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = wrap(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we that makes use of a variety of packages from the Julia ecosystem. In particular, we'll make use of","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"WARNING: Method definition rrule(typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/95DKO/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition frule(Any, typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/95DKO/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition rrule(typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/95DKO/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition frule(Any, typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/95DKO/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.05.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"21.92812651981224","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well.\n    s_noise = positive(0.1),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-0.9162907691270586, Bijectors.Exp{0}(), 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.6094379869399091, Bijectors.Exp{0}(), 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(1.6094379094538682, Bijectors.Exp{0}(), 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.490116130486996e-8, Bijectors.Exp{0}(), 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-2.3025852420056685, Bijectors.Exp{0}(), 1.4901161193847656e-8))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     1.496230e+01     3.535719e+01\n * time: 0.025979995727539062\n     1    -3.063748e+00     2.947951e+01\n * time: 1.5207560062408447\n     2    -1.598793e+01     1.434354e+01\n * time: 1.5431609153747559\n     3    -2.522584e+01     3.441955e+00\n * time: 1.5546770095825195\n     4    -2.598742e+01     2.188864e+00\n * time: 1.5657179355621338\n     5    -2.669247e+01     1.691170e+00\n * time: 1.5773708820343018\n     6    -2.680864e+01     8.399466e-01\n * time: 1.605802059173584\n     7    -2.683219e+01     3.164062e-01\n * time: 1.617516040802002\n     8    -2.683765e+01     1.048533e-01\n * time: 1.6346468925476074\n     9    -2.683864e+01     3.254132e-02\n * time: 1.6462469100952148\n    10    -2.683872e+01     7.004569e-03\n * time: 1.6578879356384277\n    11    -2.683872e+01     8.159178e-05\n * time: 1.6693480014801025\n    12    -2.683872e+01     2.361305e-07\n * time: 1.680846929550171\n    13    -2.683872e+01     1.922458e-09\n * time: 1.7109580039978027\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -0.9604125313431569\n -1.581157071607291\n  1.63715341483336\n -0.03609207039195367\n -2.2688029382560533","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.4),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-0.18184182541142668, -2.306669088797296, 1.4612565926012535, -0.0645659853959434, -3.811427910551835], [-0.18184182541142668, -2.306669088797296, 1.4612565926012535, -0.0645659853959434, -3.811427910551835], [-0.18184182541142668, -2.306669088797296, 1.4612565926012535, -0.0645659853959434, -3.811427910551835], [-0.4150345680109288, -2.070768034418687, 1.4410048927788863, 0.009746055656971276, -3.7343136286745926], [-0.17348390600823047, -2.0360467079037963, 1.5164260348688012, -0.040974136181136156, -3.5206770101271503], [-0.17981641930375425, -1.83444711865103, 2.1239553824436843, -0.15264322752797568, -3.5020654434237835], [-0.42317506817748235, -1.4210963782395305, 0.6298574480511598, -1.3480140876903486, -3.8148083451263357], [0.15273757019443443, -0.5765196976996532, 0.7245271936421638, -2.1242003404558267, -3.5330862246602655], [-0.18695751040170078, -1.3035734670211772, 0.58734559015736, -2.470232977229967, -3.6438793881519644], [0.1156471611668774, -0.6705613856318116, 1.5773048918418489, -1.9116191817341863, -3.5606117756513544], [-0.13681634520226005, -1.3795402677130448, 1.1876765961859161, -1.0239703366998283, -3.7797480873492493], [-0.021666864332622757, -1.042602004406254, 0.7634436493796174, -0.7233750759256634, -3.495671741880589], [-0.021666864332622757, -1.042602004406254, 0.7634436493796174, -0.7233750759256634, -3.495671741880589], [-0.15420893613194955, -1.0181577532479777, 1.0240036989880523, -0.6484501178499853, -3.5934410426797387], [0.09277640285154798, -0.8323251802091599, 1.128371376056142, -0.6101438738952701, -3.6258126270689064], [0.005160513764612469, -0.7405389654516944, 1.1036175493045797, -0.5749146864320993, -3.3477901269035475], [-0.1464143368480656, -1.3376380865819337, 1.4027946696160039, -0.8760430326471476, -3.7651312373373442], [-0.3495906064270991, -1.1057195351260065, 1.4431347066476254, -0.7795435328173761, -3.604580932146194], [-0.31837382201764, -1.7428212758821868, 1.4458997323954779, -0.67669580860343, -3.771809408635943], [-0.3350023681781727, -1.7185893522828732, 1.4656881019273473, -0.7190926941994858, -3.727238460778874], [0.14069725149895612, -0.801588892776682, 0.0003916035417026176, -1.4374402779067417, -3.7997027022178216], [-0.7132528515846608, -1.802978159305164, 1.4445525123739367, -0.6620568781196815, -3.62135723066643], [-0.6762784482653625, -1.8184631069355115, 1.4506281286658196, -0.6318692912073309, -3.6533506173402537], [-0.33434844932360486, -1.1789085048952068, 1.7357954581690633, -0.3642556014516813, -3.6952694857252992], [-0.21263353939791418, -0.6114096992333689, -0.021119332969870706, -0.7911117417638072, -3.5706933386941304], [0.08472817134926762, -1.6364116262376722, 0.307688753132356, -0.43395721514078345, -3.6896452646226563], [0.25400172933773835, -0.7018576775322872, -0.14486999484001928, -0.993337242012452, -3.548914459973773], [-0.1601476765357863, -1.7121059618520085, 1.1583913144313995, -0.7167802803077967, -3.471196467026535], [-0.25913347507674056, -1.8316868641201165, 2.0842942471246007, -0.3135771144724464, -3.4754534821428766], [-0.34038997677417654, -1.4220493021391711, 1.5343226219882584, -0.019151463580360226, -3.58900632417658], [-0.43687051117685766, -1.7173081599148943, 1.725289245216985, -0.0055288989469795685, -3.70213343230196], [-0.9545767380576918, -2.017327923809748, 1.4851140866538741, 0.05524726297450647, -3.4874171376102163], [0.1823571336843225, -0.592430216424131, 1.2573483994357255, -1.718526539488205, -3.8427584351738], [-0.153190518893684, -1.424713765523417, 0.7098923154949449, 0.0463353166116946, -3.6227323017733837], [-0.1818838468230919, -1.4204033601706283, 0.7433571506833032, -0.07496346304557869, -3.5628128229069462], [-0.20260251537727675, -1.2202688820815435, 1.4583565900530502, -0.12040882815760992, -3.6598782627267856], [-0.84956601494972, -2.131921172012458, 1.5945768972731311, -0.42596190023636704, -3.467806736770671], [0.0003057734380917665, -1.5517073838542204, 1.4940835017620138, -0.6030319784336748, -3.6523361300304527], [-0.3861343052313068, -2.154357974270342, 2.0203152723126, -0.2325071866999456, -3.601794880548311], [-0.8876150650402281, -2.077942513205012, 2.047838059225639, -0.29428277362901006, -3.4534753985741418], [0.01557831746364867, -1.1034270968093451, 0.6769887384322697, -1.2562342895213396, -3.1429348014073306], [-0.4331705208995225, -2.0856453773005414, 2.3702417887880802, -0.03684925254803241, -3.572715827534502], [-0.04797353952103762, -0.9545947364796585, 1.5994013788157129, -0.543105539413411, -3.451421793188008], [-0.7616937264323604, -1.869277175942369, 0.7424418875993875, -1.0040172133809533, -3.715553425600753], [-0.41470728108535454, -1.602569292909339, 0.8356025952000877, -1.4806354568646611, -3.6595627432970073], [-0.5358057491196186, -1.2678266320585045, 0.6623468581276188, -1.4500021905914586, -3.595764638939637], [-0.45551738425645594, -1.884892535524868, 0.6413967994332961, -0.775235458491433, -3.4164757156249803], [-0.3202802528116763, -1.391743695933008, 1.129400163354319, -1.409937083096224, -3.763100737351195], [-0.4939424498988944, -1.5403275230300417, 1.5210404406930067, -0.27851655282524096, -3.7431278892705073], [-0.28502194377701107, -1.5900305210898567, 0.47706334584829635, -0.933198211627882, -3.679153967861851], [-0.007450566865693425, -1.4026344172580756, 0.5115220489607306, -0.8521109644561822, -3.3616318653278228], [-0.09327870833606541, -1.3470947137480596, -0.10009520260494043, -0.818003251317178, -3.833738124079802], [-0.19971774025840244, -1.6808918524557561, 0.013672530787270862, -0.8906440082806343, -3.41871977948527], [0.13827823303073358, -0.771862807470469, -0.015017158438547548, -1.996726610958723, -3.3757379072350067], [0.8836270547859774, -1.7167568244870912, 0.24003224241371027, -0.8511586842569592, -3.318118838641684], [0.695253020178433, -1.6690410984353374, -0.3473149979721569, -1.5738591338106742, -3.7236580450041386], [0.9673663295770581, -1.144848704989427, 0.2372832533373978, -0.6747314864420414, -3.4788583990763753], [1.2196282626005486, -0.2264818434739861, -0.724216836858536, -1.8584662830567213, -3.976064164704449], [0.6685701645122906, -1.3114320250242235, -0.6332369197984543, -1.5611645845374496, -3.313497827900739], [1.2908987496789908, -1.0447981353314053, -0.4831702085778981, -1.6305555450279732, -3.3252140339906253], [1.1194159503627672, -0.8281646929556197, -0.35202700984070845, -1.4708543230433357, -3.664522131775425], [1.0885538784261475, -0.7530087356397072, -0.4050525831819523, -1.3115216836118835, -3.587282014385078], [1.004102805844512, -0.7399056494146141, 0.16532354729363624, -0.88981961117221, -3.66066478234793], [1.0722616721593112, -0.7979945171437127, 0.2947145321583481, -0.397969205371335, -3.678683526156517], [0.5447962429320132, -1.4566939985808518, -0.38381615675654523, -1.7557347891364803, -3.7418279157392127], [1.576530504989171, -0.31313766747590405, -0.11473651270440666, -1.0170835235133626, -3.523273530986062], [2.2128340409948217, -0.0768225543952614, -0.6561582999868655, -1.9098730853666988, -3.533797633168834], [1.7966798100817098, -0.08495988193714883, 0.00024012430905848148, -1.1043032480267596, -3.5635436957652193], [1.7440672743794265, -0.1404553897758428, 0.03805013540992126, -1.0188963410588643, -3.751770401376956], [1.6997016551138775, -0.9439740357560777, -0.7542977958910888, -1.9612712668236898, -3.7310315074292384], [1.4761844400567359, -0.9619724391927915, -0.23422022391231156, -1.4016160581709372, -3.561209928355236], [1.8164950933387671, -0.3148547151586676, -0.40237338595101857, -1.8696125991646662, -3.6691030226009755], [-0.1946110048613343, -1.3927552319964243, 0.7343147485473304, -1.1387595428862505, -3.6729995026644424], [-0.6613063865578551, -1.860815114828233, 1.420131748891501, -0.8032455373183698, -3.842272704792372], [-0.27762818203551054, -0.7062733699283965, 0.6363842461382434, -0.8150600094235363, -3.5380760648193847], [-0.3323894284552467, -2.335753744505155, 0.3561339123064668, -0.6764187906165791, -3.6706335381868223], [-1.1661133140467081, -1.9771779166228511, 0.5304365709391594, -0.7201252437891061, -3.5058261677226494], [0.8801864395308445, -2.026580659864198, -0.2279651576749949, -1.2781078238062968, -3.4781690614581837], [1.4198784114586278, -0.8154199495664778, -0.2611351229051633, -1.3671300267396183, -3.5340670058743555], [0.8837330289769064, -1.4561372327084658, -0.3803780644014094, -1.523482600031802, -3.646955869352466], [0.7953979686624453, -1.5604987865030262, -0.3400696620408792, -1.4174903582682483, -3.5181528823921298], [0.3627854487032534, -0.6517764653333311, -0.2042445573346909, -1.165932142991468, -3.491600646050403], [-0.9028398031203715, -2.199222054710968, 0.45705446103534186, -0.9927720323461174, -3.4868633230301787], [-0.8543848121468718, -2.1809120818585552, 0.46278116481509235, -1.015292603428248, -3.510709633421001], [-0.060107239312506555, -1.2025511212218196, 0.3963885612709299, -1.1878267581247626, -3.6144118612559435], [-0.013773649383678171, -1.4327264320675026, 0.4984951872286474, -0.7409976119210255, -3.7063750725848346], [-0.4670384928557929, -1.4867740939700722, 0.40946752499189076, -0.38775361483771775, -3.4334899339027314], [-0.5075832483876533, -1.2044145025422732, 0.3753302661126544, -1.8718760502039045, -3.517266582358743], [-0.11372288112001422, -1.0851103081966598, 0.2311220756526261, -2.0282261190487407, -3.6791824410789102], [0.039999779819737714, -0.8914865426219811, 0.14361540564259803, -1.4512329595240967, -3.5666863225949097], [-0.4692758808969624, -1.8104200478311199, 1.2380578660872037, -0.47227773848090804, -3.6569230890718365], [-0.757516669687278, -1.8527499410950836, 1.3239598175890495, -0.5732961051727623, -4.111777689812142], [-0.3649904656645526, -2.1320813478833456, 1.5640147339967312, -0.3349839828863195, -3.2581236535933353], [-0.3678235445796354, -0.8307610431214374, 1.2410622866763439, -0.5775598794793644, -4.018586014037124], [-0.3079290076494989, -1.2284277031751638, 1.5614978452806703, -0.8265320731386274, -3.47263266001884], [-0.585776284963868, -1.5497331995346275, 0.6269241090598889, -0.885225619609911, -3.576081785509487], [-0.8752818200908754, -2.1292833490322103, 0.8443895941141448, -1.2888428067952273, -3.9087420078240065], [2.349659970987909, -0.0474830491577604, -0.05095920142753141, -1.5814248943087341, -3.457188557838872], [1.2402623386878457, -0.9047846185981665, -0.49582957735958455, -1.636098089346931, -3.6520851212223864], [1.7556883458900012, -0.9694640047703418, -0.6634156098051611, -1.949487438744038, -3.5399305653281177], [-0.38827345574641153, -1.3040515869740876, 0.7637984298420027, -0.6771926159080597, -3.6475289280069747], [0.11836153145595919, -1.2837048806847735, -0.013087919371782275, -1.1044723371695826, -3.529890612226442], [0.6378578371721009, -1.4821475124730976, 0.004290599294235878, -0.9453461484493675, -3.5420556975409507], [1.018326353124162, -1.065343515309742, -0.6984822684910239, -1.813016053023299, -3.629425765302634], [1.7801255781324978, -1.2830409394908386, -0.7593688132639569, -1.8570967988937952, -3.5691811836739995], [1.8345069576654462, -0.7365121160911899, -0.3363693513915984, -1.5807189516830586, -3.6882379255516313], [1.019890205587949, -1.1198986306545826, -0.24442091388920795, -1.1763833569558162, -3.820970685076875], [1.312949104963576, -0.5010718973024132, -0.01320011390896271, -0.9445195775104431, -3.3488884883002004], [1.696348767298833, -0.12203844136151035, -0.3998763402860886, -1.8110307272326698, -3.981358658870802], [1.946706918343873, -0.6563637083805363, -0.32956183262399646, -1.7972041273713355, -3.482289823537247], [2.008992251191383, -0.5960680382777613, -0.7884868180559529, -1.8662625326972793, -3.77641418151777], [1.2649799878294044, -1.3942118246786965, -0.22957526570109754, -1.5750103697907296, -3.301673843927067], [1.410010615002854, -1.0054425164083354, -0.4158539060632317, -1.4972835850161434, -3.842736779566072], [1.5614813748121734, -0.533663010587691, -0.103472589345511, -1.2687540412360885, -3.373190387819708], [1.3256773982499388, -0.8958513828249188, -0.5927261466633964, -1.5191015827202585, -3.907137974127353], [1.4410255690033242, -0.7994592287563083, -0.5760816686002974, -1.4260947293108335, -3.682640324373769], [1.3246338587256712, -0.665496180035056, -0.37727261158933456, -1.8860167927592297, -3.56816706499633], [1.0441831429922415, -0.2362977034030475, -0.7091182225871472, -1.771925898460085, -3.707074208682887], [1.4120556485919356, -0.4971553261231716, -0.6522910789685665, -1.7523665202779601, -3.555301678514058], [1.3916874140943727, -0.9026367488955347, -0.4668941486577898, -2.0978731138163176, -3.6705071116056733], [1.3812035726711143, -0.9068212161479144, -0.6858625787342125, -1.9032996394546355, -3.6931129850316413], [1.7837221170519144, 0.3469181558103878, 0.06287242829780951, -1.2370742751473496, -3.760582540474294], [1.7192649918666314, 0.3677581175558814, -0.22610550544777824, -1.1807754585996832, -3.7782816703332154], [2.134723548419957, -0.00929985365244787, -0.43746948717023315, -1.8513642972636444, -3.8278204343946656], [1.2629097486451675, -0.4363396662421549, -0.6750720371473561, -1.5032623334033668, -3.4889627180647627], [0.7884297818622087, 0.1781945504571361, -0.2014329077901409, -1.8670186111026648, -3.7184533104719315], [0.9342503674195957, 0.050666720424516365, -0.26706065108812616, -1.8878412112994054, -3.5545521874874493], [2.322606961900508, -1.3395094505409344, 0.015262796437529647, -1.183327645038892, -3.497643368117693], [-0.1782524340053177, -0.8460444079017246, -0.5455206954205096, -1.5292642249072017, -3.8666956990310584], [2.2177834013957596, -0.7354310441430598, -0.15917081795508017, -1.0294244264702892, -3.4435882862870697], [0.717554479710502, -0.6740505038844332, -0.4478131434156626, -1.714898619567116, -3.4327253746831583], [0.6422021182787889, -0.44234432891102404, -0.7390381084838699, -1.9611560084141795, -3.81126803917205], [1.764810317409172, -0.4436785694671407, -0.13957826456706612, -1.2994470902627626, -3.7204327757415596], [1.6759967537441383, -0.8851191531866531, -0.4985485811499492, -1.7281229721587552, -3.678814749468318], [1.8220193361875718, -0.8226982756535963, -0.892027759532477, -1.8329328536652982, -3.720345844767698], [1.138453694565398, -0.13070501155206785, 0.07917062363944098, -1.1683419238762658, -3.407839216490583], [1.1094697030425076, -0.11840200353199201, -0.3129270439606942, -1.14925276895324, -3.5832853517697942], [1.5537338223357968, -0.8071581434092561, -0.0993292760794503, -1.2950123181506046, -3.684930084821596], [1.5649909902759984, -0.9905857879829776, -0.2886839644696205, -1.4158353473364391, -3.678973651241897], [0.8851337726163236, -0.8032644686217627, -0.4937691971839421, -1.5000531144122273, -3.50121549125865], [1.2511395067639508, -0.7776848954713775, -0.40260807615987987, -1.7358600582514594, -3.5670884506603278], [1.2495071669913065, -1.3060382488168767, -0.21848164795681446, -1.350008817522912, -3.6643162276520957], [-0.0650352911552603, -1.2401163991698927, 0.042937077484627356, -0.8027069944233268, -3.6985412349540048], [-0.1263500633687331, -1.075208419685517, 0.03154601838468119, -1.3211275983415274, -3.5854933010701124], [0.12694228638827584, -1.233679455573466, -0.26161526618549746, -1.0096709123080332, -3.6426933197929485], [-0.5272712303948651, -1.6628921432375063, 2.3114346413913163, -0.7797843855910533, -3.6035917722204918], [0.3244740238356125, -0.5826835441363689, 1.6212575436491796, -1.5463894858290088, -3.673473828684255], [-0.0038881563634688143, -0.3173694419411805, 0.9719706336428211, -1.1911288053806437, -3.380383889618789], [0.16266923389624566, -0.5167395209667993, 0.8342002493505905, -1.4769197583373896, -3.697604617806356], [-0.2788306639729467, -1.792344734802275, 0.21115010216384664, -2.013822788336581, -3.6645411477748784], [1.211939560895288, -0.30346268010127503, 0.12653505556771788, -0.17536859013618605, -3.482447353440233], [0.18002037125706805, -0.6792375007326967, -0.6293832617314022, -2.501631335115696, -3.408801124759563], [1.338006535770683, -1.055231519201763, -0.19653383900640992, -0.5191040520513769, -3.611855067263773], [1.8575910108599691, 0.1111234223263673, 0.3257097348843153, -0.8731765615693856, -3.6539796784424863], [1.9725558355091524, 0.08816197312611479, -0.23409587321320113, -0.9063017683353845, -3.5574219244366017], [1.1738066388233839, -0.5278457226199205, -0.5796525375800891, -1.6565067561057938, -3.5630092578693366], [2.0678625983533925, -1.4175157285644604, -0.11613599367637008, -1.347491597835857, -3.5736728326995113], [1.5790439737304998, 0.49971708945050924, -0.6204475748955721, -1.67148136076775, -3.7005547398438856], [1.9254742868847399, -1.1671792153600904, 0.006583279319775481, -0.7455794858174394, -3.4497675045272316], [0.5557009319411226, -0.6062317212367866, -0.2423464294011189, -1.6486736838788671, -3.5491992544958286], [1.196916469157581, -0.7437548472260616, -0.6904745894856616, -1.4518437775133741, -3.4748908063708974], [1.2318581621601985, -0.7090673572913894, -0.6413651322556516, -1.841198623193899, -3.6370822639914704], [2.024361668691939, -0.5737451028847261, -0.18494965177291345, -1.3600951994317008, -3.6286619701378435], [2.296977728797729, -1.35348242822352, -0.18398546696042517, -1.0707908524544165, -3.6978832297603956], [0.48196457153969874, -0.4145396317761645, -0.572942628330443, -1.6241958222804684, -3.57120796715756], [1.9378628067995252, -1.2244463824069345, -0.8274003508852147, -1.8933610579560367, -3.613218103951775], [2.0670227964809835, -1.2703273784273332, -0.6267136587495542, -2.3944516823087394, -3.4996739261059733], [1.9940208830860624, 0.052270591714128456, -0.6706067543472303, -1.337560328432375, -3.7015586046819124], [2.0469375494683635, -0.27884305714202695, -0.7996064829034236, -1.477588050612247, -3.722441866861445], [1.393072798878357, 0.03590628595065415, -0.2953544183312092, -1.8400227904035547, -3.4961080726325733], [1.8873062244606498, -0.2618049199001908, -0.8919512422080059, -1.6661289456885873, -3.683448277108605], [0.7943967917954751, -1.4493918635896947, 0.14807728862365985, -0.7208445581703645, -3.542494720620731], [0.7522241969503208, -1.334297019057958, -0.09456121594518956, -1.0462350657186759, -3.426135213162833], [-0.33615312873667974, -1.8180638465165089, 1.5713384524632152, -0.4578161924387144, -3.583983327760279], [-0.7171987901375629, -1.3507061005102525, 1.1472165505652312, -1.2581193479368935, -3.7090525497991793], [-0.12231256264574453, -1.5794191411694696, 1.4335459954978336, -1.161161154295013, -3.6422454458922795], [-0.47327849007125117, -1.2277236652179977, 1.5429500139471644, -0.8792546743589927, -3.6029685676236425], [-0.5178499916583146, -2.074649136169722, 1.2007519509333981, -0.7181778472618878, -3.5176149414515785], [-0.12673973686065293, -1.3434988406412764, 0.46441242849040854, -1.257088160054093, -3.625911724619827], [1.043358377073865, -0.8284894112066874, -0.6246723534791627, -1.572517662495392, -3.8080490179908835], [1.4412635778918224, -1.187771504242267, -0.22200430792144324, -1.2702598638731146, -3.7806415621847456], [1.3203729473098247, -1.19785801574078, -0.2230942390861652, -0.9581728301818353, -3.550571779179815], [0.20605825854804322, -1.0672697541838636, -0.348799437444383, -1.2980492341573666, -3.5366473025509357], [-0.35013466059140647, -1.4443149322563382, 1.4575772106006866, -1.1290259053422502, -3.5080530079202954], [-0.018873240337496072, -0.9287260147602427, 1.3361037790643786, -1.8473431059752685, -3.773259407716495], [-0.18654405528872842, -1.1648505169727887, 0.8669421135190214, -1.8319622500571437, -3.875871260206773], [-0.07093717398833474, -0.9690591674361513, 0.9302123106819141, -1.8677819274716143, -3.5388182161647515], [-0.3405634091115595, -1.756091010070718, 1.5204987338020075, -1.2762985554495585, -3.743440227760176], [0.15101085422978772, -1.0999860424398873, -0.1057461418064545, -0.9562168862110223, -3.723155669013954], [-0.5778390840849823, -1.6292467048272017, 0.48224033589963455, -0.26687254717742215, -3.581012352450923], [-0.02766168285349871, -1.264772907438968, 1.165971480825683, -1.9601401727134606, -3.6114462135677012], [-0.02153903664197043, -1.477281884672062, 0.2147772516324483, -0.7127424844957106, -3.538308271001215], [0.2940816601502975, -1.085881249896722, -0.443061447529485, -1.8378670965349149, -3.527292180588211], [0.2971084500299487, -1.227952676329015, -0.5889104715918647, -1.762137581690109, -4.02494115853342], [-0.386541667153406, -1.0564930554051633, 0.3770712383804238, -1.6807944327918207, -3.200796461913531], [0.08493172117439846, -0.7941543236645388, 0.5258469690360019, -1.8352813756243034, -3.5875152143512663], [-0.221502580314836, -1.3879200371096896, 0.9964029545240429, -1.6492079825517603, -3.4886270518868785], [-0.3148796846231774, -1.6589402599140473, 2.0188263100546435, 0.5609303180960359, -3.269292482773571], [-0.20371569982592777, -1.6678182924727585, 2.0947129276927754, 0.37744454470878586, -3.734929115989159], [0.0026423306128331055, -1.1747099915026717, 0.9251945251053042, -1.5355812217369893, -3.409416015062976], [-0.16419252712948615, -1.0475094825844686, 1.945990418531602, -2.0568588225600806, -3.845246295839663], [-0.07565941557438727, -1.0832687014065712, 1.5991279421010234, -1.843787752600317, -3.4096123814267134], [-0.07802954089327488, -1.2513447952128192, 1.4517227603292706, -1.657010335517313, -3.4887076253811173], [-0.08924968354925253, -0.9334747699497846, 1.0797004806347896, -0.6820078675369139, -3.8741232359804547], [-0.17553843027073884, -1.280755223552598, 1.2578558217810185, -0.7952706400495793, -3.496208171407571], [-0.31174672448081314, -1.694320626031339, 0.6930173326191921, -1.1433428723287076, -3.8396487925560843], [-0.5896948603271105, -1.4941234281941889, 0.7762860411105226, -1.3371512183985106, -3.4318286269043514], [-0.22779965794243281, -1.8984408116712275, 0.7474594286826655, -1.0187336473037427, -3.555903689489912], [-0.9819466722124155, -1.8391458511952905, 0.9574167622919532, -0.9226387552745268, -3.7166664714872093], [-0.12179597106942515, -1.5439278232336655, 2.155478559775076, -0.49163229399120445, -3.800606491307104], [-0.41509856204653356, -1.6171806695551718, 1.300782660431527, -0.41967042972045143, -3.4200176514713636], [-0.29667259111793653, -1.093118105720856, 0.696652280704499, -1.5008936530613497, -3.6090181124775094], [-0.6653593551765078, -1.4192846432947483, 1.0610009436454988, -0.4926151378323323, -3.594099908973706], [-0.31650646544223926, -0.9424938381690957, 1.8761489799204956, -0.4764170999292982, -3.388904172901604], [-0.11301174257629035, -1.390280663909666, 1.6310502371361426, -0.5238257774217873, -3.6490804947449376], [-0.36159316617077947, -1.4758693400227743, 2.204963775108186, -0.7935596428643091, -3.4666340300467557], [-0.22038825917796206, -1.18476153468652, 2.917072479626936, -0.24492575003739633, -3.3514998528837174], [-0.912520275923311, -1.7513314832066997, 0.8626765238218614, -0.7286486842310368, -3.3473799425828283], [-0.2444437320361231, -1.9415902967874952, 0.7885963287548987, -1.190966586865769, -3.8623374696738293], [-0.3481836656931841, -0.9788317934172506, 0.9862911526587399, -0.568538407429548, -3.3718615258400333], [2.249190130351769, -0.4588695426893654, -0.7732805140382336, -1.8347374565360308, -3.6601886374677797], [1.5106205159111612, -0.5157750729090421, -0.42108579163992405, -1.534389570307328, -3.6781612155859045], [1.2505556081341378, -0.2444983282722157, -0.34351984201235886, -1.6388137091994992, -3.696369783344185], [1.0730298280165038, -0.7727242078368266, -0.03283785393019854, -0.925036634846043, -3.6456161798302658], [2.044318206293683, -0.5641056648163137, -0.7714738514596753, -1.9638225950729917, -3.5568579316651405], [1.2456899259969276, -0.5786790472821292, -0.6286351740508513, -1.7115109700173532, -3.7564722674665645], [0.5755734583063101, -0.9661121416398486, -0.17784909534623153, -1.4927543884552597, -3.539609192813971], [0.6652899288105244, -0.7000174138826798, -0.03926393522381087, -1.747127740659411, -3.0715009626756613], [0.9529654119380104, -0.9534673531071406, -0.2333832143561993, -1.640779284440288, -3.605480590813525], [0.3732632424513418, -1.6242887702108166, 0.07206969326640877, -1.1434162528202985, -3.5824167617929334], [1.2878810599283792, -2.2913731005368723, -0.16663973101475138, -1.0291363918291707, -3.498347707823779], [0.11585699708653488, -1.8828231183682222, -0.06016050639885556, -0.9747277312643392, -3.4951288419786475], [0.7069758773520666, -1.3347960711377218, -0.11705763148008451, -0.9800174820901395, -3.6831720960740895], [1.649591928719296, -1.5402500377696409, -0.08859829295178362, -1.0446470002786046, -3.7543597548343475], [2.2388717625804873, -1.490109317412937, -0.10063082178854217, -1.1986970103234176, -3.452981670902577], [-0.1206646661513689, -0.9310976389814776, -0.03000445812174568, -1.4025291408288858, -3.4975029458750333], [2.0968782390723772, -0.9385719443413479, -0.2742809685635462, -1.4766193296917682, -3.725219326158624], [1.7298586904757218, -0.6714025166946287, -0.3430701908335214, -1.2922598182172123, -3.591285985765345], [0.5592403147481421, -0.8084910982714824, -0.23333067925414244, -1.479612194665694, -3.5089797035938606], [0.6415012412673372, -0.6119806331422022, -0.2244253048662662, -1.2304798254768952, -3.768193621595531], [0.7270802922477552, -0.8836119648040016, -0.10912054102229722, -1.2541626693459933, -3.5511066582356343], [1.146303778307133, -0.7100951185339348, -0.37910908699934637, -1.5437527550789336, -3.6340722145688473], [0.9977396837924264, -0.3596790088318448, -0.4328016569173797, -1.6592291178004541, -3.677668273575301], [1.4525152949821, -1.3839326806904761, -0.11753842405030124, -1.1784054331682017, -3.576043069154324], [0.7460736150648946, -1.1825352008231658, -0.31648767938814926, -1.3388191425071472, -3.8371633092172726], [0.7403916450046389, -1.2969231776753947, -0.2744807485179508, -1.3563047181258021, -3.8894415417874275], [0.4787496692455339, -0.9905827799863279, 0.039426681022242505, -0.7732813441252048, -3.767281484424691], [0.29827736679397693, -1.8866486126974544, -0.21049996832478501, -1.0488682368272468, -3.704261232810209], [1.7563851664663777, -0.6041691079420723, -0.04417218627954797, -1.0686634591288469, -3.629250125579122], [0.784222446740287, -2.0461852160722924, -0.21209015219642138, -1.3312309896140266, -3.475318715190056], [0.9283469834838756, 0.033336214610001136, -0.22165930701266218, -1.399223657824097, -3.58446293289784], [1.3984533238362868, -0.010231251534017882, -0.23987917350989574, -1.3875099374400373, -3.672671317784631], [1.1217556561368105, 0.10819614424944186, -0.09147675331406374, -1.3960184727778138, -3.4177676459651445], [1.6458593287955563, -1.0186429804135855, 0.1643880560766562, -0.5952713392504931, -3.40397665347658], [1.9718084838527288, -0.7461045827950743, -0.3883020279517744, -1.4734618506744446, -3.804784400363357], [2.0820947645869587, -0.7185743707952815, -0.18704697177228394, -1.5555587261508792, -3.7939294660870395], [2.5900040643204867, 0.19745458617858969, -0.20459212503159013, -1.2461557579230877, -3.6765589895744544], [2.4299688610494075, 0.4197838533988917, -0.02191034331064883, -0.9776060696331905, -3.579355372894415], [0.6906201499546659, -1.803256400659075, -0.8832980602918946, -1.8781278597383602, -3.597502786009346], [1.0670861683169397, -1.204253843494961, -0.1932858247143897, -1.0886299444887688, -3.6726796238858057], [1.4169350753008374, -1.6776064519219738, -0.10379559899033379, -1.3745750958978153, -3.5795512706958155], [1.508672601774712, -1.8326211445464813, -0.18413190121590997, -1.3890486841127603, -3.4788992503243064], [0.8076333254712551, -1.671759119516701, -0.11455356089971092, -1.0806992774708934, -3.781690312251258], [1.30782831314898, -1.7675068116234351, -0.02142769430274799, -0.869962824823348, -3.7840860532155296], [0.10299885922486801, -2.013595768741434, -0.08435916606824251, -1.255331670902352, -3.430942622372274], [1.2899910713398164, -0.16661839660296227, -0.14397273762151594, -1.2385756908816814, -3.4455133538089853], [1.7992493224794297, -0.48561638869336954, -0.5957103002704558, -1.770028743858338, -3.721355450778844], [1.233139706212158, -0.6373600445108963, -0.3166526986262148, -2.2186227358691917, -3.4970068165934665], [1.2155257365134113, -0.670379347355036, -0.7028857852830713, -1.2847161372761824, -3.614146482528758], [0.8785494844018693, -0.8159927945778015, -0.0611742427094502, -2.021677963164352, -3.5793621169950094], [0.9978376620891698, -0.863066371949549, -0.17870883155359965, -1.8339563348388563, -3.4704385734661916], [1.0826342583637, -0.16350934629926095, -0.4875378118071881, -1.3290513749624981, -3.7613364112458503], [1.773863859720509, -0.15456912481722287, -0.16201648523337323, -1.8191416862725025, -3.4835497461983853], [1.611336826663228, -0.1434883987290292, -0.2542653998386194, -1.8579263382804865, -3.471952449508586], [1.6719405672127416, -0.42309724521375447, -0.440881477264112, -1.7552421563931513, -3.7068165067999277], [1.1146680408510736, -1.2220902963286946, -0.12030277274653936, -1.4751927558550944, -3.794609855770631], [1.5489131540557162, -1.3358481478868944, -0.36464691471427857, -1.2794640797584576, -3.4553660533457915], [1.0653433158494074, -0.80060947882442, -0.8168719963308884, -1.5467153911354719, -3.868843922043017], [1.0500214419226754, -0.7804578115266042, -0.5421402461929496, -2.0551067168228494, -3.5322310006391766], [0.6842291927312082, -1.1837296977970446, 0.029251261737205464, -0.683748836839209, -3.6485233897088998], [0.7602772706985425, -1.2036452407946805, 0.1771706325851391, -0.3725091646286233, -3.5533986278049587], [1.0080773206350715, -1.87454545448345, -0.6392236860377122, -1.6624143177806374, -3.6835652510799393], [1.0949178283377479, -1.7404623491460005, -0.5840667436996653, -1.725114877403289, -3.8549310947275526], [0.8469500710619712, -1.3939180352713478, -0.02541612169764959, -1.1155804345033842, -3.3977564300478265], [0.43647603588362727, -1.535612240283757, -0.60486444315116, -1.726928720672885, -3.8978367255074295], [1.6330659898385884, -0.4831430289888625, -0.10674078821226939, -1.1138096657712953, -3.7689418031162587], [0.7682045503607665, -0.47855453835270306, -0.38448390551700623, -1.6029642164055982, -3.4858845760171313], [1.7093537410508823, -0.8165704906403926, -0.14588548593258643, -1.0511866974510087, -3.5045325521740365], [1.3017487299356274, -0.9162079584917542, -0.15263713879842794, -1.1213218830019427, -3.7990173079791347], [1.291865843797168, -0.9181085792100585, -0.278122545030221, -1.3068536165719882, -3.664198329627588], [0.3085183551497229, -0.9576557194022164, -0.31205204253286056, -1.5716127608937764, -3.825740215046715], [2.067919946976391, -0.682444313660669, -0.22310659046413528, -1.4817657331097054, -3.090386196810765], [1.5196002146452483, 0.09202671539821555, -0.14345053346710668, -1.4965625933724676, -3.1759678510290215], [1.4213861089697626, -1.362357000807156, -0.3378026274467796, -1.6398134447434842, -3.928617923537497], [0.8142526605421208, -1.4610018310285557, -0.1423256609472287, -1.3870351769934959, -3.7318986902508593], [1.0655598154303876, -1.179204586233033, -0.1296282581334325, -0.9477845660210437, -3.539510381699099], [1.0984890857735463, -0.6989256123601006, 0.09772211769968656, -0.5777522047677889, -3.7764474312506313], [1.2727503862920582, 0.16525194952603728, -0.3257734546761658, -1.0651958925167468, -3.693279357493299], [1.215094857831823, -0.30904377155244955, -0.40187457532642745, -1.638167248891104, -3.5191339277385705], [0.8904247764387471, -1.4874612623008494, -0.24374400760353454, -1.1108762843145774, -3.673185671819925], [2.2030813921818444, -0.01122419094484739, -0.8559676794015116, -1.8206939738988226, -3.7210795400046703], [1.8525112276084839, -0.31979588955345284, -0.7653757512228516, -1.9470848177572277, -3.8517509168170623], [2.4820069920552865, 0.27783983036193366, -0.39420438436280664, -1.3904801596996603, -3.791983384749681], [2.46357128687945, 0.3632283683910087, -0.17748921871918125, -1.3144634404223694, -3.5897906653464906], [2.4597854465957885, 0.35231938452148265, -0.3892108547907406, -1.3054473354514038, -3.6122059276038048], [-0.4562264106437615, -1.5044992660109517, 2.061746276364584, -1.0557582185828214, -3.8895068694427044], [-0.5032176098028621, -1.8244696325335472, 1.1766337866763683, -0.6229172534007327, -3.653706815565481], [-0.08132310331708534, -0.9505191559030103, 0.05322538905196467, -1.5943707409689207, -3.6517417746818084], [-0.6768310364781198, -1.691739293831696, 2.2934770469216783, -0.17443050854744283, -3.7325380327652993], [0.52395677448693, -0.588328438722989, 0.6091067012495464, -1.1653173455871233, -3.3511661674881688], [-0.35640112585764316, -1.2312475434887846, 1.1586251184122234, -2.042903587833494, -4.006642506246488], [-0.4092353183795061, -1.595194455052171, 2.794701008408318, 1.4185434198530584, -3.2883922844414437], [-0.5484685766649346, -1.678980822667282, 1.79999663466186, -0.8191146547655928, -3.355761227178858], [-0.3792476843494296, -1.3272668974077566, 1.0935430114489513, -0.7831067398458975, -3.496554780260785], [-0.28082198792283664, -1.3590497416350664, 0.2683325016616143, -1.08411570952045, -3.545260693570408], [-0.39300278997654, -1.814511835386812, 1.398788096017116, -0.8334005617904501, -3.604050931015951], [-0.1352080357284593, -0.4755144786720487, 1.3252263350024744, -1.1043214229768585, -3.648305608008705], [0.10169575397399065, -0.8426970440181311, 1.5663441906085256, -0.8381311141372897, -3.6474952200503865], [-0.25459846880857206, -1.8269252958798374, -0.05950424255032741, -1.0942160430009387, -3.740709461367152], [-0.37619135804038706, -2.1944394082625047, -0.1132893457439152, -1.3769473266715386, -3.529841914362492], [1.434810952104599, -0.2327296501020351, -0.024387252921364483, -0.7058839944638294, -3.6198419817250658], [-0.10603905676331245, -1.5278768023593647, 0.16589834356283453, -1.7952231459738377, -3.6659447314368188], [0.1754680712495102, -0.6057839433003122, -0.2997858704358584, -1.4412876803379293, -3.8643118682682522], [2.156803539040964, -1.2338038048415698, -0.30117644222786577, -1.383037902424912, -3.753376565019254], [1.6270586521845294, -1.3587851145663499, -0.11694655056190881, -1.1794062354106607, -3.5477965383134284], [0.8151124591277423, -0.5066866698124292, -0.5212157669345088, -2.0715676680039317, -3.3835287612108633], [1.2997491090716833, -0.8269282388072416, -0.3816288087751752, -1.4628933251405534, -3.7248022941318455], [2.194371286438254, -1.2176151306155616, -0.23049914040612707, -1.1443892678107617, -3.5160985720647955], [1.7492031078230754, 1.2769465402026934, -0.47224973277084037, -1.592419485313263, -3.920031418358457], [2.275438940040999, 1.0927512336297158, -0.5199184631315553, -1.3441595508966813, -3.497840986155548], [2.0358942089116696, 1.1915753250392604, -0.22802112420068382, -1.4951857455291486, -3.42996473351946], [2.48128941849931, 0.11766677267039799, -0.8815641885485397, -1.548638146722823, -3.6949372149337543], [2.6286159318310114, 0.4511419536470274, -0.7243439663246478, -1.4693527955128804, -3.624378136650684], [2.174007640682178, 0.37569321091439206, -0.5345530331545776, -1.6516625241812848, -3.530160679128725], [2.032026996471171, 0.4871793794325519, -0.6208152482720191, -2.1094621464415697, -3.462901040359898], [1.3941484599084975, -2.0081001745330456, -0.014294314821782061, -0.8547129811346162, -3.525004603970134], [0.9028945310839294, -1.8729754430629413, -0.09796643830344019, -1.0696957094351833, -3.7072893626438335], [0.9063500404918269, -1.819435057265578, -0.11760688352246125, -1.1307495905423488, -3.5687384757762097], [1.2352031831193155, -0.8265337272187568, -0.10350501293524643, -1.2847476718746598, -3.544019923187723], [0.9020621254544932, -0.49675840767340324, -0.07695918656393472, -0.6407891024507276, -3.6827928580292473], [0.7521760696708524, -0.9890543287026916, -0.6273057657861744, -1.6256914289149778, -3.709674799097331], [1.2988450822276323, -1.6301825952389626, -0.6354129456988479, -1.8169417690288598, -3.623261004531564], [1.28436372481799, -1.5916878821443359, -0.6716266691986125, -1.8709730510386087, -3.684933325821586], [1.313152211653927, -1.4160200667042067, -0.7017705578276713, -1.8234598098542716, -3.636072442818585], [1.5120684289207973, -1.0925410230272692, -0.2238273829193633, -1.4842685687009518, -3.6805383246782024], [1.4723982934708966, -0.7029755121212559, -0.30996458136331634, -1.4760707459427964, -3.474460634883995], [1.551988164895634, -0.7559249279789856, -0.2465737803700104, -1.6591078720272021, -3.673027389184415], [1.6260934532472098, -0.6748799455566716, -0.19139528047058763, -1.6407616203266562, -3.4048387925935093], [1.5005620821681984, 0.0351974254907986, -0.3865092694773762, -1.3378739928025933, -3.9257831757116266], [1.9393728297578054, -2.088006174583613, -0.13686176317616103, -1.0221644107133254, -3.935902123975268], [0.4013810381599802, -1.7859748278316823, 0.09189573347640932, -1.0227731432084233, -3.631338808015108], [0.7541308192927438, -3.1115334310271887, -0.08988524322790353, -0.9994223697515641, -3.961939662972843], [0.8279712330843776, -2.8018523216840587, 0.0011164900226557813, -0.6808885771632199, -3.6914926037573976], [1.627045182704298, -2.2367716846055603, -0.11387649618283213, -1.4822704705987935, -3.6789781974695956], [1.6791875993921546, -0.9274025525082592, 0.1845908705553563, -1.0289220806123252, -3.6489287230426855], [1.158028242567817, -0.6427589676719546, -0.560273183138435, -1.8566275010215172, -3.3727363266321504], [0.8714421790789837, -0.9005474180762112, -0.11200727053145651, -1.0110171249203557, -3.4352281207088677], [0.7435524183530271, -1.348414258010044, 0.04286538180492426, -1.3025956891928214, -3.4680615266523755], [0.8440399987706515, -1.6894224575004517, -0.2152568889247627, -1.3044310616104875, -3.645177897790605], [0.8872283214643503, -1.309120617517293, -0.5090603677503103, -1.6236086756647448, -3.708281605561262], [0.8912996489123125, -1.0934228133903994, -0.5898380884013782, -1.5851103323107096, -3.8377443219742444], [1.6562903793250308, -0.4840144228987024, -0.3725527052645808, -1.2974142952015155, -3.6966549003240314], [1.7128621913747115, -0.457121976844014, -0.17245645630232959, -1.1674985149489536, -3.5951794272581648], [-0.9560444601415905, -2.320255930356691, 0.3838149702196625, -1.0093266049890712, -3.654804743719621], [-0.5036537445939118, -1.4543716331373067, 0.5912656890559619, 0.08360960373488413, -3.694358617662092], [-0.39282175269922887, -1.4154721755892121, 0.738182545358612, 0.03097256582257532, -3.7412762649845805], [-0.43188843800442955, -1.6495523038213855, 1.8819627058289834, -1.0292507649619664, -3.620115580865473], [0.1599727604818229, -1.048786052582043, -0.2797736782226993, -1.4974184868398273, -3.4041943961885055], [0.3284924706030943, -0.8264819727878779, -0.2726855111117831, -1.8747465313071312, -3.758163855801034], [-0.5079619569871513, -1.920668630194458, 1.097495322020136, -0.4189889904158125, -3.4067587431354576], [-0.5653332103265956, -1.4051733901174177, 1.8798522409965266, 0.21727379994516752, -3.8256092496712273], [-0.1941763789146892, -1.6789793333734158, 2.258571509013585, -1.0212834736155556, -3.456834037960292], [-0.38276081450997257, -1.753502351026453, 2.3470890026196667, -0.7928063152088337, -3.732011206112599], [-0.07836736583095835, -1.0497328414764409, 1.9983902552503099, -0.28677412144275516, -3.4548472445180036], [-0.307839617934677, -2.0054675200704284, 1.1325917953156404, -0.5350013518817277, -3.7951588824342832], [-0.3536553825432194, -1.1066414996911558, 1.2250173198863126, -1.209085633062524, -3.74067405619549], [-0.34078068531154904, -1.4162052717497156, 0.6190616942756012, -0.6940153264639383, -3.689366319486943], [-0.12012580627360883, -1.7508118989772137, 1.740540512146825, -0.8801223337022901, -3.547510560609253], [0.24171324386635293, -1.516391957167053, 0.013036576126401828, -0.8506649134674811, -3.503971471773529], [-0.4620022752283626, -1.1990650488284118, 0.39965657949594924, -0.8351275174949979, -3.679234088484483], [-0.5122888432484791, -1.5694997755429505, 1.6482246327808767, -1.0758856329731492, -3.9526230516020715], [0.2117973971423029, -0.7733092916808174, 0.642944872527749, -1.4048679965427107, -3.6442389568413067], [-0.9840308105183473, -2.1272069152685007, 0.8479464228945386, -0.4602997335086349, -3.603752342765143], [-0.21865341821764653, -1.4030725230710348, 1.4229335767136153, -1.323400139303181, -3.6418180518398877], [-0.31074134803966197, -1.463289654715162, 2.3787776148648185, -1.3932830847656685, -3.620921529791251], [-0.20893798218344448, -1.1588988579340045, 0.742161449399801, -0.5584459241669169, -3.5943543035601873], [-0.2894161407109222, -1.4250630701360798, 1.3964433429501573, -1.5384301334360495, -3.584612521493892], [0.29716451843060326, -1.0219917304052244, -0.0007870302299914922, -0.883732923256408, -3.7453722786033254], [0.34252619093747005, -0.9292153868313545, -0.059008153833959, -0.7477821259864473, -3.6459041965423693], [0.45831259696448223, -1.018294882938721, 0.29707967257498985, -0.9096972253879806, -3.488894897044182], [-0.4179576189643826, -2.4118833339614487, 1.3282481656862906, -0.8428572255257074, -3.7044641791614352], [1.0914326028671197, -1.086208483570376, -0.3679780980530145, -1.2647761871205354, -3.6227748330090885], [1.1659821422031842, -1.1798238761434017, -0.5635742103552419, -1.4413300070344572, -3.4617089275356046], [1.261126754278284, -1.5384737777674726, -0.5411133262381926, -1.5858569484239122, -3.69525084534202], [1.2239373368754967, -1.1269157762802773, -0.36484986275662273, -1.5428104109783187, -3.7839314512428732], [1.541119632371803, -0.47799428482678313, -0.3214157229684168, -1.2791359720463946, -3.6160057458242507], [1.534819823302121, -0.8881800479783335, -0.22616875597445357, -1.4499207868037256, -3.5974930523625974], [1.570491827817276, -0.9412619398088592, -0.36338385692763864, -1.5678361957121179, -3.575737438128594], [-0.5751062386061794, -1.3417105620088723, 0.20868466432706817, -0.741455000235943, -3.5363456248025416], [0.24648448121261923, -1.5650646548447116, 0.19504868010615672, -0.8979508351793202, -3.6791273621054104], [0.2992394652150426, -1.48918664949884, 0.4035991154446864, -0.7463200144356904, -3.545317835136114], [0.7411154906635823, -1.3465090671475903, -0.38323017237157786, -1.1379101154640618, -3.596564816198941], [-0.11058509518999898, -1.4453834938609589, 0.6999317958780477, -1.0498393092733262, -3.7679097278875657], [-0.4185639568451834, -1.6391323744293609, 2.3101656283259238, -0.1632125241004192, -3.338854881411052], [-0.4089303114538821, -1.939145754189411, 1.742882071395094, -0.09126793578199843, -3.288535237041553], [-0.22721553509556786, -1.201431970403239, 2.6058863377046446, -0.880246535530422, -3.3598153619214144], [-0.4753849179440124, -1.660404782219616, 1.0754681005918143, -0.33554036140592725, -3.7073633580409022], [0.19132130560354021, -0.9395200652608909, 1.7572951189403638, -0.8110456834246906, -3.5944717513573243], [-0.07610799967588715, -0.9973555809355706, 1.7466109324428847, -0.7982262710487777, -3.400278621312033], [-0.7410129437945122, -1.7798795704768282, 0.9739847889144524, -0.7468883996597776, -3.5591656264725735], [0.10354412821420553, -1.1274224620161528, 0.28900549195277525, -1.0645623702946996, -3.6662026879903853], [-0.15695907387138608, -0.9223140679746341, 0.2714799686276247, -0.6483823648695267, -3.6591699273214475], [-0.27227341332651633, -1.42193845956217, 0.5545330410339695, -0.7441157597155343, -3.6520576688702286], [-0.07304824212329766, -1.0547611609194538, 1.033319787110477, -1.517507607512791, -3.6244237864393125], [-0.17775535320796337, -1.2619956881376884, 1.0953391598601507, -1.3423815985552605, -3.648197338721374], [0.04990890354195767, -1.2809522984597002, -0.3238511345792379, -1.2491783793970106, -3.645707877583236], [0.09775946077209224, -1.148068916028306, -0.0862440256260394, -1.040717745164973, -3.3626612589877016], [1.1742707342922771, -2.5550036273416583, -0.25963604583757965, -1.3584594490869182, -3.8991795893615797], [1.3776976264671001, -1.5142197201998375, 0.15067641230492398, -0.9436088391297656, -3.484168331212978], [1.2145835632119177, -0.7502177367984537, -0.7369773674394537, -1.964430806676956, -3.5757793917909737], [1.8223661549512173, -0.7212466143253218, 0.039828323862010434, -1.0884370648361108, -3.745394169606658], [1.6279860171621305, -0.6871870742937696, -0.4456087358679063, -1.1885566642839218, -3.732925673130094], [1.5031675550767152, -0.8202497133464152, 0.04550081012808632, -1.9301720537392946, -3.643174128776623], [1.578338098399878, 0.09741278892326671, -1.1965963008528702, -1.3367163289192063, -3.654049901165347], [1.7679575435965873, 0.04353415095490069, -1.0405576730206634, -1.9943484396553333, -3.7131817116767385], [1.5754902547158884, -0.07238755045883952, -0.7081100019763944, -1.9029531373009554, -3.5399317916411244], [0.6608642460156987, -1.9851344427852493, -0.24096010637251686, -1.3453276437490431, -3.4975890279113226], [1.9109493654702994, -0.49015379983473756, -0.056390271945602116, -1.1697245487471974, -3.626579236279478], [1.8722784648753474, -0.5266468276961033, -0.5869788604368102, -1.5448540587453123, -3.665577510149604], [2.1780053206303944, -0.5054559877760535, -0.3367317914074407, -1.0384149756979195, -3.6797368318818138], [1.7350651853796402, -0.40568779408619293, -0.07820924403115975, -1.422399000111616, -3.546712546612784], [0.9166870259903281, -1.031308715671571, -0.16871300183713167, -1.883301800493749, -3.761839791010712], [2.470906785731868, -0.049725898973728255, -0.524635992662214, -1.4470521924432482, -3.4074249236913583], [1.7619117751724487, -0.28028653911584683, -0.7404608613366144, -1.589234705205448, -3.4038793666694183], [1.301305199022953, 0.0015514835806420685, -1.1124124627353353, -1.9880030742216677, -3.7132810016085225], [1.0714116026220666, -0.3842033896188365, 0.05324078822863776, -1.2179197565716822, -3.4455268796952585], [0.962724013485863, -1.522719610086058, -0.6027090287472906, -1.6823624834475654, -3.7779315588302214], [-0.07146001597239159, -0.8437244091056351, 0.6144356527982788, -1.5871176481665128, -3.528378056790945], [-0.3823514929827625, -1.8207852337986787, 1.0940666527559404, -0.577629476625027, -3.6150418864020706], [-0.1803702623114588, -0.9305520969233413, 0.4977781197676302, -1.5839085766035927, -3.614634949875982], [-0.22397875217863752, -1.5753751997891494, 0.7248138363760317, -1.1812970137039724, -3.469529333762734], [-0.012101450636019612, -1.4339835915123762, 1.2463451585248466, -1.0694804731450085, -3.5049712380196674], [-0.5296897136816444, -1.4125815652842268, 1.9857422161269844, -0.8690396420241253, -3.7667581854694165], [-0.367571930472487, -1.864933569491313, 2.2377551460128102, -0.6872952154135463, -3.4326179600077054], [-0.88449208886509, -1.4617172886955183, 0.737062562358139, -0.7161134459322867, -3.710330975464946], [-0.6212100201862375, -2.10484454686421, 0.4768941932531594, -0.8475120280477567, -3.5863425006077763], [0.04502678472391866, -1.3391602089483199, -0.30545128185577647, -1.2747268758635086, -3.5811253681814144], [-0.08931094610994507, -1.1061499465083597, 0.8857510619863129, -1.2273529448512575, -3.6092722141645486], [-0.19555423863712781, -1.1429738819471025, 1.1169407998282996, -1.0995907830439822, -3.737226052327334], [-0.1692120030724905, -1.2554950964580773, 1.1555125005538776, -1.3336479053924248, -3.483252067942347], [-0.6187813671952282, -1.7812385805951747, 2.5737271213633504, 0.49725620506635015, -3.897401506691978], [-0.519672868017287, -2.004010567638834, 3.19816545646202, 0.3502343327718149, -3.306306398867158], [-0.6982402217323965, -1.9299888849172704, 2.8376635909372987, 0.3160611236656807, -3.8900890858614456], [-0.8495021120167313, -1.6496115507446716, 2.354820355097947, 0.5244184887058025, -3.8684649572515455], [-0.8030247123859471, -1.6400898291256245, 2.7761394126597017, 0.3140483026916973, -3.6451857651300696], [-0.25686034519218337, -1.8241453770534932, 2.810192882673689, 0.4978179697632671, -3.720937623184139], [-0.3891056856490046, -1.5166350032196647, 2.88421153374467, -0.5689531959773318, -3.6038451967273257], [0.004023620879387152, -0.6970525186969343, 2.868185871935064, 0.04623013509665666, -3.6624214033264586], [-0.11081782665028714, -1.0864133082251735, 2.9407138256744463, 0.20548195597782376, -3.559757525337501], [-0.3437559662487714, -1.6401458269733422, 1.1535789584568732, -0.6397280237344336, -3.6866129991118943], [-0.346356335039355, -1.3552833296077642, 1.1717741231007888, -0.71398439480658, -3.7225910677276133], [-0.29498167113871404, -1.1974088281346302, 1.2230910604637495, -1.091686224183977, -3.729351747232583], [-0.13910328536668665, -0.9717877039801015, 1.0121857197757462, -1.0468442837485914, -3.687956091896485], [0.0578956420448946, -1.2781130698580383, 1.099156397654001, -1.0864105028870688, -3.4210087228070774], [0.07242018275915992, -0.892599042350651, 1.1863247914578399, -1.208945760108127, -3.6394156842370977], [-0.04069274837323554, -1.4287498940319971, 1.3831913634506403, -1.7695764576628523, -3.6260278395763983], [-0.29477430517067804, -0.9438529392432401, 0.5583480731342229, -1.8332351639390225, -3.6453978899961057], [0.35222840425986884, -1.5470122293175348, 0.0014834944657816374, -1.4118725432963137, -3.3145796995694714], [0.036149246031189325, -1.3716916230120184, -0.36157122318245116, -1.1710605963994274, -3.706011944181995], [-0.12524846019775143, -1.0861800312244405, 0.6173382519404824, -1.0558435329972014, -3.7207756982662277], [-0.26315206781466993, -1.7394483955654272, 0.9375964462440118, -0.21049612606755574, -3.7760746379645926], [-0.322181571062627, -1.5962089615419972, 2.156843422038208, -1.0278873597593987, -3.4570548935780874], [-0.5626579895031995, -1.640296073774246, 1.7712954273526642, -1.4597654039542096, -3.762405936107019], [-0.11742593748075791, -1.2415081112685222, 1.3837874608562446, -1.1657926848241695, -3.7752745087074637], [0.1315688127460342, -0.632055197125577, -0.04781383604099279, -0.6304269925420103, -3.784299757080597], [0.7264172978771373, -1.7020216336561171, 0.2166451131021759, -0.9758234506417697, -3.2987197417948404], [0.7777218604654825, -1.812820135896319, 0.19373315680140787, -0.85985385478006, -3.135614996362715], [1.4566300667460852, -0.7241456772845267, -0.14697629682424876, -1.1706719079375563, -3.416277890422344], [2.038567680890349, -1.1230725629453353, -0.20131069514140382, -1.4752023065763096, -3.6750681616902527], [0.6658849057927072, -0.4987258938717496, -0.4148478536690938, -1.6190858525058427, -3.686934573751769], [0.8607625459690609, -0.3545516002311245, -0.8263743143380082, -1.8854497871796412, -3.6298656610535227], [0.6411515995055574, -1.5064276759105883, -0.20551957461446985, -1.731060507104047, -3.606047780610327], [0.5567770130331133, -1.3923066942751163, -0.7429477451717748, -1.2661517108099716, -3.7176015065769032], [0.6649421704318069, -1.4028546772524109, -0.5550736885033585, -1.4552757073458407, -3.692427391539104], [0.4265479503038455, -1.3942399475270966, -0.08802961170901435, -1.3805172952653593, -3.496086819552069], [0.2943339936819013, -0.4510592005209405, 0.24892362141755417, -1.0804606647214159, -3.346087937442237], [0.5607828420933783, -0.38756026336807625, 0.2968098982554397, -1.4915234572711213, -3.3098064488469747], [-0.17159434013784353, -0.8951888198238874, -0.3153345714715381, -1.020312336601308, -3.782838728669248], [-0.5149712937656831, -1.8644278272255583, 2.0128214036450007, -0.8143680988601348, -3.5512445361954548], [-0.18226539740325312, -0.900595603345582, 1.3409578515812717, -0.8294138902048414, -3.7567746880034756], [0.22633736253563166, -1.0316459564845448, 2.1196853968566565, -0.6504461460857593, -3.655422695361347], [-0.7037292345842866, -1.9137241243830603, 1.0827700851878725, -0.688044969127599, -3.4328707408239896], [0.07932100524914049, -0.6170838192483965, 2.504950044936238, -1.1230775749818935, -3.4701801374347734], [-0.15349735445765325, -0.9994633701265436, 1.773557290411285, -1.5169737181315746, -3.685266470923827], [-0.22631913315392121, -0.8319413875194249, 1.5850731591028335, -1.5440970424647047, -3.722800980030081], [-0.26984746808384397, -0.8884438911896991, 0.2638282602820875, -1.95577825436518, -3.841998110706929], [0.006206778263453672, -1.5263010780282904, 1.938122055634149, -0.6732107938538476, -3.5079436499989813], [-0.07003592185270507, -1.3050601608331585, 1.7244517876271024, -0.6569504431237683, -3.3657624376569415], [-0.095999974951439, -1.3856662272771962, 1.6071939144982343, -0.4916327064064248, -3.0839813065073427], [-0.4262372284695344, -2.042275563130092, 1.3486287207408518, -1.0230786462075856, -3.060563997543525]], NamedTuple[(n_steps = 1, is_accept = true, acceptance_rate = 1.0, log_density = 7.9029487018102, hamiltonian_energy = -6.112460225103398, hamiltonian_energy_error = -22.49517846332528, max_hamiltonian_energy_error = -22.49517846332528, tree_depth = 1, numerical_error = false, step_size = 0.4, nom_step_size = 0.4, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = 7.9029487018102, hamiltonian_energy = -6.205869783463461, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 891213.4876805106, tree_depth = 0, numerical_error = true, step_size = 5.754204038310711, nom_step_size = 5.754204038310711, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = 7.9029487018102, hamiltonian_energy = -6.884379724195097, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 1455.678240568397, tree_depth = 0, numerical_error = true, step_size = 0.9724669377368567, nom_step_size = 0.9724669377368567, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 13.182363303747799, hamiltonian_energy = -7.737991900974878, hamiltonian_energy_error = -0.4919720527844271, max_hamiltonian_energy_error = -0.4919720527844271, tree_depth = 2, numerical_error = false, step_size = 0.09591656221537215, nom_step_size = 0.09591656221537215, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9224582879750375, log_density = 12.440798673511939, hamiltonian_energy = -9.728088628767706, hamiltonian_energy_error = 0.1181361764106601, max_hamiltonian_energy_error = 0.1702123907147879, tree_depth = 3, numerical_error = false, step_size = 0.12973296357918207, nom_step_size = 0.12973296357918207, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9905525062786766, log_density = 14.115275368886696, hamiltonian_energy = -10.060037284483954, hamiltonian_energy_error = -0.42419716311399647, max_hamiltonian_energy_error = -0.5173352100922042, tree_depth = 3, numerical_error = false, step_size = 0.16100589048785535, nom_step_size = 0.16100589048785535, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.5763600599108396, log_density = 15.594348421284923, hamiltonian_energy = -13.947803028926483, hamiltonian_energy_error = -1.014727492455373, max_hamiltonian_energy_error = 3.283467793176454, tree_depth = 3, numerical_error = false, step_size = 0.264597800290784, nom_step_size = 0.264597800290784, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9705627083812157, log_density = 13.587297880263396, hamiltonian_energy = -11.74252303963004, hamiltonian_energy_error = -0.08930577478740176, max_hamiltonian_energy_error = -0.12713914593617837, tree_depth = 3, numerical_error = false, step_size = 0.12609699126924398, nom_step_size = 0.12609699126924398, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.9021264919703423, log_density = 13.286190730415047, hamiltonian_energy = -11.714369726874132, hamiltonian_energy_error = -0.18934108719471077, max_hamiltonian_energy_error = 0.34760268460056487, tree_depth = 2, numerical_error = false, step_size = 0.20845138537225183, nom_step_size = 0.20845138537225183, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.32149007908138605, log_density = 13.510418560361748, hamiltonian_energy = -10.99658271612837, hamiltonian_energy_error = -0.8163807004563051, max_hamiltonian_energy_error = 7.788683454300471, tree_depth = 3, numerical_error = false, step_size = 0.28370174608068166, nom_step_size = 0.28370174608068166, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9840729388448737, log_density = 16.230883414867186, hamiltonian_energy = -12.373912834668129, hamiltonian_energy_error = 0.015221385216682037, max_hamiltonian_energy_error = 0.03532478575995057, tree_depth = 4, numerical_error = false, step_size = 0.06224446631440466, nom_step_size = 0.06224446631440466, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.996813231884634, log_density = 15.912218148521069, hamiltonian_energy = -15.161878311478644, hamiltonian_energy_error = -0.056842276151240156, max_hamiltonian_energy_error = -0.07781973203254644, tree_depth = 4, numerical_error = false, step_size = 0.11185704249051705, nom_step_size = 0.11185704249051705, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.0058923262447436306, log_density = 15.912218148521069, hamiltonian_energy = -9.36523639061986, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 22.761574431642092, tree_depth = 2, numerical_error = false, step_size = 0.21014296530273086, nom_step_size = 0.21014296530273086, is_adapt = true), (n_steps = 127, is_accept = true, acceptance_rate = 0.9995585589439128, log_density = 16.24391763879875, hamiltonian_energy = -15.118004167365998, hamiltonian_energy_error = -0.0006168009363651805, max_hamiltonian_energy_error = 0.0016406049876742657, tree_depth = 6, numerical_error = false, step_size = 0.01765601926261679, nom_step_size = 0.01765601926261679, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9955043425796825, log_density = 15.434495972136155, hamiltonian_energy = -13.013246951463422, hamiltonian_energy_error = -0.0012614151441319166, max_hamiltonian_energy_error = 0.01080571594550328, tree_depth = 4, numerical_error = false, step_size = 0.03388880498718782, nom_step_size = 0.03388880498718782, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9193133297236752, log_density = 14.014446308849735, hamiltonian_energy = -12.177277784381344, hamiltonian_energy_error = 0.06806070615031601, max_hamiltonian_energy_error = 0.134912004435769, tree_depth = 2, numerical_error = false, step_size = 0.06400214152835017, nom_step_size = 0.06400214152835017, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9989341376914617, log_density = 16.358285898563174, hamiltonian_energy = -12.803835114633266, hamiltonian_energy_error = -0.1118522468344132, max_hamiltonian_energy_error = -0.1426496947510163, tree_depth = 4, numerical_error = false, step_size = 0.09507632443689215, nom_step_size = 0.09507632443689215, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.9379787426053628, log_density = 15.760910236156498, hamiltonian_energy = -15.411195554918674, hamiltonian_energy_error = 0.12562949873579754, max_hamiltonian_energy_error = 0.12562949873579754, tree_depth = 2, numerical_error = false, step_size = 0.17945569219238555, nom_step_size = 0.17945569219238555, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.4784377084870858, log_density = 16.039668016840835, hamiltonian_energy = -14.852880508325782, hamiltonian_energy_error = -0.08257939994296315, max_hamiltonian_energy_error = 17.692552294612433, tree_depth = 3, numerical_error = false, step_size = 0.27926172413265393, nom_step_size = 0.27926172413265393, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 16.439178967139526, hamiltonian_energy = -16.01056590989256, hamiltonian_energy_error = -0.05157371321747206, max_hamiltonian_energy_error = -0.09282642393917939, tree_depth = 2, numerical_error = false, step_size = 0.10851101507891096, nom_step_size = 0.10851101507891096, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9012806687257295, log_density = 14.845019857244834, hamiltonian_energy = -12.784119224435173, hamiltonian_energy_error = 0.18842196504233044, max_hamiltonian_energy_error = 0.2671033472300621, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 1.0, log_density = 16.086278286067078, hamiltonian_energy = -13.03243790703116, hamiltonian_energy_error = -0.18007028533537017, max_hamiltonian_energy_error = -0.20438478513091063, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9997420394432012, log_density = 16.18515697099362, hamiltonian_energy = -16.019653373217892, hamiltonian_energy_error = -0.009447148228787228, max_hamiltonian_energy_error = -0.023577178293351153, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.987088715045675, log_density = 15.648664254244437, hamiltonian_energy = -14.836886170026233, hamiltonian_energy_error = 0.03755440521833364, max_hamiltonian_energy_error = 0.03755440521833364, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.8759199776188816, log_density = 13.063496539547504, hamiltonian_energy = -11.278661600082694, hamiltonian_energy_error = 0.2608606252983954, max_hamiltonian_energy_error = 0.2608606252983954, tree_depth = 5, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9604342122237663, log_density = 13.528595747529375, hamiltonian_energy = -9.636214496061378, hamiltonian_energy_error = -0.19353413569768385, max_hamiltonian_energy_error = 0.34164356533901596, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.998566501158768, log_density = 15.45480796106337, hamiltonian_energy = -12.434840971311111, hamiltonian_energy_error = -0.07082357727087363, max_hamiltonian_energy_error = -0.13284422894739656, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9781897800788334, log_density = 15.41264359545913, hamiltonian_energy = -12.07003647307956, hamiltonian_energy_error = 0.06331473735674997, max_hamiltonian_energy_error = 0.0941666492823856, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9976003978906605, log_density = 14.726792061047355, hamiltonian_energy = -14.080653583714613, hamiltonian_energy_error = -0.013780039026027424, max_hamiltonian_energy_error = -0.14814601248711767, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.999010703631461, log_density = 15.632099077796937, hamiltonian_energy = -14.096439705806107, hamiltonian_energy_error = -0.1155380377825761, max_hamiltonian_energy_error = -0.12183444094656082, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.564345159512683, hamiltonian_energy = -15.082861347881545, hamiltonian_energy_error = -0.0018237208999458687, max_hamiltonian_energy_error = -0.03363400138224293, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.89207392404371, log_density = 12.788089699780727, hamiltonian_energy = -12.168090476945757, hamiltonian_energy_error = 0.1577734937178885, max_hamiltonian_energy_error = 0.1577734937178885, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9746358589866737, log_density = 12.391008655098837, hamiltonian_energy = -9.976009002277749, hamiltonian_energy_error = 0.07697203932251107, max_hamiltonian_energy_error = -0.24273454387943083, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 13.573906080608737, hamiltonian_energy = -9.547243689554547, hamiltonian_energy_error = -0.2582607574114011, max_hamiltonian_energy_error = -0.33848630850030936, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9954754174026815, log_density = 14.285146019691389, hamiltonian_energy = -13.382828037436452, hamiltonian_energy_error = -0.021866000241329786, max_hamiltonian_energy_error = -0.06733322958466204, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9199766681021588, log_density = 15.778753165504872, hamiltonian_energy = -12.134680406624703, hamiltonian_energy_error = -0.08873976030938202, max_hamiltonian_energy_error = 0.19551523732124387, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9274632242439893, log_density = 13.803104622457663, hamiltonian_energy = -12.332202773766763, hamiltonian_energy_error = 0.1157647244779696, max_hamiltonian_energy_error = 0.11934419773947447, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9644577118372671, log_density = 14.83808245087075, hamiltonian_energy = -10.48599521372177, hamiltonian_energy_error = 0.04119725023631737, max_hamiltonian_energy_error = 0.2710328519248968, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9878668278414886, log_density = 13.64278642135653, hamiltonian_energy = -12.557345014583074, hamiltonian_energy_error = 0.01863354117126903, max_hamiltonian_energy_error = -0.28603738960653224, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9593206200383761, log_density = 13.682517423489841, hamiltonian_energy = -11.483290336983533, hamiltonian_energy_error = 0.05951489928514242, max_hamiltonian_energy_error = 0.17390776705100564, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8563879513735503, log_density = 12.29594973686869, hamiltonian_energy = -9.412789752366923, hamiltonian_energy_error = 0.31487829495991626, max_hamiltonian_energy_error = 0.3719906443209098, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9908813676063306, log_density = 13.616854826327751, hamiltonian_energy = -10.413615640151246, hamiltonian_energy_error = -0.4126831549717309, max_hamiltonian_energy_error = -0.6509543135338838, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9657236450352813, log_density = 15.18414947608463, hamiltonian_energy = -11.294820940934638, hamiltonian_energy_error = -0.00019633592397916289, max_hamiltonian_energy_error = 0.11550919567907592, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9955426345777502, log_density = 15.40489596119954, hamiltonian_energy = -13.472083549609128, hamiltonian_energy_error = -0.04734114004268619, max_hamiltonian_energy_error = -0.0737239228069182, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9912061702851607, log_density = 15.891212376128333, hamiltonian_energy = -13.946685032621703, hamiltonian_energy_error = 0.0005908695645420181, max_hamiltonian_energy_error = 0.0370299895363555, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9190370566375718, log_density = 14.818762171463328, hamiltonian_energy = -13.986154167308577, hamiltonian_energy_error = 0.1464094953209738, max_hamiltonian_energy_error = 0.20910275665587186, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9790691126465989, log_density = 14.676673126670039, hamiltonian_energy = -13.34358997018072, hamiltonian_energy_error = -0.0032544617179688373, max_hamiltonian_energy_error = -0.24593681679893464, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9932417765131143, log_density = 16.09752570220138, hamiltonian_energy = -12.270907221241163, hamiltonian_energy_error = -0.13434062916528866, max_hamiltonian_energy_error = -0.1746741520171735, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9997681918236242, log_density = 15.975154210409269, hamiltonian_energy = -15.388527325282011, hamiltonian_energy_error = -0.014576599115700972, max_hamiltonian_energy_error = -0.05016059910373727, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9920712445386827, log_density = 16.312411802251727, hamiltonian_energy = -13.821363312049924, hamiltonian_energy_error = -0.025867825227100738, max_hamiltonian_energy_error = -0.04945488862532166, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8673770804132602, log_density = 14.516118392604819, hamiltonian_energy = -13.655190187137697, hamiltonian_energy_error = 0.2226762901356949, max_hamiltonian_energy_error = 0.23543289415924384, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9987439261061614, log_density = 14.618384385173357, hamiltonian_energy = -13.005793380522412, hamiltonian_energy_error = -0.13729327773993916, max_hamiltonian_energy_error = -0.26790364949732215, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9660932518839022, log_density = 14.795846139202764, hamiltonian_energy = -12.764211358838798, hamiltonian_energy_error = 0.012719169334507896, max_hamiltonian_energy_error = 0.15231263931687877, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9922645825742583, log_density = 13.751020633950112, hamiltonian_energy = -12.651348654873491, hamiltonian_energy_error = 0.027390040687302886, max_hamiltonian_energy_error = -0.13638817302150485, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8299899423282551, log_density = 12.780811253587547, hamiltonian_energy = -9.105863107205632, hamiltonian_energy_error = 0.1554689045297497, max_hamiltonian_energy_error = 0.5872531228555253, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9981333854722079, log_density = 15.06422800357338, hamiltonian_energy = -9.93144926220846, hamiltonian_energy_error = -0.21145296516323064, max_hamiltonian_energy_error = -0.21145296516323064, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9712803789863469, log_density = 14.265434852665152, hamiltonian_energy = -13.425117706838035, hamiltonian_energy_error = 0.09118272459974897, max_hamiltonian_energy_error = 0.09118272459974897, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7706198106043541, log_density = 12.828925382769715, hamiltonian_energy = -10.360681978055917, hamiltonian_energy_error = 0.3203721048679906, max_hamiltonian_energy_error = 0.5626670043382678, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9324794729519791, log_density = 13.316159996900996, hamiltonian_energy = -8.533673989761116, hamiltonian_energy_error = 0.057290066670812934, max_hamiltonian_energy_error = -0.3231306106464995, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9631227443064723, log_density = 14.79843945044149, hamiltonian_energy = -11.165301668479986, hamiltonian_energy_error = -0.08534806588104793, max_hamiltonian_energy_error = -0.5441577842512668, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9912679833309953, log_density = 16.95300788288391, hamiltonian_energy = -14.248148276695975, hamiltonian_energy_error = -0.2969944689399142, max_hamiltonian_energy_error = -0.2969944689399142, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9594433819014796, log_density = 16.38193295933997, hamiltonian_energy = -16.27004279566802, hamiltonian_energy_error = 0.06936974368580096, max_hamiltonian_energy_error = 0.081147265602457, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9834872397244475, log_density = 14.925232758985993, hamiltonian_energy = -14.186573398377677, hamiltonian_energy_error = 0.06718036339329281, max_hamiltonian_energy_error = -0.1108549233159355, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9262204654531205, log_density = 13.189615841398826, hamiltonian_energy = -12.1537164005426, hamiltonian_energy_error = -0.01546188099474577, max_hamiltonian_energy_error = 0.1880307651379134, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9519100500962596, log_density = 15.055817248322613, hamiltonian_energy = -11.464869459567147, hamiltonian_energy_error = -0.16557836887524502, max_hamiltonian_energy_error = -0.20715712082443538, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9983208735456905, log_density = 15.498563589556058, hamiltonian_energy = -14.48273988084951, hamiltonian_energy_error = -0.034302299588469864, max_hamiltonian_energy_error = -0.08895784570894882, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9999098279186428, log_density = 14.812761742584923, hamiltonian_energy = -14.19430199645302, hamiltonian_energy_error = -0.0031273587909375067, max_hamiltonian_energy_error = -0.046983441638346335, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8821016186507308, log_density = 14.980588754308345, hamiltonian_energy = -11.974641830651166, hamiltonian_energy_error = -0.1398559934590935, max_hamiltonian_energy_error = 0.3078152259516802, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8730706593103698, log_density = 14.451998558446089, hamiltonian_energy = -13.68155571396052, hamiltonian_energy_error = 0.09717325577248381, max_hamiltonian_energy_error = 0.20892335694884423, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8561116716396036, log_density = 15.404726173025937, hamiltonian_energy = -12.535243807892758, hamiltonian_energy_error = 0.04491574253580488, max_hamiltonian_energy_error = 0.43058675979652783, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8964679163907311, log_density = 16.736225757925737, hamiltonian_energy = -12.265252383407784, hamiltonian_energy_error = -0.12424905342968628, max_hamiltonian_energy_error = 0.26208052219926614, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8942756889855199, log_density = 15.736676594568115, hamiltonian_energy = -13.858620474877235, hamiltonian_energy_error = 0.06415928900192469, max_hamiltonian_energy_error = 0.18211920158645967, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9757069965669334, log_density = 16.72637016669483, hamiltonian_energy = -15.114737443745733, hamiltonian_energy_error = -0.03629861859951866, max_hamiltonian_energy_error = -0.07457602667673235, tree_depth = 5, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9359782236956318, log_density = 15.503622645596383, hamiltonian_energy = -14.714908756119396, hamiltonian_energy_error = 0.12396430592712093, max_hamiltonian_energy_error = 0.12396430592712093, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9168649658934974, log_density = 13.748067047660966, hamiltonian_energy = -12.836116955050933, hamiltonian_energy_error = 0.17223145847789034, max_hamiltonian_energy_error = 0.302803455941973, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9925048205718809, log_density = 13.36157409484091, hamiltonian_energy = -10.628447937720177, hamiltonian_energy_error = -0.11041373018784384, max_hamiltonian_energy_error = -0.5217049379022338, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9731517176453884, log_density = 12.539933596872375, hamiltonian_energy = -10.153328144671427, hamiltonian_energy_error = -0.05587089881224294, max_hamiltonian_energy_error = -0.21138173171821428, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9699818699337971, log_density = 14.228667189885126, hamiltonian_energy = -10.17294907712407, hamiltonian_energy_error = 0.011140841746433594, max_hamiltonian_energy_error = 0.10607283712368165, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 16.700291604112316, hamiltonian_energy = -13.407881603588095, hamiltonian_energy_error = -0.0807650802498312, max_hamiltonian_energy_error = -0.12098544191820615, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9930729666516344, log_density = 16.1469251325512, hamiltonian_energy = -15.413011442908942, hamiltonian_energy_error = -0.021044901788327408, max_hamiltonian_energy_error = -0.04006583166773936, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9524884366894782, log_density = 15.609234301321148, hamiltonian_energy = -14.37376290410743, hamiltonian_energy_error = 0.0662162543212439, max_hamiltonian_energy_error = 0.09710557751478532, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9981307358998415, log_density = 15.433557735419726, hamiltonian_energy = -15.185491942951941, hamiltonian_energy_error = 0.013046785645270731, max_hamiltonian_energy_error = -0.07890136976998718, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9688951280960026, log_density = 13.539916167655113, hamiltonian_energy = -12.376039236014536, hamiltonian_energy_error = 0.0456171721623857, max_hamiltonian_energy_error = 0.10443567167000545, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 13.830339622591278, hamiltonian_energy = -13.470616684608801, hamiltonian_energy_error = -0.019013654022996818, max_hamiltonian_energy_error = -0.08132197393770468, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9448485822831586, log_density = 16.33882666841194, hamiltonian_energy = -9.321629132595298, hamiltonian_energy_error = -0.176989163568269, max_hamiltonian_energy_error = 0.3059987853283612, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7616455710807467, log_density = 15.032895156924448, hamiltonian_energy = -12.460902412472826, hamiltonian_energy_error = 0.14676086725045323, max_hamiltonian_energy_error = 0.5728214199066883, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9776377706191562, log_density = 13.762328989433314, hamiltonian_energy = -13.105327291840727, hamiltonian_energy_error = 0.06523088233981866, max_hamiltonian_energy_error = -0.1307308076874989, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9651314262524441, log_density = 13.12467710571137, hamiltonian_energy = -10.982610064777536, hamiltonian_energy_error = 0.014423738205454839, max_hamiltonian_energy_error = -0.44857744046148973, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9998431480585166, log_density = 15.135569804530473, hamiltonian_energy = -12.372556525754796, hamiltonian_energy_error = -0.3790113450449013, max_hamiltonian_energy_error = -0.3790113450449013, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9582294735752015, log_density = 15.760589605471846, hamiltonian_energy = -14.235626889864903, hamiltonian_energy_error = 0.008888923739974075, max_hamiltonian_energy_error = 0.08234910315666966, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9926476940139062, log_density = 16.072706758700562, hamiltonian_energy = -14.048590198663117, hamiltonian_energy_error = 0.005923267625275841, max_hamiltonian_energy_error = 0.0358896162653064, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6512220926359019, log_density = 11.256679086059211, hamiltonian_energy = -10.001573006384518, hamiltonian_energy_error = 0.7749073629838055, max_hamiltonian_energy_error = 0.7749073629838055, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9391565225715254, log_density = 11.861148951999791, hamiltonian_energy = -7.265857452590692, hamiltonian_energy_error = -0.17440586778224976, max_hamiltonian_energy_error = -0.5193378251973533, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9748660441419966, log_density = 10.861182407015068, hamiltonian_energy = -8.211913513323998, hamiltonian_energy_error = 0.25566658518995844, max_hamiltonian_energy_error = -0.4824758962932645, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.821467880679602, hamiltonian_energy = -9.234774272240548, hamiltonian_energy_error = -0.5670296714144651, max_hamiltonian_energy_error = -0.6981140594671249, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.989152234669196, log_density = 15.80745115334771, hamiltonian_energy = -14.904378042861225, hamiltonian_energy_error = -0.024928194090502842, max_hamiltonian_energy_error = -0.13369292871057326, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.786333675536068, log_density = 12.294754829807939, hamiltonian_energy = -10.053087296583133, hamiltonian_energy_error = 0.23769441530243895, max_hamiltonian_energy_error = 0.4324898332336211, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.9897093677657601, log_density = 13.40305666654752, hamiltonian_energy = -9.455904913986588, hamiltonian_energy_error = -0.07288737121090882, max_hamiltonian_energy_error = -0.49327782097820183, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9905162085875917, log_density = 16.79745541093447, hamiltonian_energy = -12.506971697312093, hamiltonian_energy_error = -0.171209695650699, max_hamiltonian_energy_error = -0.171209695650699, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9492840222595452, log_density = 15.363322777543777, hamiltonian_energy = -14.504031171849462, hamiltonian_energy_error = 0.0678104395258412, max_hamiltonian_energy_error = 0.08562255533033536, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9782575821166202, log_density = 16.17307762324012, hamiltonian_energy = -13.59444821493687, hamiltonian_energy_error = -0.029206814956205918, max_hamiltonian_energy_error = -0.08890862134818533, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9522214539797287, log_density = 15.96122759802305, hamiltonian_energy = -13.2258775202382, hamiltonian_energy_error = -0.02788375199497395, max_hamiltonian_energy_error = 0.19085432128705726, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9880298164561584, log_density = 15.8472209231767, hamiltonian_energy = -13.531590596496397, hamiltonian_energy_error = -0.00918321123448429, max_hamiltonian_energy_error = 0.04583384364333476, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9594805554827922, log_density = 15.967198252909133, hamiltonian_energy = -14.029915913083155, hamiltonian_energy_error = 0.027302336896369184, max_hamiltonian_energy_error = 0.0706259024760687, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9113147278200768, log_density = 14.372725366260529, hamiltonian_energy = -11.059159733502955, hamiltonian_energy_error = 0.04448127942924174, max_hamiltonian_energy_error = 0.17566596321161398, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9761552639290315, log_density = 16.487697800034155, hamiltonian_energy = -12.790949353320652, hamiltonian_energy_error = -0.12187610931794168, max_hamiltonian_energy_error = -0.12187610931794168, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.94254749178995, log_density = 16.00073683027253, hamiltonian_energy = -14.875576922701125, hamiltonian_energy_error = 0.10792992572147142, max_hamiltonian_energy_error = 0.10792992572147142, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9670585625001713, log_density = 14.46120709743594, hamiltonian_energy = -14.028430657010833, hamiltonian_energy_error = 0.10529035295787459, max_hamiltonian_energy_error = 0.10587700732562766, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8259623306906875, log_density = 12.882700486875954, hamiltonian_energy = -9.968051655611669, hamiltonian_energy_error = 0.13265711888308296, max_hamiltonian_energy_error = 0.6474579935295797, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9983443082563918, log_density = 15.467317866832618, hamiltonian_energy = -10.187091468959782, hamiltonian_energy_error = -0.4073982428497285, max_hamiltonian_energy_error = -0.4073982428497285, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9907972825332703, log_density = 15.202833942546448, hamiltonian_energy = -14.21528515653313, hamiltonian_energy_error = -0.03680007323099055, max_hamiltonian_energy_error = -0.03680007323099055, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8199487964908878, log_density = 14.107890122525735, hamiltonian_energy = -10.47344552410584, hamiltonian_energy_error = 0.2508220395816245, max_hamiltonian_energy_error = 0.3453737385414595, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9969966759151551, log_density = 16.02917740515334, hamiltonian_energy = -13.886164964775391, hamiltonian_energy_error = -0.20917919416630504, max_hamiltonian_energy_error = -0.289756144604139, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9917582014987985, log_density = 15.18475330133985, hamiltonian_energy = -14.361710126765075, hamiltonian_energy_error = 0.014936724328713069, max_hamiltonian_energy_error = -0.11287292463662979, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9114526042689737, log_density = 15.089228455082864, hamiltonian_energy = -12.61620276064478, hamiltonian_energy_error = 0.12056996731995717, max_hamiltonian_energy_error = 0.20839190377561856, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9652564710080934, log_density = 16.08800754131366, hamiltonian_energy = -13.39561662328324, hamiltonian_energy_error = -0.1326316190759993, max_hamiltonian_energy_error = -0.21033586048644715, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.948350095271736, log_density = 15.905094598615367, hamiltonian_energy = -14.243592261057898, hamiltonian_energy_error = -0.0016018295508786196, max_hamiltonian_energy_error = 0.12213299237083675, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9597682520439104, log_density = 14.785142241032478, hamiltonian_energy = -12.413679357478856, hamiltonian_energy_error = -0.0015965693684520943, max_hamiltonian_energy_error = 0.11185778143820535, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8763111667939505, log_density = 15.918762640088048, hamiltonian_energy = -8.179750894968738, hamiltonian_energy_error = 0.07632807702205113, max_hamiltonian_energy_error = 0.2762887401012959, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8911084484494312, log_density = 14.867026593330927, hamiltonian_energy = -13.356964561652195, hamiltonian_energy_error = 0.10272247634434883, max_hamiltonian_energy_error = 0.1751725996220781, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9369424070233109, log_density = 16.002323102013456, hamiltonian_energy = -13.059680607523186, hamiltonian_energy_error = -0.10032438339805871, max_hamiltonian_energy_error = -0.1736092741316675, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9111056663089805, log_density = 12.632164547393385, hamiltonian_energy = -11.796870915405071, hamiltonian_energy_error = 0.3043369578246473, max_hamiltonian_energy_error = 0.3043369578246473, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9900098365561657, log_density = 14.000455857081546, hamiltonian_energy = -11.847149671594966, hamiltonian_energy_error = -0.24221558041690372, max_hamiltonian_energy_error = -0.24221558041690372, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9175105067865563, log_density = 14.4179835553839, hamiltonian_energy = -12.15573428754346, hamiltonian_energy_error = 0.0968362261002369, max_hamiltonian_energy_error = 0.19593420491329638, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9924992451691365, log_density = 14.830221898401275, hamiltonian_energy = -12.281736973626051, hamiltonian_energy_error = 0.04058609070531993, max_hamiltonian_energy_error = -0.12349040557433, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9643444697926744, log_density = 11.018486932352321, hamiltonian_energy = -9.955373804542052, hamiltonian_energy_error = 0.13111517335323697, max_hamiltonian_energy_error = 0.13111517335323697, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9907515757418877, log_density = 12.659159281564387, hamiltonian_energy = -10.243652172126803, hamiltonian_energy_error = -0.14026831025242892, max_hamiltonian_energy_error = -0.21049833460675238, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9986694922468592, log_density = 13.38962470688007, hamiltonian_energy = -11.460343012392965, hamiltonian_energy_error = -0.12159972804289687, max_hamiltonian_energy_error = -0.20523352204758716, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9395126156591144, log_density = 12.97552405647786, hamiltonian_energy = -11.307127416514659, hamiltonian_energy_error = 0.11908063960277815, max_hamiltonian_energy_error = 0.18829265750988355, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.972213600312925, log_density = 14.118759537828485, hamiltonian_energy = -11.236239736780767, hamiltonian_energy_error = -0.03581151846662678, max_hamiltonian_energy_error = 0.19110222655025488, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9973426610394048, log_density = 15.188178886245773, hamiltonian_energy = -13.12536314805526, hamiltonian_energy_error = 0.007405868850241859, max_hamiltonian_energy_error = -0.12343769577969965, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9590568659517826, log_density = 13.697495754528255, hamiltonian_energy = -12.644146446990538, hamiltonian_energy_error = -0.03946321769784156, max_hamiltonian_energy_error = 0.15260453053855016, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8226917707458141, log_density = 16.039258804867366, hamiltonian_energy = -9.408389913870069, hamiltonian_energy_error = -0.44494619194288987, max_hamiltonian_energy_error = 0.6508541514899786, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9978898643869374, log_density = 16.52906658526868, hamiltonian_energy = -14.749203124588458, hamiltonian_energy_error = -0.0520892933560706, max_hamiltonian_energy_error = -0.0520892933560706, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9577346667537048, log_density = 15.161092018755937, hamiltonian_energy = -14.886131988321761, hamiltonian_energy_error = 0.0514912083435668, max_hamiltonian_energy_error = 0.0638888775693971, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.934833619220068, log_density = 13.756644916101877, hamiltonian_energy = -12.6425763972834, hamiltonian_energy_error = 0.1365556737067859, max_hamiltonian_energy_error = 0.1365556737067859, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9762908010216963, log_density = 14.952964841337698, hamiltonian_energy = -12.766099146863802, hamiltonian_energy_error = -0.11785639048736307, max_hamiltonian_energy_error = -0.11785639048736307, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9519686848740352, log_density = 16.389365345276904, hamiltonian_energy = -13.161721551997545, hamiltonian_energy_error = -0.0674140978829012, max_hamiltonian_energy_error = 0.15148203248088699, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9695064386245299, log_density = 16.725551934665315, hamiltonian_energy = -13.999556625622843, hamiltonian_energy_error = -0.019431065236183542, max_hamiltonian_energy_error = 0.06735540618632108, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8783033064593202, log_density = 16.017206736659382, hamiltonian_energy = -15.042259637247907, hamiltonian_energy_error = 0.14686411154736057, max_hamiltonian_energy_error = 0.2668729384590751, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9993959203441207, log_density = 16.57178478494525, hamiltonian_energy = -15.585239578850576, hamiltonian_energy_error = -0.07500021345907903, max_hamiltonian_energy_error = -0.09441327526440091, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9571366122659534, log_density = 16.575371936380176, hamiltonian_energy = -14.867519739808026, hamiltonian_energy_error = -0.03600406538438783, max_hamiltonian_energy_error = 0.10075628367751044, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9708424170000322, log_density = 15.643266174375658, hamiltonian_energy = -14.191071398427946, hamiltonian_energy_error = 0.04589808386260508, max_hamiltonian_energy_error = 0.056114708566640914, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9928973609089404, log_density = 16.024370597566858, hamiltonian_energy = -15.015019224664318, hamiltonian_energy_error = -0.007838954339556281, max_hamiltonian_energy_error = -0.05252901411567734, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9050115710281512, log_density = 15.593040705663986, hamiltonian_energy = -13.849952133086404, hamiltonian_energy_error = 0.0238504322465225, max_hamiltonian_energy_error = 0.18746110912067593, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9619990627873679, log_density = 14.84029024531868, hamiltonian_energy = -13.440588425008007, hamiltonian_energy_error = 0.036384345164917065, max_hamiltonian_energy_error = 0.10502640375241512, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8516225498598298, log_density = 11.934560352750289, hamiltonian_energy = -6.351298892464802, hamiltonian_energy_error = -0.1259799358586129, max_hamiltonian_energy_error = 0.527278050224492, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9294709156342785, log_density = 12.045892962777307, hamiltonian_energy = -7.971226108683937, hamiltonian_energy_error = 0.017192631512924272, max_hamiltonian_energy_error = -0.370110581815144, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9968971491524459, log_density = 14.202276432794685, hamiltonian_energy = -11.411609835252563, hamiltonian_energy_error = -0.3559672692011997, max_hamiltonian_energy_error = -0.3708444915838296, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8529318221124923, log_density = 11.008954902349537, hamiltonian_energy = -9.800275048549567, hamiltonian_energy_error = 0.2714035059989417, max_hamiltonian_energy_error = 0.31220286065113534, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.998608106341449, log_density = 12.176940283329046, hamiltonian_energy = -10.178878177194216, hamiltonian_energy_error = -0.025259232669164078, max_hamiltonian_energy_error = -0.25705092140804986, tree_depth = 5, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9762724038471956, log_density = 12.78304114702009, hamiltonian_energy = -7.266757001073442, hamiltonian_energy_error = 0.03433117218267512, max_hamiltonian_energy_error = -0.16442990954986225, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9919455487329097, log_density = 12.924703054759947, hamiltonian_energy = -12.031874552346006, hamiltonian_energy_error = 0.09287289702668744, max_hamiltonian_energy_error = -0.25314140518027806, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9295904819977143, log_density = 10.857325965965142, hamiltonian_energy = -6.782881374869129, hamiltonian_energy_error = 0.3022591425682144, max_hamiltonian_energy_error = -0.4205213889597248, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 13.679795988189762, hamiltonian_energy = -10.671416635537417, hamiltonian_energy_error = -0.3042027726250822, max_hamiltonian_energy_error = -0.614107646573208, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9614109177008459, log_density = 16.040813354100372, hamiltonian_energy = -11.452124270085084, hamiltonian_energy_error = -0.027750303274959975, max_hamiltonian_energy_error = -0.13694128499170333, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9038705742268568, log_density = 14.416866332139971, hamiltonian_energy = -12.124930374319568, hamiltonian_energy_error = -0.037509987276248324, max_hamiltonian_energy_error = 0.24369200925267975, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9020881307392564, log_density = 13.477676416354662, hamiltonian_energy = -11.646371671398871, hamiltonian_energy_error = 0.04147902891862465, max_hamiltonian_energy_error = 0.2146312320955488, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.977508934184417, log_density = 13.829961417468551, hamiltonian_energy = -10.302818588985337, hamiltonian_energy_error = 0.03950763436572835, max_hamiltonian_energy_error = 0.07958359804865367, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9885207103008776, log_density = 15.473744324890943, hamiltonian_energy = -12.677373341121635, hamiltonian_energy_error = -0.0053799488898409464, max_hamiltonian_energy_error = -0.12120258631769865, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8624638884394813, log_density = 14.804600896991062, hamiltonian_energy = -12.981953289892386, hamiltonian_energy_error = 0.21407022909689566, max_hamiltonian_energy_error = 0.3128902068109234, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8983107128219964, log_density = 16.17828089389298, hamiltonian_energy = -10.458905723641564, hamiltonian_energy_error = -0.26625189054627185, max_hamiltonian_energy_error = 0.36266002693784394, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9872298877857214, log_density = 15.993028733934036, hamiltonian_energy = -15.124060544350845, hamiltonian_energy_error = -0.03975764996772391, max_hamiltonian_energy_error = -0.03975764996772391, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9650650526164769, log_density = 14.003406250144668, hamiltonian_energy = -13.429176952863333, hamiltonian_energy_error = 0.04526608558722067, max_hamiltonian_energy_error = 0.0690595044796023, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.973651480637961, log_density = 14.5307420393285, hamiltonian_energy = -13.328927698753073, hamiltonian_energy_error = 0.02820054571576769, max_hamiltonian_energy_error = 0.07126382606010218, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9891078095025337, log_density = 13.839854229392724, hamiltonian_energy = -10.111767798595979, hamiltonian_energy_error = -0.04843683229235296, max_hamiltonian_energy_error = -0.18464271210387473, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7736382334140374, log_density = 9.366782114469977, hamiltonian_energy = -8.279413400585092, hamiltonian_energy_error = 0.37904690605985536, max_hamiltonian_energy_error = 0.37904690605985536, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9811217161053042, log_density = 13.711585049429004, hamiltonian_energy = -6.739079733794579, hamiltonian_energy_error = -0.07334991181023653, max_hamiltonian_energy_error = -0.32713599569831775, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9646929786376589, log_density = 14.127165437871815, hamiltonian_energy = -11.863771614182435, hamiltonian_energy_error = -0.022399859252869803, max_hamiltonian_energy_error = -0.24912257461501497, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9923040608966059, log_density = 14.083018651111367, hamiltonian_energy = -12.775539754121237, hamiltonian_energy_error = -0.03356438035234888, max_hamiltonian_energy_error = -0.19478679558665846, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9996512734984501, log_density = 14.66216265419516, hamiltonian_energy = -12.99361132741738, hamiltonian_energy_error = -0.03706370803673842, max_hamiltonian_energy_error = -0.05963393075831469, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8929858180526931, log_density = 14.982223101513735, hamiltonian_energy = -11.984220323059896, hamiltonian_energy_error = -0.11008285737805501, max_hamiltonian_energy_error = 0.28364174936577946, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8921676597559849, log_density = 15.597605578030013, hamiltonian_energy = -13.378678434124641, hamiltonian_energy_error = 0.07249803241528241, max_hamiltonian_energy_error = 0.20585269010938312, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.999995245354141, log_density = 15.978430704957365, hamiltonian_energy = -14.966337294622559, hamiltonian_energy_error = -0.03238858992934546, max_hamiltonian_energy_error = -0.12641384104825626, tree_depth = 5, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7273914884050013, log_density = 14.421727250563768, hamiltonian_energy = -9.3534904926804, hamiltonian_energy_error = 0.12287689936584556, max_hamiltonian_energy_error = 0.6811205719960611, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9956678879390614, log_density = 15.85466329532792, hamiltonian_energy = -14.03873845627413, hamiltonian_energy_error = -0.1758704016191377, max_hamiltonian_energy_error = -0.22820937311113632, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9721265705549755, log_density = 15.56301360461755, hamiltonian_energy = -14.883381278042249, hamiltonian_energy_error = 0.04479203184276592, max_hamiltonian_energy_error = -0.1033890707838534, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8873151259753392, log_density = 14.906735934442091, hamiltonian_energy = -12.252965563016703, hamiltonian_energy_error = 0.07696942875204726, max_hamiltonian_energy_error = 0.3313419536585336, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9605738249067055, log_density = 16.376505854964794, hamiltonian_energy = -12.08340700067414, hamiltonian_energy_error = -0.05245416731421315, max_hamiltonian_energy_error = 0.10347483605695373, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.6830710645361764, log_density = 15.809834657544243, hamiltonian_energy = -11.786124284244679, hamiltonian_energy_error = 0.2842738511531415, max_hamiltonian_energy_error = 0.7295822120974869, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9232059897920777, log_density = 16.122771784621413, hamiltonian_energy = -14.023422251663511, hamiltonian_energy_error = -0.08191040272903116, max_hamiltonian_energy_error = 0.2139315929130987, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9303318867905176, log_density = 15.491685489302494, hamiltonian_energy = -14.553101858857952, hamiltonian_energy_error = 0.06787596113654182, max_hamiltonian_energy_error = 0.17087916607303733, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.992105921726697, log_density = 15.787941558944024, hamiltonian_energy = -14.474065109841007, hamiltonian_energy_error = -0.012088461554238705, max_hamiltonian_energy_error = -0.12003093454815428, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8722706813493993, log_density = 16.304947720861424, hamiltonian_energy = -12.255377740721492, hamiltonian_energy_error = -0.02081256862332026, max_hamiltonian_energy_error = 0.38644412612397794, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9214511708637936, log_density = 14.402005964739978, hamiltonian_energy = -13.074850393931841, hamiltonian_energy_error = -0.03278345224204671, max_hamiltonian_energy_error = 0.2665178837618676, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9088941658475304, log_density = 14.275722075322214, hamiltonian_energy = -12.697053949111341, hamiltonian_energy_error = 0.10302905280986785, max_hamiltonian_energy_error = 0.21231947729559586, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.163947950138525, hamiltonian_energy = -13.765910409622412, hamiltonian_energy_error = -0.15988038494033852, max_hamiltonian_energy_error = -0.1879557086415904, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9363612372717139, log_density = 15.588894916831906, hamiltonian_energy = -12.716218184535345, hamiltonian_energy_error = 0.07613912360076291, max_hamiltonian_energy_error = 0.1661902814407803, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9875164155890798, log_density = 15.866977901094293, hamiltonian_energy = -14.240506338846744, hamiltonian_energy_error = -0.0795384719529828, max_hamiltonian_energy_error = -0.10005644017650184, tree_depth = 5, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8885407993165548, log_density = 13.915700484108497, hamiltonian_energy = -10.48097216011969, hamiltonian_energy_error = 0.07404249663285789, max_hamiltonian_energy_error = 0.19273926889498583, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9799446457736868, log_density = 14.484575444900974, hamiltonian_energy = -10.341997335776881, hamiltonian_energy_error = 0.023677564465888423, max_hamiltonian_energy_error = 0.10572698637466083, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9444884836368898, log_density = 15.29741885727626, hamiltonian_energy = -13.129592085252543, hamiltonian_energy_error = 0.015876178899318916, max_hamiltonian_energy_error = 0.16635964388971303, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9809937990618253, log_density = 15.55915003635285, hamiltonian_energy = -13.510644952703801, hamiltonian_energy_error = -0.019329725521666674, max_hamiltonian_energy_error = -0.16247713402100494, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8218676011550942, log_density = 12.484116665728497, hamiltonian_energy = -12.071497860851661, hamiltonian_energy_error = 0.4365646440391089, max_hamiltonian_energy_error = 0.4365646440391089, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.9543212133700855, log_density = 10.945588785175437, hamiltonian_energy = -7.8974537559370095, hamiltonian_energy_error = 0.08569130016747373, max_hamiltonian_energy_error = -0.7199649760592397, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9963343140096915, log_density = 15.035906201018953, hamiltonian_energy = -9.590988544344338, hamiltonian_energy_error = -0.875012352071634, max_hamiltonian_energy_error = -0.875012352071634, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9624380517627183, log_density = 15.379977433832586, hamiltonian_energy = -13.063763446527151, hamiltonian_energy_error = 0.06443283364493446, max_hamiltonian_energy_error = 0.09279028676957601, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8289467226921527, log_density = 11.695223658394626, hamiltonian_energy = -9.763812097193426, hamiltonian_energy_error = 0.2831608701543331, max_hamiltonian_energy_error = 0.4253661117246601, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.83867216356473, hamiltonian_energy = -11.077853680578912, hamiltonian_energy_error = -0.2223036876121185, max_hamiltonian_energy_error = -0.2223036876121185, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9877179355330543, log_density = 14.99436081592328, hamiltonian_energy = -11.918202989878417, hamiltonian_energy_error = -0.0441198002908596, max_hamiltonian_energy_error = -0.34023469060745093, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9954662046577324, log_density = 12.539372024994522, hamiltonian_energy = -11.62136858616831, hamiltonian_energy_error = 0.013685482090684431, max_hamiltonian_energy_error = -0.16724107467252836, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9989136614917108, log_density = 13.792110613654316, hamiltonian_energy = -12.189371987377086, hamiltonian_energy_error = -0.012048736371394142, max_hamiltonian_energy_error = -0.1346466145373615, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9945858154928904, log_density = 14.942246276068284, hamiltonian_energy = -11.402985050829258, hamiltonian_energy_error = -0.05730701305397723, max_hamiltonian_energy_error = -0.11928208104433935, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9274756307896391, log_density = 14.88373297988878, hamiltonian_energy = -12.890485409270434, hamiltonian_energy_error = 0.10389882832140707, max_hamiltonian_energy_error = 0.1960232742094039, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9469332486037825, log_density = 16.500305738554445, hamiltonian_energy = -13.967975711281651, hamiltonian_energy_error = -0.10600097297680477, max_hamiltonian_energy_error = 0.17389178141241501, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9464403870897722, log_density = 15.33742096074521, hamiltonian_energy = -14.711221574660875, hamiltonian_energy_error = 0.1420754562655464, max_hamiltonian_energy_error = 0.15392094239782494, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9725396158239583, log_density = 14.649807674209004, hamiltonian_energy = -14.187707718058602, hamiltonian_energy_error = 0.06025354713885811, max_hamiltonian_energy_error = -0.15093372765763036, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9620439038740766, log_density = 14.907101059231502, hamiltonian_energy = -12.14585921005101, hamiltonian_energy_error = -0.11818759052436612, max_hamiltonian_energy_error = -0.22503117700194863, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9637614235768694, log_density = 14.688914323264672, hamiltonian_energy = -13.188004543042979, hamiltonian_energy_error = -0.043810556261840716, max_hamiltonian_energy_error = 0.10120475482888303, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9407673372361487, log_density = 14.36229097579849, hamiltonian_energy = -12.204573804558553, hamiltonian_energy_error = 0.13880000974828377, max_hamiltonian_energy_error = 0.2223674944737155, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.474490040634311, hamiltonian_energy = -13.905791543617784, hamiltonian_energy_error = -0.10230809648110473, max_hamiltonian_energy_error = -0.24079070090288646, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9960784083699553, log_density = 15.697273341328277, hamiltonian_energy = -14.846904906705605, hamiltonian_energy_error = -0.055463780525199624, max_hamiltonian_energy_error = -0.15098348731190292, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8694727270737287, log_density = 14.958746160322832, hamiltonian_energy = -12.679064292342048, hamiltonian_energy_error = 0.10236862402161506, max_hamiltonian_energy_error = 0.4076218062611634, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9614266094014802, log_density = 13.092655082714112, hamiltonian_energy = -12.005293227117072, hamiltonian_energy_error = 0.09634120425663362, max_hamiltonian_energy_error = -0.25057309360103197, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9772264406629316, log_density = 16.249250593837274, hamiltonian_energy = -12.464178345831886, hamiltonian_energy_error = -0.4133102122988408, max_hamiltonian_energy_error = -0.4133102122988408, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9138177895560341, log_density = 14.841782721299463, hamiltonian_energy = -14.003646763221852, hamiltonian_energy_error = 0.10083042592455271, max_hamiltonian_energy_error = 0.14882525628745213, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9355244927294208, log_density = 11.535326068677694, hamiltonian_energy = -10.530650558687892, hamiltonian_energy_error = 0.14595398895089673, max_hamiltonian_energy_error = 0.19365741244129353, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.925828623390433, log_density = 12.894894283376834, hamiltonian_energy = -7.7733752418597195, hamiltonian_energy_error = 0.06702827744673456, max_hamiltonian_energy_error = -0.3471684052312458, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9503195938951653, log_density = 13.08255808902157, hamiltonian_energy = -11.038295811049316, hamiltonian_energy_error = 0.0383039565582024, max_hamiltonian_energy_error = -0.6422355438497291, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.554574392955502, hamiltonian_energy = -11.386794726418357, hamiltonian_energy_error = -0.050124450978266566, max_hamiltonian_energy_error = -0.44296908649720024, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9736926631301264, log_density = 14.98842446029434, hamiltonian_energy = -8.574163149967516, hamiltonian_energy_error = -0.4486518500732668, max_hamiltonian_energy_error = -0.7080000671494435, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9571538577362633, log_density = 16.662106569521733, hamiltonian_energy = -13.720106344690835, hamiltonian_energy_error = -0.019145908810624945, max_hamiltonian_energy_error = 0.09395683852289771, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9207059869344593, log_density = 15.833595657750795, hamiltonian_energy = -14.608948097547096, hamiltonian_energy_error = 0.010720802079665859, max_hamiltonian_energy_error = 0.16118366735797984, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9973972739203911, log_density = 16.180698781056716, hamiltonian_energy = -14.561898231388144, hamiltonian_energy_error = -0.030328323868390683, max_hamiltonian_energy_error = -0.03671833224438181, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8236049420642532, log_density = 15.049541934832313, hamiltonian_energy = -13.116723450310348, hamiltonian_energy_error = 0.17050409324032323, max_hamiltonian_energy_error = 0.30435292699127814, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.968225227145325, log_density = 16.034502364792523, hamiltonian_energy = -13.434582907759015, hamiltonian_energy_error = -0.016320773110365394, max_hamiltonian_energy_error = 0.07620548172324781, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9963545445271066, log_density = 16.271086125975337, hamiltonian_energy = -14.874413597578972, hamiltonian_energy_error = -0.00998660604465229, max_hamiltonian_energy_error = -0.03491323487974185, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7088919939331152, log_density = 9.712645685314484, hamiltonian_energy = -9.075893436408705, hamiltonian_energy_error = 0.6729178050097406, max_hamiltonian_energy_error = 0.8052527043667279, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9902261820236404, log_density = 16.49575001207229, hamiltonian_energy = -9.378381038801205, hamiltonian_energy_error = -0.7307406663436655, max_hamiltonian_energy_error = -0.7307406663436655, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.982868942346277, log_density = 15.222732354719426, hamiltonian_energy = -14.711194047733178, hamiltonian_energy_error = 0.0557566886048253, max_hamiltonian_energy_error = 0.0557566886048253, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9937110440595871, log_density = 13.489311534027998, hamiltonian_energy = -11.520144780789265, hamiltonian_energy_error = -0.05154635912782091, max_hamiltonian_energy_error = -0.16169672336791763, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9807629819914917, log_density = 15.106305419285363, hamiltonian_energy = -12.314896371391937, hamiltonian_energy_error = -0.0429279514758143, max_hamiltonian_energy_error = -0.3639025657447945, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9987755003002063, log_density = 16.231906344827316, hamiltonian_energy = -14.571295472654015, hamiltonian_energy_error = -0.04281471567796302, max_hamiltonian_energy_error = -0.09566109988209703, tree_depth = 5, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9452903123309452, log_density = 14.940994451506477, hamiltonian_energy = -13.891124412028354, hamiltonian_energy_error = 0.052516806927407345, max_hamiltonian_energy_error = 0.10493075196943558, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.899093157850371, log_density = 13.452293179700389, hamiltonian_energy = -11.927487882391246, hamiltonian_energy_error = 0.08051556308674357, max_hamiltonian_energy_error = 0.28958945614453313, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9864695995257428, log_density = 15.350421270813701, hamiltonian_energy = -12.251304122351005, hamiltonian_energy_error = -0.16469406750245064, max_hamiltonian_energy_error = -0.16469406750245064, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9134508504983234, log_density = 15.457009320942197, hamiltonian_energy = -13.243107164096365, hamiltonian_energy_error = -0.003889866767163852, max_hamiltonian_energy_error = 0.18094913456406658, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9048673713976767, log_density = 16.23910212328881, hamiltonian_energy = -14.18098292802679, hamiltonian_energy_error = 0.03186031832442815, max_hamiltonian_energy_error = 0.1749078855087145, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9992392333746646, log_density = 16.114098887905847, hamiltonian_energy = -15.676339633483073, hamiltonian_energy_error = 0.007844929078816065, max_hamiltonian_energy_error = -0.03745908776913076, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9974281245336004, log_density = 15.873051418190299, hamiltonian_energy = -15.428143592834408, hamiltonian_energy_error = 0.01088975898440303, max_hamiltonian_energy_error = -0.04513160137431527, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9719088897502578, log_density = 16.52142555416801, hamiltonian_energy = -15.365884248223514, hamiltonian_energy_error = -0.035915884370238516, max_hamiltonian_energy_error = 0.05586363677467254, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9932270688731412, log_density = 16.851197665270302, hamiltonian_energy = -16.080457901364305, hamiltonian_energy_error = -0.012682083191755567, max_hamiltonian_energy_error = 0.026709108472829257, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9821460417697637, log_density = 15.811335540851509, hamiltonian_energy = -15.661644287823911, hamiltonian_energy_error = 0.025875225895976683, max_hamiltonian_energy_error = 0.027049048136181142, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9978150689975249, log_density = 15.986565646960063, hamiltonian_energy = -14.972213376957075, hamiltonian_energy_error = -0.0050770674657485415, max_hamiltonian_energy_error = 0.0127985270784432, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.857111636966123, log_density = 15.91861680653757, hamiltonian_energy = -13.33811784904724, hamiltonian_energy_error = 0.08240173611147128, max_hamiltonian_energy_error = 0.3535705950251966, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9676691209764469, log_density = 15.305864697099434, hamiltonian_energy = -14.853544360781491, hamiltonian_energy_error = 0.09993670409813227, max_hamiltonian_energy_error = -0.10261849956530078, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.29481799957797, hamiltonian_energy = -14.202494048554628, hamiltonian_energy_error = -0.12667574983606222, max_hamiltonian_energy_error = -0.1594791713601289, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9761666879954969, log_density = 15.167921575052956, hamiltonian_energy = -13.140943259939416, hamiltonian_energy_error = -0.030261563905028765, max_hamiltonian_energy_error = 0.07599060076504038, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9784780415102832, log_density = 15.832773729366465, hamiltonian_energy = -12.692639745822245, hamiltonian_energy_error = -0.01720280458309098, max_hamiltonian_energy_error = -0.13859287557905908, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9534847100828404, log_density = 14.073707765400664, hamiltonian_energy = -12.887316479928485, hamiltonian_energy_error = 0.09470982460940647, max_hamiltonian_energy_error = 0.09470982460940647, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9880864239234889, log_density = 14.48897880251691, hamiltonian_energy = -12.411214694072063, hamiltonian_energy_error = -0.04832016855300658, max_hamiltonian_energy_error = -0.08591341302768463, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9999953850473468, log_density = 15.545977358433756, hamiltonian_energy = -13.869297216962075, hamiltonian_energy_error = -0.033320681968547206, max_hamiltonian_energy_error = -0.05574839987193769, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9071842365555357, log_density = 13.526398622712485, hamiltonian_energy = -13.041818019046831, hamiltonian_energy_error = 0.17031229218348187, max_hamiltonian_energy_error = 0.17031229218348187, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9949066031742749, log_density = 13.401584774891075, hamiltonian_energy = -10.562932850916608, hamiltonian_energy_error = -0.014949912113136676, max_hamiltonian_energy_error = -0.1463403904659728, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9715098267787331, log_density = 15.655250639528111, hamiltonian_energy = -11.232355905643182, hamiltonian_energy_error = -0.09311627766068753, max_hamiltonian_energy_error = -0.17518532847189938, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9438676729936921, log_density = 14.962608251576672, hamiltonian_energy = -13.602232323643316, hamiltonian_energy_error = 0.03203225133525578, max_hamiltonian_energy_error = 0.09949241373122852, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9941816014014677, log_density = 14.007957192486753, hamiltonian_energy = -10.300996771737987, hamiltonian_energy_error = -0.10382480089671553, max_hamiltonian_energy_error = -0.11681041982245333, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9943961438920473, log_density = 13.12983927628169, hamiltonian_energy = -12.70275190740187, hamiltonian_energy_error = 0.013405122955370885, max_hamiltonian_energy_error = -0.015187872800956015, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9360306030179475, log_density = 11.212886473897408, hamiltonian_energy = -7.900846919389609, hamiltonian_energy_error = 0.07825764966713233, max_hamiltonian_energy_error = 0.15249734958729455, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8432335705677175, log_density = 16.451939747707314, hamiltonian_energy = -7.091514803359978, hamiltonian_energy_error = -0.47968985212183846, max_hamiltonian_energy_error = -0.47968985212183846, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.919839078537113, log_density = 15.071923445165762, hamiltonian_energy = -14.168034173075572, hamiltonian_energy_error = 0.053509660286405136, max_hamiltonian_energy_error = 0.11824018414470672, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9759402091029704, log_density = 14.153662455110243, hamiltonian_energy = -13.079996103327163, hamiltonian_energy_error = 0.045105483885587105, max_hamiltonian_energy_error = 0.07756518208883456, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9972001795758842, log_density = 15.438476043262105, hamiltonian_energy = -12.411935953927305, hamiltonian_energy_error = -0.018480960304762206, max_hamiltonian_energy_error = -0.09222801688975402, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9663609042233527, log_density = 14.437132442053292, hamiltonian_energy = -13.573633236991988, hamiltonian_energy_error = 0.03090872325244476, max_hamiltonian_energy_error = 0.1108679750464141, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.930336919187249, log_density = 14.07415937315733, hamiltonian_energy = -11.788232135229645, hamiltonian_energy_error = 0.08482180051455757, max_hamiltonian_energy_error = 0.3578190180891667, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9984133251257428, log_density = 15.139370294227493, hamiltonian_energy = -13.009048527981681, hamiltonian_energy_error = -0.030033995094944643, max_hamiltonian_energy_error = -0.14238858544593214, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9992826233494774, log_density = 16.18161168379453, hamiltonian_energy = -14.366690326722372, hamiltonian_energy_error = -0.09900685996995406, max_hamiltonian_energy_error = -0.09900685996995406, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.7989154753145612, log_density = 12.91601747238582, hamiltonian_energy = -11.274867835426473, hamiltonian_energy_error = 0.2750630843815891, max_hamiltonian_energy_error = 0.38408518127716107, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9903935635360496, log_density = 14.304581225480609, hamiltonian_energy = -12.24950085367604, hamiltonian_energy_error = -0.031193955946260843, max_hamiltonian_energy_error = -0.4222349355377464, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9435442523573646, log_density = 12.318383861178226, hamiltonian_energy = -11.556141095277306, hamiltonian_energy_error = 0.1937425114469864, max_hamiltonian_energy_error = -0.3781656008068115, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 14.90422766336036, hamiltonian_energy = -11.811365919898165, hamiltonian_energy_error = -0.31804320849548695, max_hamiltonian_energy_error = -0.38086473596133885, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9644477869669168, log_density = 14.678156687765343, hamiltonian_energy = -12.410391827241687, hamiltonian_energy_error = -0.1040252775269348, max_hamiltonian_energy_error = 0.2314222909748942, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9628922494968349, log_density = 14.251798888756657, hamiltonian_energy = -12.685356952474262, hamiltonian_energy_error = 0.07619300160134657, max_hamiltonian_energy_error = 0.11620585450941512, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9966223473021956, log_density = 14.47883635342346, hamiltonian_energy = -13.08144670116298, hamiltonian_energy_error = -0.038514409244283954, max_hamiltonian_energy_error = -0.2102377885978104, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9854004716087613, log_density = 16.291566402035006, hamiltonian_energy = -13.970742155998463, hamiltonian_energy_error = -0.13258500221688863, max_hamiltonian_energy_error = -0.13258500221688863, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.913497478207249, log_density = 15.607918688059122, hamiltonian_energy = -14.049302453117601, hamiltonian_energy_error = 0.12901893369343398, max_hamiltonian_energy_error = 0.20182421776613424, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9997395415090001, log_density = 15.03806397031564, hamiltonian_energy = -14.464073417511973, hamiltonian_energy_error = -0.020122316269603147, max_hamiltonian_energy_error = -0.1982987870525612, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7490484098206834, log_density = 14.310975926939019, hamiltonian_energy = -9.203042324720284, hamiltonian_energy_error = 0.2412481386408274, max_hamiltonian_energy_error = 0.4923329001906751, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.053906901358982, hamiltonian_energy = -13.617788229738068, hamiltonian_energy_error = -0.09788960379401068, max_hamiltonian_energy_error = -0.1913898045195932, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9703256693526967, log_density = 15.54619016394025, hamiltonian_energy = -13.436991147299207, hamiltonian_energy_error = -0.16043573376645348, max_hamiltonian_energy_error = -0.16043573376645348, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9783220713457913, log_density = 14.040853463680468, hamiltonian_energy = -13.53893847921298, hamiltonian_energy_error = 0.029596054336066047, max_hamiltonian_energy_error = 0.03302496034784852, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8579332459386457, log_density = 13.01572335923224, hamiltonian_energy = -10.059212501670135, hamiltonian_energy_error = 0.07881097173722651, max_hamiltonian_energy_error = 0.33255710491768653, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9483141113107669, log_density = 13.204103937801296, hamiltonian_energy = -11.246946774908995, hamiltonian_energy_error = 0.06228033854428361, max_hamiltonian_energy_error = 0.12789022576096976, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9934436223634335, log_density = 15.282873404792504, hamiltonian_energy = -12.138117074080062, hamiltonian_energy_error = -0.04809689822141294, max_hamiltonian_energy_error = -0.1816337879334835, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9618117339506504, log_density = 13.316438284885983, hamiltonian_energy = -12.185168357417696, hamiltonian_energy_error = 0.15516196972188467, max_hamiltonian_energy_error = 0.15516196972188467, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.711154344594837, hamiltonian_energy = -12.706868408049075, hamiltonian_energy_error = -0.27091483070421774, max_hamiltonian_energy_error = -0.27091483070421774, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.7904536615540816, log_density = 15.378532219568992, hamiltonian_energy = -11.853921833728535, hamiltonian_energy_error = 0.1380270809154105, max_hamiltonian_energy_error = 0.4025749345523213, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.649378248402016, hamiltonian_energy = -14.680286854718437, hamiltonian_energy_error = -0.019010155261387496, max_hamiltonian_energy_error = -0.07607688784774069, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9844291577090485, log_density = 16.063518788226162, hamiltonian_energy = -14.000067827213087, hamiltonian_energy_error = 0.00461254585344939, max_hamiltonian_energy_error = -0.06607076821653735, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9823409930893809, log_density = 16.880227110391914, hamiltonian_energy = -14.48519804746331, hamiltonian_energy_error = -0.07304166580765425, max_hamiltonian_energy_error = -0.112957155875268, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8955883492797366, log_density = 15.545421914025043, hamiltonian_energy = -14.050664248688767, hamiltonian_energy_error = 0.12084038867143576, max_hamiltonian_energy_error = 0.21339257272802392, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8216624787523109, log_density = 10.838033388337145, hamiltonian_energy = -8.413837534766564, hamiltonian_energy_error = 0.4390496962755357, max_hamiltonian_energy_error = 0.4390496962755357, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.977405566253717, log_density = 11.512826582465424, hamiltonian_energy = -8.472057981256153, hamiltonian_energy_error = -0.17941896094663434, max_hamiltonian_energy_error = -0.6549415143523056, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9794737915725626, log_density = 14.213727742576097, hamiltonian_energy = -9.938296401157553, hamiltonian_energy_error = -0.2460478776090138, max_hamiltonian_energy_error = -0.5521186310057296, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9883324852882258, log_density = 15.933015347934033, hamiltonian_energy = -12.638501626125688, hamiltonian_energy_error = -0.3406430140126808, max_hamiltonian_energy_error = -0.34156013279580577, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9987163877574523, log_density = 15.995846761035438, hamiltonian_energy = -15.2803414400504, hamiltonian_energy_error = -0.015156380303022132, max_hamiltonian_energy_error = -0.0734607812882846, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.978114952002839, log_density = 14.323490042249471, hamiltonian_energy = -13.283470280161627, hamiltonian_energy_error = 0.06906102342722065, max_hamiltonian_energy_error = 0.07046649419464224, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9872321813500556, log_density = 13.862270879407443, hamiltonian_energy = -10.874617474092744, hamiltonian_energy_error = 0.048739974867508806, max_hamiltonian_energy_error = -0.10676339845143445, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9711219536258807, log_density = 15.770614217404253, hamiltonian_energy = -12.557617848130162, hamiltonian_energy_error = -0.040817938214013694, max_hamiltonian_energy_error = -0.1262056335521322, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9935941477980231, log_density = 16.02497450663646, hamiltonian_energy = -14.156274257940604, hamiltonian_energy_error = -0.011596597858174462, max_hamiltonian_energy_error = -0.046491951678856225, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9920750447546897, log_density = 14.504399195281465, hamiltonian_energy = -13.054072764804696, hamiltonian_energy_error = 0.0013787970018128703, max_hamiltonian_energy_error = -0.07910342472677812, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8914199339445278, log_density = 14.622424573322785, hamiltonian_energy = -10.706810227899835, hamiltonian_energy_error = 0.10554119207458434, max_hamiltonian_energy_error = 0.22317144481292317, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8763024329415444, log_density = 13.83245199420207, hamiltonian_energy = -10.004892570054807, hamiltonian_energy_error = -0.06371920801801068, max_hamiltonian_energy_error = 0.3289964675171948, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9355168423079263, log_density = 14.066917073666136, hamiltonian_energy = -11.167095272875626, hamiltonian_energy_error = -0.11453040993639974, max_hamiltonian_energy_error = 0.1923638060355266, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8903554494759945, log_density = 13.85048937010813, hamiltonian_energy = -12.642125242030538, hamiltonian_energy_error = 0.1152282596238674, max_hamiltonian_energy_error = 0.20889543973114755, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.986044193055187, log_density = 14.095302429203466, hamiltonian_energy = -12.891319808694856, hamiltonian_energy_error = 0.06803628885231738, max_hamiltonian_energy_error = -0.09987560153912867, tree_depth = 5, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 16.24110024237408, hamiltonian_energy = -13.528349626115865, hamiltonian_energy_error = -0.1997281769353343, max_hamiltonian_energy_error = -0.1997281769353343, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9647447240971405, log_density = 15.795239769218712, hamiltonian_energy = -13.710003392407614, hamiltonian_energy_error = -0.016246200691300672, max_hamiltonian_energy_error = 0.09577233513965311, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9850309583808021, log_density = 15.000879717178542, hamiltonian_energy = -13.739553296175577, hamiltonian_energy_error = 0.025516265801863725, max_hamiltonian_energy_error = -0.05227342085573383, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6940776320508532, log_density = 10.499917806336855, hamiltonian_energy = -4.194709281865264, hamiltonian_energy_error = 0.6351389331671085, max_hamiltonian_energy_error = 0.8292117981914489, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9833598299451616, log_density = 11.205120433251189, hamiltonian_energy = -7.451794616632693, hamiltonian_energy_error = -0.08013037818311819, max_hamiltonian_energy_error = -0.5518744523304422, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9535188052165063, log_density = 8.591846209707988, hamiltonian_energy = -3.369894999380681, hamiltonian_energy_error = -0.1752718748689679, max_hamiltonian_energy_error = -0.5180299226731471, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9855357094840034, log_density = 14.717312039807538, hamiltonian_energy = -7.50340538462909, hamiltonian_energy_error = -0.11868721981703168, max_hamiltonian_energy_error = -0.3774368381205164, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9934474158842121, log_density = 16.177376355787885, hamiltonian_energy = -13.969670074970551, hamiltonian_energy_error = -0.1274917364956849, max_hamiltonian_energy_error = -0.3528558015751404, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8800327542182627, log_density = 16.202174452843625, hamiltonian_energy = -12.591852036841377, hamiltonian_energy_error = -0.11775086125470047, max_hamiltonian_energy_error = 0.2966399402400821, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9081406333407296, log_density = 16.430773788012427, hamiltonian_energy = -13.347417081366373, hamiltonian_energy_error = 0.025562858558270563, max_hamiltonian_energy_error = 0.19378913440218604, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9014271054005398, log_density = 13.190220005751991, hamiltonian_energy = -11.213702942843973, hamiltonian_energy_error = 0.15854489701172092, max_hamiltonian_energy_error = 0.2678632378597747, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9787448882342603, log_density = 15.102833199182044, hamiltonian_energy = -12.103879260946771, hamiltonian_energy_error = -0.2575018087698009, max_hamiltonian_energy_error = -0.26236729185627006, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8945052254454373, log_density = 15.267062471524143, hamiltonian_energy = -10.880051405042316, hamiltonian_energy_error = 0.03429640443199844, max_hamiltonian_energy_error = 0.2445410899826843, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9559858125729718, log_density = 13.400039208808819, hamiltonian_energy = -12.30400353486207, hamiltonian_energy_error = 0.07000153433914669, max_hamiltonian_energy_error = 0.12294463148726287, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.894750418632731, log_density = 14.684225606452458, hamiltonian_energy = -8.8079743300001, hamiltonian_energy_error = -0.11948278560602432, max_hamiltonian_energy_error = 0.2975033730746386, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.8186128664914651, log_density = 14.053103793006823, hamiltonian_energy = -10.248299011988752, hamiltonian_energy_error = 0.14321598924911427, max_hamiltonian_energy_error = 0.42584935035008087, tree_depth = 5, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9356993731969195, log_density = 14.284275736770537, hamiltonian_energy = -11.860081309868978, hamiltonian_energy_error = 0.05957820665476987, max_hamiltonian_energy_error = 0.2316224344225173, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9402981219013328, log_density = 14.518352532363764, hamiltonian_energy = -12.625574206304467, hamiltonian_energy_error = -0.12258937827394334, max_hamiltonian_energy_error = 0.20829782746086067, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9938216327129459, log_density = 15.674315151915359, hamiltonian_energy = -13.684250123202238, hamiltonian_energy_error = -0.049082496172021095, max_hamiltonian_energy_error = -0.06619689616545443, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.864637933968785, log_density = 13.152895410894827, hamiltonian_energy = -12.488543641975001, hamiltonian_energy_error = 0.22981046893979062, max_hamiltonian_energy_error = 0.2776947607171554, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9838357411472123, log_density = 16.81223499277036, hamiltonian_energy = -11.90531417147388, hamiltonian_energy_error = -0.28718460108224164, max_hamiltonian_energy_error = -0.28718460108224164, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8942842155321794, log_density = 14.259260355546076, hamiltonian_energy = -11.207148439560617, hamiltonian_energy_error = 0.12426334420279694, max_hamiltonian_energy_error = 0.24695853697751602, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9043985908040407, log_density = 9.070661936839741, hamiltonian_energy = -7.109404618644172, hamiltonian_energy_error = 0.23627892408717965, max_hamiltonian_energy_error = 0.23627892408717965, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.988698128984904, hamiltonian_energy = -7.673913256829046, hamiltonian_energy_error = -0.10493867988024785, max_hamiltonian_energy_error = -0.18967761728026744, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8965431900245419, log_density = 10.93648823541166, hamiltonian_energy = -5.78190048856654, hamiltonian_energy_error = -0.17212213991234826, max_hamiltonian_energy_error = 0.3663046605627276, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9356384317291809, log_density = 12.828593486754333, hamiltonian_energy = -9.13775692082698, hamiltonian_energy_error = 0.10307837108412521, max_hamiltonian_energy_error = 0.1700099082228821, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9842901980980481, log_density = 12.501249737680457, hamiltonian_energy = -7.059987343826694, hamiltonian_energy_error = -0.009849880418433266, max_hamiltonian_energy_error = -0.2885413012667968, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9810227656989625, log_density = 14.320725772201506, hamiltonian_energy = -10.439552070359397, hamiltonian_energy_error = -0.07805618835631023, max_hamiltonian_energy_error = -0.13806624889817343, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9297470149848862, log_density = 12.355794241610262, hamiltonian_energy = -11.146247057928871, hamiltonian_energy_error = 0.08360969185831735, max_hamiltonian_energy_error = 0.11482577963339224, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.8799275345390714, log_density = 14.143659738843626, hamiltonian_energy = -6.396513806393215, hamiltonian_energy_error = -0.4659477975583739, max_hamiltonian_energy_error = -0.4659477975583739, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9994330321738223, log_density = 15.30192608436632, hamiltonian_energy = -13.486314084809703, hamiltonian_energy_error = -0.02412850543493228, max_hamiltonian_energy_error = -0.06615040263827154, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9994812262904595, log_density = 15.474438258943756, hamiltonian_energy = -15.142647531973216, hamiltonian_energy_error = -0.005828209194007172, max_hamiltonian_energy_error = -0.01528674617907555, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9800830846861845, log_density = 16.579480488312253, hamiltonian_energy = -14.480041548617175, hamiltonian_energy_error = 0.003340979516115894, max_hamiltonian_energy_error = 0.0535487958569032, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7191466274683146, log_density = 14.744753928930336, hamiltonian_energy = -10.183924129662874, hamiltonian_energy_error = -0.11953646736888857, max_hamiltonian_energy_error = 0.6180699713246067, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9118313711136788, log_density = 16.035566942369606, hamiltonian_energy = -13.053917377394328, hamiltonian_energy_error = 0.05405496920753983, max_hamiltonian_energy_error = 0.22888921180153687, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9653856033513907, log_density = 14.178846243132252, hamiltonian_energy = -12.921941805220122, hamiltonian_energy_error = 0.051459912278531306, max_hamiltonian_energy_error = 0.051459912278531306, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9999543697309355, log_density = 14.142147204703367, hamiltonian_energy = -13.77325333936411, hamiltonian_energy_error = 0.0006846883815700977, max_hamiltonian_energy_error = -0.09019751157580735, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9877394525637189, log_density = 15.062791483714648, hamiltonian_energy = -13.500090203518894, hamiltonian_energy_error = -0.040595459888127294, max_hamiltonian_energy_error = -0.040595459888127294, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9965257514822756, log_density = 16.571364938009772, hamiltonian_energy = -14.240823801598385, hamiltonian_energy_error = -0.05152133818597626, max_hamiltonian_energy_error = -0.05152133818597626, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8015848045099652, log_density = 16.382853036635634, hamiltonian_energy = -13.837791897227621, hamiltonian_energy_error = 0.09738733925098053, max_hamiltonian_energy_error = 0.3493546924739963, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9917850498838169, log_density = 16.461779361216074, hamiltonian_energy = -15.872701574502173, hamiltonian_energy_error = -0.02251365555432372, max_hamiltonian_energy_error = -0.04599218794501603, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7843075635911778, log_density = 15.387340518096764, hamiltonian_energy = -13.518183615070608, hamiltonian_energy_error = 0.15220980385507232, max_hamiltonian_energy_error = 0.31999450358783044, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9772477305180463, log_density = 13.592816506323736, hamiltonian_energy = -13.375565578691775, hamiltonian_energy_error = 0.13017905938884944, max_hamiltonian_energy_error = -0.1376255080161748, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9750990840017131, log_density = 11.436757731448235, hamiltonian_energy = -8.853597908657404, hamiltonian_energy_error = -0.017991373131094335, max_hamiltonian_energy_error = -0.2956618597755778, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9491828078372708, log_density = 15.03999997019784, hamiltonian_energy = -9.38171675693323, hamiltonian_energy_error = -0.16354705119098867, max_hamiltonian_energy_error = -0.2828571281986445, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8090399906088769, log_density = 9.710042236006197, hamiltonian_energy = -6.893019758181729, hamiltonian_energy_error = 0.3077636114475224, max_hamiltonian_energy_error = 0.4141924031215707, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.992925500936676, log_density = 12.4471925020692, hamiltonian_energy = -8.24144875888165, hamiltonian_energy_error = -0.36646588341787734, max_hamiltonian_energy_error = -0.37116018740322687, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9234677747676387, log_density = 11.922969889799955, hamiltonian_energy = -9.274812414959852, hamiltonian_energy_error = 0.16049883575985113, max_hamiltonian_energy_error = 0.16049883575985113, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9840196792462185, log_density = 14.021121060232494, hamiltonian_energy = -10.654081302752306, hamiltonian_energy_error = 0.0824854432569726, max_hamiltonian_energy_error = -0.1993572251839577, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9970415314451267, log_density = 14.754067547017687, hamiltonian_energy = -12.232585479477574, hamiltonian_energy_error = -0.029050606624366537, max_hamiltonian_energy_error = -0.29217154312039995, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9434364918498024, log_density = 15.739919326868655, hamiltonian_energy = -12.89605070154321, hamiltonian_energy_error = -0.21085911754666142, max_hamiltonian_energy_error = 0.28478514169498226, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8876940878646464, log_density = 15.15056286112401, hamiltonian_energy = -13.328256239012978, hamiltonian_energy_error = 0.05695673392274969, max_hamiltonian_energy_error = 0.2681321267980348, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9986020066382053, log_density = 15.809282100802463, hamiltonian_energy = -13.830016981682434, hamiltonian_energy_error = -0.17228959067825755, max_hamiltonian_energy_error = -0.17228959067825755, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.866625586781573, log_density = 16.15085673549494, hamiltonian_energy = -12.929638372736353, hamiltonian_energy_error = 0.036392230040618756, max_hamiltonian_energy_error = 0.24891054774249355, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.713392240932553, log_density = 15.629884471081194, hamiltonian_energy = -9.344994791404108, hamiltonian_energy_error = 0.11670876159068122, max_hamiltonian_energy_error = 0.6210314376856054, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9864796495379129, log_density = 16.162431187235413, hamiltonian_energy = -13.756325362870587, hamiltonian_energy_error = -0.05595063666088862, max_hamiltonian_energy_error = -0.11556192159543066, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9957508261639, log_density = 16.134686410842555, hamiltonian_energy = -15.537323808093749, hamiltonian_energy_error = -0.04648761815825786, max_hamiltonian_energy_error = -0.05727681925339567, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9797035002307121, log_density = 13.667883760261322, hamiltonian_energy = -11.714552981889225, hamiltonian_energy_error = -0.03857575918459233, max_hamiltonian_energy_error = 0.05658276852244448, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8796970240477104, log_density = 12.6132931857727, hamiltonian_energy = -7.810831371481181, hamiltonian_energy_error = 0.08090559516376139, max_hamiltonian_energy_error = 0.2732129175456972, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9984864401725317, log_density = 13.602278865921566, hamiltonian_energy = -11.748450211206885, hamiltonian_energy_error = -0.017641836621837825, max_hamiltonian_energy_error = -0.09563663304930436, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9975952756254493, log_density = 15.986166397456099, hamiltonian_energy = -12.925574825445803, hamiltonian_energy_error = -0.10025368817626301, max_hamiltonian_energy_error = -0.10025368817626301, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8536545717907691, log_density = 15.174779887424808, hamiltonian_energy = -10.637235054427185, hamiltonian_energy_error = 0.055335835240674314, max_hamiltonian_energy_error = 0.5205108914948049, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.995363024203964, log_density = 14.982919283118836, hamiltonian_energy = -14.116673355797198, hamiltonian_energy_error = -0.05263341266289068, max_hamiltonian_energy_error = -0.14670845490284634, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.95590983765523, log_density = 14.398801162172894, hamiltonian_energy = -12.1457456070272, hamiltonian_energy_error = 0.07238677387944037, max_hamiltonian_energy_error = -0.11611424083467448, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8626979846818092, log_density = 13.841970255086403, hamiltonian_energy = -8.866259718026313, hamiltonian_energy_error = -0.13111537660751793, max_hamiltonian_energy_error = 0.5735250853380247, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9989384570800065, log_density = 13.500333662516613, hamiltonian_energy = -11.704074953507243, hamiltonian_energy_error = 0.002413046987971512, max_hamiltonian_energy_error = -0.18422970548005502, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9982002026433983, log_density = 14.407973447838074, hamiltonian_energy = -12.377846174928385, hamiltonian_energy_error = -0.09853213898462876, max_hamiltonian_energy_error = -0.14820878624608014, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9468777546537837, log_density = 14.70259438283458, hamiltonian_energy = -11.21558521428842, hamiltonian_energy_error = 0.0800867439249977, max_hamiltonian_energy_error = 0.1210498989720481, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7541148918709415, log_density = 13.746874283795426, hamiltonian_energy = -8.497083847332856, hamiltonian_energy_error = 0.11313478344935923, max_hamiltonian_energy_error = 0.7155460935186868, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.777083024429426, log_density = 15.584181164070175, hamiltonian_energy = -10.429245189859556, hamiltonian_energy_error = -0.10360396191322074, max_hamiltonian_energy_error = 0.8578316077310326, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9888496530926758, log_density = 16.268963943241765, hamiltonian_energy = -14.749779487335704, hamiltonian_energy_error = -0.09445708658949314, max_hamiltonian_energy_error = -0.11931846323341233, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8096021230393786, log_density = 14.956483011924028, hamiltonian_energy = -12.499237227534474, hamiltonian_energy_error = 0.17753668800312283, max_hamiltonian_energy_error = 0.3918300122289722, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9729601110348911, log_density = 15.495866221010434, hamiltonian_energy = -12.227214344948894, hamiltonian_energy_error = -0.06991434190316781, max_hamiltonian_energy_error = 0.23434256136179954, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9060866631396373, log_density = 15.190039604531343, hamiltonian_energy = -13.42188327827459, hamiltonian_energy_error = 0.05256791445404296, max_hamiltonian_energy_error = 0.25360083661323607, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9248102615627238, log_density = 14.385098508329472, hamiltonian_energy = -13.304763813775505, hamiltonian_energy_error = 0.16199318938432938, max_hamiltonian_energy_error = 0.1865220975150894, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 14.567570428768574, hamiltonian_energy = -12.89916397568413, hamiltonian_energy_error = -0.1574967295324754, max_hamiltonian_energy_error = -0.27969514727019273, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7812525198696849, log_density = 13.001336759556297, hamiltonian_energy = -9.032524997924957, hamiltonian_energy_error = 0.1077690295672582, max_hamiltonian_energy_error = 0.5019510698355987, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 16.369607618977607, hamiltonian_energy = -12.23138557031331, hamiltonian_energy_error = -0.0726099179472488, max_hamiltonian_energy_error = -0.09027746705170436, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9333858847653785, log_density = 13.309651790631502, hamiltonian_energy = -11.883267898359158, hamiltonian_energy_error = 0.05474411918419975, max_hamiltonian_energy_error = -0.2582697905446292, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9726106098073718, log_density = 16.118982993173425, hamiltonian_energy = -12.521081341159334, hamiltonian_energy_error = -0.030303367984654273, max_hamiltonian_energy_error = 0.09286336968142983, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8473325814314656, log_density = 15.755460587704395, hamiltonian_energy = -11.84484861743887, hamiltonian_energy_error = 0.001060643654101412, max_hamiltonian_energy_error = 0.3332816212997489, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9792018286963431, log_density = 15.646804677633437, hamiltonian_energy = -13.682853471527459, hamiltonian_energy_error = -0.10094260576687297, max_hamiltonian_energy_error = -0.10094260576687297, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7930662368714189, log_density = 15.583180482929524, hamiltonian_energy = -13.190271169353402, hamiltonian_energy_error = 0.0051445820836448775, max_hamiltonian_energy_error = 0.49218787596252156, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.5079247858647281, log_density = 13.839764392731734, hamiltonian_energy = -9.256999099120303, hamiltonian_energy_error = 0.5089239680488298, max_hamiltonian_energy_error = 1.001895753479447, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.96586299474206, log_density = 11.103400747361853, hamiltonian_energy = -8.774256501182766, hamiltonian_energy_error = 0.14326471353308357, max_hamiltonian_energy_error = -0.4983995327845303, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8752449759850102, log_density = 16.484610110321945, hamiltonian_energy = -7.8151839518630215, hamiltonian_energy_error = 0.1324683022104729, max_hamiltonian_energy_error = -0.3791347957816189, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9004578664915694, log_density = 15.279210353639055, hamiltonian_energy = -12.396409424297964, hamiltonian_energy_error = 0.14437137552164359, max_hamiltonian_energy_error = 0.2112855467280692, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9948765266447799, log_density = 15.317948312713566, hamiltonian_energy = -13.61800759227319, hamiltonian_energy_error = -0.147684698299404, max_hamiltonian_energy_error = -0.22524770603372524, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9762040981907506, log_density = 16.449288793330545, hamiltonian_energy = -14.151147766335434, hamiltonian_energy_error = 0.008763341649441259, max_hamiltonian_energy_error = 0.07280915493207551, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9258759690607271, log_density = 16.35060131741325, hamiltonian_energy = -14.450926383416029, hamiltonian_energy_error = 0.012582413650212843, max_hamiltonian_energy_error = 0.16719893638069472, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9330866366915411, log_density = 16.784360972471084, hamiltonian_energy = -15.235249267777645, hamiltonian_energy_error = -0.03194116059019514, max_hamiltonian_energy_error = 0.15875339188992044, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9806258934409972, log_density = 16.71660221942465, hamiltonian_energy = -15.582583330058718, hamiltonian_energy_error = 0.014706496597462149, max_hamiltonian_energy_error = 0.04333517812832355, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9486049620467798, log_density = 14.178489622544696, hamiltonian_energy = -12.665234288491432, hamiltonian_energy_error = 0.12297103514858243, max_hamiltonian_energy_error = 0.16595354838354304, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9806243755849555, log_density = 14.603998655235658, hamiltonian_energy = -13.23871034004376, hamiltonian_energy_error = 0.04454015315043769, max_hamiltonian_energy_error = -0.22106427960204833, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8882731407065292, log_density = 13.006052388631304, hamiltonian_energy = -11.777004873838594, hamiltonian_energy_error = 0.08642998823429693, max_hamiltonian_energy_error = 0.3078089781230986, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9765144132979923, log_density = 15.571578244451679, hamiltonian_energy = -10.564598411056219, hamiltonian_energy_error = -0.2305972957771356, max_hamiltonian_energy_error = -0.31592466426414845, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9973497665832202, log_density = 15.837275705755525, hamiltonian_energy = -14.098756678400433, hamiltonian_energy_error = -0.0780049292024696, max_hamiltonian_energy_error = -0.21550155767596024, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9171183611932993, log_density = 13.737843191098548, hamiltonian_energy = -12.34065581225261, hamiltonian_energy_error = 0.17109929356328024, max_hamiltonian_energy_error = 0.26663066436642247, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9861153428384161, log_density = 12.993061342642914, hamiltonian_energy = -11.937646515383188, hamiltonian_energy_error = 0.09233571342895353, max_hamiltonian_energy_error = -0.19787073084074613, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9968712397870038, log_density = 12.344005414122359, hamiltonian_energy = -10.50158033668917, hamiltonian_energy_error = -0.07885498316464101, max_hamiltonian_energy_error = -0.32575851783474796, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9796258894364124, log_density = 15.784957245742312, hamiltonian_energy = -11.076196720061027, hamiltonian_energy_error = -0.2590282338827805, max_hamiltonian_energy_error = -0.26783754735933485, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9387970843573974, log_density = 14.087862904047679, hamiltonian_energy = -13.37947152904531, hamiltonian_energy_error = 0.15557338447757196, max_hamiltonian_energy_error = 0.15557338447757196, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9963937197313345, log_density = 14.785232644772016, hamiltonian_energy = -13.566949189625252, hamiltonian_energy_error = -0.0590998023168563, max_hamiltonian_energy_error = -0.15759248355383626, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9230279924544839, log_density = 15.578956440023315, hamiltonian_energy = -13.114343749918417, hamiltonian_energy_error = -0.05213174174591728, max_hamiltonian_energy_error = 0.22530628321931623, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9676573980074444, log_density = 15.425734794016934, hamiltonian_energy = -13.65274689140705, hamiltonian_energy_error = -0.0175899219111475, max_hamiltonian_energy_error = 0.12411443076941708, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9763752406256151, log_density = 15.301021428047015, hamiltonian_energy = -13.640833102650475, hamiltonian_energy_error = -0.11895668420768146, max_hamiltonian_energy_error = -0.11895668420768146, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9898726005325627, log_density = 16.385792091629657, hamiltonian_energy = -14.437179617903471, hamiltonian_energy_error = -0.04534787948486674, max_hamiltonian_energy_error = -0.04534787948486674, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9714684317282273, log_density = 16.042700105217136, hamiltonian_energy = -14.452150659643133, hamiltonian_energy_error = 0.017595408295438375, max_hamiltonian_energy_error = 0.04205528749900722, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9983620953003126, log_density = 16.563386786441992, hamiltonian_energy = -15.711692102780308, hamiltonian_energy_error = -0.006367329851531878, max_hamiltonian_energy_error = -0.006367329851531878, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9979299268486082, log_density = 15.745253231439857, hamiltonian_energy = -15.15880702203393, hamiltonian_energy_error = 0.007337016366244953, max_hamiltonian_energy_error = -0.02781261903277432, tree_depth = 5, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9199251902031689, log_density = 14.77261163003111, hamiltonian_energy = -14.214775734829047, hamiltonian_energy_error = 0.13871262531665884, max_hamiltonian_energy_error = 0.16846994226086487, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9578836078174646, log_density = 10.75350786308907, hamiltonian_energy = -6.109540134995456, hamiltonian_energy_error = 0.1478594403557807, max_hamiltonian_energy_error = -0.31859751150888727, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 14.342928588872926, hamiltonian_energy = -10.033414855807804, hamiltonian_energy_error = -0.21433109377387183, max_hamiltonian_energy_error = -0.26170132977462934, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9250242593174749, log_density = 15.518250457950476, hamiltonian_energy = -12.879219450660434, hamiltonian_energy_error = 0.021534716783373042, max_hamiltonian_energy_error = 0.21464201716573506, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.931837584420495, log_density = 14.887767911830785, hamiltonian_energy = -14.087675430849231, hamiltonian_energy_error = 0.11091792905713582, max_hamiltonian_energy_error = 0.17083865556559452, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9567147849298613, log_density = 15.384850811062021, hamiltonian_energy = -13.148148896480116, hamiltonian_energy_error = 0.07726725409738222, max_hamiltonian_energy_error = 0.1117322831579024, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7448673536210506, log_density = 11.460127157578087, hamiltonian_energy = -8.13719660336229, hamiltonian_energy_error = 0.5868677114682779, max_hamiltonian_energy_error = 0.6685311728704786, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.8760794884916745, hamiltonian_energy = -6.33892424684832, hamiltonian_energy_error = -0.11157706398737322, max_hamiltonian_energy_error = -0.8762940433063386, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 13.348687297267237, hamiltonian_energy = -6.928180269264067, hamiltonian_energy_error = -0.6608120275669274, max_hamiltonian_energy_error = -1.2686875736834624, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9965243464501052, log_density = 14.721060512924826, hamiltonian_energy = -12.795541903835101, hamiltonian_energy_error = -0.007506216075523042, max_hamiltonian_energy_error = -0.08616391604510909, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9822269699088269, log_density = 14.322936738931856, hamiltonian_energy = -9.66808410292525, hamiltonian_energy_error = -0.05596381944018347, max_hamiltonian_energy_error = -0.167584041540632, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9327196771418412, log_density = 15.683093590474737, hamiltonian_energy = -11.8484820094505, hamiltonian_energy_error = -0.11741676035288862, max_hamiltonian_energy_error = 0.1823257229339461, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9080629424560562, log_density = 16.0146768010474, hamiltonian_energy = -14.594229138970688, hamiltonian_energy_error = 0.08495562818897717, max_hamiltonian_energy_error = 0.19073179808520457, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9251636226630142, log_density = 14.249792968687197, hamiltonian_energy = -11.33381049294424, hamiltonian_energy_error = 0.16156761919147833, max_hamiltonian_energy_error = 0.17185109385245312, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9801880414698545, log_density = 15.722000443209494, hamiltonian_energy = -12.175850691933471, hamiltonian_energy_error = -0.0884936841164059, max_hamiltonian_energy_error = -0.16134341241892614, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8034221864807546, log_density = 14.06410620505769, hamiltonian_energy = -13.096313181814828, hamiltonian_energy_error = 0.40488384164758706, max_hamiltonian_energy_error = 0.40488384164758706, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9995083379169145, log_density = 13.269200140795736, hamiltonian_energy = -11.151244242244905, hamiltonian_energy_error = -0.10115982199451956, max_hamiltonian_energy_error = -0.3332730298730002, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.980142101422917, log_density = 14.015608750407338, hamiltonian_energy = -12.291769243149574, hamiltonian_energy_error = 0.03439051625345435, max_hamiltonian_energy_error = -0.24984998982430895, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9639132303361693, log_density = 12.424186426944713, hamiltonian_energy = -9.652955814565477, hamiltonian_energy_error = -0.1867499829068091, max_hamiltonian_energy_error = -0.38794078029882684, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8332983207962238, log_density = 14.712735975213052, hamiltonian_energy = -6.319119673224154, hamiltonian_energy_error = -0.13827784158055056, max_hamiltonian_energy_error = 0.42797920882705753, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9745599034839373, log_density = 14.906185469190678, hamiltonian_energy = -12.42838133328766, hamiltonian_energy_error = -0.08010627361394995, max_hamiltonian_energy_error = -0.18529700899983226, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.97294537604358, log_density = 15.461935595842778, hamiltonian_energy = -12.439952660079832, hamiltonian_energy_error = 0.0006004510096602189, max_hamiltonian_energy_error = 0.09311608579269759, tree_depth = 5, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9983260426698173, log_density = 15.98834241206573, hamiltonian_energy = -15.13012966309745, hamiltonian_energy_error = -0.010048254524972933, max_hamiltonian_energy_error = -0.06423464314988436, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9884932038202325, log_density = 15.625414586741645, hamiltonian_energy = -14.795871022260908, hamiltonian_energy_error = 0.023377281398403227, max_hamiltonian_energy_error = 0.05000701894182136, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9659596215272775, log_density = 15.937034829832786, hamiltonian_energy = -14.392552801211187, hamiltonian_energy_error = 0.037759574208973135, max_hamiltonian_energy_error = 0.09025156069965057, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9231878034178064, log_density = 15.592922541361336, hamiltonian_energy = -13.95496436007548, hamiltonian_energy_error = 0.02872044236355542, max_hamiltonian_energy_error = 0.18167249921462947, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9765906719201414, log_density = 15.153670626710515, hamiltonian_energy = -13.31366758111318, hamiltonian_energy_error = -0.033571382578134745, max_hamiltonian_energy_error = -0.1095855069476368, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.966345959970229, log_density = 14.11761366375911, hamiltonian_energy = -12.83206869115834, hamiltonian_energy_error = 0.06557637010432416, max_hamiltonian_energy_error = 0.09292449093690713, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9578228632260124, log_density = 13.602494332078315, hamiltonian_energy = -10.215995079949334, hamiltonian_energy_error = 0.042960209110203706, max_hamiltonian_energy_error = 0.2538151206277064, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9169098728833708, log_density = 14.760141725263438, hamiltonian_energy = -11.146356153424485, hamiltonian_energy_error = -0.08921409428701743, max_hamiltonian_energy_error = 0.18310503658823052, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9877289456137756, log_density = 15.706791114338765, hamiltonian_energy = -12.47676202095017, hamiltonian_energy_error = -0.01992050757336905, max_hamiltonian_energy_error = -0.07973835765249859, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 16.55829761353793, hamiltonian_energy = -15.28099591595301, hamiltonian_energy_error = -0.02214374001236763, max_hamiltonian_energy_error = -0.025068287544488754, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9691524077018362, log_density = 16.477170370175763, hamiltonian_energy = -15.910262756160423, hamiltonian_energy_error = 0.03152807498481458, max_hamiltonian_energy_error = 0.06099619745030793, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.965392518864823, log_density = 16.09313650174127, hamiltonian_energy = -15.66309923543987, hamiltonian_energy_error = 0.03750772408793779, max_hamiltonian_energy_error = 0.07778935402710196, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9420679536677807, log_density = 12.530448182488346, hamiltonian_energy = -10.89508769389677, hamiltonian_energy_error = 0.10068880693212456, max_hamiltonian_energy_error = 0.15916524918050712, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9353959856414088, log_density = 9.427546125512041, hamiltonian_energy = -8.508061106542508, hamiltonian_energy_error = 0.15251661856930454, max_hamiltonian_energy_error = 0.15251661856930454, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.906150693415533, hamiltonian_energy = -8.127828880115205, hamiltonian_energy_error = -0.14261482803981806, max_hamiltonian_energy_error = -0.2572914156738175, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9117922128801997, log_density = 12.17096824462174, hamiltonian_energy = -8.261612650992827, hamiltonian_energy_error = -0.009231941435476898, max_hamiltonian_energy_error = 0.25463643229176114, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9488413432521483, log_density = 12.746806661800106, hamiltonian_energy = -9.543130679017215, hamiltonian_energy_error = -0.09242715655503453, max_hamiltonian_energy_error = 0.20190479631433078, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9784705430592352, log_density = 12.253699440170424, hamiltonian_energy = -11.313417349419627, hamiltonian_energy_error = 0.027013332845601923, max_hamiltonian_energy_error = -0.09215070117160096, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9665382578608005, log_density = 12.864421688321997, hamiltonian_energy = -8.5304467968738, hamiltonian_energy_error = -0.10070279207460686, max_hamiltonian_energy_error = 0.21936604725294728, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9863103456046007, log_density = 11.761378944294592, hamiltonian_energy = -8.010177608365016, hamiltonian_energy_error = -0.004070820792072993, max_hamiltonian_energy_error = -0.08034510403710904, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9794230897894403, log_density = 12.563500799377977, hamiltonian_energy = -10.911917287978651, hamiltonian_energy_error = 0.0011965365491715119, max_hamiltonian_energy_error = 0.048361486709451285, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9908480346499547, log_density = 16.605356788397476, hamiltonian_energy = -11.890361821999713, hamiltonian_energy_error = -0.03729291002534829, max_hamiltonian_energy_error = -0.050202721447316634, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8698410060006955, log_density = 16.653066432566664, hamiltonian_energy = -14.533362397564336, hamiltonian_energy_error = -0.006589787771309474, max_hamiltonian_energy_error = 0.2519849210499796, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8890538836168773, log_density = 16.38353491537781, hamiltonian_energy = -14.481497821492091, hamiltonian_energy_error = 0.02236156641121667, max_hamiltonian_energy_error = 0.23836619046584673, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9927969183132817, log_density = 16.3003561253227, hamiltonian_energy = -15.117050663341848, hamiltonian_energy_error = -0.034601761847318, max_hamiltonian_energy_error = -0.058412346881882016, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8537074961099635, log_density = 15.075113753314504, hamiltonian_energy = -14.300952152878509, hamiltonian_energy_error = 0.20880893100241593, max_hamiltonian_energy_error = 0.25935423404598446, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9880677552375344, log_density = 15.623518514156277, hamiltonian_energy = -13.342372187269497, hamiltonian_energy_error = -0.16937754834465046, max_hamiltonian_energy_error = -0.17160122392123078, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.82074923881933, log_density = 14.238923880601513, hamiltonian_energy = -11.574947363075136, hamiltonian_energy_error = 0.1360835159538798, max_hamiltonian_energy_error = 0.35539501150041275, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9959023934470846, log_density = 14.535504218955136, hamiltonian_energy = -12.368058533224092, hamiltonian_energy_error = -0.00025759735077102164, max_hamiltonian_energy_error = -0.2798779138214318, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.7846511367946012, log_density = 13.48656716823823, hamiltonian_energy = -9.621977797765759, hamiltonian_energy_error = 0.17486080489434386, max_hamiltonian_energy_error = 0.530527151494411, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.227819392797937, hamiltonian_energy = -12.758032729211788, hamiltonian_energy_error = -0.2229738646989876, max_hamiltonian_energy_error = -0.2519142200170954, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9856142386542429, log_density = 16.438434709388723, hamiltonian_energy = -14.894634344254479, hamiltonian_energy_error = -0.099246216174814, max_hamiltonian_energy_error = -0.1116817720042036, tree_depth = 5, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8804985101973918, log_density = 14.124673338689234, hamiltonian_energy = -13.203851200580713, hamiltonian_energy_error = 0.23122575181039906, max_hamiltonian_energy_error = 0.23122575181039906, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9960471075484861, log_density = 14.462475250417704, hamiltonian_energy = -13.353713915824965, hamiltonian_energy_error = -0.07045871888259647, max_hamiltonian_energy_error = -0.15687989590573004, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9054203235592958, log_density = 14.380843897030896, hamiltonian_energy = -10.824564617371745, hamiltonian_energy_error = -0.06985750629703169, max_hamiltonian_energy_error = 0.2225980338033562, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9375204916370813, log_density = 16.032643804051453, hamiltonian_energy = -10.505805282561804, hamiltonian_energy_error = -0.006441588172521051, max_hamiltonian_energy_error = 0.18221089330046958, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9632012000659844, log_density = 13.885062647816238, hamiltonian_energy = -12.318549925221808, hamiltonian_energy_error = 0.006799902231998445, max_hamiltonian_energy_error = 0.14105502939560743, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7329273569080684, log_density = 12.786405813156808, hamiltonian_energy = -8.167854585614784, hamiltonian_energy_error = 0.3454624394907597, max_hamiltonian_energy_error = 0.5341375548386269, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9183885271042836, log_density = 10.81578482347972, hamiltonian_energy = -9.80617192539832, hamiltonian_energy_error = 0.1710068131997673, max_hamiltonian_energy_error = -0.19880819045213372, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9772725185369361, log_density = 15.68021889260626, hamiltonian_energy = -8.997752686720393, hamiltonian_energy_error = -0.5101958378163474, max_hamiltonian_energy_error = -0.526836305999856, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9653250420574336, log_density = 15.245686495544444, hamiltonian_energy = -13.476934019943133, hamiltonian_energy_error = -0.0880688238438001, max_hamiltonian_energy_error = 0.12159153792603838, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.997235197639273, log_density = 15.629390111084746, hamiltonian_energy = -13.768631367035796, hamiltonian_energy_error = -0.025102449159353668, max_hamiltonian_energy_error = -0.05138325393371801, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9854405003332041, log_density = 14.163106063435796, hamiltonian_energy = -13.43298783971293, hamiltonian_energy_error = 0.04806867132667669, max_hamiltonian_energy_error = 0.04806867132667669, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9912963653652629, log_density = 14.789225162773965, hamiltonian_energy = -12.41337991951313, hamiltonian_energy_error = -0.01628379317628692, max_hamiltonian_energy_error = -0.1340046888925297, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8140876811838156, log_density = 13.117275656114579, hamiltonian_energy = -11.54699439806481, hamiltonian_energy_error = 0.2979374232295644, max_hamiltonian_energy_error = 0.3616157815114054, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 15.473343038913248, hamiltonian_energy = -13.132835209097632, hamiltonian_energy_error = -0.2116646766772483, max_hamiltonian_energy_error = -0.2116646766772483, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9637786469765348, log_density = 15.651098888923148, hamiltonian_energy = -13.407019227521772, hamiltonian_energy_error = -0.04332873095090761, max_hamiltonian_energy_error = -0.17068424885861333, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8981103470823497, log_density = 13.079177077511316, hamiltonian_energy = -11.498326106253463, hamiltonian_energy_error = 0.1325695950901089, max_hamiltonian_energy_error = 0.2563495818495589, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9645299228448545, log_density = 10.64410218214211, hamiltonian_energy = -9.092189681825344, hamiltonian_energy_error = 0.10517207838967657, max_hamiltonian_energy_error = 0.21554201769803072, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9818255150731842, log_density = 13.690324397919706, hamiltonian_energy = -9.788313657003105, hamiltonian_energy_error = -0.22746964034915074, max_hamiltonian_energy_error = -0.49383795885669635, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9996117276199521, log_density = 15.462304766964001, hamiltonian_energy = -13.410399436258253, hamiltonian_energy_error = -0.09051005400306522, max_hamiltonian_energy_error = -0.20443636866020398, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8939484458350051, log_density = 15.466147623154756, hamiltonian_energy = -12.849658443178118, hamiltonian_energy_error = 0.03369450424541931, max_hamiltonian_energy_error = 0.2346890083300579, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8520617133413658, log_density = 12.560572913598492, hamiltonian_energy = -11.330276979370971, hamiltonian_energy_error = 0.3691678714250486, max_hamiltonian_energy_error = 0.3691678714250486, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 14.816900087560997, hamiltonian_energy = -11.945062846590314, hamiltonian_energy_error = -0.19020777175813208, max_hamiltonian_energy_error = -0.4709284298264915, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9531713473956519, log_density = 12.206895958605905, hamiltonian_energy = -8.795591355988073, hamiltonian_energy_error = -0.01375695964751067, max_hamiltonian_energy_error = 0.17982796144431923, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 14.884421189198562, hamiltonian_energy = -11.581667182079554, hamiltonian_energy_error = -0.0572286235397943, max_hamiltonian_energy_error = -0.13208724411538597, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9259436147463929, log_density = 14.021228023803358, hamiltonian_energy = -13.351025065516273, hamiltonian_energy_error = 0.15053759267797062, max_hamiltonian_energy_error = 0.15053759267797062, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7786545724861514, log_density = 13.473650094653483, hamiltonian_energy = -7.854545385688162, hamiltonian_energy_error = 0.12417488943140853, max_hamiltonian_energy_error = 0.6009793644847994, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9655183586719267, log_density = 14.396643701315941, hamiltonian_energy = -10.592158338010776, hamiltonian_energy_error = -0.012881180917194257, max_hamiltonian_energy_error = -0.4012819582653542, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9739930463101794, log_density = 14.922552805567825, hamiltonian_energy = -11.080531107202841, hamiltonian_energy_error = -0.045143865907462555, max_hamiltonian_energy_error = 0.08205652153686138, tree_depth = 3, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.781316104278038, log_density = 11.265415677608582, hamiltonian_energy = -8.928569862922748, hamiltonian_energy_error = 0.426499164293503, max_hamiltonian_energy_error = 0.5104896350411785, tree_depth = 2, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9576951983454302, log_density = 9.936309441613481, hamiltonian_energy = -7.925757025403799, hamiltonian_energy_error = 0.16634068001795477, max_hamiltonian_energy_error = -0.6437433178181227, tree_depth = 4, numerical_error = false, step_size = 0.12318940422207449, nom_step_size = 0.12318940422207449, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other WrappedGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising WrappedGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#AbstractGP","page":"Internals","title":"AbstractGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP and CompositeGP implement the AbstractGPs.jl API. Please refer to the AbstractGPs.jl docs for more info on this.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#WrappedGP","page":"Internals","title":"WrappedGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a WrappedGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = wrap(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for WrappedGPs in terms of the AbstractGP that they wrap. So if you want a particular behaviour, just make sure that the AbstractGP that you wrap has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = wrap(GP(mf, kf), gpc)\ng = wrap(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = wrap(GP(mf, kf), GPC())\ng = wrap(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and GPs. We describe the implemented transformations below.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of WrappedGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = wrap(GP(SEKernel()), gpc)\nf2 = wrap(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"}]
}
