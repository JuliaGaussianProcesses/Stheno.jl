var documenterSearchIndex = {"docs":
[{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = GPPPInput(:f3, randn(5))\n\ny = rand(f(x, 0.1))\n\nlogpdf(f(x, 0.1), y) ≈ elbo(f(x, 0.1), y, f(x, 1e-9))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPINput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the GP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = wrap(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we that makes use of a variety of packages from the Julia ecosystem. In particular, we'll make use of","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.02.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"27.22890188695461","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well.\n    s_noise = positive(0.1),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-0.9162907691270586, Bijectors.Exp{0}(), 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.6094379869399091, Bijectors.Exp{0}(), 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(1.6094379094538682, Bijectors.Exp{0}(), 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.490116130486996e-8, Bijectors.Exp{0}(), 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-2.3025852420056685, Bijectors.Exp{0}(), 1.4901161193847656e-8))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     3.690255e+00     3.300444e+01\n * time: 0.023617029190063477\n     1    -1.120354e+01     2.690642e+01\n * time: 1.4589128494262695\n     2    -2.554720e+01     1.413079e+01\n * time: 1.4699070453643799\n     3    -2.753534e+01     9.143228e+00\n * time: 1.485595941543579\n     4    -2.932490e+01     4.282161e+00\n * time: 1.4967808723449707\n     5    -2.978691e+01     1.455505e+00\n * time: 1.5073139667510986\n     6    -2.980238e+01     1.207693e+00\n * time: 1.5228328704833984\n     7    -2.986037e+01     3.550798e-01\n * time: 1.5331130027770996\n     8    -2.986472e+01     9.375080e-02\n * time: 1.5633208751678467\n     9    -2.986527e+01     7.398853e-03\n * time: 1.5736989974975586\n    10    -2.986528e+01     6.758331e-04\n * time: 1.5841238498687744\n    11    -2.986528e+01     1.324406e-05\n * time: 1.59450101852417\n    12    -2.986528e+01     3.820354e-07\n * time: 1.604848861694336\n    13    -2.986528e+01     4.268573e-09\n * time: 1.6150949001312256\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -0.9376350416538907\n -1.6508370506834922\n  1.631262838397383\n  0.23916122939021012\n -2.1916462273397257","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.4),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-0.9376350416538907, -1.6508370506834922, 1.631262838397383, 0.23916122939021012, -2.1916462273397257], [-0.9376350416538907, -1.6508370506834922, 1.631262838397383, 0.23916122939021012, -2.1916462273397257], [-1.3778877996499284, -2.017095589241269, 1.29976577835676, -0.45690655156114135, -4.062115107722868], [-1.3856448305100373, -1.988665602951068, 1.5003622354157442, -0.3584927994432589, -4.15232619512491], [-1.266564610271999, -2.0956435553204495, 1.2433581768063646, -0.4940531772899665, -3.73709869545788], [0.22373023252007504, -1.3738869219334833, 1.1671884869155986, -1.1973045972869087, -3.642714695516068], [-0.027624847443024556, -1.2453909339742089, 1.3876221536892477, -0.42479941275342376, -3.5470201171414883], [-0.1828227691579924, -1.116395033510941, 1.6008717598720597, -0.4941638836586145, -3.61299561486232], [-0.6669290368413929, -1.928724142178681, 1.9126482434613405, -0.28502686498331986, -3.7524243857093302], [-1.4907685177724321, -1.8109969816315097, 1.8094568586832147, -0.30027969310774966, -3.8382635044782543], [-0.7159727127174063, -1.9387948610581236, 1.6645163118876032, -0.6180224881060729, -3.796154386298687], [-0.6770082784728624, -1.780414051696849, 0.7302383621020822, -0.36664906021518046, -3.570315418087017], [-1.288954225434839, -1.8551132181672456, 0.2654995517479291, -1.4900056599626947, -3.7439788103679823], [-1.0046762532103097, -1.4542974558073463, 0.3786334948877443, -1.5123120390548774, -3.9746454944644354], [-1.2060975328046246, -1.4819417213878767, 0.18759330285167328, -1.3642222051941584, -3.718442111983176], [-0.9594655704415326, -1.7416146015215792, 0.4455055725787469, -1.4934609116441886, -4.104199489074791], [-0.9594655704415326, -1.7416146015215792, 0.4455055725787469, -1.4934609116441886, -4.104199489074791], [-0.6169920316690011, -1.542809237614413, 2.4740974482855567, 0.2880543012158779, -3.458568315447817], [-0.10201717492133824, -1.294536543684279, 2.4763224226026836, -1.1768221125932505, -3.503385098376145], [0.07453873625117893, -1.364518651677209, 1.0887632302703698, -0.7200216589551065, -3.464596252257001], [-0.4203529899361452, -1.398547631232805, 0.4598896434966725, -1.3087619782591597, -3.585104520700892], [-0.12717456546588973, -1.4638246586694719, 0.06271796347901487, -0.9328183820101971, -3.4954356740732386], [0.23442085545085595, -0.6339510375474652, 2.279350163467848, -0.9941731787000669, -3.4499596332877984], [-0.14759769346486398, -1.3662641373932431, 1.3973081840164663, -1.7299155692702688, -3.535428313291402], [0.16499599566836518, -0.7759199871565258, 1.1709571996833905, -1.0207734155494175, -3.508458706891443], [0.03884749337985932, -1.493984965962682, 0.7836863441225361, -1.058515798623879, -3.4966170902400484], [-1.2033110902506956, -1.598081535865155, 1.2469318376717846, -0.961710997641205, -3.873635135582306], [-0.3258165352752793, -1.2169165119318568, 1.632901727298024, -0.5226439446745732, -3.6183258660024844], [-0.3058955488823203, -1.1809021135675073, 1.6232879808628302, -0.33156656100843274, -3.582569131384601], [-0.5815906752868965, -1.9487869216636167, 2.54245485247641, -0.5039446701406104, -3.719846062423884], [-0.4074142837761308, -1.4906554141537185, 2.0304596730670887, -0.6409224988281422, -3.59837521189548], [-1.2081282126478656, -1.8690513030016536, 1.1511322834952709, -0.8876265630175808, -3.757828831941862], [-0.9489761715232341, -1.801185151936148, 1.335622014155277, -0.8449428085303243, -3.7811143425402443], [0.3172244297222125, -0.89944088964016, 2.1002028601871716, -0.16504052907605277, -3.670122282873621], [-0.5458238940463632, -1.6230855250849732, 0.8436916023585244, -1.4545143656248667, -3.8696761399786803], [-0.974231851864038, -1.9544884475207147, 1.861722463514145, -0.35366263920597774, -3.5025065817033187], [-0.982023124679074, -1.4633192552101957, 0.7072261310850284, -0.4569335053114864, -4.005688099549244], [-0.9556814374085001, -1.642961678858694, 0.6805780237269937, -0.2135538853792218, -3.7478254876468866], [-1.2732389574034557, -2.009730402035991, 0.6453715530582383, -0.5518987743806095, -4.164117186516731], [-1.000491170137588, -1.9251778062902503, 0.5820443669886365, -0.5745526716931416, -3.510603496310017], [-1.0410143515346948, -2.3371209460611557, 0.6572799946081384, -0.9950485470635388, -3.67365474199024], [0.1934621796705382, -1.3400449198381537, 1.2947568174164836, -1.6000564097736414, -3.5826110949547783], [-0.8068777011483658, -1.4753527497586605, 1.213333313743495, -1.1754826120853707, -3.7697033803512445], [-1.041590512007359, -1.8932248458160723, 1.08851906859524, -1.253887323065483, -3.8991943745993796], [-0.8947139341188741, -1.6797442665519278, 1.9145339202154992, -0.5180378972562595, -3.732752226434487], [-0.8530980508801437, -1.8227786182586678, 2.1684239793320654, -0.5932629251418629, -3.7889322770118414], [-0.5454175446652985, -1.4816322774339692, 1.0802414253573034, -0.3227356112196512, -3.428886213711771], [0.368392316779117, -0.9114561162922017, 0.517614588746397, -0.8918741027724038, -3.3244481177223086], [-0.38646636307160964, -1.6030864504395006, 0.7818806281627385, -1.1331022727087632, -3.857883537651493], [-0.4609273252830019, -1.1752695067041918, 0.6503068781064768, -0.8897917903581904, -3.6907966065477904], [-0.9094649005963172, -2.0654332389280023, 1.1643847908504315, -0.7149169505160463, -3.625261749599983], [-1.0805262786855327, -1.5421630174997727, -0.009166520251377902, -1.2379510241581142, -3.701885176477957], [-0.6893095355047882, -1.9674478819354457, 0.8965159249375746, -0.5454895095342295, -3.8257657118856123], [-0.7534048284326953, -1.4457180080202645, 1.6814975757308401, -0.7980896418121335, -3.9373038735552717], [-0.9808601072638796, -1.7109800943187032, 1.7407430097213967, -0.2585383568067807, -3.6863010529863725], [-0.6468323281227804, -1.3004375765730145, 1.8832723988079236, -0.03990541462790573, -3.92415482210558], [-0.7511115624850364, -1.5182505210620683, 2.168105317067, 0.2786779157565437, -3.4122079143198074], [-1.1518225118626084, -1.7694835156705888, 1.2036858772095338, -0.8507963366911937, -3.732851341505825], [-1.113815381177967, -1.5805865342179248, 1.2404522553191697, -0.8424571397198648, -3.6588115752351014], [-1.017727259633008, -1.5269257250103134, 1.294997830064776, -0.9286588654578319, -3.6170133698331925], [-0.7994349454076297, -1.6579652660145925, 1.3611337001510568, -0.8758644518106464, -3.923496938213672], [-0.9105109630856739, -1.4352982528861369, 1.5341645398453037, -0.7689808618436362, -3.7285003970174184], [-1.0203266512216187, -1.9137775950254254, 1.6835719432862875, -0.7383757864968545, -3.7480291240926404], [-1.3300813440193815, -1.8440197781093055, 1.427484327015042, -0.5485689380113455, -3.897688900640452], [-0.5236692420517949, -1.3934134669069, 2.4685469975997454, -0.008694534363064423, -3.6046641579915053], [-0.5640191223983133, -1.3508911492050257, 2.449209880621155, 0.12073112811148612, -3.5854408118976235], [-0.8210093976482234, -1.354696979067027, 2.4495236914074323, 0.050383444884409934, -3.489200504620221], [-1.018644471332382, -1.624667640764588, 0.19410880334410416, -1.056941356470491, -3.705696345426799], [-0.5321526378894671, -1.9332231484174427, 0.3846875645354798, -0.3751949062687401, -3.746614096356875], [-0.780383566444611, -1.7955468015741476, 2.948441011663732, -0.5803427802746493, -3.528389852730881], [-0.3427123917873293, -1.3037437412079715, 2.6476653740295943, -0.1615747060313272, -3.862255838287656], [-1.0055439797820152, -1.5307385205288098, 1.2643602650618926, -0.3906759025084618, -3.513302182384351], [-0.47828735751731344, -1.863030788733964, 0.6863517980989802, -0.25978540138839007, -3.999511566787841], [-0.6750076052600305, -1.8471789568419015, 1.0671513158012318, -0.2999402229049255, -3.2638113098633936], [-0.37345541358563733, -1.5663610980514047, 0.9824549714234334, -0.22765064374039515, -3.4200230169970554], [-0.1303557555138515, -1.1605107578078606, 0.6560583980113501, -1.1905628368154353, -3.3888821330095955], [0.09428433860214705, -1.3139313635245315, 0.7422785233415387, -1.7609320046345345, -3.5042071016227023], [0.2646119140572396, -1.4101553951246337, 0.6854726757261774, -1.7608490256310443, -3.595952622513001], [-0.160247961509953, -0.6333347460411909, -0.2967755060645296, -0.649882629477327, -3.907235825933158], [-0.6692978898008741, -0.5073541865334213, -0.79292145348192, -0.7025240320387647, -3.6841814703419], [2.2597787824949838, -1.8689498082051306, -0.005051049702321758, -1.6189177737793754, -3.786062709238964], [2.23589166301551, -1.9126011779933183, -0.01704639852584831, -1.5379762419665588, -3.5433168186457107], [2.0412365699859327, -1.707885148111202, -0.3047700624704151, -1.595749431497491, -3.6694931868929563], [1.0090028449335653, -0.758668465260145, -1.0198424704371942, -1.627885144716882, -3.897803336986978], [0.4643699984204712, 0.2287487146404514, -0.9455110889132353, -2.3210573140298805, -3.754544828008943], [0.8988177966330114, -0.42580310158077195, -0.9068627856337332, -1.882320679772513, -3.7004318325780314], [2.3040402039620203, -1.1081647859092585, -0.08923189376955717, -1.3793184503976066, -3.563271323516523], [2.384508929953869, -1.3162221841529431, -0.0952324136903538, -1.8204788788184032, -3.593956683625313], [2.66248341255747, -0.913380271681324, -0.24056476382102637, -1.6542308879872323, -3.5140780688209214], [0.5917727000260866, -0.7408482546527919, -1.0718812395175208, -1.7160324926793427, -3.926036362704339], [0.8900517981065181, -0.620501250014964, -1.0482694201104972, -2.0521226192198534, -3.963068134084123], [0.7912607293841425, -0.628335522748583, -1.191380122528956, -2.0444957940640873, -3.9097799449150807], [1.342985641231254, -0.5634207020980917, -0.7346271834031722, -1.3201856039295996, -3.7272857276825277], [1.2597294628589206, -1.7556514409474793, -0.9217377487689042, -2.011807607367555, -3.958453283477019], [0.56850538056547, -0.6038702998675823, -0.6868520269443502, -1.2899721840902385, -3.8705852592843217], [1.5130046187155601, -0.7382191109641622, -0.8129275747384375, -1.881082427901354, -3.628356791707934], [1.2923628335385533, -1.1629105208511725, -0.6180875672294404, -1.7059531557679557, -3.686110827021346], [2.2187794915921093, -0.1489461145456495, -0.9326627177918554, -1.5938040395716861, -3.7957582041429094], [2.0880691896858408, -0.31831278633930515, -1.0246578624693232, -1.9334392683369215, -3.8846150140993765], [2.1818551827775297, -0.10420345447368569, -1.399494560479432, -1.784356903692503, -3.7811046547407265], [1.9505453238081552, -0.4457874408856361, -0.632108287683859, -1.9536105418286642, -3.7217195765076148], [1.0896204552304327, -1.8585752340079462, -0.5930106478082435, -1.4677631212877411, -3.776092752509414], [0.7890701884716242, -0.7166911892609654, -0.935959766602583, -1.6310893681150072, -3.6137808560500853], [0.7233572642335465, -1.2279470444413911, -0.3815756006355332, -1.6763131775822457, -3.8902129519680653], [1.1517021719662035, -1.708463627528488, -0.5904842076141211, -1.4824061970012372, -3.335819008979485], [0.786442925643407, -0.9735986948591397, -0.6568839774010564, -1.5526950880790165, -4.065805492577853], [0.9353433513933944, -0.895635215969243, -0.9778148721405563, -1.194177350696818, -3.9696489231416114], [1.056104881234182, -0.8993161369354008, -0.9708789163182814, -1.471248184116881, -3.911634856024245], [1.2271994440871488, -1.1717158713871896, -0.5651707326758664, -1.7494073704900432, -3.835247871430802], [0.8063780596787741, -0.9785287473939799, -0.8911381463425823, -1.7982086039286396, -4.018193462846248], [1.2096060403253588, -0.7963068859924274, -0.3937818032649915, -1.531391364075688, -3.41037672662031], [1.675985919006584, -0.16714670948806576, -0.9224907346737454, -2.1144281530434497, -3.56335756463553], [1.7496221882917544, -0.4120421436958812, -0.7406355556136913, -1.9755646074509807, -3.738189005207755], [0.731690212701567, -0.9007078825999273, -0.7458835398533995, -1.2341964021734027, -3.780558391922225], [1.0374964972918277, -0.6940843113374973, -0.8803564997694227, -1.8535614793801767, -3.821131362466745], [0.48350430371398445, -0.37599509040310736, -0.1336348273637441, -1.336928457775816, -3.539461747330561], [-0.5136596210188509, -2.107508196582293, 1.453349797746029, -0.9548293155083081, -3.30376787238998], [-0.347121644438989, -1.7545761338832844, 1.569696885848933, -0.6222003813616714, -3.6418412170272583], [0.27597341303105305, -1.0128533804777993, 1.4879929008761754, -0.3330149709105821, -3.4865551152442134], [-0.4113680938160747, -1.3125760030969367, -0.6312409119845024, -1.8715134558731015, -3.5498327740345266], [1.5617784451470913, -0.5483319551661542, -0.6304099381749657, -1.4643950767039495, -3.6220190813254027], [1.1654437297891678, -0.5739350855030483, -0.8781316232265937, -1.0983694527451435, -4.0041450800622895], [0.9771848040173896, -0.6228438694019659, -0.20320722783417675, -1.4740568544747168, -3.50687946708108], [0.7956643237845308, -1.0087397793144246, -0.17246385711291076, -1.215986396378119, -3.5055955780268477], [0.8125173518901617, -1.3705312439737438, -0.07788050246611142, -1.0715690268061169, -3.9566818526330785], [0.8487140219458091, -0.16147655236524044, -1.2915212846198774, -1.821228838955537, -3.8002616301583956], [0.5493390264956015, -0.5898474620893595, -1.1250331218906662, -2.2047177510269877, -3.7785320298194294], [1.028449748919826, -0.7331886341230452, -1.0778326772551448, -1.3931220694904853, -3.7466340390975725], [0.9759587891784931, -0.7097828177712028, -1.0726939542455494, -1.2772718709916127, -4.055154497403402], [-0.9233574759314868, -1.2517138083923185, 1.150096708041294, -1.4624835741517381, -4.066979984089564], [-0.7468516570175062, -1.852892480451158, 1.0379857871289913, -0.8175743513558862, -3.332359994305717], [-1.2140627653243836, -1.8292850684971846, 1.5898193956526363, -0.6585764844631568, -3.801860633023938], [-0.6733935049021362, -1.7163917191124143, 1.901973055691721, -0.5070669379961712, -3.7868178233621226], [-0.04023859385597359, -0.9426822296495209, 0.4647326662441525, -1.331917838757078, -3.55610248771214], [-0.15015973269546162, -1.540923590000011, 0.8251337006240625, -1.531759028113361, -3.2988959535679734], [-1.3685385749242729, -1.7330011324108245, 0.5570347087740115, -0.38755007629542265, -3.602644764834205], [-0.6894413513407773, -2.0485222628445423, 0.3338354912388751, -1.1710900382143579, -3.7456008986720626], [-0.9055475021614539, -1.7987454929619966, 0.5242695764084079, -1.0949387601115896, -3.4733045347274176], [-0.8652142960058645, -1.7259566347323814, 1.2906989727821463, -0.7487079199271168, -3.8783694309054555], [-0.8646710620746537, -1.5627866354520414, 0.3327180065759425, -0.4995149615514223, -3.591878817322283], [-0.46685408307861037, -1.925875224458256, 0.8350707483036179, -0.546499734977114, -3.781744234315709], [-0.9852722486225935, -1.784599282459875, 0.9669600748153566, -1.4415428429780413, -3.5893547114115454], [-0.9463222162957221, -1.6618661162709607, 0.926663559619075, -1.4491502722876568, -3.893122646586005], [-0.8961147133351489, -1.7721160232403284, 1.7291208785593097, -1.0161268872596219, -3.5575714551955446], [-0.8515598369634069, -1.691406049308329, 1.0578771683958303, -1.2529135336257238, -3.6543860194336157], [-0.6475033468196315, -1.650766537506104, 1.1820969853612229, -1.2426519339812208, -4.142785394576198], [-0.6663897392343414, -1.467929195031939, 1.2681027347655085, -1.2239744120023694, -3.697550728827579], [-0.7985823820992294, -1.8839779819746174, 1.4364434742745678, -1.338508018858417, -3.754668089759798], [-0.6697517045684803, -1.607524925081017, 1.8620456187163767, -1.3275520401863456, -3.7454529169649065], [-0.104352231236657, -1.5811020079759142, 0.7392964025207336, -0.6521308609727583, -3.648640528949707], [0.06367910799271986, -1.0251601114478848, 1.6753379260953984, -1.0281651947514416, -3.522560685006435], [-0.38384404271241557, -1.740694896216554, 1.5767748522745957, -0.5240588234281407, -3.5629408979071764], [-1.1523232168924888, -2.1672734397998425, 0.37011486909028235, -1.1893151627583585, -3.8488923106199735], [-0.9793963688924057, -2.202935692142705, 0.1568071954122816, -1.2671952030665297, -3.577331012943762], [-0.9899509660419087, -1.9283333909851363, -0.07940411452510725, -1.1631149915244938, -3.853232898752245], [-0.8628279812412388, -1.764084059694642, 1.4562537685231702, -0.8067361932753402, -3.5635989406392277], [-0.9714145131557497, -1.763679208098201, 1.6528046621517805, -0.910390518497132, -3.5669230482486403], [-0.8463058870332995, -1.8618908268067946, 1.5629425703682587, -1.152130423612688, -3.9392002157604193], [-0.9760926864320768, -1.6179601947008677, 1.550725129964139, -1.2269950441574795, -3.664176529865427], [-0.9629011553451913, -1.6855689541236996, 1.61449821495129, -1.1371053622121883, -4.191087360794935], [-1.019302816305277, -1.5420235219989598, 1.496192820891515, -1.4323341756310475, -4.02652861087212], [-0.44556263326241047, -1.4685074123361506, 1.5169941810695586, -1.2536415277545556, -3.549062826488493], [-0.5759723129056766, -1.9321136722615242, 0.724590035622532, -0.9541056546882978, -3.7606234623568677], [-0.6181383423613593, -1.9740637818387683, 0.6949964370183568, -0.8875744058401537, -3.6991814067478166], [-1.303747565007657, -1.7993594090096694, 0.04367455683779797, -1.1169217178822028, -3.816170360700474], [-0.912529966847164, -2.2718126763804203, 0.7431929640808318, -0.551554451042369, -3.770234386740358], [-1.2376535068103784, -2.841462111092987, 0.13856328337402507, -0.4454229076858645, -3.7257115799401155], [-1.2717622747840756, -2.8317097246031953, 0.32463963765908255, -0.4450014130076525, -3.5671659597225847], [-0.8120089567938373, -1.5471954741007572, 0.8253877252095938, -0.7307241358557479, -3.9697121844929586], [-1.005704639125071, -1.2268899301184222, 0.721928637271519, -0.6884831485168686, -4.105952550004596], [-0.7356463557780295, -2.3794483069294223, 1.3279985887306003, -1.3252644805670282, -3.412529682871925], [1.2366480373764113, -0.6686133620155827, 0.03854240413064468, -0.44803372728052326, -3.49271815519687], [1.6345937137105941, -1.2226549796614075, -0.05137125819472436, -1.2807933516576422, -3.750890284542431], [1.9537440001571866, -1.7003019038503722, 0.0379928764205877, -1.5538912189890184, -3.35747284303618], [1.7035003132401862, -1.1118102750760541, -0.44814708988319496, -1.1764801775875164, -3.627483092665468], [1.9989895940474531, -1.2503502605040713, -0.3805775736404095, -1.1087877483926336, -3.83920020094027], [2.695399021111318, -0.5757911985987485, -0.21030775680439143, -1.3210929385610821, -3.551039697936871], [2.433419623960667, 0.17001292570653678, -1.0972457333003895, -1.6714317864167392, -3.8029880658858146], [2.6621726385943005, 0.31179532237012836, -1.1474838027419678, -1.6671468700272594, -3.7833682221817218], [2.3518591120753434, 0.2451553736105387, -0.9339787989707021, -1.793109144255132, -3.757430363672627], [1.9141536425100132, 0.21763103945871842, -0.86927512246, -1.7620837126869178, -3.623668224690588], [2.0708351224866766, 0.06551167511195927, -0.9230824467612967, -1.559323831348129, -3.9573985283820496], [2.2097174932541077, 0.356957956706807, -0.8305034249108607, -1.7330230771440454, -3.95130269226131], [1.3411005817163097, -1.6194097486183516, -1.0385827592751964, -1.578618249970109, -3.711644305294132], [1.3129008096046129, -1.5293186819416786, -1.0502606854035132, -1.543359978754883, -3.8171727214005], [1.348663661938218, -0.46380792397781, -0.9352231077406418, -1.5700517734206854, -3.9189807838854875], [1.4005747241000444, -0.4735328783352385, -0.9347337719629951, -1.61070773035051, -3.7893568715810386], [1.5585027919986936, -1.039273944859736, -0.8914494537599286, -1.5875768711804548, -3.9807892870765413], [1.469275533396321, -0.4658182782044016, -0.9322035723815155, -1.499755547971235, -3.8008600867345024], [1.5176427614073265, -0.6877092710150211, -0.9779673331765819, -1.4198635632095207, -3.8606894442742488], [1.7132044745874233, -0.8549959584033747, -0.8960341192330953, -1.8495824728465, -4.059453654505741], [0.7987557027129335, -1.5933069437576108, -0.7031460070268686, -1.709277579368225, -3.8025120867305233], [1.6290481171946145, -0.5777164361181495, 0.09172604159714882, -0.8144925340788649, -3.671394832312614], [1.2861745204307427, -1.1921383924383369, -0.6158168332404752, -2.216934115292729, -3.5445981458827642], [0.8305898108469292, -0.8282468520633204, -0.8815227048933673, -1.2846670444699717, -4.043965627140532], [0.05887917214808565, -1.219055475364494, -0.9127788347739958, -2.2797319124214463, -3.5634423447616204], [0.07157795021818567, -0.4060177963617823, -1.6749148196443426, -2.5094310216145193, -3.8456645695953666], [1.8027856336472912, -0.17273088263044767, -0.5608955455932281, -0.8520646888589273, -3.6022228612657563], [1.1948952023224748, -0.6961015826536141, -0.08506809449501557, -1.6013797099777078, -3.7575053384984334], [1.499281884368603, -0.7104382015623166, 0.41712334710215576, -0.7340910942128713, -3.5185669727894635], [2.360713935939716, -0.7304617531408115, -0.8165017570893736, -1.6755536809607852, -3.9099980140898962], [2.7664262755743403, -0.7545188752791936, -0.6199180506967851, -1.6496027124683248, -3.7821517928526975], [2.6614290824725715, -0.5894244644532314, -0.9070395613536577, -1.3994590645221037, -3.7739783801935616], [2.693127773032563, -1.4235570022866535, -0.3557395523677807, -1.7540567659750488, -3.776435809467275], [1.7242662200253935, -0.6282482710073849, 0.1696544120880309, -0.6893094402858508, -3.801371560680512], [2.964513316831615, -0.7637058692906555, -0.0814845211801235, -1.8677604379604098, -3.4893162027184212], [3.19658783805605, 0.07724011685306675, -1.0498946348266793, -1.360274926468513, -3.998967864578848], [0.04214217985225521, -1.1246043848775886, 0.01446588879600481, -1.3582794598383456, -3.6811365450048905], [-0.5138783893996243, -1.2846921226119927, 1.1701412628435774, -0.9976497708604848, -3.4091352330510047], [-0.10883143479050544, -1.4022898299502913, 0.9316329391762207, -0.6478784067093701, -3.961498755077094], [-1.2641910005082286, -2.323952194497288, 1.411498319245212, -1.1946535883337817, -3.976998028855395], [0.043332467242093387, -0.7452266934908857, -0.22495552323900603, -0.9788336400245727, -3.7519949026322466], [0.29685641748761793, -1.0589243755776123, -0.21014550712580302, -0.8936611330257419, -3.616084535675142], [2.403752123248188, -1.2838236166027945, -0.7664217635433825, -1.529845511222475, -3.8542712709088365], [3.014851437944637, -1.1076857037114878, -0.6840038030696306, -1.3285038160744882, -3.566687100314289], [1.4137151059800466, -0.06351814554581392, -0.5247168044317164, -1.2281091752522464, -3.5074780218914197], [1.2695361589195258, -0.01555098837131956, -0.9226794363709206, -1.1660578158742396, -3.684840179976271], [0.6862416607265979, -0.8393654036674623, -0.16506410798137505, -1.6513182939454598, -3.3076027013786087], [0.5269573673081566, -0.8018932494065181, -1.1103646319335974, -1.4165284970469263, -3.674081687114626], [0.39714327581373376, -0.9976438595011304, -1.1410530768392642, -2.6470673294818976, -3.998495050903227], [0.5447012471134576, -1.0276622529774686, -0.6935152333710294, -1.1720811858212208, -3.5443879179354956], [0.18979975651015954, -0.7534355931646215, 0.8105590668195211, -2.79796186614869, -3.4708324856878594], [0.31668427828777296, -1.072201731469143, 0.24227257041646208, -2.7298179713946054, -3.554039877463281], [0.12188349091970824, -0.96167511843239, 1.2330689596235325, -1.6004884560442814, -3.7126065933653982], [0.3887536869507342, -0.9798281179670051, 1.2906196078497238, -1.684357574467126, -3.5293643005255766], [-0.958838997243475, -1.953948100383758, 1.2088359566718427, -0.3489168996508907, -3.5732396658534857], [-0.6559488460826671, -2.000962245731767, 1.2499541692156095, -0.31192431571130336, -3.3904910873262697], [-0.7449235581981875, -1.905296917648282, 1.348883283704216, -0.45382416600443903, -3.416937956613527], [-0.6685027176084619, -1.7396394639151374, 1.180269038943938, -0.4875971283732591, -3.84504633607117], [-0.6387846330294318, -2.0040744222547304, 1.217908358383341, -0.47631686728165157, -4.114575846990551], [-0.5752001186674666, -1.5961533892368198, 1.3905328041619702, -0.7390612090728431, -3.248422129887424], [-0.5336036652744782, -1.2777244084716775, 1.105277536198618, -1.2588600394731218, -3.879146382262617], [-0.16951154354903467, -1.3109058321083078, 0.932939659759628, -1.2525867431957625, -3.5263867372687723], [-0.18516782290187367, -1.3973951986885065, 0.9474004147671234, -1.1233291773309917, -3.5292679587116624], [-0.7179038515079889, -1.8003847611554538, 1.3379300164460495, -0.4377483052321549, -3.8843451447103208], [-0.5791319482029919, -1.9224783803190764, 1.4646373102092414, -1.1668803981749316, -3.554842780083496], [-0.7024980292345514, -1.9735200881523651, 1.616056217515465, 0.050010821195481635, -3.5982782636888424], [-0.6842871807041994, -1.6411218622464425, 1.1036294795764143, -0.3968275908379696, -3.783554316948447], [-0.9368190976236237, -1.564371073525823, 0.7949152144896766, -0.5019368601915909, -3.794166208489234], [-0.667757831335793, -1.3768046265077125, 1.553142358882573, -0.5839579307865865, -3.635197819157149], [-0.4064275406079137, -1.4568828150390398, 1.203783864382719, -0.9522278700037541, -3.6396443951560773], [-0.5798474015822395, -1.349204110506524, 1.6349287284878549, -0.7672733040483756, -3.8443592004011595], [-0.7049526329031566, -1.6653878957723496, 1.998959867641363, -1.0871179404000613, -3.695755341619625], [-0.5066076698771788, -1.7248292084852062, 1.9192415002075824, -0.3831757470531263, -3.690201767843083], [-0.9314317010889153, -1.9332326274146527, 2.0238111837124175, -0.55713231557088, -3.726059382930391], [-0.5269114684809656, -1.4888980762573187, 2.495210318678149, -0.12545059712186607, -3.62171666374633], [-0.4029913840910052, -1.057671808255001, 1.698288278091307, -0.5520894887316262, -3.6062053046930718], [-0.9832240159028768, -1.5980374980568963, 1.7295122793538733, -1.3180092195528288, -4.11248907579761], [-1.199437423854063, -1.63691787764195, 1.5715049293346186, -1.106091166693561, -3.8778293990338693], [-0.9763378069497292, -1.8245271377690129, 1.7306068834933415, -1.1633823000625771, -4.158243654871573], [-0.9963740482830485, -2.01174561204455, 1.7475152462375472, -0.6522944642947722, -3.7097851912730757], [-0.3090484878251558, -1.5078294673054868, 0.24456580951968257, -1.468745185975742, -3.424126012993932], [-1.1749643310170645, -1.6523718264468232, 0.2863565063979002, -0.7036778806677361, -3.8092594843997825], [-1.160186745057432, -2.0515936137271438, 0.21317260391711942, -0.6396590670501372, -3.741140279678719], [-0.739155335864707, -1.3791628636096, 1.1565404983963188, -1.1592476147528308, -3.7384971029908582], [-1.0547503655712447, -1.9763043761293853, 1.4767886342661334, -0.8207361186728734, -3.837811064212354], [-0.9857746529408767, -2.1042955605785356, 1.4303662961633266, -0.8334258466712936, -3.845508265983071], [-0.971736929637739, -2.0076186314054567, 1.3868404246623163, -0.8519231856006687, -3.794281798523685], [-1.078361562055726, -2.1773398175088166, 1.6024435436194688, -0.8626544128318147, -3.7625077400956095], [0.23939155675110274, -1.0424303281097063, 1.2078715166958414, -0.8139420786695346, -3.811837921976198], [0.015956254418420107, -1.230883877760251, 0.5551422307418133, -1.3402779557595221, -3.8784446294985715], [1.7069814901396476, -0.7392232435469012, -1.1194830497037653, -1.521164324853416, -3.6268485248363356], [1.7018701011195374, 0.2675269848174097, -0.787306417959909, -1.8266133646525204, -3.5485864361786783], [2.0760052687089643, -0.13662253512802663, -1.0592555850289447, -1.8330344190717416, -3.9740545466721104], [-0.013804077816645485, -1.5510631736620957, -0.8673862668438943, -1.107230857471364, -3.7988376635350667], [2.6056325662318622, 0.1552448836188999, -0.3849681841373995, -1.311567567833283, -3.4981889684371335], [0.854367129372801, -1.5725774545160915, -0.5369867431909942, -1.9947125430083859, -3.5369057988203543], [1.308385020605995, -0.18260406816764274, -1.1935812078085155, -1.5573633783899086, -3.874540191894693], [1.4662378214249858, -0.6393647781794685, -1.1230019170683236, -1.9671026419565485, -3.905692219152604], [1.6130392642979876, -1.0694040273042256, -0.9714658112024797, -1.866705951044077, -3.713417208443106], [2.0791308466683334, -0.905916082835759, -0.8484881131119631, -1.551649365239982, -3.898958035838311], [2.942036532701255, -0.5080360341607705, -0.7982243258037662, -1.6594832627647373, -3.601390989308182], [-0.3963210989955165, -1.3363267580627902, 0.2140862761364159, -1.347946336572376, -3.734274051352294], [0.10564895075624495, -0.5669681233793625, 1.1144123775178052, -1.1590194495659285, -3.6360290992449222], [-0.9687552095461905, -2.56518684426436, 1.1250806327812606, -0.6220936566026424, -3.401730578217111], [-0.9113121409710088, -1.2122192891925172, 1.4851805137692027, -1.445181789903085, -3.922624505929577], [-0.5464555738425548, -2.0298468230710167, 1.2139053579326518, -0.06104387684475224, -3.545267044613195], [-0.06793272864165878, -1.746664415309669, 2.02969925502407, -1.4498946026043957, -3.553132917383287], [-0.8709904572794539, -1.5233504408314205, 1.5752434368797525, -1.1327984670353846, -3.5972024181490596], [-0.584604932360445, -1.4525304259104086, 2.0151106153348413, 0.2510389757888636, -3.8724823819471155], [-0.3837791145559004, -1.8003560816744697, 1.769463516654341, 0.12636904170685392, -3.4074456759280403], [-0.035984710394748265, -1.3440489431349127, 1.4875279187543522, 0.35247561549686063, -3.7200080490538374], [0.09788552817650761, -0.9279097088055324, 1.5541380295383957, -1.0239309117989046, -3.654566559346698], [0.02137368031480648, -1.3327640538098957, 1.469744095125454, -1.123265142184716, -3.560316643422228], [0.16511375959460445, -1.2048277072530273, 1.6215992188682438, -1.3366376691150328, -3.5703685214426777], [0.3086721926737146, -1.0443876579302454, 1.5713070855670341, -1.5124224404004043, -3.4212702193454656], [0.15244961835487927, -0.7469477797061702, 1.7064498363038192, -1.5842968402076685, -3.6889117553326476], [-0.4095398733843894, -2.04810728558517, 0.4191891135460191, -0.7893234839576663, -3.722178420181716], [-0.6040725999516086, -1.4949228201717852, 0.43896174309678215, -1.0658663996136848, -3.626975771625397], [-1.1847787049403773, -1.871534390905632, 1.8285860504872513, -0.9944056585033161, -3.7805879412766226], [-0.6336967364128746, -1.5736230282658712, 1.3363668588050603, -0.2582695643980932, -3.560857119882296], [-0.9962938298801185, -1.8874204526803662, 1.295495520398957, -0.2694979729040957, -3.5739405570388176], [-0.885293700887151, -1.5466599716397613, 1.526810639378496, -1.9042357352671313, -3.919978956429842], [-0.46832213555725954, -1.275926376623157, 2.1481162455895486, -1.7196506538705623, -3.673603749839991], [0.3416574955117525, -0.4269095550065931, -0.2535194041336023, -1.2989961040994995, -3.598321480492482], [0.3805069173499229, -0.4626578892098662, -0.060253488503763136, -1.0792727400950033, -3.639433621089704], [0.5431545295287985, -0.4575846514625614, 0.010747632885885941, -1.239602490081497, -3.6542065456816863], [0.4500275887360922, -0.9398630316668162, -0.6053067929722202, -1.080919432623571, -3.533699897501901], [0.9008737780588811, -0.6449091893917908, -0.39068561186110584, -1.8999839342390599, -3.7431266667835867], [0.8508106022420237, -0.57411111363687, -0.2830337380668763, -1.961865676251641, -3.846456285765626], [2.624662151293872, -0.028430517133626113, -0.9619025351613684, -1.7990482934827075, -3.6307880952267966], [0.7853146618087472, -0.7706800316743344, -0.493083221345171, -1.7699200930104506, -3.6418337993576513], [0.8064292021706689, -0.9140296017098962, -0.2775162657457687, -1.9307820970140577, -3.457479932044993], [1.060134671509337, -0.950125088016476, -0.28108447306470524, -1.9635979119344598, -3.6799481127396243], [1.2526325984314939, -1.1791092756384594, -0.6345462375150824, -1.7379465522008775, -3.482424035498865], [1.4983606717127442, -1.1621069700471724, -0.5410881043782236, -1.855995981076731, -3.5502649244268474], [1.2840954706359964, -0.9767469275390007, -0.2727962532810061, -1.8743786048207987, -3.617966337562439], [1.725082759862311, -1.4148626028480236, -0.6107845488251025, -1.4338604186982495, -3.678454691282969], [1.8069840699253288, -1.2505717026132763, -0.1595722375286935, -1.588781124105251, -3.580099056352064], [1.968072751369722, -0.82559239363445, -0.49917673969762455, -1.3757607430031986, -3.70364687508909], [0.9908954159147945, -0.852691010958617, -0.9422197900014222, -1.4111185843065694, -3.701917270554136], [0.9629936413472693, -0.9411115958177536, -0.6696655080387484, -1.3562302800580592, -3.7747862229320064], [1.140477396765803, -0.9555978150364327, -0.8977498867448397, -1.5813709875185853, -3.65991680981307], [1.1629171703933543, -0.9569182107451971, -0.9187947258295911, -1.7418670365822937, -3.658864563011402], [1.3047092423072795, -1.0700810242381602, -1.109770180903639, -2.126371029657939, -4.022848249249978], [0.44723346922702717, -0.4350178909961364, 0.28199152691390994, -1.0646737584710773, -3.3663957852318074], [0.32670687675827814, -0.5098594063977788, 0.1267306792414076, -0.9680632986487306, -3.6197640589590137], [-0.9396979669346254, -2.0486313337845585, 1.907127946361277, -0.7468896648235677, -3.5698016106553503], [-0.9011291957315879, -1.4160256587942397, 0.8286897777194184, -1.0011263378819364, -4.078211841228444], [-0.38341834424416044, -1.6843790609024591, 1.0292486102578258, -0.713574796470939, -3.3610206029075216], [-0.47280747915711024, -1.8805385916176955, 1.101389272552442, -1.015166084527157, -3.7352909642094776], [-0.951466249130684, -1.741422403927599, 1.2371390315110624, -0.9242360011974382, -3.952280211702031], [-1.044502545758532, -1.6194220174830918, 1.2636142393062268, -0.9097478052309023, -3.868903180808484], [-0.4946851259132121, -1.8795034649438647, 1.8846566801599212, 0.13912232573418798, -3.5419254649392893], [-0.8062364117340228, -2.1384757255415594, 1.565571836522015, 0.0959780565661437, -3.733686218154679], [-1.0733330781482566, -2.030148744023999, 1.4804200639615253, -0.26327343173223106, -3.7526487972483964], [-0.7510335660711367, -1.707731142725469, 1.454378723209526, -0.22481889129796273, -3.7125068977047055], [-0.505036446856633, -1.590373723297356, 2.1834331238573137, 0.1851933097697079, -3.7810349506692638], [-0.9233824382158244, -1.975377630586216, 2.4671358666139813, -0.07037003247715176, -3.5359860373284224], [-0.8724657783581383, -1.6635375247903046, 2.0315676515600734, 0.3024870937678925, -3.978133851248303], [-0.9402805688041278, -1.639311163790266, 1.775843342411291, -0.4316713058537077, -3.5722196409696427], [-0.8932266792500628, -1.4715626171900158, 1.678662845747562, -0.3857762225710173, -3.6814489879832077], [-0.893322307772882, -1.5732961440235802, 0.38637061982951665, -0.7643103247970395, -3.8186566436374583], [-0.4605051748116307, -1.5071071929857922, 0.24579559305945525, -1.2549191551099843, -3.7068789932249198], [-1.2022195076680362, -1.8428214716597324, 0.04570444580472016, -0.6104346071458092, -3.9110587436853876], [-0.7343419190846775, -1.6871211557817893, 1.2575840313354734, -1.4098075497395894, -3.735918091235603], [-0.8325572322004596, -1.693689241514901, 1.2225334464298574, -1.3140876630960914, -3.725606512910941], [-0.7839792708177382, -1.5167033524260167, 0.7795713923056911, -0.7591608512895063, -3.7963840787750613], [-1.001259164906978, -1.8694659541439602, 0.33909789706952387, -1.1185026874522497, -3.7586669767110763], [-0.5571204388766726, -2.005115930774359, 1.7303983758457502, -0.8131927176647605, -3.675004446363903], [-1.0666550077890329, -1.6141962229801357, 1.9540803267971703, -0.9790041796621463, -3.784957056808385], [-0.767027558034076, -1.9316712753311598, 1.1671158274812667, -0.7411407987876864, -3.789957365796003], [-1.00699757576451, -1.7518542679630515, 1.5340018019641057, -1.3117025914481482, -3.9238284675948174], [-0.9012664701707663, -1.5863326622190275, 1.494569152888103, -0.1677350336849854, -3.693907224277352], [-0.9279346969730682, -2.024829238182952, 1.3347822175865216, -1.6463512699477563, -3.4722195013814297], [-0.4929349424405577, -1.7776004088897128, 1.271854234860182, -1.5020953133461543, -4.025154659969842], [-0.5414103953616083, -1.5952984098342229, 1.161403101839224, -1.5937954340959555, -3.816395428910961], [-0.7117417125392944, -1.8509849781172512, 1.3108303392625509, -1.7203272668321359, -3.3853144115421965], [-0.665183654323778, -2.0030442029744915, 1.2284479441495992, -1.5451924028665571, -3.523822787283229], [-0.7986238651387407, -1.5231644578033268, 1.682014078445627, -0.9629277975622383, -3.968510288919272], [-0.706764002299403, -1.74345121251911, 1.730898377492938, -0.7279732937149652, -3.7776187154558603], [-0.22215288799625552, -1.3224795420858473, 0.9408868530745252, -0.9387301829172626, -3.6182981757795076], [-0.5892707996226201, -1.290553937408834, 1.2370772521625515, -1.002633294614803, -3.7500240635233646], [-0.8371261021208437, -1.9717173889376496, 1.0063569077591468, -0.6433664726558905, -3.9904069776278477], [-0.6704142873883953, -1.7226193260659755, 2.140693868412911, -0.8421195437066461, -4.0140303617855055], [-0.6588011548928767, -1.9337591972928057, 0.6069897319618323, -0.12246965539630986, -4.103498143947819], [-1.3754081368040094, -1.9815069583541958, 0.5709295868887844, -0.7824505759491754, -3.6113976518739883], [-1.2200334917379607, -1.9151952599036262, 0.29343602833302623, -0.9856065240121065, -3.5027194247318145], [-1.2721006401679078, -1.8773997604736459, 0.3546205314416455, -1.060082893296624, -3.5230364336947075], [-0.6850855901674847, -1.431064247261188, 0.8535999228084868, -0.9787349063172701, -3.4035936127431463], [-0.9921328551613141, -1.7151950242794536, 1.8461524938325675, -0.8435148206652856, -3.4060383788012434], [-0.903046188314489, -1.6932104599450353, 1.9991839099029187, -0.772893046904562, -3.374062618650859], [-0.33506308030709475, -1.5074207331843374, 1.274945043621459, -1.1477797820465026, -3.5595445874893596], [-0.05530584687047606, -1.6378708339210841, 1.2535352620238864, -0.8256761809256562, -3.6142347058518154], [0.0332882283524471, -0.902502478033094, 0.8972900429192304, -0.1359626614835881, -3.5231213172089255], [0.06963376118236933, -0.9286751565736909, 1.1878099454159878, -1.350048100078835, -3.5100358133328924], [0.11412851033302082, -1.250619274142006, 1.210327329288731, -1.2031387959477247, -3.6228199327692234], [-0.9737715926456214, -2.0454046901756313, 0.9335390065084843, -1.1714687580691203, -3.5618532204402933], [-1.1620496188105711, -1.71309836902368, 1.338578238125522, -0.8859304286705643, -3.992571613994536], [-0.4849186898851998, -1.495282349095668, 1.1415393019145124, -1.3367688600929266, -3.85213328761703], [-0.7258841210607395, -2.081767112398229, 1.1915038384569576, -0.6617711361173663, -3.8329330524019856], [-1.4230234767405772, -1.7719106985076036, 1.7249296051575587, -1.6238975952998782, -3.800189994960286], [-1.0391911715752151, -1.821101396860655, 1.5789126591003655, -1.702719944283883, -3.9705872229105945], [-0.3117434842151509, -1.5571328898339862, 1.5715188871247516, -1.0567863537646613, -3.5640657828022757], [-0.39550535372947737, -1.1744277430056367, 1.6272741661052388, -1.0064459509925716, -3.599979322199043], [-1.257399022286583, -2.017040776634474, 2.1414096768277258, -1.1041897807644363, -3.8037250342245374], [0.14392683086323543, -1.0890088612913507, 1.8144396291766183, -0.7646059483061514, -3.7962220370804394], [0.4011690201799192, -1.0416411970688435, 1.7026601578619818, -0.765849228924299, -3.4847324469109036], [0.10713144164883259, -1.0023402943919235, 1.7143372952304836, -0.7026773439997587, -3.493288848689509], [-0.14463328355204053, -1.7210321726852642, 1.8403976088587066, -0.5552298411932794, -3.6072629035393393], [-1.3976050470854537, -1.7682064781978895, 1.6849784604239986, -0.5208365138375897, -3.837216790407345], [-0.376986718452722, -1.6478791914139495, 1.9112389837683192, -0.43646108689613905, -3.51764863730042], [-0.31321666163178946, -1.3709964225051179, 2.255011345416114, -0.9632641752088332, -3.8179446092497917], [-0.6643783144014594, -1.7012630094792345, 2.636555347859813, -0.8456279044498414, -3.5372544303642806], [-0.6066904184894107, -1.4494339716324869, 1.90172090073658, -0.93507926686, -3.7413135607406796], [-1.0959939070212064, -2.2785393619495715, -0.12035276333770131, -0.9864466328219407, -3.8031722980878846], [-1.2035908165752396, -1.7684888171375057, -0.3589885070772989, -1.1090558924451221, -3.472262216648815], [-1.1015050023034507, -2.252534383344595, 0.16269727359283095, -0.9760480741623402, -4.114488984246371], [-1.566565747854072, -2.2172208709694217, 0.30271714597311195, -0.9991582382386532, -3.651249154898619], [-1.1536496434756562, -2.9336728068649047, 0.28139646553935976, -0.8198574979150992, -3.892038119299092], [-0.44628628640762824, -2.2877807440582973, 0.3789987594916876, -0.3336579171047047, -3.311364860284088], [-1.5412718246305306, -2.163605507090875, 0.6483932222016446, -0.2804795008901319, -3.8652639951680134], [-1.2633594389194278, -2.160951520667273, 0.9980220058562651, -0.47664334945360076, -3.555193701362877], [-1.0717028215445037, -1.823991492154994, 1.2182118895833982, -0.509241585531573, -3.8018180382210716], [-0.8022523317667596, -1.5703864654017055, 1.138389120114293, -0.6005528721434539, -3.825030608373206], [-1.0850329449565244, -1.968398403445194, 0.8836747086431224, -1.3125451206300143, -3.7235586526063083], [-0.8260934989867522, -1.763249831678002, 0.5890933916912975, -1.0008515427346478, -3.552081663096858], [-0.9387877798489872, -1.4413455522777043, 1.3056398739352362, -0.3510804419628961, -3.763541100727496], [-0.8741676253562835, -2.0238954558771205, 0.8381372298742973, -1.25547182539403, -3.816335459090245], [-1.0749605977955345, -1.9346545636913974, 0.7556174336968653, -1.2971512445455997, -3.703427338015045], [-1.0229798771708052, -1.7964468446068067, 1.5471661530127752, -0.9125644681777695, -3.920473847684706], [-1.0485693106778735, -1.640351183886919, 1.591845268977899, -0.9149683307303548, -3.9158612543414266], [-0.8466992679417156, -1.920791970330837, 1.3982486675288317, -1.367282698188799, -3.704255828644964], [-0.7102388398829874, -1.7920907344277006, 1.3711241272313608, -0.8847668190349153, -3.6761668356769035], [-0.84818013196827, -1.5529786784512019, 0.7261413122631828, -0.8341228236448847, -3.90845044654069], [-1.206969447217885, -1.9624923048689589, 0.7048159258773949, -0.7998833925438279, -3.6783305067751635], [-0.5486791231840868, -1.4462037072231746, 0.24206214284163868, -0.6280021329747317, -3.6897629469167317], [-0.13292111373909787, -0.916232631117055, 1.1156404039441385, -1.8239150589063857, -3.6895490093769814], [-0.2563349398718951, -0.8717909054355246, 0.9618111928884909, -1.8731817825948256, -3.6288137502837645], [-0.04141721610346755, -0.993568753647595, 0.9733872176959386, -1.6529170777704822, -3.7515581977030408], [0.4136593850944153, -0.4065157535153597, 0.3823314585530021, -2.0051044991563014, -3.3059489303717275], [0.8759943195793595, -0.56217716874674, -1.139114441051494, -1.357092110769747, -4.072723259731514], [1.358937664940305, -0.5355058418817975, 0.23288345228581608, -1.8138475677416006, -3.569062572747389], [1.6755234170245221, -0.5594557932072352, -0.143008109836182, -1.7507891555459618, -3.384461620678266], [0.9899705486804483, -0.7148960189003147, -1.1180395247587112, -1.4629234338050587, -4.111982254310767], [0.7571841910196667, -1.3144036980115432, -0.49914635703182897, -1.8165802221479943, -3.484264246731591], [1.1342667466344962, -0.9750908187732484, -0.6857604886131684, -1.1490025329426299, -4.203376540306285], [1.2540394032495563, -0.9540108816872718, -0.8566803994367957, -1.0909710819658676, -3.658964161428984], [1.409546866403553, -1.0465832499200989, -0.6522394822810871, -1.5807956642090681, -3.8194501892597654], [1.1107839564926798, -0.6653773008799365, -0.38741505346885413, -1.6272412973344996, -3.7386821674164206], [0.9219901755798915, -1.1885245231743364, -0.9993127441798972, -1.6225426664360718, -3.9076939455836444], [1.6271277083099183, -0.6315211466788121, -0.7614408915075707, -1.8412590654519227, -3.8976700098174963], [1.7195102097971111, -0.7486376064094348, -0.8280817257388414, -1.7285510184657302, -3.825823464674526], [1.9165644553038221, -0.8086573541202446, -1.0354345501497697, -1.628003431315697, -3.7549468270892645], [1.7603372013483656, -0.5845908726106662, -0.7069944358903716, -1.4685213996937998, -3.7687554441774327], [0.946725563952973, -1.233096481933492, -0.9695060821959725, -1.6470579708697695, -3.7476132770783654], [1.0044869844089885, -0.9207610410540964, -0.7147340402244838, -1.549000434281706, -3.7453997601046565], [1.4590188266440753, -1.419190329324168, -1.1143931325375287, -1.8799088881008115, -3.9211919977836627], [0.17350592839475718, -0.5532015659516941, 0.7931263744444454, -1.6694672577267853, -3.7363211502020754], [0.0752539935912466, -0.9657844749740456, 0.5879700228562437, -1.683367024659859, -3.4729226848373833], [0.16179542979420014, -1.1780258441513172, 1.4136799500836121, -2.4862688331337925, -3.707651331195144], [-0.46816977247948793, -1.4291456352875898, 0.16616239105843433, -0.1626561852084909, -3.6248362984513993], [-0.4431818437421773, -2.06958448554385, 1.4638323468378218, -0.6333517227491253, -3.6135504105060945], [-0.6219879297898488, -1.9399414104661887, 1.6385872351372504, -0.748550112697588, -3.369887511198361], [0.12012639641721858, -0.721230719132737, -0.2555799198349819, -1.4590879948505338, -3.8114700378677173], [0.11838768342247652, -0.6642261996460075, -0.4529173262366869, -1.3186304449836284, -3.7164324619907005], [1.0942892923456577, -0.5516257659142882, -1.3165658159435372, -1.6596971235404474, -3.7349101012703354], [0.2901525609835238, -1.3163160733966044, -0.28871881323360393, -1.844246541875973, -3.4018670515584253], [0.3133327015033713, -0.6515870903873103, 0.8194401217297809, -0.8576836079149144, -3.7069181088954624], [1.2733806537808743, -0.9934975686469203, -0.4582051545094642, -1.5965195469297513, -3.540102159654868], [0.8997217628507101, -0.9001514687738398, -0.48219013520419024, -1.3653474356187005, -3.9099112250214003], [1.5732395614568004, -0.8216507669139167, -0.6863026244632464, -2.013066935352023, -3.7737039779986197], [1.8743445951938391, -0.5314969022909135, -1.3066641639454002, -1.6541767961581835, -3.8172469698314946], [1.7530804442421037, -0.847219099446694, -0.11203023110202534, -1.7341380677585505, -3.4630438459693766], [1.2106658430372121, -0.6909011321795471, -1.2724148607533046, -1.6240317463575449, -3.9753436744069752], [1.4764483916944238, -0.9629593292314721, -0.7500868789304082, -1.8612428182819634, -3.81366225752387], [1.0541201037183576, -0.6482066725099256, -0.9591295151937755, -1.6905717400468672, -4.118956923603734], [1.661747331888761, -1.0721470740533896, -0.6792686761197138, -1.8110562546975975, -3.557381217184378], [1.3286467944675566, -0.9032540853888383, -0.7387798092897042, -2.22295554842385, -3.705893083159224], [1.3928100300694477, -0.7794199065135164, -0.6271910411245839, -1.7555109870410046, -3.2615168889304904], [1.3426524748523962, -0.8904757587374532, -0.47463281808795965, -1.8861117722045855, -3.2960924523833706], [1.5343465344895884, -1.2369673844785376, -0.6719520779685082, -1.8358833958660425, -3.317423218648733], [1.5979472999727409, -1.1332633276014819, -0.818007455221784, -1.5503651052294873, -3.466662645872906], [1.2537356345482402, -0.7581911515028787, -0.9317112795011678, -1.8742079719616753, -3.7949641089061354], [0.10392453406066185, -1.1831070187434798, -0.7311500040549909, -1.8324715507907425, -3.647891164947154], [0.7232195073490698, -0.39157028601338356, -1.1798387538554014, -2.047373497213556, -4.017447429705904], [0.7617864709675176, -0.39021936082899233, -1.1057872088216096, -2.110064568946138, -3.779307998869082], [1.6643980142299752, 0.017869810754557305, -0.8997230634079509, -1.4693581015611363, -3.807016030534415], [1.4623917749916346, -0.030260252632654652, -0.7291953806684838, -1.3292820629255169, -3.9586815760347447], [1.2337293889537575, -0.06034150737994521, -0.875601615843158, -1.6578301939261713, -3.589891846330097], [0.9034515361427822, -0.6597887408135386, -0.15809000375494667, -1.8117229191907784, -3.7222403889114135], [1.4686532328590507, -0.934551644417864, -0.7437314362187895, -1.3840519287344633, -3.7380602678887866], [2.4077914503435163, -1.1680533893882656, -0.6128625621790338, -1.0887737293573603, -3.73744965600394], [2.0110870997169314, -1.4147210520401654, -0.941092222287913, -1.9559736220518138, -3.9476052091338922], [0.6931256661724479, -0.08767444249430409, -0.765283133443642, -1.3824243598109212, -3.7971975280148933], [1.2849778692551865, -0.7540481368490094, -0.7419902502011811, -1.0646956206050926, -3.933882487575428], [1.3453172570984178, -0.7877481032801463, -0.620444083445902, -1.1656024644650436, -3.7313996037021293], [1.6105138784688948, -0.7866482247631027, -0.3979336632752578, -1.3871834461706283, -3.818735197124021], [1.2922911686304706, -1.2549703509214816, -1.1556867929519332, -1.6328240407939414, -3.676058236695594], [0.9055038453163565, -0.3412258632189945, -0.9792080771031261, -1.7572805822193402, -4.035380664980224], [1.4724550210653058, -0.575994738987252, -0.8245678801696948, -1.4220091298354653, -3.521262362851144], [1.4060538011698873, -0.3250400275712211, -0.7955104059435937, -1.6930070833190698, -4.0732434595227005], [2.548897709352304, -1.3766710993928957, -0.8490089766917062, -1.4283159835923034, -3.958431707515825], [2.6520065516634204, -0.46597582451024777, -0.8213101322308528, -1.7102536870020526, -3.5852697048084927], [1.713695994577411, -0.8615843185961091, -0.962643581506966, -1.6875050297986964, -3.9347439833187643], [1.176155259642284, -1.3716683541024264, -0.7688715856705531, -1.5712611319454024, -3.680082520597854], [0.9425392299210926, -1.160795034827387, -0.657544152114558, -1.0292714536416046, -3.914738677433664], [1.5635318291938047, -0.7013487620621772, -1.0828924892974987, -2.5502628383132824, -3.524416810574228], [1.6251356827668944, -1.0264014263820205, -1.157286416232021, -1.351542822313239, -3.9060683617675576], [1.6292441981520593, -0.9724569315247629, -1.2048811939616328, -1.2366128671966827, -3.900051793301342], [0.9758077204697305, -1.1684811324577666, 0.3435049538205038, -2.1990087568654704, -3.383441364678531], [1.2638110934411144, -1.193974877574315, -0.7732634484652434, -1.15735476492677, -3.5775106761736857], [1.1383205426544316, -1.079723770993068, -0.7152663490963654, -1.1931580004218942, -3.46598833939359], [0.3998076429387305, -0.8906764620330482, -0.47954261339197757, -1.965658571479297, -3.3233936865324862], [0.38563469211141255, -0.9985327098530159, -0.5414534660142785, -1.8400756812746615, -3.2793183554205094], [1.5280247412754793, -0.8899525856787448, -0.9650161439033152, -1.4070083827587427, -3.686186582573032], [1.3480427127561803, -0.6619406463648049, -0.5794844181080719, -1.3020836685691688, -3.644819890810587], [0.6793656173943589, -0.9203221590538939, -0.9514426088850971, -1.4403572312476578, -3.794661318209254], [0.4373498526426761, -0.3319105730879479, -0.8316914879726354, -2.0659533905908543, -3.826553696676637], [0.5147440250807884, -0.2968233834332461, -0.794223748702067, -2.174829721396899, -3.866829663248151], [0.45994075678964014, -0.3885736548553336, -0.9296131181277597, -1.1955077978045467, -3.7387375958959397], [0.5637066747246791, -0.580070847912438, -0.9358453477238262, -1.7891832626201167, -4.01212433825683], [0.9864998874765474, -0.5277252834109927, -0.8582861921204266, -1.456897182192997, -3.534286714481691], [1.1910198297329524, -0.59299390143067, -1.2182019521370246, -1.313497608522933, -3.091838784940031], [1.7092688295259792, -1.0639078676061677, -0.8785396552788538, -1.6948227801862608, -3.836298501795406], [0.9177271518302235, -0.4601710292145241, -0.9100280430924134, -1.8757208900923867, -3.643792449265447], [1.1718064115874203, -0.7243171424422555, -0.8756559708134657, -1.6281793236749154, -3.8396816092777573], [1.175671684738137, -0.7136063845756376, -0.8910600245200684, -1.6546745170872599, -3.787065483615065], [1.0050439104014337, -0.5222163794344871, -0.6136867449139236, -1.5606236736975794, -3.713075728857635], [0.7037771860519779, -0.831495806768983, -1.1139548229864, -1.806263006586616, -3.8552449076705684]], NamedTuple[(n_steps = 1, is_accept = true, acceptance_rate = 6.49734104555432e-148, log_density = -14.96081011968733, hamiltonian_energy = 17.791007624877444, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 338.9112007398238, tree_depth = 1, numerical_error = false, step_size = 0.4, nom_step_size = 0.4, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -14.96081011968733, hamiltonian_energy = 18.176350236867385, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 4.809742911224424e10, tree_depth = 0, numerical_error = true, step_size = 0.9340259163636535, nom_step_size = 0.9340259163636535, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.9353972348454963, log_density = 14.581025266990803, hamiltonian_energy = 16.720034513243533, hamiltonian_energy_error = -2.183299022792312, max_hamiltonian_energy_error = -2.7338724269901107, tree_depth = 3, numerical_error = false, step_size = 0.09209433883419865, nom_step_size = 0.09209433883419865, is_adapt = true), (n_steps = 23, is_accept = true, acceptance_rate = 0.9867964920633072, log_density = 13.764492747636421, hamiltonian_energy = -9.597896651663493, hamiltonian_energy_error = 0.04342664664405582, max_hamiltonian_energy_error = -0.14592512625746323, tree_depth = 4, numerical_error = false, step_size = 0.08074791152715202, nom_step_size = 0.08074791152715202, is_adapt = true), (n_steps = 23, is_accept = true, acceptance_rate = 0.9902399949058652, log_density = 15.915214891411614, hamiltonian_energy = -11.739439805169397, hamiltonian_energy_error = -0.16094934105473335, max_hamiltonian_energy_error = -0.22328877724611296, tree_depth = 4, numerical_error = false, step_size = 0.10387357909856232, nom_step_size = 0.10387357909856232, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.793437100267642, hamiltonian_energy = -14.788779295458394, hamiltonian_energy_error = -0.017868672474545377, max_hamiltonian_energy_error = -0.29967494072288936, tree_depth = 4, numerical_error = false, step_size = 0.15626502896342204, nom_step_size = 0.15626502896342204, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.09811821050814498, log_density = 16.33351607974955, hamiltonian_energy = -10.263410023021764, hamiltonian_energy_error = 0.3778483926016296, max_hamiltonian_energy_error = 34.375991288388704, tree_depth = 2, numerical_error = false, step_size = 0.2641306909241239, nom_step_size = 0.2641306909241239, is_adapt = true), (n_steps = 63, is_accept = true, acceptance_rate = 0.9983122606895993, log_density = 16.08258656390526, hamiltonian_energy = -15.364200407199906, hamiltonian_energy_error = 0.0007078370480524399, max_hamiltonian_energy_error = 0.004030801656220717, tree_depth = 6, numerical_error = false, step_size = 0.028407589218813464, nom_step_size = 0.028407589218813464, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9964952570159864, log_density = 16.628777061682353, hamiltonian_energy = -14.428819016820905, hamiltonian_energy_error = -0.0007935956684494982, max_hamiltonian_energy_error = 0.013240838101191699, tree_depth = 5, numerical_error = false, step_size = 0.05050799213105967, nom_step_size = 0.05050799213105967, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9985719912806683, log_density = 15.006631568686231, hamiltonian_energy = -14.499347762717905, hamiltonian_energy_error = 0.010046357109215975, max_hamiltonian_energy_error = -0.06658725542524735, tree_depth = 3, numerical_error = false, step_size = 0.09197350394108852, nom_step_size = 0.09197350394108852, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.9513115518006546, log_density = 17.316235283372613, hamiltonian_energy = -14.339151654444295, hamiltonian_energy_error = 0.016814525687893322, max_hamiltonian_energy_error = -0.23664958082455456, tree_depth = 2, numerical_error = false, step_size = 0.17143501764750305, nom_step_size = 0.17143501764750305, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.6930058390890712, log_density = 15.857483894896623, hamiltonian_energy = -14.910329028636855, hamiltonian_energy_error = -1.094412496950378, max_hamiltonian_energy_error = 1.716089002694451, tree_depth = 3, numerical_error = false, step_size = 0.27747307360041706, nom_step_size = 0.27747307360041706, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9935853740611383, log_density = 14.504018771237577, hamiltonian_energy = -11.229743641247884, hamiltonian_energy_error = -0.24348102750493616, max_hamiltonian_energy_error = -0.3731930753349211, tree_depth = 3, numerical_error = false, step_size = 0.19969890747313207, nom_step_size = 0.19969890747313207, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.3354848162558495, log_density = 14.795073419715003, hamiltonian_energy = -12.058000907806788, hamiltonian_energy_error = -0.003641635975803581, max_hamiltonian_energy_error = 26.136212124156977, tree_depth = 2, numerical_error = false, step_size = 0.3712966183196639, nom_step_size = 0.3712966183196639, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.8806046353659669, log_density = 13.530842976100558, hamiltonian_energy = -11.157600893235522, hamiltonian_energy_error = 0.17572669667661422, max_hamiltonian_energy_error = 0.24480231823808296, tree_depth = 3, numerical_error = false, step_size = 0.08838231392235343, nom_step_size = 0.08838231392235343, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9890047075932193, log_density = 14.426024542358531, hamiltonian_energy = -10.778703767887553, hamiltonian_energy_error = -0.19306742214162043, max_hamiltonian_energy_error = -0.1986505456122618, tree_depth = 3, numerical_error = false, step_size = 0.1162165798070524, nom_step_size = 0.1162165798070524, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.2592469019156152, log_density = 14.426024542358531, hamiltonian_energy = -11.970194356919059, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 2.386851150169017, tree_depth = 3, numerical_error = false, step_size = 0.21304886102181603, nom_step_size = 0.21304886102181603, is_adapt = true), (n_steps = 63, is_accept = true, acceptance_rate = 0.9968677291380761, log_density = 13.870164598846623, hamiltonian_energy = -11.780404124754966, hamiltonian_energy_error = -0.0010249230506556017, max_hamiltonian_energy_error = -0.038575298894949483, tree_depth = 6, numerical_error = false, step_size = 0.04174924529603863, nom_step_size = 0.04174924529603863, is_adapt = true), (n_steps = 23, is_accept = true, acceptance_rate = 0.947994817606409, log_density = 14.672293877497244, hamiltonian_energy = -7.026717756178588, hamiltonian_energy_error = -0.08920207128371249, max_hamiltonian_energy_error = 0.19836527222403522, tree_depth = 4, numerical_error = false, step_size = 0.0785453675487287, nom_step_size = 0.0785453675487287, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9975669393834852, log_density = 16.408583140691192, hamiltonian_energy = -13.808095525202642, hamiltonian_energy_error = -0.029509985592422794, max_hamiltonian_energy_error = -0.09524000687929046, tree_depth = 4, numerical_error = false, step_size = 0.12648347522149783, nom_step_size = 0.12648347522149783, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.947804282471612, log_density = 16.07047934039283, hamiltonian_energy = -14.934744541974615, hamiltonian_energy_error = 0.0022066961823785647, max_hamiltonian_energy_error = 0.1526465922271285, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9750586920693957, log_density = 15.043170389618332, hamiltonian_energy = -14.60301216886834, hamiltonian_energy_error = 0.024376291721525334, max_hamiltonian_energy_error = 0.05617768355802255, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9968903164854935, log_density = 13.502187154353361, hamiltonian_energy = -12.012320117807912, hamiltonian_energy_error = 0.021215858457305004, max_hamiltonian_energy_error = -0.08231369103953945, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9843565450369379, log_density = 15.310170108236559, hamiltonian_energy = -11.836131735286465, hamiltonian_energy_error = -0.036787108774774424, max_hamiltonian_energy_error = -0.1733696058670855, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9692642519656071, log_density = 15.672135530152598, hamiltonian_energy = -13.875074208249874, hamiltonian_energy_error = 0.0009291694836104369, max_hamiltonian_energy_error = 0.1637471820093115, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9764952288460258, log_density = 16.301157519910383, hamiltonian_energy = -12.808156862688811, hamiltonian_energy_error = -0.02914854599677419, max_hamiltonian_energy_error = 0.10279682507179544, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.897593808027265, log_density = 17.04940818998257, hamiltonian_energy = -13.528719853519585, hamiltonian_energy_error = 0.2287744369499496, max_hamiltonian_energy_error = -0.24035450097931488, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9927947488907374, log_density = 16.37288530120228, hamiltonian_energy = -14.875895925238517, hamiltonian_energy_error = -0.04270967829700467, max_hamiltonian_energy_error = -0.23186021977768512, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9897114767484237, log_density = 15.927283221108944, hamiltonian_energy = -14.9317540410523, hamiltonian_energy_error = 0.018315166840258357, max_hamiltonian_energy_error = -0.1280514677377358, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9953058105912971, log_density = 14.576318740298996, hamiltonian_energy = -13.749593970118609, hamiltonian_energy_error = 0.026032631297487896, max_hamiltonian_energy_error = -0.08096948856068131, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9913508465432174, log_density = 16.680455370251572, hamiltonian_energy = -13.88605982248897, hamiltonian_energy_error = -0.09542056334547944, max_hamiltonian_energy_error = -0.09542056334547944, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9725987642601575, log_density = 17.594321789479004, hamiltonian_energy = -15.8909472258895, hamiltonian_energy_error = -0.00843997723576706, max_hamiltonian_energy_error = 0.09327855711365807, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9087550312395136, log_density = 18.65456557473001, hamiltonian_energy = -15.98338284794333, hamiltonian_energy_error = -0.06466585771496369, max_hamiltonian_energy_error = 0.23353459500104812, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7598860198969892, log_density = 14.33998922367718, hamiltonian_energy = -12.056764343496312, hamiltonian_energy_error = -0.14310138715429588, max_hamiltonian_energy_error = 0.7392885481457707, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7807127484207743, log_density = 15.870951621218307, hamiltonian_energy = -11.795753180421984, hamiltonian_energy_error = 0.303179055388787, max_hamiltonian_energy_error = 0.46027392672597855, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.985217914067685, log_density = 16.224877480048946, hamiltonian_energy = -14.182325225634552, hamiltonian_energy_error = -0.06528692561197325, max_hamiltonian_energy_error = -0.2979296386635042, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9408921164271534, log_density = 15.626739457966327, hamiltonian_energy = -12.300196357632284, hamiltonian_energy_error = -0.0012528219260339313, max_hamiltonian_energy_error = 0.20092244268501958, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.990281703786525, hamiltonian_energy = -14.502434877860278, hamiltonian_energy_error = -0.1279484904727788, max_hamiltonian_energy_error = -0.1362042156805412, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8457036311118223, log_density = 13.950262739990599, hamiltonian_energy = -11.256326286867022, hamiltonian_energy_error = 0.3213186847575056, max_hamiltonian_energy_error = 0.3239112979695573, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.911124231854169, hamiltonian_energy = -14.019945161311547, hamiltonian_energy_error = -0.1981632612339581, max_hamiltonian_energy_error = -0.3881192390535091, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.978327606689997, log_density = 15.263401273496353, hamiltonian_energy = -12.892578070843268, hamiltonian_energy_error = -0.05548443611049336, max_hamiltonian_energy_error = -0.11125817692529338, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9516586431234074, log_density = 15.410453512364434, hamiltonian_energy = -12.407698686330962, hamiltonian_energy_error = -0.22333611061417358, max_hamiltonian_energy_error = 0.2768602692094415, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6979272538569568, log_density = 18.04283340245715, hamiltonian_energy = -12.218599903175559, hamiltonian_energy_error = -0.0004199992799378549, max_hamiltonian_energy_error = 0.5330083835917101, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9691027507904764, log_density = 17.765679374782664, hamiltonian_energy = -16.30167978600889, hamiltonian_energy_error = -0.012917430381801154, max_hamiltonian_energy_error = 0.06760545035148269, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9679167186789167, log_density = 17.941768400648265, hamiltonian_energy = -15.693005173418381, hamiltonian_energy_error = -0.016344257038056753, max_hamiltonian_energy_error = 0.08220033063137322, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9260252237086003, log_density = 17.092306786023943, hamiltonian_energy = -14.882497646550338, hamiltonian_energy_error = 0.03806582751875354, max_hamiltonian_energy_error = 0.13982569539971834, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7820950658125013, log_density = 15.274997475571379, hamiltonian_energy = -13.447509280324434, hamiltonian_energy_error = 0.3045777948395685, max_hamiltonian_energy_error = 0.45798348658686727, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9917064713560519, log_density = 14.77024355688173, hamiltonian_energy = -12.654963441123877, hamiltonian_energy_error = -0.0668103119752157, max_hamiltonian_energy_error = -0.29764811332088215, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9903739791488094, log_density = 16.04673333372215, hamiltonian_energy = -12.869060036156245, hamiltonian_energy_error = 0.050230801177887585, max_hamiltonian_energy_error = -0.3511944260549722, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9919055920545551, log_density = 16.098488714996193, hamiltonian_energy = -14.058396646474078, hamiltonian_energy_error = -0.14356821503883488, max_hamiltonian_energy_error = -0.16141408779427735, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9881200618612401, log_density = 16.896246433794314, hamiltonian_energy = -15.139129494771288, hamiltonian_energy_error = 0.02329980465432513, max_hamiltonian_energy_error = 0.041182063184557194, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9248689157999064, log_density = 14.752716374652852, hamiltonian_energy = -13.182052882735656, hamiltonian_energy_error = 0.12594392827717726, max_hamiltonian_energy_error = 0.21277306037451638, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9970578620347287, log_density = 15.996911089695, hamiltonian_energy = -13.868296568702654, hamiltonian_energy_error = 0.014278470774506502, max_hamiltonian_energy_error = -0.18987876791327807, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9987909360551159, log_density = 17.313588634329673, hamiltonian_energy = -15.374581751555194, hamiltonian_energy_error = -0.1184463590738769, max_hamiltonian_energy_error = -0.20569799602461813, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.99443254470039, log_density = 17.62585266344155, hamiltonian_energy = -14.390517883318417, hamiltonian_energy_error = -0.04923111949371517, max_hamiltonian_energy_error = -0.11170298689947522, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9249707899698497, log_density = 15.274926397183144, hamiltonian_energy = -13.868197999549833, hamiltonian_energy_error = 0.13525674132528032, max_hamiltonian_energy_error = 0.16342145198290758, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8913090138666637, log_density = 13.798189025118326, hamiltonian_energy = -11.453144816634993, hamiltonian_energy_error = 0.21597103040604715, max_hamiltonian_energy_error = 0.391756298624367, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 17.868247860395186, hamiltonian_energy = -12.859229040022385, hamiltonian_energy_error = -0.23164132327072906, max_hamiltonian_energy_error = -0.29474366553917797, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8949646445830942, log_density = 17.16158295358744, hamiltonian_energy = -16.37080656128419, hamiltonian_energy_error = 0.15146588851754217, max_hamiltonian_energy_error = 0.19183054228482277, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9263330113593867, log_density = 17.298635738950235, hamiltonian_energy = -15.772864945004082, hamiltonian_energy_error = -0.027432502261184766, max_hamiltonian_energy_error = -0.2941201376431639, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9837868636904208, log_density = 18.06543842826045, hamiltonian_energy = -16.9564768304315, hamiltonian_energy_error = -0.1356961599378188, max_hamiltonian_energy_error = -0.19266805994693215, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9923845085865715, log_density = 17.751527208461944, hamiltonian_energy = -17.179554430284202, hamiltonian_energy_error = -0.005990876821915236, max_hamiltonian_energy_error = -0.09805389167245337, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9958855326540134, log_density = 18.15636196674341, hamiltonian_energy = -17.327140348620745, hamiltonian_energy_error = -0.07481864172852326, max_hamiltonian_energy_error = -0.12002935523922176, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9011049230644786, log_density = 16.669383349748415, hamiltonian_energy = -15.71160244035631, hamiltonian_energy_error = 0.13949331655941144, max_hamiltonian_energy_error = 0.16529420584754817, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9132521515038879, log_density = 14.982208600135923, hamiltonian_energy = -12.343127186954462, hamiltonian_energy_error = 0.08132859087059252, max_hamiltonian_energy_error = 0.1739341368686098, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9695517572980851, log_density = 14.570212172205748, hamiltonian_energy = -14.24635345118226, hamiltonian_energy_error = 0.03266779521077012, max_hamiltonian_energy_error = 0.06102976353504275, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8834683303353905, log_density = 13.64871934731538, hamiltonian_energy = -12.603307299387463, hamiltonian_energy_error = 0.1982892000315264, max_hamiltonian_energy_error = 0.26263966195475597, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9629125196372826, log_density = 16.573085102969145, hamiltonian_energy = -11.221339683357067, hamiltonian_energy_error = -0.2328241637855939, max_hamiltonian_energy_error = -0.2328241637855939, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9034009539541081, log_density = 14.894503247903359, hamiltonian_energy = -12.96434628372, hamiltonian_energy_error = 0.07268934821522777, max_hamiltonian_energy_error = 0.18173368918799504, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9007459177342049, log_density = 13.689256218207198, hamiltonian_energy = -10.21759274300501, hamiltonian_energy_error = 0.1445812821166399, max_hamiltonian_energy_error = 0.3136348955429362, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9867863497451489, log_density = 13.760624611573647, hamiltonian_energy = -11.6147185536416, hamiltonian_energy_error = 0.07705268015677191, max_hamiltonian_energy_error = -0.11289005787754824, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9596114689332815, log_density = 15.769826601795641, hamiltonian_energy = -11.529521439431416, hamiltonian_energy_error = 0.07310073928831784, max_hamiltonian_energy_error = -0.2802364107723605, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8799423981571954, log_density = 12.469650887651273, hamiltonian_energy = -11.011059662903692, hamiltonian_energy_error = 0.31422030210090135, max_hamiltonian_energy_error = 0.46858936441075727, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9009030241591253, log_density = 13.201365741724867, hamiltonian_energy = -9.849182685995082, hamiltonian_energy_error = 0.07314620839669672, max_hamiltonian_energy_error = -0.6067611917866245, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9869261451053377, log_density = 14.95980695723355, hamiltonian_energy = -11.335337472740667, hamiltonian_energy_error = -0.2858551933433109, max_hamiltonian_energy_error = -0.5089816061987928, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9976379674051865, log_density = 15.359316346926079, hamiltonian_energy = -13.663812375285547, hamiltonian_energy_error = -0.010442275361622677, max_hamiltonian_energy_error = -0.19199709625327976, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9821447960033152, log_density = 15.158542028587064, hamiltonian_energy = -13.8909296017805, hamiltonian_energy_error = -0.14724621676595362, max_hamiltonian_energy_error = -0.14724621676595362, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8863884061175629, log_density = 14.005089732994657, hamiltonian_energy = -13.663769897682307, hamiltonian_energy_error = 0.16349739803293417, max_hamiltonian_energy_error = 0.16349739803293417, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6573457606021936, log_density = 10.435645432349961, hamiltonian_energy = -9.551872611813996, hamiltonian_energy_error = 0.5232602884744733, max_hamiltonian_energy_error = 0.9935259751167536, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7689575169296464, log_density = 5.814747744689671, hamiltonian_energy = -3.176791330690827, hamiltonian_energy_error = 0.29261287549434156, max_hamiltonian_energy_error = 0.5788162285282432, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9966168035772082, log_density = 11.846207008642878, hamiltonian_energy = -4.586635496160952, hamiltonian_energy_error = -0.3450771564971671, max_hamiltonian_energy_error = -0.7146081576441858, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 13.039283331343476, hamiltonian_energy = -11.597741600460267, hamiltonian_energy_error = -0.23287675246683648, max_hamiltonian_energy_error = -0.23287675246683648, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9988509204479722, log_density = 14.68410338936383, hamiltonian_energy = -12.20707500546759, hamiltonian_energy_error = -0.0176796366448162, max_hamiltonian_energy_error = -0.2207175248590385, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9946189081096932, log_density = 17.846513754821395, hamiltonian_energy = -14.069901861952339, hamiltonian_energy_error = -0.08116460346063548, max_hamiltonian_energy_error = -0.11838223821836635, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8615481487451057, log_density = 11.961653954826375, hamiltonian_energy = -10.11504205222004, hamiltonian_energy_error = 0.06889324232688665, max_hamiltonian_energy_error = 0.31409901701363196, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9952799337051614, log_density = 16.83152678797516, hamiltonian_energy = -11.371057717628858, hamiltonian_energy_error = -0.09470890639133067, max_hamiltonian_energy_error = -0.2500935174412948, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9751618679526378, log_density = 15.444462014345547, hamiltonian_energy = -14.766369370699993, hamiltonian_energy_error = 0.02838184532729393, max_hamiltonian_energy_error = 0.055833900820697835, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9397848257995071, log_density = 13.962825394461191, hamiltonian_energy = -12.973405981280738, hamiltonian_energy_error = 0.06978174911767532, max_hamiltonian_energy_error = 0.1067385677579864, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9394199436657207, log_density = 14.611652193595376, hamiltonian_energy = -10.62034363183583, hamiltonian_energy_error = -0.0024040618307328288, max_hamiltonian_energy_error = 0.19679012795622874, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9302905140600234, log_density = 17.136370283320716, hamiltonian_energy = -13.033637575530737, hamiltonian_energy_error = -0.05247824911325871, max_hamiltonian_energy_error = 0.21250331204876183, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9183019036616545, log_density = 15.996367843968686, hamiltonian_energy = -14.706682136047712, hamiltonian_energy_error = 0.1453072196029943, max_hamiltonian_energy_error = 0.21198799882208164, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9693027392945733, log_density = 16.218650032883556, hamiltonian_energy = -15.058708954404622, hamiltonian_energy_error = -0.10094990901868428, max_hamiltonian_energy_error = -0.10886150590452459, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9941139949804955, log_density = 17.167321851497693, hamiltonian_energy = -13.672560948446266, hamiltonian_energy_error = -0.095254913739101, max_hamiltonian_energy_error = -0.15651369791185665, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9207246997259778, log_density = 14.419910187432396, hamiltonian_energy = -13.843936613135535, hamiltonian_energy_error = 0.22865132512388797, max_hamiltonian_energy_error = 0.22865132512388797, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.92286292900346, hamiltonian_energy = -12.668060259273092, hamiltonian_energy_error = -0.22025279752164373, max_hamiltonian_energy_error = -0.24064906104477046, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9912959042434848, log_density = 17.934296458327136, hamiltonian_energy = -12.935588064876129, hamiltonian_energy_error = -0.10273398978872628, max_hamiltonian_energy_error = -0.10273398978872628, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9770924700405522, log_density = 17.837101337700354, hamiltonian_energy = -16.8484355842809, hamiltonian_energy_error = 0.04397061441973804, max_hamiltonian_energy_error = 0.04661027788904093, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9787206551466483, log_density = 16.829353182178863, hamiltonian_energy = -15.051404396953506, hamiltonian_energy_error = -0.0013313249074524691, max_hamiltonian_energy_error = 0.038455042261444916, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9747800988104517, log_density = 16.81105006758211, hamiltonian_energy = -15.97929696014223, hamiltonian_energy_error = 0.04257675078113898, max_hamiltonian_energy_error = 0.05199725661562127, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8471040889266206, log_density = 14.529916025351234, hamiltonian_energy = -14.108985119951898, hamiltonian_energy_error = 0.20113989165682788, max_hamiltonian_energy_error = 0.20113989165682788, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9521253113717909, log_density = 16.57216567065067, hamiltonian_energy = -12.931720518181827, hamiltonian_energy_error = -0.010220448548553307, max_hamiltonian_energy_error = 0.1627934690480508, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.984790519454306, log_density = 14.8509177995469, hamiltonian_energy = -12.346058860365781, hamiltonian_energy_error = 0.010391641320788736, max_hamiltonian_energy_error = -0.13394801635891618, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9351526401871654, log_density = 17.11541579748249, hamiltonian_energy = -13.42547956815758, hamiltonian_energy_error = 0.026340701274811806, max_hamiltonian_energy_error = 0.1773279630290272, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7069690809314452, log_density = 15.353763200252605, hamiltonian_energy = -11.93029184317892, hamiltonian_energy_error = 0.4643252620622178, max_hamiltonian_energy_error = 0.7688544517187061, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8548297198209446, log_density = 13.451003514311356, hamiltonian_energy = -9.885905379890422, hamiltonian_energy_error = 0.2310214735663383, max_hamiltonian_energy_error = 0.44607954848728326, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9411564996893025, log_density = 15.112995070534298, hamiltonian_energy = -11.393584993156946, hamiltonian_energy_error = 0.008278532006331218, max_hamiltonian_energy_error = -0.46009021343986767, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.021870104068523, hamiltonian_energy = -9.621001749577328, hamiltonian_energy_error = -0.9078825717463186, max_hamiltonian_energy_error = -0.9078825717463186, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9704873472674634, log_density = 17.625275224493528, hamiltonian_energy = -14.02322680734843, hamiltonian_energy_error = -0.3839613898865988, max_hamiltonian_energy_error = -0.3839613898865988, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.72154352526168, log_density = 17.137084535851947, hamiltonian_energy = -14.801954321869655, hamiltonian_energy_error = 0.3049296565330444, max_hamiltonian_energy_error = 0.4123445123576932, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9935006561832807, log_density = 16.843698452409384, hamiltonian_energy = -16.188867562487673, hamiltonian_energy_error = 0.04605742397118462, max_hamiltonian_energy_error = -0.13656322701391588, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9217358496977047, log_density = 16.38874111770984, hamiltonian_energy = -14.025233341295065, hamiltonian_energy_error = 0.08921853921808243, max_hamiltonian_energy_error = 0.20020228572011156, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9716254903580454, log_density = 15.748055325818303, hamiltonian_energy = -13.327128504078306, hamiltonian_energy_error = 0.005169040025970517, max_hamiltonian_energy_error = -0.18896655943950513, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 17.06755032939769, hamiltonian_energy = -15.187101975112263, hamiltonian_energy_error = -0.08562502361549029, max_hamiltonian_energy_error = -0.1469769784804278, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9575019145389835, log_density = 16.637746564133856, hamiltonian_energy = -14.506480860673548, hamiltonian_energy_error = -0.011508372221058494, max_hamiltonian_energy_error = 0.1323486400743441, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9873010911306968, log_density = 17.8197587770046, hamiltonian_energy = -16.140126160576585, hamiltonian_energy_error = -0.02322340943247525, max_hamiltonian_energy_error = 0.07659626947225817, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9083176925329788, log_density = 15.046498780029584, hamiltonian_energy = -13.105823374684991, hamiltonian_energy_error = 0.0845807734790327, max_hamiltonian_energy_error = 0.15794039307621333, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7265665127636967, log_density = 14.442646299233095, hamiltonian_energy = -7.646018282265371, hamiltonian_energy_error = 0.19114608968919367, max_hamiltonian_energy_error = 0.7450872644331579, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9986149571781884, log_density = 17.14180042283736, hamiltonian_energy = -13.162281468847414, hamiltonian_energy_error = -0.32286642507085794, max_hamiltonian_energy_error = -0.4795969368529658, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9837975986148741, log_density = 15.578004593139443, hamiltonian_energy = -14.589615976991402, hamiltonian_energy_error = 0.0327525166820557, max_hamiltonian_energy_error = 0.04011814561163973, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9409384207262156, log_density = 12.008524746143017, hamiltonian_energy = -10.174472059055594, hamiltonian_energy_error = 0.14080300558964431, max_hamiltonian_energy_error = 0.3413437857913948, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.991933297473429, log_density = 17.283815493747575, hamiltonian_energy = -9.845034983697339, hamiltonian_energy_error = -0.23021679597045797, max_hamiltonian_energy_error = -0.23021679597045797, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9349919439528088, log_density = 14.574702811141007, hamiltonian_energy = -12.73969856867309, hamiltonian_energy_error = 0.15007228980372567, max_hamiltonian_energy_error = 0.1991689737971658, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7587588040815673, log_density = 16.538714319726594, hamiltonian_energy = -12.669823492301004, hamiltonian_energy_error = 0.11273322718339962, max_hamiltonian_energy_error = 0.48955589110341435, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9918569420023161, log_density = 16.376216739940773, hamiltonian_energy = -15.7345033725919, hamiltonian_energy_error = 0.005032675033358913, max_hamiltonian_energy_error = -0.1681506238877457, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8421527681624823, log_density = 13.123043615459258, hamiltonian_energy = -12.288127445211117, hamiltonian_energy_error = 0.48344837970800114, max_hamiltonian_energy_error = 0.48344837970800114, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9971194939811999, log_density = 14.802846239208183, hamiltonian_energy = -10.619806923449627, hamiltonian_energy_error = -0.35462075614250743, max_hamiltonian_energy_error = -0.5271504632297876, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9837299753827697, log_density = 16.539659225802886, hamiltonian_energy = -12.444884347578597, hamiltonian_energy_error = -0.07775645577169499, max_hamiltonian_energy_error = -0.17193426244755017, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9312811321363796, log_density = 16.13969513045433, hamiltonian_energy = -12.578253086567246, hamiltonian_energy_error = 0.1599558360624851, max_hamiltonian_energy_error = -0.3398744291413536, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9037778633669404, log_density = 14.080132147141224, hamiltonian_energy = -12.021150261738297, hamiltonian_energy_error = 0.2583482546794773, max_hamiltonian_energy_error = 0.2583482546794773, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9978966910511414, log_density = 14.699560619768883, hamiltonian_energy = -8.842005128028404, hamiltonian_energy_error = -0.09568995348536191, max_hamiltonian_energy_error = -0.6209383974279312, tree_depth = 5, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9876330780684138, log_density = 15.1586690761884, hamiltonian_energy = -13.496821849337877, hamiltonian_energy_error = 0.032236257977292126, max_hamiltonian_energy_error = -0.28738308227581655, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9345011974799888, log_density = 17.684393273986835, hamiltonian_energy = -12.252917511354047, hamiltonian_energy_error = -0.4223591916595293, max_hamiltonian_energy_error = -0.4223591916595293, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9890302179763675, log_density = 17.389223285985274, hamiltonian_energy = -16.730125226401647, hamiltonian_energy_error = 0.009333317555231702, max_hamiltonian_energy_error = 0.0662637083540254, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9973610456285089, log_density = 15.560100092301159, hamiltonian_energy = -14.539106883534313, hamiltonian_energy_error = -0.015184401687712068, max_hamiltonian_energy_error = -0.19330952238607502, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8593745619726249, log_density = 14.179482678338697, hamiltonian_energy = -12.221663032969653, hamiltonian_energy_error = 0.23084711455380358, max_hamiltonian_energy_error = 0.3259952502141097, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9894876433357119, log_density = 13.715290460428777, hamiltonian_energy = -12.675747727033361, hamiltonian_energy_error = 0.029249664634450667, max_hamiltonian_energy_error = -0.4931969484694978, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 16.172519554731963, hamiltonian_energy = -13.18685360983435, hamiltonian_energy_error = -0.33992864396388, max_hamiltonian_energy_error = -0.40143402235695014, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8933839499933482, log_density = 16.073464540399954, hamiltonian_energy = -14.588379970987756, hamiltonian_energy_error = 0.16981830593230107, max_hamiltonian_energy_error = 0.32231732207496755, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9496928084854067, log_density = 18.362197873681332, hamiltonian_energy = -14.690264430255509, hamiltonian_energy_error = -0.31012468663201176, max_hamiltonian_energy_error = -0.31012468663201176, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9122763521998184, log_density = 15.547069351064163, hamiltonian_energy = -13.793408226805274, hamiltonian_energy_error = 0.15350519315451194, max_hamiltonian_energy_error = 0.15350519315451194, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9785971132372474, log_density = 15.530843809042878, hamiltonian_energy = -13.8865758298543, hamiltonian_energy_error = 0.08709718647763331, max_hamiltonian_energy_error = 0.12256320153383093, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8513753681812536, log_density = 16.776748820529964, hamiltonian_energy = -10.953274331734583, hamiltonian_energy_error = 0.02323790821991878, max_hamiltonian_energy_error = 0.42645175332236107, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.983814322689685, log_density = 17.36428122766297, hamiltonian_energy = -16.067511810785533, hamiltonian_energy_error = -0.12244343834777105, max_hamiltonian_energy_error = -0.12244343834777105, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9069374901425947, log_density = 17.435366975306025, hamiltonian_energy = -15.220713578019078, hamiltonian_energy_error = 0.12065211286228283, max_hamiltonian_energy_error = 0.20201992552806125, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9837069613231492, log_density = 17.929388549062594, hamiltonian_energy = -15.916181369079794, hamiltonian_energy_error = -0.10079541091129585, max_hamiltonian_energy_error = -0.11956497994087378, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.4337958814052391, log_density = 13.814045481930435, hamiltonian_energy = -9.5799979587383, hamiltonian_energy_error = 0.38672056065295024, max_hamiltonian_energy_error = 1.6043281860504877, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8606974499398713, log_density = 17.60927886447507, hamiltonian_energy = -10.874644627904244, hamiltonian_energy_error = -0.6451169428949317, max_hamiltonian_energy_error = -0.6451169428949317, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9899842672736929, log_density = 17.644021244150927, hamiltonian_energy = -16.779535183215692, hamiltonian_energy_error = 0.013520264195886256, max_hamiltonian_energy_error = 0.022385284880854783, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.968488026926249, log_density = 17.014626365829372, hamiltonian_energy = -14.817439374978042, hamiltonian_energy_error = 0.03524005174962852, max_hamiltonian_energy_error = 0.1325108810069331, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9550215443607212, log_density = 16.102960766796286, hamiltonian_energy = -14.159989733443494, hamiltonian_energy_error = 0.05611190027731361, max_hamiltonian_energy_error = 0.10189085944523946, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9839633449605395, log_density = 15.873959410422477, hamiltonian_energy = -14.799184656006126, hamiltonian_energy_error = -0.005708041729725721, max_hamiltonian_energy_error = 0.056790384062880506, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9785197407228287, log_density = 17.028125669699996, hamiltonian_energy = -13.14642590002165, hamiltonian_energy_error = -0.012807589810764242, max_hamiltonian_energy_error = 0.06798238367990272, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9629663454501568, log_density = 16.633162574628365, hamiltonian_energy = -15.157199550986753, hamiltonian_energy_error = -0.002290328851300316, max_hamiltonian_energy_error = -0.1871152825971638, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.939621524041896, log_density = 15.379927462394093, hamiltonian_energy = -14.842559236518719, hamiltonian_energy_error = 0.10617341646674561, max_hamiltonian_energy_error = 0.10617341646674561, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9932164562489171, log_density = 15.66905325963672, hamiltonian_energy = -13.864959990293775, hamiltonian_energy_error = -0.03875615810026467, max_hamiltonian_energy_error = 0.039235641187319814, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9269531155800691, log_density = 17.84350825864536, hamiltonian_energy = -13.122637119272436, hamiltonian_energy_error = 0.028830842181516658, max_hamiltonian_energy_error = 0.17659665976875338, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9609180640326348, log_density = 17.615645950896642, hamiltonian_energy = -16.689129586955566, hamiltonian_energy_error = 0.03168303326446775, max_hamiltonian_energy_error = 0.15279448604523793, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9902720448462982, log_density = 17.482093912085173, hamiltonian_energy = -16.67675400838914, hamiltonian_energy_error = 0.034046165725985844, max_hamiltonian_energy_error = -0.11963983021967195, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 17.767570333057133, hamiltonian_energy = -17.26003058576851, hamiltonian_energy_error = -0.0706354343988167, max_hamiltonian_energy_error = -0.17308323790960856, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.852425147451934, log_density = 15.40149825309912, hamiltonian_energy = -15.009825918913917, hamiltonian_energy_error = 0.3476868659661161, max_hamiltonian_energy_error = 0.3476868659661161, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9909118324746254, log_density = 16.453866190619863, hamiltonian_energy = -11.840586182258573, hamiltonian_energy_error = -0.3122962818629631, max_hamiltonian_energy_error = -0.412574476531379, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9822052576607689, log_density = 16.841522113857916, hamiltonian_energy = -14.8147855852038, hamiltonian_energy_error = -0.00562650048937563, max_hamiltonian_energy_error = -0.18417666698535662, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9890413393174368, log_density = 16.47342044218205, hamiltonian_energy = -14.992059989098577, hamiltonian_energy_error = 0.06372272745496943, max_hamiltonian_energy_error = -0.11736295675947161, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9984274736630162, log_density = 16.5572116365392, hamiltonian_energy = -16.13118336597375, hamiltonian_energy_error = -0.03650923001291417, max_hamiltonian_energy_error = -0.11940037156065131, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9955045076295991, log_density = 15.322971343371478, hamiltonian_energy = -14.607388027085037, hamiltonian_energy_error = 0.012682105030664914, max_hamiltonian_energy_error = -0.08342288356011451, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9921683000517884, log_density = 15.131575141603374, hamiltonian_energy = -14.086114563980576, hamiltonian_energy_error = 0.04288809116032155, max_hamiltonian_energy_error = -0.17988194475146457, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8692815441751909, log_density = 12.068122132337574, hamiltonian_energy = -9.13113496199162, hamiltonian_energy_error = 0.11922534440123833, max_hamiltonian_energy_error = 0.48992031477816766, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9946233331474271, log_density = 13.009251610935793, hamiltonian_energy = -11.475375682345136, hamiltonian_energy_error = -0.19203091853332666, max_hamiltonian_energy_error = -0.19203091853332666, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8939638054779103, log_density = 17.021124771105214, hamiltonian_energy = -10.227582332853759, hamiltonian_energy_error = -0.18372814893979061, max_hamiltonian_energy_error = 0.28144619559340356, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7547772904862381, log_density = 13.388285079498583, hamiltonian_energy = -11.038630826088792, hamiltonian_energy_error = 0.2901559894137016, max_hamiltonian_energy_error = 0.5784454129223793, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.1388783542926, hamiltonian_energy = -11.730679013535678, hamiltonian_energy_error = -0.18000595266786412, max_hamiltonian_energy_error = -0.6437151713363303, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.9727219454338075, log_density = 13.198901912532724, hamiltonian_energy = -11.211635499002572, hamiltonian_energy_error = 0.009402374720487217, max_hamiltonian_energy_error = 0.8054899738298857, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8450878883474476, log_density = 15.806330493213313, hamiltonian_energy = -10.470148289290897, hamiltonian_energy_error = -0.12230253534521829, max_hamiltonian_energy_error = -0.6262979649364642, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9963205028895806, log_density = 13.536088810455027, hamiltonian_energy = -13.169667876003835, hamiltonian_energy_error = 0.026093985822578603, max_hamiltonian_energy_error = -0.0997512047982756, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8570866769096736, log_density = 15.994352320370073, hamiltonian_energy = -10.64096719802706, hamiltonian_energy_error = -0.11971699493493837, max_hamiltonian_energy_error = 0.5364525559461892, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9075362377267187, log_density = 14.531751007607191, hamiltonian_energy = -13.551674489718078, hamiltonian_energy_error = 0.07028776366867717, max_hamiltonian_energy_error = 0.1856113251403375, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9748580611356558, log_density = 14.709340096614037, hamiltonian_energy = -10.445670346641855, hamiltonian_energy_error = -0.09970556900162997, max_hamiltonian_energy_error = -0.31341363123463317, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9805322228864071, log_density = 15.35704243326881, hamiltonian_energy = -12.371362190416836, hamiltonian_energy_error = -0.007240134648863972, max_hamiltonian_energy_error = 0.061101422812768647, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9901717963483212, log_density = 13.992701280955902, hamiltonian_energy = -12.27210471153392, hamiltonian_energy_error = 0.06283071934482898, max_hamiltonian_energy_error = -0.11601546785402483, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9710282905683996, log_density = 15.973531904532226, hamiltonian_energy = -13.427835528780502, hamiltonian_energy_error = -0.15995854343372784, max_hamiltonian_energy_error = -0.15995854343372784, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9325827325716624, log_density = 16.265535364397437, hamiltonian_energy = -14.775449043103398, hamiltonian_energy_error = 0.05219259449966884, max_hamiltonian_energy_error = 0.1321770887115825, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.999202057873274, log_density = 16.305407175921417, hamiltonian_energy = -15.876187306044965, hamiltonian_energy_error = 0.012041338707030391, max_hamiltonian_energy_error = -0.060529606710117534, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9119575581278437, log_density = 15.365860701038546, hamiltonian_energy = -14.062337953294561, hamiltonian_energy_error = 0.08207284919718028, max_hamiltonian_energy_error = 0.22449390491597754, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9985736924882301, log_density = 16.394574725185336, hamiltonian_energy = -14.016091855036233, hamiltonian_energy_error = -0.041625231631998716, max_hamiltonian_energy_error = -0.13973251332232905, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 16.808099630352515, hamiltonian_energy = -15.907750359287535, hamiltonian_energy_error = -0.015973145250844922, max_hamiltonian_energy_error = -0.13103162931169976, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8724967784875972, log_density = 17.768435160242063, hamiltonian_energy = -14.178809306107034, hamiltonian_energy_error = -0.23643271782359143, max_hamiltonian_energy_error = 0.30633877358251915, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9999270757536718, log_density = 18.143405254355237, hamiltonian_energy = -17.723886708677114, hamiltonian_energy_error = -0.03452034333758647, max_hamiltonian_energy_error = -0.042310018581819264, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8492453041060862, log_density = 17.834701373688695, hamiltonian_energy = -14.765685874737134, hamiltonian_energy_error = 0.06058835163327814, max_hamiltonian_energy_error = 0.29839784088471255, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8347183331949221, log_density = 17.80879529630502, hamiltonian_energy = -14.927678274424917, hamiltonian_energy_error = 0.008974514743528061, max_hamiltonian_energy_error = 0.39347387807481127, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9400241057493715, log_density = 17.43691127952463, hamiltonian_energy = -15.703296834971331, hamiltonian_energy_error = 0.09756154648632354, max_hamiltonian_energy_error = 0.10064143994554264, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9150693491307652, log_density = 16.66857702057698, hamiltonian_energy = -15.030992734874653, hamiltonian_energy_error = 0.16804748110141254, max_hamiltonian_energy_error = 0.1736257076876786, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 16.027084025625513, hamiltonian_energy = -14.218268091637654, hamiltonian_energy_error = -0.22264882264185637, max_hamiltonian_energy_error = -0.30455129874834697, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.077651841803789, hamiltonian_energy = -12.50695717251105, hamiltonian_energy_error = -0.11325212642111993, max_hamiltonian_energy_error = -0.3752744097817171, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.971022500112703, log_density = 15.410956536044583, hamiltonian_energy = -12.856930699995441, hamiltonian_energy_error = -0.002067321673456135, max_hamiltonian_energy_error = -0.3442999336305004, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9806246162085926, log_density = 15.750597220682724, hamiltonian_energy = -14.710728600625782, hamiltonian_energy_error = -0.13883388393481333, max_hamiltonian_energy_error = -0.22108831637632953, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9918694469253264, log_density = 14.819617538758095, hamiltonian_energy = -13.083609371370528, hamiltonian_energy_error = -0.07796647563351478, max_hamiltonian_energy_error = -0.19739222520071387, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.890922763142654, log_density = 11.97192871550709, hamiltonian_energy = -8.494932035493392, hamiltonian_energy_error = 0.17091879087283957, max_hamiltonian_energy_error = 0.2537539821549224, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9876250628189813, log_density = 12.81491952094343, hamiltonian_energy = -5.49136502348, hamiltonian_energy_error = 0.007084474245147021, max_hamiltonian_energy_error = -0.398181910023677, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9755675238766486, log_density = 16.086303865463343, hamiltonian_energy = -11.217422446122821, hamiltonian_energy_error = -0.13291288712378524, max_hamiltonian_energy_error = -0.3056068877603497, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9745180682381497, log_density = 15.013834451433905, hamiltonian_energy = -14.103662131243716, hamiltonian_energy_error = -0.10863853855727434, max_hamiltonian_energy_error = -0.11257668031697854, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9303647200839098, log_density = 16.377514188908098, hamiltonian_energy = -10.514685374877756, hamiltonian_energy_error = -0.0727550999080453, max_hamiltonian_energy_error = 0.1996648198298665, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9959413669269568, log_density = 15.08831306036905, hamiltonian_energy = -14.412722440616239, hamiltonian_energy_error = -0.0055383196702702975, max_hamiltonian_energy_error = -0.0642998220855926, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9947507238116328, log_density = 15.328933237174242, hamiltonian_energy = -14.560372517685774, hamiltonian_energy_error = 0.007477930641236696, max_hamiltonian_energy_error = -0.037093860257540356, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.901986465345211, log_density = 13.202602504387764, hamiltonian_energy = -12.013472883231046, hamiltonian_energy_error = 0.13125728300074968, max_hamiltonian_energy_error = 0.24588949780105018, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9216487290196125, log_density = 13.67801719242785, hamiltonian_energy = -10.138582716400599, hamiltonian_energy_error = 0.0959611087234542, max_hamiltonian_energy_error = -0.4141912680450126, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.98322419542629, log_density = 12.492625101142917, hamiltonian_energy = -9.483656032593746, hamiltonian_energy_error = -0.16981570051451556, max_hamiltonian_energy_error = -0.5413388527345084, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9485867374873115, log_density = 11.446509574385367, hamiltonian_energy = -9.248652335966144, hamiltonian_energy_error = 0.004392730542724266, max_hamiltonian_energy_error = -0.3146296858144506, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9524271685474159, log_density = 15.27636837173974, hamiltonian_energy = -5.170026469061133, hamiltonian_energy_error = -0.2526586905354202, max_hamiltonian_energy_error = -0.28843067959922397, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7781486222176639, log_density = 15.479142497857884, hamiltonian_energy = -9.980342864833217, hamiltonian_energy_error = 0.2851973481188086, max_hamiltonian_energy_error = 0.5008861163765541, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8673444776719385, log_density = 13.54097736226228, hamiltonian_energy = -11.68140138151977, hamiltonian_energy_error = 0.13119884005794447, max_hamiltonian_energy_error = -0.3923191777484991, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 13.25448366486706, hamiltonian_energy = -10.13828511377993, hamiltonian_energy_error = -0.48415733740320377, max_hamiltonian_energy_error = -1.0931029898500348, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9985744293602823, log_density = 14.025646257822082, hamiltonian_energy = -9.615274665613967, hamiltonian_energy_error = -0.015530458266685088, max_hamiltonian_energy_error = -0.41978643261469273, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8900209764598657, log_density = 15.080580653094575, hamiltonian_energy = -11.982761906719695, hamiltonian_energy_error = -0.05061952979075457, max_hamiltonian_energy_error = 0.2399607529050627, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9437986139348763, log_density = 15.789123751509555, hamiltonian_energy = -11.173964260059869, hamiltonian_energy_error = -0.02050706282673964, max_hamiltonian_energy_error = -0.4097107615444173, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9413341536911529, log_density = 13.228063899706884, hamiltonian_energy = -12.223019854533147, hamiltonian_energy_error = 0.10705249859844201, max_hamiltonian_energy_error = -0.16951912270149805, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.862625814075037, log_density = 14.750569593564778, hamiltonian_energy = -5.821611472556251, hamiltonian_energy_error = 0.13955172632917012, max_hamiltonian_energy_error = -0.7543243324678297, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9874156429389588, log_density = 13.83464142316913, hamiltonian_energy = -11.891509715663123, hamiltonian_energy_error = 0.018781376449716447, max_hamiltonian_energy_error = -0.30318765571998085, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9946602956117853, log_density = 14.837919412827976, hamiltonian_energy = -11.23789727786691, hamiltonian_energy_error = -0.08134689587355837, max_hamiltonian_energy_error = -0.2676578908418499, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9521146141805625, log_density = 15.054444477640539, hamiltonian_energy = -13.11239438262555, hamiltonian_energy_error = 0.1042007397357736, max_hamiltonian_energy_error = -0.32430568357168177, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9538895139896647, log_density = 13.108663502250195, hamiltonian_energy = -9.804316701509261, hamiltonian_energy_error = 0.15112558919878083, max_hamiltonian_energy_error = -0.4554542782601523, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.7448468768139332, log_density = 15.157626768458627, hamiltonian_energy = -9.46115085945707, hamiltonian_energy_error = 0.15969913281237602, max_hamiltonian_energy_error = 0.924452310425881, tree_depth = 5, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9370190535955122, log_density = 12.535414166128888, hamiltonian_energy = -10.978830144285453, hamiltonian_energy_error = 0.12081855577440948, max_hamiltonian_energy_error = -0.4068823753524775, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.982169241098133, log_density = 13.039753896946927, hamiltonian_energy = -11.012327911529386, hamiltonian_energy_error = -0.01119023452822887, max_hamiltonian_energy_error = -0.2666834255799895, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8217431920275259, log_density = 15.042917275459486, hamiltonian_energy = -10.1226014314828, hamiltonian_energy_error = 0.32623243910200195, max_hamiltonian_energy_error = 0.3916869062450292, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 14.499105554209239, hamiltonian_energy = -13.997709681328907, hamiltonian_energy_error = -0.00015269428723030387, max_hamiltonian_energy_error = -0.17481095879613306, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9965649013649337, log_density = 16.40948197026797, hamiltonian_energy = -12.487213389288492, hamiltonian_energy_error = -0.08386694908914549, max_hamiltonian_energy_error = -0.17505523630103426, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.916593320240788, log_density = 14.723175008168946, hamiltonian_energy = -13.644617161593318, hamiltonian_energy_error = 0.14343030658992717, max_hamiltonian_energy_error = 0.26672805064429106, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9989923267116693, log_density = 15.835755200304842, hamiltonian_energy = -13.69652386518225, hamiltonian_energy_error = -0.0292792467106171, max_hamiltonian_energy_error = -0.3586073127668925, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9878510218502655, log_density = 17.055134182937813, hamiltonian_energy = -15.182916343091287, hamiltonian_energy_error = -0.15581660655403873, max_hamiltonian_energy_error = -0.3177081527995256, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.5636189816014859, log_density = 12.149533102271892, hamiltonian_energy = -10.528435710707782, hamiltonian_energy_error = 0.9550720202058933, max_hamiltonian_energy_error = 0.9550720202058933, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 1.0, log_density = 14.409974818810333, hamiltonian_energy = -11.712331215624225, hamiltonian_energy_error = -0.465312556717004, max_hamiltonian_energy_error = -1.0756926357339918, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.9742384513402984, log_density = 16.05494088441536, hamiltonian_energy = -13.105861550402079, hamiltonian_energy_error = -0.4354106420328634, max_hamiltonian_energy_error = -0.6960823863718684, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9821065451091094, log_density = 16.531813600723382, hamiltonian_energy = -14.656959066730952, hamiltonian_energy_error = -0.12864716838363677, max_hamiltonian_energy_error = -0.20116181669365218, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.991813145648236, log_density = 16.810023462339615, hamiltonian_energy = -16.33560606943194, hamiltonian_energy_error = -0.007708316009974681, max_hamiltonian_energy_error = -0.03025251807756746, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9250037507351114, log_density = 17.036538814380428, hamiltonian_energy = -12.643576220715985, hamiltonian_energy_error = 0.020770714077329444, max_hamiltonian_energy_error = 0.21162525828870749, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9088283210481038, log_density = 16.999821625762294, hamiltonian_energy = -13.719242448614866, hamiltonian_energy_error = -0.059777189618460014, max_hamiltonian_energy_error = 0.27276790167293896, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9654092515745908, log_density = 15.770305125733795, hamiltonian_energy = -14.496838482152322, hamiltonian_energy_error = 0.02655046313521403, max_hamiltonian_energy_error = -0.20258254578066115, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9706549380734711, log_density = 17.107631234794717, hamiltonian_energy = -13.884696988720219, hamiltonian_energy_error = -0.037381797657808136, max_hamiltonian_energy_error = 0.14246122375161718, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9482831710932115, log_density = 17.11253896367058, hamiltonian_energy = -15.574055277599953, hamiltonian_energy_error = -0.030725971476366354, max_hamiltonian_energy_error = 0.12375641225299283, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.986983030454078, log_density = 17.107473400136143, hamiltonian_energy = -15.175590123635272, hamiltonian_energy_error = 0.011859705469753123, max_hamiltonian_energy_error = -0.06035215220477852, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9851381828615743, log_density = 17.42721449992118, hamiltonian_energy = -15.783623761177955, hamiltonian_energy_error = -0.06476207066579498, max_hamiltonian_energy_error = -0.24243384211680308, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8229830211729581, log_density = 16.815802445326277, hamiltonian_energy = -14.358336145603026, hamiltonian_energy_error = 0.058995731362269765, max_hamiltonian_energy_error = 0.42881200349178883, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9922186621610497, log_density = 17.224267712382325, hamiltonian_energy = -14.4874055385143, hamiltonian_energy_error = -0.10032277590133098, max_hamiltonian_energy_error = -0.10032277590133098, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9739438369696669, log_density = 16.911839211885187, hamiltonian_energy = -15.483902672975214, hamiltonian_energy_error = -0.01370488451324725, max_hamiltonian_energy_error = 0.09684603875082942, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9916236939009467, log_density = 17.230805765686526, hamiltonian_energy = -15.13824706616558, hamiltonian_energy_error = -0.07460959983949067, max_hamiltonian_energy_error = -0.12640123654140822, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9871448342796187, log_density = 15.36435497459966, hamiltonian_energy = -14.606740036537396, hamiltonian_energy_error = 0.025623620524036994, max_hamiltonian_energy_error = 0.047792930963797886, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8304119773351787, log_density = 15.393298879100575, hamiltonian_energy = -11.116407862900118, hamiltonian_energy_error = 0.08422974692054197, max_hamiltonian_energy_error = 0.42677787491599695, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9759239567428906, log_density = 15.852803006908804, hamiltonian_energy = -13.019596535122943, hamiltonian_energy_error = -0.10304605985936455, max_hamiltonian_energy_error = 0.13077109464497205, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8339508670833176, log_density = 17.109647254167502, hamiltonian_energy = -11.959506136347473, hamiltonian_energy_error = 0.047250938694215705, max_hamiltonian_energy_error = 0.5793067723336272, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8704062227183534, log_density = 15.383260566241951, hamiltonian_energy = -14.430249875304222, hamiltonian_energy_error = 0.2492424603934289, max_hamiltonian_energy_error = 0.2492424603934289, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9934199233071106, log_density = 17.55999126899942, hamiltonian_energy = -12.989398079206266, hamiltonian_energy_error = -0.36367755078402375, max_hamiltonian_energy_error = -0.4267987473544075, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8935382020373521, log_density = 14.516756400153158, hamiltonian_energy = -12.753628923785985, hamiltonian_energy_error = 0.153744449391489, max_hamiltonian_energy_error = 0.2814053701128465, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8276386390998596, log_density = 15.964406612220165, hamiltonian_energy = -9.300209195531227, hamiltonian_energy_error = -0.04270207195276399, max_hamiltonian_energy_error = 0.6586978057815891, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9963860336081598, log_density = 16.45058308003177, hamiltonian_energy = -14.726222192575866, hamiltonian_energy_error = -0.08975607211882419, max_hamiltonian_energy_error = -0.11804490777123178, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9906701095885864, log_density = 17.575238360798274, hamiltonian_energy = -15.19490882095344, hamiltonian_energy_error = -0.03576803304570397, max_hamiltonian_energy_error = -0.0984692715695541, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 18.05507515626223, hamiltonian_energy = -17.373724247719878, hamiltonian_energy_error = -0.016501498522970337, max_hamiltonian_energy_error = -0.0528949528348619, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9326680217218102, log_density = 17.185379688786988, hamiltonian_energy = -16.88819740773068, hamiltonian_energy_error = 0.12101043512643272, max_hamiltonian_energy_error = 0.12101043512643272, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 17.95543703491076, hamiltonian_energy = -17.152861770160026, hamiltonian_energy_error = -0.09294830170772883, max_hamiltonian_energy_error = -0.13985818472535527, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9642122159040982, log_density = 16.61400686205477, hamiltonian_energy = -16.129891263240992, hamiltonian_energy_error = 0.09670067162460327, max_hamiltonian_energy_error = 0.0988908524583394, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8545921642473429, log_density = 14.938904177608984, hamiltonian_energy = -12.698494833369645, hamiltonian_energy_error = 0.2612133101010041, max_hamiltonian_energy_error = 0.41537331729596616, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7922386960275306, log_density = 14.094313543879046, hamiltonian_energy = -11.7330391507671, hamiltonian_energy_error = 0.35089450957848634, max_hamiltonian_energy_error = 0.8098442989986339, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 1.0, log_density = 16.35228186541641, hamiltonian_energy = -12.538736528679287, hamiltonian_energy_error = -0.16538430401762838, max_hamiltonian_energy_error = -0.5921433468288662, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.459029614645043, hamiltonian_energy = -14.454969007392323, hamiltonian_energy_error = -0.14537084236092923, max_hamiltonian_energy_error = -0.31361185899707955, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.984410292077788, log_density = 16.537928553125308, hamiltonian_energy = -14.670347217478215, hamiltonian_energy_error = -0.06637351008648373, max_hamiltonian_energy_error = -0.11541481300342582, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.823653288687936, log_density = 13.18725360546211, hamiltonian_energy = -10.926042198283888, hamiltonian_energy_error = 0.22879060722007338, max_hamiltonian_energy_error = 0.3686254823730284, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.986802074177663, log_density = 13.798041911806768, hamiltonian_energy = -11.731266269946378, hamiltonian_energy_error = -0.00502714957057826, max_hamiltonian_energy_error = -0.28233843933438685, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9971985014389507, log_density = 14.744214165006372, hamiltonian_energy = -9.524142174087068, hamiltonian_energy_error = -0.09352616505462663, max_hamiltonian_energy_error = -0.23607307911767705, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.974705721909606, log_density = 15.55428394129005, hamiltonian_energy = -10.419595761448518, hamiltonian_energy_error = -0.12415973155631477, max_hamiltonian_energy_error = 0.19487192012292276, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 17.626003227188068, hamiltonian_energy = -13.824063533499443, hamiltonian_energy_error = -0.22638057011265467, max_hamiltonian_energy_error = -0.22638057011265467, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9937522903784888, log_density = 18.218303755026266, hamiltonian_energy = -16.726978321931004, hamiltonian_energy_error = -0.04273316051146381, max_hamiltonian_energy_error = -0.042852036544147154, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9747844860754408, log_density = 17.237958144603944, hamiltonian_energy = -16.45252533991698, hamiltonian_energy_error = 0.03194564909336606, max_hamiltonian_energy_error = 0.03943597349801564, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9774959463604019, log_density = 14.515321829003001, hamiltonian_energy = -12.562272161969995, hamiltonian_energy_error = 0.052645960052581486, max_hamiltonian_energy_error = 0.0916276557189466, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9370836473835904, log_density = 15.47036402319424, hamiltonian_energy = -11.204261252533026, hamiltonian_energy_error = 0.0054833426647924455, max_hamiltonian_energy_error = 0.23643851209600975, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9809960584173196, log_density = 14.37695668315657, hamiltonian_energy = -12.144759410129339, hamiltonian_energy_error = -0.011261528603469628, max_hamiltonian_energy_error = -0.4992967391988543, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8917054631488545, log_density = 10.754951993737604, hamiltonian_energy = -8.904186129680033, hamiltonian_energy_error = 0.1598134221501386, max_hamiltonian_energy_error = 0.7953655375409241, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9683559831773662, log_density = 15.331287604168441, hamiltonian_energy = -5.707653136787339, hamiltonian_energy_error = -0.14396333770806802, max_hamiltonian_energy_error = -0.6446028202881733, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 14.62186683966115, hamiltonian_energy = -13.09956618724016, hamiltonian_energy_error = -0.04311078991666584, max_hamiltonian_energy_error = -0.2208175426236867, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9733997768433239, log_density = 14.790275031934847, hamiltonian_energy = -12.351626238365824, hamiltonian_energy_error = -0.025021120199760105, max_hamiltonian_energy_error = -0.4343236489152815, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8241909961912024, log_density = 17.42545715138967, hamiltonian_energy = -12.664505135514304, hamiltonian_energy_error = -0.1143982660811993, max_hamiltonian_energy_error = 0.3177700581736609, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9840672557108118, log_density = 15.010738367034698, hamiltonian_energy = -14.131103594770185, hamiltonian_energy_error = 0.011033482731843236, max_hamiltonian_energy_error = -0.14095280154546153, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.999386304507566, log_density = 14.672832211818116, hamiltonian_energy = -13.684639100799163, hamiltonian_energy_error = -0.003572830337414956, max_hamiltonian_energy_error = -0.14168928420888705, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9958124930016276, log_density = 13.999566382640335, hamiltonian_energy = -12.515015531529356, hamiltonian_energy_error = -0.05747998111631425, max_hamiltonian_energy_error = -0.1572290642290355, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9973475727584461, log_density = 15.681210991663798, hamiltonian_energy = -13.026586040997113, hamiltonian_energy_error = -0.03589392104444755, max_hamiltonian_energy_error = -0.07619550332728586, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.988009511696059, log_density = 16.664925217147548, hamiltonian_energy = -14.802864342873233, hamiltonian_energy_error = -0.06144081521239286, max_hamiltonian_energy_error = -0.27289857066021916, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9931154284389785, log_density = 15.979494813696126, hamiltonian_energy = -15.895360247820355, hamiltonian_energy_error = 0.00737222898312595, max_hamiltonian_energy_error = -0.08720044740966948, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9235800104265744, log_density = 14.817437268341054, hamiltonian_energy = -12.497365640524546, hamiltonian_energy_error = 0.10752383725551162, max_hamiltonian_energy_error = 0.1549325755408315, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9344782352351331, log_density = 14.020458147342676, hamiltonian_energy = -13.461097258970764, hamiltonian_energy_error = 0.10623896781291009, max_hamiltonian_energy_error = 0.14042475458619919, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.988020810929181, log_density = 15.642242663584383, hamiltonian_energy = -12.138781992434035, hamiltonian_energy_error = -0.07254849609751979, max_hamiltonian_energy_error = -0.2796423863710036, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9917367946298008, log_density = 16.65186374134346, hamiltonian_energy = -14.850799250609267, hamiltonian_energy_error = -0.05634346956030001, max_hamiltonian_energy_error = -0.18253034959249703, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9890105204038034, log_density = 17.263008797218397, hamiltonian_energy = -15.739274396677924, hamiltonian_energy_error = 0.01587503962063863, max_hamiltonian_energy_error = 0.04189130434648902, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9952431972288758, log_density = 16.581351241999847, hamiltonian_energy = -16.403828672156912, hamiltonian_energy_error = 0.030357688741112554, max_hamiltonian_energy_error = -0.06004881437738874, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9638688721286542, log_density = 16.526032805283926, hamiltonian_energy = -14.481684584326288, hamiltonian_energy_error = -0.0025189440054518286, max_hamiltonian_energy_error = 0.09721199642907408, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9944654812836535, log_density = 14.885090749266944, hamiltonian_energy = -13.322753751498041, hamiltonian_energy_error = -0.048895025467521336, max_hamiltonian_energy_error = -0.18110463027577772, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9983820195780567, log_density = 14.210017845772214, hamiltonian_energy = -11.6045157140887, hamiltonian_energy_error = -0.02904753326230214, max_hamiltonian_energy_error = -0.07911627859932935, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9747711739974108, log_density = 14.900068017631831, hamiltonian_energy = -10.778835795896676, hamiltonian_energy_error = -0.14866654220366193, max_hamiltonian_energy_error = -0.3584618426238517, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9828660278428417, log_density = 14.84920747372402, hamiltonian_energy = -12.145910582458413, hamiltonian_energy_error = 0.010681564493012274, max_hamiltonian_energy_error = -0.22089726074713845, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9917489881396013, log_density = 15.350177879100276, hamiltonian_energy = -13.419856825962228, hamiltonian_energy_error = -0.018203489209073, max_hamiltonian_energy_error = -0.08101316760958177, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8538127776516738, log_density = 14.60527907905425, hamiltonian_energy = -12.328537366220877, hamiltonian_energy_error = 0.20183382339709688, max_hamiltonian_energy_error = 0.3385604187453488, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9376176793077938, log_density = 15.895833200449346, hamiltonian_energy = -13.03692019854854, hamiltonian_energy_error = -0.13684953739392647, max_hamiltonian_energy_error = -0.21137884391621675, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8947798364629853, log_density = 14.045547913802174, hamiltonian_energy = -13.780593069073253, hamiltonian_energy_error = 0.27241032471859405, max_hamiltonian_energy_error = 0.27241032471859405, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8713332866498438, log_density = 14.861865868541638, hamiltonian_energy = -9.718521203502611, hamiltonian_energy_error = -0.1774405138897155, max_hamiltonian_energy_error = 0.44882859888833515, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8084275474780742, log_density = 16.857487042441377, hamiltonian_energy = -11.299132149373172, hamiltonian_energy_error = -0.006396587130385711, max_hamiltonian_energy_error = 0.5354260361765242, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9288312218751209, log_density = 15.594409368764435, hamiltonian_energy = -12.648570295038102, hamiltonian_energy_error = 0.052441969043270475, max_hamiltonian_energy_error = 0.32232675172511627, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9399101294328153, log_density = 16.051273322184603, hamiltonian_energy = -13.107267832605315, hamiltonian_energy_error = -0.00952989070927579, max_hamiltonian_energy_error = 0.14952748740210353, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9696559080134592, log_density = 16.969560833992517, hamiltonian_energy = -15.316258831389678, hamiltonian_energy_error = 0.03245198784674663, max_hamiltonian_energy_error = -0.21128854402895314, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9853345207545345, log_density = 17.095804079033464, hamiltonian_energy = -14.529373106485238, hamiltonian_energy_error = -0.07785864499792616, max_hamiltonian_energy_error = -0.16490498884588156, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9863259301298576, log_density = 16.78042333169607, hamiltonian_energy = -15.744587848797135, hamiltonian_energy_error = -0.01589692280754207, max_hamiltonian_energy_error = -0.160285955320564, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.992261347304316, log_density = 16.585627096573134, hamiltonian_energy = -15.512668366922387, hamiltonian_energy_error = 0.019832981161806984, max_hamiltonian_energy_error = 0.035143323209105404, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 16.359169765827858, hamiltonian_energy = -15.510828262489058, hamiltonian_energy_error = -0.03628654374438156, max_hamiltonian_energy_error = -0.11464497200060286, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9919188804228811, log_density = 16.684859660793883, hamiltonian_energy = -15.483058710700664, hamiltonian_energy_error = 0.003870159061015954, max_hamiltonian_energy_error = -0.053912128019110384, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9812611354067252, log_density = 17.218630928223337, hamiltonian_energy = -15.61332859584159, hamiltonian_energy_error = -0.0506007128049859, max_hamiltonian_energy_error = 0.0698934154421984, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8496532663392548, log_density = 17.329380677870027, hamiltonian_energy = -14.887353437062732, hamiltonian_energy_error = 0.007773906608187886, max_hamiltonian_energy_error = 0.38722508990092663, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9311824049490307, log_density = 18.105006041804526, hamiltonian_energy = -16.6160243549559, hamiltonian_energy_error = 0.028082994012319062, max_hamiltonian_energy_error = 0.125872812378919, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9876357933782067, log_density = 18.302068145583227, hamiltonian_energy = -17.754753389793546, hamiltonian_energy_error = -0.02470360413479611, max_hamiltonian_energy_error = -0.06809103185288023, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8861089070553164, log_density = 15.793248852443256, hamiltonian_energy = -14.954590785941422, hamiltonian_energy_error = 0.25413730476338436, max_hamiltonian_energy_error = 0.25413730476338436, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9982941082905159, log_density = 14.472158750031753, hamiltonian_energy = -12.81391777606062, hamiltonian_energy_error = -0.11701541256942427, max_hamiltonian_energy_error = -0.24691864172103983, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8740846823765634, log_density = 14.874144392242716, hamiltonian_energy = -11.804510909875734, hamiltonian_energy_error = -0.020971306083836794, max_hamiltonian_energy_error = 0.2572731179077792, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.981290807245135, log_density = 16.387986673460244, hamiltonian_energy = -12.880526641086318, hamiltonian_energy_error = -0.05879705247625466, max_hamiltonian_energy_error = -0.16350781871515174, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9688369765044503, log_density = 16.14985508061501, hamiltonian_energy = -14.236632247129613, hamiltonian_energy_error = 0.07438553539834025, max_hamiltonian_energy_error = -0.1584017198029013, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8649047825331754, log_density = 15.691253261243595, hamiltonian_energy = -13.569755290093667, hamiltonian_energy_error = 0.13052919311653888, max_hamiltonian_energy_error = 0.4387164951197473, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9899311897614241, log_density = 16.96087053357933, hamiltonian_energy = -14.69794551882304, hamiltonian_energy_error = -0.17335548292177094, max_hamiltonian_energy_error = -0.1829153141072677, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9972463999231376, log_density = 18.23770504543736, hamiltonian_energy = -16.73618170066993, hamiltonian_energy_error = -0.08000059103400048, max_hamiltonian_energy_error = -0.11610114493348433, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9957613936680656, log_density = 18.238210382402464, hamiltonian_energy = -17.908199653055256, hamiltonian_energy_error = -0.00321693511004284, max_hamiltonian_energy_error = -0.05857411724365136, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8684807782583578, log_density = 15.39036221397066, hamiltonian_energy = -14.53683977055348, hamiltonian_energy_error = 0.15833738266550057, max_hamiltonian_energy_error = 0.23821155055859222, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.959020550709264, log_density = 14.949325928239686, hamiltonian_energy = -13.349507679282315, hamiltonian_energy_error = 0.08574404074878039, max_hamiltonian_energy_error = -0.3726213638802385, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9994635162128052, log_density = 16.887878217402744, hamiltonian_energy = -13.905432959918322, hamiltonian_energy_error = -0.13215236956525445, max_hamiltonian_energy_error = -0.2940333519234599, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 17.39194707813877, hamiltonian_energy = -16.204120721051343, hamiltonian_energy_error = -0.033618474287109734, max_hamiltonian_energy_error = -0.033618474287109734, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9839800989503412, log_density = 15.388330195345157, hamiltonian_energy = -14.838095182795646, hamiltonian_energy_error = 0.03838705975820922, max_hamiltonian_energy_error = 0.04924683307396549, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9513693813764349, log_density = 14.295449381937605, hamiltonian_energy = -13.13341753515886, hamiltonian_energy_error = 0.10493475572768673, max_hamiltonian_energy_error = 0.10792409538064618, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.73059639851686, hamiltonian_energy = -12.495121725853984, hamiltonian_energy_error = -0.16676608931707548, max_hamiltonian_energy_error = -0.16676608931707548, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9907408948463661, log_density = 17.145349112440403, hamiltonian_energy = -14.950555455861718, hamiltonian_energy_error = 0.03695311314514527, max_hamiltonian_energy_error = -0.13126023602477588, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9938536786532473, log_density = 17.321521902037777, hamiltonian_energy = -15.78241226315763, hamiltonian_energy_error = -0.07746680272114759, max_hamiltonian_energy_error = -0.15365280015167393, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9389817213594995, log_density = 17.17255772376889, hamiltonian_energy = -12.71301962990665, hamiltonian_energy_error = -0.09017269666769856, max_hamiltonian_energy_error = 0.16687978108791945, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9169676379327346, log_density = 15.950078969694056, hamiltonian_energy = -14.658262987577544, hamiltonian_energy_error = 0.07350303153106452, max_hamiltonian_energy_error = 0.13390918431178456, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9553840117078242, log_density = 14.91522628336291, hamiltonian_energy = -11.525116406711058, hamiltonian_energy_error = 0.04165405404631173, max_hamiltonian_energy_error = -0.2617379155377684, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.988399578790613, log_density = 17.643985696638772, hamiltonian_energy = -13.414281695296046, hamiltonian_energy_error = -0.06764930517387491, max_hamiltonian_energy_error = -0.11018502496700755, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9974486108829035, log_density = 18.131474372773834, hamiltonian_energy = -17.314786265444788, hamiltonian_energy_error = -0.02657362363895288, max_hamiltonian_energy_error = -0.045975916475860856, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9538542653175405, log_density = 17.566741782964886, hamiltonian_energy = -15.695644382012667, hamiltonian_energy_error = 0.022797826669963328, max_hamiltonian_energy_error = 0.07658107703081285, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9976525758089068, log_density = 17.450492510239375, hamiltonian_energy = -16.633690858850212, hamiltonian_energy_error = -0.01781388275567153, max_hamiltonian_energy_error = -0.05560133820391755, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9519121781388258, log_density = 16.738091734657687, hamiltonian_energy = -15.36663073477144, hamiltonian_energy_error = 0.03717036871372592, max_hamiltonian_energy_error = 0.1073651168512928, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9873714824569804, log_density = 17.247563873481603, hamiltonian_energy = -15.726116053826303, hamiltonian_energy_error = -0.10261686551655558, max_hamiltonian_energy_error = -0.10261686551655558, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9305684208569097, log_density = 17.50346768500804, hamiltonian_energy = -15.234384776152147, hamiltonian_energy_error = -0.011813277053869697, max_hamiltonian_energy_error = 0.2853857831585316, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.995997099244329, log_density = 17.860279638881064, hamiltonian_energy = -16.208734405946224, hamiltonian_energy_error = -0.1566264097410155, max_hamiltonian_energy_error = -0.1566264097410155, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8819724174210504, log_density = 17.28446029859832, hamiltonian_energy = -13.782108839971691, hamiltonian_energy_error = 0.01906444925778672, max_hamiltonian_energy_error = 0.2660174647651896, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8039355554836163, log_density = 14.629286262396064, hamiltonian_energy = -11.969899895129407, hamiltonian_energy_error = 0.2757689782570676, max_hamiltonian_energy_error = 0.3374703281300313, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8832251625331956, log_density = 13.601362197975135, hamiltonian_energy = -10.882972193169236, hamiltonian_energy_error = 0.27561080006580774, max_hamiltonian_energy_error = -0.2943242973423974, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.884880684538854, log_density = 16.045824885682883, hamiltonian_energy = -11.803147513718695, hamiltonian_energy_error = -0.5006164308335617, max_hamiltonian_energy_error = -0.5006164308335617, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8715425528429729, log_density = 13.95625088746067, hamiltonian_energy = -13.012998387719419, hamiltonian_energy_error = 0.2685342333520282, max_hamiltonian_energy_error = 0.2806072423044963, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9957250309712408, log_density = 15.544464792088498, hamiltonian_energy = -12.497922498101495, hamiltonian_energy_error = -0.19898363493552473, max_hamiltonian_energy_error = -0.2821882228088324, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9343638888961193, log_density = 17.43950333772272, hamiltonian_energy = -13.295104161162136, hamiltonian_energy_error = -0.11688408384259574, max_hamiltonian_energy_error = 0.18366769106959424, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.955277799411065, log_density = 17.897855791286013, hamiltonian_energy = -14.73402573507877, hamiltonian_energy_error = -0.10186412155139912, max_hamiltonian_energy_error = 0.14786345580611915, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8481994834868188, log_density = 16.955225883284857, hamiltonian_energy = -13.645891902485008, hamiltonian_energy_error = -0.023112435836953438, max_hamiltonian_energy_error = 0.48568725832195625, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9683407164745074, log_density = 17.05805505080043, hamiltonian_energy = -15.007692329088044, hamiltonian_energy_error = 0.09912887727501385, max_hamiltonian_energy_error = 0.13154523802207052, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8935161538842326, log_density = 15.833267759952854, hamiltonian_energy = -14.4746741230701, hamiltonian_energy_error = 0.18997181754965098, max_hamiltonian_energy_error = 0.27208335048757704, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9942056219895619, log_density = 15.113903064057773, hamiltonian_energy = -14.604692987168301, hamiltonian_energy_error = 0.06586009602222553, max_hamiltonian_energy_error = -0.33264108118261504, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8586989780340952, log_density = 11.093506169874392, hamiltonian_energy = -8.122255057546745, hamiltonian_energy_error = 0.5074269770078423, max_hamiltonian_energy_error = 0.5074269770078423, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.62647826140346, hamiltonian_energy = -10.677665200127393, hamiltonian_energy_error = -0.5682465245328459, max_hamiltonian_energy_error = -0.7320324398271989, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9243564368931073, log_density = 15.477388620870606, hamiltonian_energy = -13.480135940622157, hamiltonian_energy_error = 0.08572165426065759, max_hamiltonian_energy_error = 0.3525388449633393, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9835503486601255, log_density = 15.316999950163432, hamiltonian_energy = -14.760441791572102, hamiltonian_energy_error = 0.012448749562519623, max_hamiltonian_energy_error = -0.31309785913371435, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9879935952350802, log_density = 15.463131828720556, hamiltonian_energy = -14.108900294377595, hamiltonian_energy_error = -0.004134549909592167, max_hamiltonian_energy_error = -0.31619834385913315, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9582509292171746, log_density = 15.539461311056066, hamiltonian_energy = -13.50923190824544, hamiltonian_energy_error = 0.04724598328860807, max_hamiltonian_energy_error = -0.3578168863967335, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9781553503379843, log_density = 15.015559666673045, hamiltonian_energy = -13.800027325414021, hamiltonian_energy_error = 0.01898606807283798, max_hamiltonian_energy_error = -0.4408701961110708, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9922611930793195, log_density = 17.203388378201694, hamiltonian_energy = -12.24018112670139, hamiltonian_energy_error = -0.290322584790502, max_hamiltonian_energy_error = -0.34729865436870355, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9856496411769573, log_density = 16.71708426955909, hamiltonian_energy = -16.444793121837627, hamiltonian_energy_error = 0.01591127313619012, max_hamiltonian_energy_error = 0.03588420710616447, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9778745580618959, log_density = 14.545916081751937, hamiltonian_energy = -14.169493061888597, hamiltonian_energy_error = 0.045974229598972016, max_hamiltonian_energy_error = -0.20234900061748817, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9766071633479689, log_density = 15.627155398509291, hamiltonian_energy = -12.96352617604115, hamiltonian_energy_error = -0.030389248364665278, max_hamiltonian_energy_error = -0.24751595476990573, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9936468849633349, log_density = 16.503231055528722, hamiltonian_energy = -15.173532839446992, hamiltonian_energy_error = -0.057122342978900065, max_hamiltonian_energy_error = -0.251573824247572, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9631949381390267, log_density = 16.444180326765874, hamiltonian_energy = -13.672767777991503, hamiltonian_energy_error = 0.0028113285451656367, max_hamiltonian_energy_error = -0.21970137297006964, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 17.435996837849462, hamiltonian_energy = -15.070589365142133, hamiltonian_energy_error = -0.027806556997280296, max_hamiltonian_energy_error = -0.08563621270580946, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.903335561590966, log_density = 16.456395477295995, hamiltonian_energy = -14.256936263128441, hamiltonian_energy_error = 0.12499498099888662, max_hamiltonian_energy_error = 0.1993936057483925, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9425392006364696, log_density = 16.132243629118776, hamiltonian_energy = -14.319029270079909, hamiltonian_energy_error = 0.06767927389468298, max_hamiltonian_energy_error = 0.1322403997941919, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9974236585426551, log_density = 13.654896574940699, hamiltonian_energy = -11.39815253269015, hamiltonian_energy_error = -0.128687014688472, max_hamiltonian_energy_error = -0.5032412085323337, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9601541688994764, log_density = 15.6514516545023, hamiltonian_energy = -11.894869203063813, hamiltonian_energy_error = -0.26386641977686764, max_hamiltonian_energy_error = -0.26386641977686764, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9562123946949486, log_density = 17.184471190257582, hamiltonian_energy = -13.149375638677054, hamiltonian_energy_error = -0.013294262097378606, max_hamiltonian_energy_error = 0.11657308825664359, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.955475273516246, log_density = 16.17758803979408, hamiltonian_energy = -15.491190716160236, hamiltonian_energy_error = 0.0592573824548186, max_hamiltonian_energy_error = 0.07995429784730135, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9909492031931507, log_density = 14.496614901119951, hamiltonian_energy = -13.691316258857483, hamiltonian_energy_error = 0.06545155398304203, max_hamiltonian_energy_error = -0.14595056497462267, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9194745011359593, log_density = 14.902417460800772, hamiltonian_energy = -10.92435823594904, hamiltonian_energy_error = 0.18764480812053286, max_hamiltonian_energy_error = 0.18764480812053286, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7822650356774457, log_density = 14.703074667326261, hamiltonian_energy = -11.069713459693741, hamiltonian_energy_error = -0.5021795109708105, max_hamiltonian_energy_error = 1.0590211430785779, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 15.824900036852991, hamiltonian_energy = -14.731818154001305, hamiltonian_energy_error = -0.1469103746520073, max_hamiltonian_energy_error = -0.26708203398052177, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9977629616570282, log_density = 16.359050079587075, hamiltonian_energy = -15.23060135837281, hamiltonian_energy_error = -0.019894088873979143, max_hamiltonian_energy_error = -0.14516893669232722, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8651623994007627, log_density = 16.026170917418348, hamiltonian_energy = -13.157809891466965, hamiltonian_energy_error = 0.018933294285263358, max_hamiltonian_energy_error = 0.35924061256106476, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 16.526433701870193, hamiltonian_energy = -15.464540603051095, hamiltonian_energy_error = -0.046594735843635604, max_hamiltonian_energy_error = -0.20234842149235632, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9607134042319454, log_density = 15.323535954280068, hamiltonian_energy = -14.013419176377292, hamiltonian_energy_error = 0.07041954885941415, max_hamiltonian_energy_error = 0.1320871073129748, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 14.950941997225847, hamiltonian_energy = -14.187991702594259, hamiltonian_energy_error = -0.02528719562927151, max_hamiltonian_energy_error = -0.12137551393839452, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 17.12137357678508, hamiltonian_energy = -14.793226201408388, hamiltonian_energy_error = -0.0858181688286912, max_hamiltonian_energy_error = -0.0858181688286912, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9635065361936099, log_density = 14.857508726975402, hamiltonian_energy = -14.252787531635123, hamiltonian_energy_error = 0.06100716690735375, max_hamiltonian_energy_error = 0.09382417503225149, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7333269943620004, log_density = 11.236809526224368, hamiltonian_energy = -9.15737156337395, hamiltonian_energy_error = 0.4380241924069175, max_hamiltonian_energy_error = 0.6753874117967644, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 14.212132491046244, hamiltonian_energy = -10.041414943397537, hamiltonian_energy_error = -0.15085263638157898, max_hamiltonian_energy_error = -0.32111202617421064, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9098402415634206, log_density = 15.530917500946892, hamiltonian_energy = -11.284048807481676, hamiltonian_energy_error = -0.28728612867018377, max_hamiltonian_energy_error = 0.3258126606230132, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7683162669763058, log_density = 12.679707650157045, hamiltonian_energy = -10.413775253203635, hamiltonian_energy_error = 0.18743294574056257, max_hamiltonian_energy_error = 0.4721094135084076, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8612930339670906, log_density = 12.116273712087859, hamiltonian_energy = -8.025491467419771, hamiltonian_energy_error = 0.2793315279389965, max_hamiltonian_energy_error = 0.4148905409378578, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9902645679564615, log_density = 14.251422243473531, hamiltonian_energy = -7.5318185573115155, hamiltonian_energy_error = -0.37692262742649074, max_hamiltonian_energy_error = -0.37692262742649074, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8630983550897618, log_density = 14.232800138530056, hamiltonian_energy = -11.027227070690259, hamiltonian_energy_error = 0.23680210818707437, max_hamiltonian_energy_error = 0.33035469908505277, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 17.80872469952844, hamiltonian_energy = -14.040156387870361, hamiltonian_energy_error = -0.28732943223534413, max_hamiltonian_energy_error = -0.28732943223534413, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8776124210134508, log_density = 17.937364704864574, hamiltonian_energy = -13.762635260121904, hamiltonian_energy_error = 0.004412089833031985, max_hamiltonian_energy_error = 0.2061981437986642, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9488693092117337, log_density = 17.014820425080362, hamiltonian_energy = -15.65865727554325, hamiltonian_energy_error = 0.02559364876181469, max_hamiltonian_energy_error = 0.12377475660385961, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9051211111165045, log_density = 16.897805511608382, hamiltonian_energy = -14.670466418526184, hamiltonian_energy_error = 0.04222720797271862, max_hamiltonian_energy_error = 0.20326681911504174, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9772383384687381, log_density = 17.09416691851198, hamiltonian_energy = -15.055915424177071, hamiltonian_energy_error = -0.037546029288201055, max_hamiltonian_energy_error = -0.10751572936298537, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9822460587783286, log_density = 16.698368285632906, hamiltonian_energy = -15.423474517673576, hamiltonian_energy_error = 0.023547007055920943, max_hamiltonian_energy_error = -0.09199054114508698, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 16.943950344605298, hamiltonian_energy = -16.23185988636391, hamiltonian_energy_error = -0.06827035848523977, max_hamiltonian_energy_error = -0.12656667674659872, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9320933204983902, log_density = 18.346882909278087, hamiltonian_energy = -14.992082572827462, hamiltonian_energy_error = -0.08970209841428378, max_hamiltonian_energy_error = 0.10749132203710765, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9726512939895268, log_density = 18.09506318985367, hamiltonian_energy = -17.79045279500048, hamiltonian_energy_error = 0.03617895828848461, max_hamiltonian_energy_error = 0.04763032345852736, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9627985241761385, log_density = 17.545056841175192, hamiltonian_energy = -16.760228995014085, hamiltonian_energy_error = 0.02704056681055178, max_hamiltonian_energy_error = 0.07598507587494652, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.926253669565328, log_density = 18.119103109204953, hamiltonian_energy = -14.932133628862898, hamiltonian_energy_error = -0.006901753800782728, max_hamiltonian_energy_error = -0.16256285257365377, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.981329251232636, log_density = 17.48149068285843, hamiltonian_energy = -16.66579782436607, hamiltonian_energy_error = 0.013725189804411286, max_hamiltonian_energy_error = 0.04959501458086635, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8964666500352173, log_density = 16.676201840203344, hamiltonian_energy = -15.883629719354225, hamiltonian_energy_error = 0.10799745607062938, max_hamiltonian_energy_error = 0.19919939775368967, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8861265731830235, log_density = 15.598723615739349, hamiltonian_energy = -13.064301265154391, hamiltonian_energy_error = 0.026318437436405162, max_hamiltonian_energy_error = 0.22698920016999224, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8056010976040253, log_density = 14.33346320351784, hamiltonian_energy = -10.450767550207512, hamiltonian_energy_error = -0.02308487081346655, max_hamiltonian_energy_error = 0.47397833304234105, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9690024595963925, log_density = 13.830554630493602, hamiltonian_energy = -12.724821216783546, hamiltonian_energy_error = 0.0424741637945818, max_hamiltonian_energy_error = -0.28565745073786886, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9074495785622124, log_density = 14.767237847468767, hamiltonian_energy = -10.929040873327736, hamiltonian_energy_error = 0.08328836748001756, max_hamiltonian_energy_error = 0.22299583483403218, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9778790417318112, log_density = 12.809112213202472, hamiltonian_energy = -11.030635899003036, hamiltonian_energy_error = -0.18134450148588677, max_hamiltonian_energy_error = -0.5252691874064119, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9242648556289252, log_density = 13.524514084511152, hamiltonian_energy = -9.134727806112876, hamiltonian_energy_error = 0.31373370319107785, max_hamiltonian_energy_error = -0.4577557397154415, tree_depth = 5, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9504730709043346, log_density = 13.293778432971436, hamiltonian_energy = -10.16390547752713, hamiltonian_energy_error = -0.23670363772552605, max_hamiltonian_energy_error = -0.33337124913419913, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.663349609895764, hamiltonian_energy = -12.29841444639412, hamiltonian_energy_error = -0.24467060217970626, max_hamiltonian_energy_error = -0.5546593848635979, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9733313599057352, log_density = 14.79791019095633, hamiltonian_energy = -13.53828852811673, hamiltonian_energy_error = 0.18945930736083305, max_hamiltonian_energy_error = -0.23835210236053328, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.995685730623512, log_density = 15.94472006010955, hamiltonian_energy = -12.945287761134937, hamiltonian_energy_error = -0.08136055263732977, max_hamiltonian_energy_error = -0.43572565493188975, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8303036502556461, log_density = 12.668437719108313, hamiltonian_energy = -11.240035896487719, hamiltonian_energy_error = 0.5459853308507547, max_hamiltonian_energy_error = 0.5459853308507547, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.108048601641379, hamiltonian_energy = -12.090740029831464, hamiltonian_energy_error = -0.34796449902073867, max_hamiltonian_energy_error = -0.7234440853215975, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 17.82279110765002, hamiltonian_energy = -14.633010865152496, hamiltonian_energy_error = -0.24431940514556416, max_hamiltonian_energy_error = -0.2810499097358097, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9460722866029835, log_density = 17.034911717225913, hamiltonian_energy = -16.278579594061693, hamiltonian_energy_error = -0.026052741515034228, max_hamiltonian_energy_error = 0.13296708572968186, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9999096368773636, log_density = 17.820401676034287, hamiltonian_energy = -16.59798391363912, hamiltonian_energy_error = -0.05441437945718164, max_hamiltonian_energy_error = -0.05811810482240887, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9324533007209141, log_density = 17.45216106425302, hamiltonian_energy = -16.439474185147336, hamiltonian_energy_error = 0.1507895788645861, max_hamiltonian_energy_error = 0.1507895788645861, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.981639325747189, log_density = 18.28032672788364, hamiltonian_energy = -17.08353653276226, hamiltonian_energy_error = -0.1470186853911173, max_hamiltonian_energy_error = -0.17008647562672152, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9670372103291918, log_density = 17.623463816310917, hamiltonian_energy = -17.388095175324366, hamiltonian_energy_error = 0.047739894308097774, max_hamiltonian_energy_error = 0.05368573700588186, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9748315357774388, log_density = 17.581278412651468, hamiltonian_energy = -16.38952135025591, hamiltonian_energy_error = -0.06595407500064354, max_hamiltonian_energy_error = -0.06595407500064354, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.987878092629071, log_density = 17.99759660654268, hamiltonian_energy = -16.218568452714837, hamiltonian_energy_error = -0.0275009934201762, max_hamiltonian_energy_error = 0.04222958533539156, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9671321840998295, log_density = 17.95025103698391, hamiltonian_energy = -16.97005136170422, hamiltonian_energy_error = 0.0016903888422135083, max_hamiltonian_energy_error = 0.07767507784631178, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8998954797448329, log_density = 17.211542493454402, hamiltonian_energy = -14.890483880421472, hamiltonian_energy_error = 0.02885409648517978, max_hamiltonian_energy_error = 0.20406973377728832, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7793356789372133, log_density = 13.742156045011875, hamiltonian_energy = -12.406321562176702, hamiltonian_energy_error = 0.35060374094518565, max_hamiltonian_energy_error = 0.37412516375669647, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 15.21968633839648, hamiltonian_energy = -13.198549018175086, hamiltonian_energy_error = -0.14418184172328807, max_hamiltonian_energy_error = -0.3418664668910232, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9099965380164211, log_density = 12.529725769035196, hamiltonian_energy = -11.13002537391272, hamiltonian_energy_error = -0.0043114716200278735, max_hamiltonian_energy_error = 0.304967638779587, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8687645981334884, log_density = 12.628642299950215, hamiltonian_energy = -9.088086857556059, hamiltonian_energy_error = 0.0641353189545768, max_hamiltonian_energy_error = 0.41539236744162444, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9970247504849331, log_density = 16.20655182182678, hamiltonian_energy = -10.104432983821843, hamiltonian_energy_error = -0.15474504698719116, max_hamiltonian_energy_error = -0.25609511384446826, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9800967153894734, log_density = 15.670992625687582, hamiltonian_energy = -15.073233817494925, hamiltonian_energy_error = 0.09112161408728348, max_hamiltonian_energy_error = -0.13529073762811272, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9869234297187629, log_density = 14.367276038140789, hamiltonian_energy = -12.004175759079974, hamiltonian_energy_error = 0.010201824608127907, max_hamiltonian_energy_error = -0.3175918903014079, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9966377767578346, log_density = 14.888517336342217, hamiltonian_energy = -13.607938331552372, hamiltonian_energy_error = -0.13928773785115567, max_hamiltonian_energy_error = -0.18235912980495073, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.97366288998143, log_density = 15.567162948273989, hamiltonian_energy = -11.888354217457891, hamiltonian_energy_error = 0.13106759535431678, max_hamiltonian_energy_error = -0.22971806525124094, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.99309668007152, log_density = 14.510741190568503, hamiltonian_energy = -13.904741338903701, hamiltonian_energy_error = -0.028284900561359905, max_hamiltonian_energy_error = -0.255848984910779, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.99863772328548, log_density = 15.274224801846168, hamiltonian_energy = -13.511504019238163, hamiltonian_energy_error = -0.05184888519049302, max_hamiltonian_energy_error = -0.2807954095873768, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9658850252125741, log_density = 17.368917377336764, hamiltonian_energy = -12.747080112224324, hamiltonian_energy_error = -0.06688640811153235, max_hamiltonian_energy_error = -0.3085712036073289, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9217773525099627, log_density = 15.954279070505827, hamiltonian_energy = -14.518491589453383, hamiltonian_energy_error = 0.16975859002380744, max_hamiltonian_energy_error = 0.27398044736643357, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9986062592028953, log_density = 17.083188575401053, hamiltonian_energy = -15.094457398524783, hamiltonian_energy_error = -0.09748364049679203, max_hamiltonian_energy_error = -0.36219065429512654, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9960724501512351, log_density = 15.918542092849169, hamiltonian_energy = -15.550474841480458, hamiltonian_energy_error = 0.03288923646563724, max_hamiltonian_energy_error = -0.2446457786335774, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9788202948694142, log_density = 16.176503719047762, hamiltonian_energy = -14.424723936279113, hamiltonian_energy_error = -0.032012380260317386, max_hamiltonian_energy_error = -0.22488921127781225, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9764501216208098, log_density = 16.008001206930537, hamiltonian_energy = -13.825794672600605, hamiltonian_energy_error = 0.0687109144670437, max_hamiltonian_energy_error = -0.43537721471400737, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9836052126876472, log_density = 17.95093872793104, hamiltonian_energy = -14.71306954010739, hamiltonian_energy_error = -0.15801685336233717, max_hamiltonian_energy_error = -0.15801685336233717, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8937557823249062, log_density = 16.14692942064951, hamiltonian_energy = -15.008706483726213, hamiltonian_energy_error = 0.18851805463325988, max_hamiltonian_energy_error = 0.34859766980093276, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9569104775055711, log_density = 17.315880774451614, hamiltonian_energy = -14.958591606449108, hamiltonian_energy_error = -0.16284918273311533, max_hamiltonian_energy_error = -0.28629575198941737, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9486651348895433, log_density = 15.92231742076045, hamiltonian_energy = -14.308911849327774, hamiltonian_energy_error = 0.06572406613737769, max_hamiltonian_energy_error = 0.14227423780536164, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8141011202968002, log_density = 14.708201920637874, hamiltonian_energy = -12.287669502084343, hamiltonian_energy_error = 0.35428660633461284, max_hamiltonian_energy_error = 0.4898574525358157, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9729898815612684, log_density = 15.133445364508635, hamiltonian_energy = -13.061140711486466, hamiltonian_energy_error = -0.11049057972911847, max_hamiltonian_energy_error = -0.5340014435066873, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9377807534831202, log_density = 15.02817461012247, hamiltonian_energy = -9.036968028444514, hamiltonian_energy_error = 0.03509102171793721, max_hamiltonian_energy_error = -0.4237481043155622, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9510333026671549, log_density = 16.45580768729972, hamiltonian_energy = -13.500430585861638, hamiltonian_energy_error = -0.10991083967814497, max_hamiltonian_energy_error = -0.4042410979074731, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.960871916450368, log_density = 18.325194628611932, hamiltonian_energy = -15.04521927147768, hamiltonian_energy_error = -0.2976750436707647, max_hamiltonian_energy_error = -0.3065723610187163, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8414271084396516, log_density = 16.02120806198473, hamiltonian_energy = -13.916579631488606, hamiltonian_energy_error = 0.13057983999649814, max_hamiltonian_energy_error = 0.28997922537147147, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9131537051997695, log_density = 15.164628203593473, hamiltonian_energy = -13.20103268971712, hamiltonian_energy_error = 0.16178501487772934, max_hamiltonian_energy_error = 0.2546564839797387, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9605704114297853, log_density = 15.894009700004345, hamiltonian_energy = -13.920903516903426, hamiltonian_energy_error = -0.09760545456516567, max_hamiltonian_energy_error = 0.12125208593544023, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9936685604184432, log_density = 16.717383902678623, hamiltonian_energy = -12.943276397396412, hamiltonian_energy_error = -0.07538865890242263, max_hamiltonian_energy_error = -0.1055606699627738, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8860964369942389, log_density = 15.474388425325218, hamiltonian_energy = -12.99081802426306, hamiltonian_energy_error = 0.08657667008915482, max_hamiltonian_energy_error = 0.24704810788923837, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 16.11368607793647, hamiltonian_energy = -14.861722275080906, hamiltonian_energy_error = -0.03906527970751128, max_hamiltonian_energy_error = -0.11462086771781976, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9452767279102211, log_density = 15.498271647177832, hamiltonian_energy = -13.114791443456804, hamiltonian_energy_error = 0.09036491355154119, max_hamiltonian_energy_error = 0.14315589223145153, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9982302483096452, log_density = 17.719766300107906, hamiltonian_energy = -15.3424325909121, hamiltonian_energy_error = -0.1218157512569551, max_hamiltonian_energy_error = -0.1218157512569551, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9087612393843597, log_density = 14.128041445564232, hamiltonian_energy = -12.083231214300248, hamiltonian_energy_error = 0.09698728169065696, max_hamiltonian_energy_error = 0.22722545345911627, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9143078300412623, log_density = 15.126578172317434, hamiltonian_energy = -11.28105628300747, hamiltonian_energy_error = 0.05351039471197083, max_hamiltonian_energy_error = 0.33940194791559186, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9968075623438708, log_density = 14.959269008173122, hamiltonian_energy = -13.059876757241671, hamiltonian_energy_error = -0.13329198012910126, max_hamiltonian_energy_error = -0.23081307454342692, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9392874637979939, log_density = 15.458848010742976, hamiltonian_energy = -11.29859508093616, hamiltonian_energy_error = 0.0635747079187503, max_hamiltonian_energy_error = 0.20051963493445868, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 16.44711399290993, hamiltonian_energy = -15.162176019179954, hamiltonian_energy_error = -0.07472195130152848, max_hamiltonian_energy_error = -0.1967236068115703, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.89526179035428, log_density = 16.630324098951235, hamiltonian_energy = -11.545016574365457, hamiltonian_energy_error = 0.028870792936627865, max_hamiltonian_energy_error = 0.23910862458039794, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9401041359474819, log_density = 17.014384687301416, hamiltonian_energy = -14.59651184878839, hamiltonian_energy_error = 0.0699435972213891, max_hamiltonian_energy_error = 0.19834543096031787, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9854931595180765, log_density = 15.872420750884888, hamiltonian_energy = -13.55878748480407, hamiltonian_energy_error = 0.04166260983280523, max_hamiltonian_energy_error = -0.1963775679696429, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9290435733014706, log_density = 16.488338327788068, hamiltonian_energy = -14.078601820176168, hamiltonian_energy_error = 0.0846283332301585, max_hamiltonian_energy_error = 0.2400829263212625, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9607185596968956, log_density = 15.79363472242851, hamiltonian_energy = -14.807887386706255, hamiltonian_energy_error = 0.11930838253678111, max_hamiltonian_energy_error = -0.27990689228102106, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9638368139114826, log_density = 14.657329264217799, hamiltonian_energy = -12.23851957751141, hamiltonian_energy_error = -0.3302904815501648, max_hamiltonian_energy_error = -0.38413491690524104, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9868235098645862, log_density = 15.209379982712557, hamiltonian_energy = -11.879269550864443, hamiltonian_energy_error = 0.02342899947121424, max_hamiltonian_energy_error = -0.08637761411189437, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9990108597195088, log_density = 18.14568657823661, hamiltonian_energy = -14.242502303616375, hamiltonian_energy_error = -0.1043881069054855, max_hamiltonian_energy_error = -0.1043881069054855, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9910942261803838, log_density = 17.640210657100603, hamiltonian_energy = -16.62761027286956, hamiltonian_energy_error = 0.009184666838997657, max_hamiltonian_energy_error = 0.03706950568404821, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9211572819675763, log_density = 15.097621259808898, hamiltonian_energy = -14.396989065518174, hamiltonian_energy_error = 0.12405519911644447, max_hamiltonian_energy_error = 0.1426687472798207, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9357217305546978, log_density = 11.952634900896456, hamiltonian_energy = -10.743807526442511, hamiltonian_energy_error = 0.15841070829351622, max_hamiltonian_energy_error = -0.2145272985720421, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.887074437737949, log_density = 14.9789099279823, hamiltonian_energy = -8.398781944499294, hamiltonian_energy_error = 0.25413704346401644, max_hamiltonian_energy_error = -0.48211999993976207, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9112896387471126, log_density = 12.862090634486865, hamiltonian_energy = -12.584090639335606, hamiltonian_energy_error = 0.30942485454345814, max_hamiltonian_energy_error = -0.578706180169462, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.070892337451989, hamiltonian_energy = -6.776181676059212, hamiltonian_energy_error = -0.20370340734182957, max_hamiltonian_energy_error = -0.9284247076800387, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9119585561743558, log_density = 15.43761683179751, hamiltonian_energy = -5.846360774423555, hamiltonian_energy_error = -0.8727408982772271, max_hamiltonian_energy_error = -1.1912030476415403, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9197037210427133, log_density = 15.021594182061989, hamiltonian_energy = -13.279389251985455, hamiltonian_energy_error = 0.07206921341975914, max_hamiltonian_energy_error = -0.27961829790195303, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 14.421061702861724, hamiltonian_energy = -14.057560153845577, hamiltonian_energy_error = -0.008079889388156403, max_hamiltonian_energy_error = -0.3211871250491729, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9623643689309329, log_density = 13.981412395810963, hamiltonian_energy = -12.930378284091868, hamiltonian_energy_error = 0.08528516480370385, max_hamiltonian_energy_error = -0.25928537507823, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9846181842066735, log_density = 17.189182310136463, hamiltonian_energy = -13.179309854052853, hamiltonian_energy_error = -0.3243658622012937, max_hamiltonian_energy_error = -0.5340568277442248, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9932983802058934, log_density = 16.878661175614514, hamiltonian_energy = -14.924484326320602, hamiltonian_energy_error = -0.017594538984962327, max_hamiltonian_energy_error = -0.18670710979682426, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9525143517533832, log_density = 17.16015868556588, hamiltonian_energy = -13.527676940123502, hamiltonian_energy_error = -0.08046264687991744, max_hamiltonian_energy_error = 0.1372064120660461, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8960465695565133, log_density = 15.472909170369753, hamiltonian_energy = -13.676824899510937, hamiltonian_energy_error = 0.09216070090831607, max_hamiltonian_energy_error = 0.1907902411603235, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9121501124686963, log_density = 14.681299523793399, hamiltonian_energy = -13.896538412821712, hamiltonian_energy_error = 0.07115936445366522, max_hamiltonian_energy_error = 0.21674298450612284, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9381926662261356, log_density = 13.91261134152721, hamiltonian_energy = -10.897691037879333, hamiltonian_energy_error = 0.021365987624022864, max_hamiltonian_energy_error = 0.2530163703259607, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7334205627695702, log_density = 16.35416397200889, hamiltonian_energy = -10.413628998474843, hamiltonian_energy_error = -0.007643067275660442, max_hamiltonian_energy_error = 0.6865926503787776, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9780890140530079, log_density = 16.141499227700066, hamiltonian_energy = -15.049502307234688, hamiltonian_energy_error = 0.06556478691956613, max_hamiltonian_energy_error = -0.178163601994898, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.3417902597312443, log_density = 6.144909695385037, hamiltonian_energy = -4.975741453433991, hamiltonian_energy_error = 1.4057865640677916, max_hamiltonian_energy_error = 1.4057865640677916, tree_depth = 2, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9602754174620726, log_density = 18.27848726402697, hamiltonian_energy = -2.682297054675878, hamiltonian_energy_error = -1.615327877906478, max_hamiltonian_energy_error = -1.615327877906478, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.8069815144677727, log_density = 16.787627413413396, hamiltonian_energy = -14.570264243763422, hamiltonian_energy_error = 0.14535226032035808, max_hamiltonian_energy_error = 0.4014763847984746, tree_depth = 4, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9999900704452178, log_density = 18.34809908781285, hamiltonian_energy = -16.613433215131025, hamiltonian_energy_error = -0.09849535651407848, max_hamiltonian_energy_error = -0.09849535651407848, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9987851885667498, log_density = 18.407584516026176, hamiltonian_energy = -18.282404533018653, hamiltonian_energy_error = -0.0074949808677367, max_hamiltonian_energy_error = -0.010614478371142155, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9367642594338577, log_density = 17.12027897721998, hamiltonian_energy = -16.67785229464125, hamiltonian_energy_error = 0.03703227079332194, max_hamiltonian_energy_error = 0.11893431845518876, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9996451552285396, log_density = 17.452871739390368, hamiltonian_energy = -15.726591559317503, hamiltonian_energy_error = -0.029127161141014213, max_hamiltonian_energy_error = -0.07062487223445757, tree_depth = 3, numerical_error = false, step_size = 0.12856473708033422, nom_step_size = 0.12856473708033422, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other WrappedGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising WrappedGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#AbstractGP","page":"Internals","title":"AbstractGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP and CompositeGP implement the AbstractGPs.jl API. Please refer to the AbstractGPs.jl docs for more info on this.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#WrappedGP","page":"Internals","title":"WrappedGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a WrappedGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = wrap(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for WrappedGPs in terms of the AbstractGP that they wrap. So if you want a particular behaviour, just make sure that the AbstractGP that you wrap has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = wrap(GP(mf, kf), gpc)\ng = wrap(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = wrap(GP(mf, kf), GPC())\ng = wrap(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and GPs. We describe the implemented transformations below.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of WrappedGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = wrap(GP(SEKernel()), gpc)\nf2 = wrap(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"}]
}
