var documenterSearchIndex = {"docs":
[{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx_local = randn(5)\n\nx = BlockData(GPPPInput(:f1, x_local), GPPPInput(:f2, x_local), GPPPInput(:f3, x_local))\n\ny = rand(f(x, 1e-12))\n\nf1, f2, f3 = split(x, y)\n\nisapprox(f1 + f2, f3; rtol=1e-4)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPINput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the GP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = wrap(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we that makes use of a variety of packages from the Julia ecosystem. In particular, we'll make use of","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.02.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"23.235477300396568","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well.\n    s_noise = positive(0.1),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-0.9162907691270586, Bijectors.Exp{0}(), 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.6094379869399091, Bijectors.Exp{0}(), 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(1.6094379094538682, Bijectors.Exp{0}(), 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.490116130486996e-8, Bijectors.Exp{0}(), 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-2.3025852420056685, Bijectors.Exp{0}(), 1.4901161193847656e-8))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     4.486534e+00     3.149291e+01\n * time: 0.025702953338623047\n     1    -1.104952e+01     2.404144e+01\n * time: 1.4912619590759277\n     2    -1.351885e+01     2.211258e+01\n * time: 1.5023188591003418\n     3    -1.582531e+01     2.016782e+01\n * time: 1.5150959491729736\n     4    -2.132384e+01     1.349502e+01\n * time: 1.5263569355010986\n     5    -2.460134e+01     3.054522e+00\n * time: 1.537513017654419\n     6    -2.546504e+01     5.442546e-01\n * time: 1.5481998920440674\n     7    -2.551373e+01     2.775747e-01\n * time: 1.5603768825531006\n     8    -2.557121e+01     5.209730e-01\n * time: 1.577023983001709\n     9    -2.559360e+01     1.435788e-01\n * time: 1.6091198921203613\n    10    -2.559619e+01     7.493958e-02\n * time: 1.6251049041748047\n    11    -2.559933e+01     1.944014e-01\n * time: 1.642746925354004\n    12    -2.560114e+01     8.889786e-02\n * time: 1.6612858772277832\n    13    -2.560178e+01     9.883470e-02\n * time: 1.6794848442077637\n    14    -2.560215e+01     5.135566e-02\n * time: 1.711859941482544\n    15    -2.560230e+01     3.823622e-02\n * time: 1.7293739318847656\n    16    -2.560235e+01     2.038104e-02\n * time: 1.7460298538208008\n    17    -2.560238e+01     1.611310e-02\n * time: 1.7623789310455322\n    18    -2.560239e+01     7.827934e-03\n * time: 1.7816839218139648\n    19    -2.560239e+01     6.797579e-03\n * time: 1.7983980178833008\n    20    -2.560239e+01     2.901530e-03\n * time: 1.8231439590454102\n    21    -2.560239e+01     2.828228e-03\n * time: 1.8396408557891846\n    22    -2.560240e+01     1.030492e-03\n * time: 1.8565199375152588\n    23    -2.560240e+01     1.127598e-03\n * time: 1.876417875289917\n    24    -2.560240e+01     3.559809e-04\n * time: 1.8937900066375732\n    25    -2.560240e+01     4.207231e-04\n * time: 1.9188339710235596\n    26    -2.560240e+01     1.252089e-04\n * time: 1.9350919723510742\n    27    -2.560240e+01     1.508232e-04\n * time: 1.9512979984283447\n    28    -2.560240e+01     4.582611e-05\n * time: 1.9683709144592285\n    29    -2.560240e+01     5.449926e-05\n * time: 1.9856209754943848\n    30    -2.560240e+01     1.697706e-05\n * time: 2.0028388500213623\n    31    -2.560240e+01     1.997568e-05\n * time: 2.0282959938049316\n    32    -2.560240e+01     6.245155e-06\n * time: 2.0450968742370605\n    33    -2.560240e+01     7.344060e-06\n * time: 2.061836004257202\n    34    -2.560240e+01     2.282576e-06\n * time: 2.0794639587402344\n    35    -2.560240e+01     2.692671e-06\n * time: 2.0970778465270996\n    36    -2.560240e+01     8.334886e-07\n * time: 2.1218488216400146\n    37    -2.560240e+01     9.849062e-07\n * time: 2.138650894165039\n    38    -2.560240e+01     3.048542e-07\n * time: 2.155345916748047\n    39    -2.560240e+01     3.601645e-07\n * time: 2.1730799674987793\n    40    -2.560240e+01     1.116230e-07\n * time: 2.1905388832092285\n    41    -2.560240e+01     1.317922e-07\n * time: 2.2074549198150635\n    42    -2.560240e+01     4.087020e-08\n * time: 2.2324700355529785\n    43    -2.560240e+01     4.824320e-08\n * time: 2.24867582321167\n    44    -2.560240e+01     1.495863e-08\n * time: 2.265286922454834\n    45    -2.560240e+01     1.765973e-08\n * time: 2.2828938961029053\n    46    -2.560240e+01     5.474455e-09\n * time: 2.3002090454101562\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -0.929229140633627\n -1.5424337543705462\n  1.4589911657650216\n -0.10315950268383607\n -2.2058764874747516","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.4),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-0.929229140633627, -1.5424337543705462, 1.4589911657650216, -0.10315950268383607, -2.2058764874747516], [-0.929229140633627, -1.5424337543705462, 1.4589911657650216, -0.10315950268383607, -2.2058764874747516], [-0.749533488675576, -1.9112787573046737, 1.273004295178951, -0.5397938522829957, -3.8243594950710165], [-0.7685871658383987, -1.709525389727422, 1.1888932300192363, -0.31472477253958986, -3.804709045121609], [-0.16174798450307798, -0.9546769986886651, 2.0028391425122876, -0.1028544770472201, -3.433639569051825], [0.08773680069857358, -0.8013107009534565, 2.061350007361635, -0.2410133656789469, -3.585950501437064], [-0.15060652842606176, -0.9797734671585602, 1.3254792979985341, -0.2770326352677132, -3.624823558252654], [-0.15060652842606176, -0.9797734671585602, 1.3254792979985341, -0.2770326352677132, -3.624823558252654], [-0.1236530878822874, -1.0240797971616955, 1.3899696394437042, -0.002513472850925699, -3.5081883844277217], [-0.2493541766210951, -0.9997238947801343, 1.3928930792044407, -0.04384262316547151, -3.6176850880186944], [-0.216675167095165, -1.414822227675668, 1.6487047640635943, -0.3579652933842577, -3.3725774094451495], [-0.9481868548623222, -1.694051868861293, 2.219260002263293, -0.970342770196742, -3.7799444244552167], [-0.8113128649412107, -1.712449809486613, 1.8839531202831876, -0.9838933928906229, -3.6081382593361306], [-0.8113128649412107, -1.712449809486613, 1.8839531202831876, -0.9838933928906229, -3.6081382593361306], [-0.7867206489453069, -1.3301663286055623, 1.5086004040997723, -0.6321239565051142, -3.7316630787906195], [-1.0928832514555504, -1.670340701492075, 1.4258422458207485, -0.462018865725484, -3.622151953605284], [-1.0446243986867332, -1.5975431735101893, 1.350177240199704, -0.4403802556137802, -3.6574149094278794], [-0.3365222636572134, -1.5068895690762418, 1.1766813739695439, -0.8576859887639054, -3.4279592948121156], [-0.3849040032171912, -0.6536452921202355, 1.2328109026207135, 0.03800539986616344, -3.7038020411828594], [-0.1620247400160782, -1.5283567285421527, 1.1107228802986875, -0.7704052644469658, -3.4698093721419454], [1.391730335882684, -1.2943878021483364, 0.28998631112234563, -0.525629081484359, -3.7633654424879186], [1.366196918187724, -0.9273063362620333, -0.21645346719397035, -0.652856164384569, -3.2374726742521185], [1.2416408787016509, -0.13303864798720114, -0.22738733251489576, -0.7910072285781377, -3.7254849022424272], [1.27858009204852, 0.4029229414285174, -0.2723769939199992, -1.1083392293684415, -3.310299908503519], [1.734605609477905, -0.24574587632898123, -0.29785471587795864, -1.306733967716967, -3.845405626933107], [2.1116515861302276, -0.6644993435265203, -0.6281894366387729, -1.5278608567867897, -3.4600251282514387], [2.2824202322441756, -1.1367243690771158, -0.4299360884608836, -1.302662054914805, -3.7212441515167773], [2.4088537698460364, -1.3788505133591507, -0.12069260545953298, -1.353033521709054, -3.654596120368394], [2.381049952659994, -0.4407971219697747, -0.6846716247347928, -1.341541583358116, -3.506816885334787], [2.2337055657191334, -0.37068989737814184, -0.6045894621629795, -1.5201506579612623, -3.4337151472682175], [2.291225975847792, -0.54687073867235, -0.19198904925172644, -1.358109260829781, -3.8073451997989443], [1.1385431446787013, -0.36810183202147184, -0.9211532706124491, -1.2869636532205047, -3.5160656633087477], [0.7149875522878847, -0.9002158270018077, -0.40098254370085906, -1.5482884932493277, -3.536425502706676], [0.0018040031513591043, -0.8487269430696124, -0.6942025386416105, -0.9750731608643882, -3.786209091708949], [1.281692742153122, -0.3739396786343828, -0.9485376380791221, -1.8225066248557074, -3.545825484567478], [-0.029879477785469788, -1.1921911190562404, 0.4350734142741339, 0.08085389541907465, -3.729932761386864], [0.09902278803793654, -0.5692851158029113, 2.0141159934694466, 0.3896166116764452, -3.490631401311126], [-0.10544305762364221, -1.0332378649742253, 1.6300716998212426, 0.18928779224025982, -3.6495253253867066], [-0.108770667578094, -1.0013040571786027, 1.7268802990359027, -0.0613975827335579, -3.6527283370354646], [0.04970381146103836, -0.5830701463923591, 1.9383848835777084, 0.07213966082979326, -3.684486361198143], [-1.1796791915405458, -2.053477742784974, 2.0376764564141348, 0.06440751734946226, -3.441729882872989], [-0.6638270259756118, -0.9677823088809326, 2.4809871935713623, -1.0305224505258552, -3.925885853119365], [-0.9595935847190356, -0.9641292666324762, 2.400112407288694, 0.18932405075315728, -3.714481755672389], [-0.08456251750546333, -1.811535942375249, 1.3370930792260407, 0.06632998495384221, -3.637340075208919], [-0.3070985690011751, -1.3984009110873943, 0.8589016557287318, 0.25517462643815414, -3.738035058016644], [-0.8718680828928571, -1.4879959243190832, 2.656116526664482, -0.17124262365398524, -3.668358600388323], [0.08012623119618088, -0.26719142949794933, 1.4270511687318967, -0.37804653296087104, -3.72239881134884], [-0.10773476642664341, -0.9070876910388366, 1.755094628555093, -0.4562780748620819, -3.4862567049197977], [-0.8986939544483238, -1.725223203175379, 1.7653049071008393, -0.39155540788868937, -3.9370126914982455], [-0.6518661167697032, -1.618149728117942, 1.7623149632799937, -0.046708857584956784, -3.379528723919331], [-0.6263719249597378, -1.6525529076353163, 1.4495362857836813, -0.19327384660923425, -3.8850797477766754], [-0.7969622996687572, -1.3215745040581124, 1.4546939851311582, -0.163579719039113, -3.7829207287721114], [-0.5463454871518656, -1.481701484888612, 1.141743872131016, -0.3978102597169159, -3.6554390196007396], [-0.5293315522207487, -1.365919145474605, 1.3671126136674865, 0.3403332061686348, -3.616396754747799], [-0.6678644912300649, -1.6684255514194875, 1.8616248539555678, -0.0898964437410085, -3.6506021276092633], [-0.4277755733128727, -1.396881952349599, 1.8125702971005677, -0.4733962412876681, -3.532926921739021], [-0.19307451025404282, -1.2831731673778302, 1.1890006532809614, -1.0624698139092672, -3.903197800171707], [-0.23772323095904874, -1.5756907737181618, 2.3615058369595463, 0.24823333827493768, -3.5286415346015247], [-0.14507205613321816, -0.9485863812729012, 2.7938660360453293, 0.4044543403766188, -3.530050179646354], [0.9436916218962281, -0.2987177521573153, 0.2946357377584707, -0.20319339478934523, -3.5877225164164632], [0.9436916218962281, -0.2987177521573153, 0.2946357377584707, -0.20319339478934523, -3.5877225164164632], [0.4423043907201314, -0.2516765755751058, -0.1131476751612751, -0.7624683662863058, -3.665561884109862], [-1.0233203830437512, -1.4007106258388646, 1.2284011662631955, -0.7607739778906221, -3.99745329228883], [-0.5444414909292501, -1.2581739150245161, 2.088957641041305, 0.7146475378858208, -3.8712369651372787], [-0.5461893756999786, -1.316817161929062, 2.2080829743982173, 0.7757163382089151, -3.6040923302552597], [-0.9243763999303253, -1.6894014086368543, 1.3058365041335669, -0.9845712520643622, -3.777089663881653], [-0.22706035830387722, -1.3515922090568637, 2.0070236356862368, -0.7946134920577433, -3.6998156522390384], [-0.2926328577400361, -1.3004533971730552, 1.1617021471654299, -0.14326816350256352, -3.7799172040664732], [-0.11866314938140046, -0.9135105541625398, 1.1583206432269086, -0.9583955395357614, -3.532116707022845], [-1.0200399171652363, -1.5043719442021426, 1.1172258146004128, -0.2718162313439031, -3.7751366148513026], [-0.8742610542933964, -1.5608842068761593, 1.3937285227496763, -0.43899996374042605, -3.80302517753916], [0.15186815709626475, -0.8970117479530649, 0.6994720290516999, -0.2515933732646104, -3.5652725646982324], [-0.6808730048848579, -1.4743524510207209, 2.9549834535396697, -0.6920858740839918, -3.8314645937979646], [-0.795075833867835, -1.570513272059604, 1.1407480823296796, -0.24395240957891134, -3.6641581184611782], [-0.8097278269814197, -1.4678286356868748, 1.7523039074729907, -0.18944145512760222, -3.63230225535577], [-0.953681225491477, -1.6547661111649, 1.638108183402511, -0.1787953200830627, -3.9128616017170077], [-0.6215299650254265, -1.4165322210101892, 1.445747957049245, 0.03942031146699456, -3.5470974705845584], [-0.4501162504985144, -1.487473231841047, 1.8067357887696436, -0.029445446925814835, -3.699923876139434], [-0.5632622583314134, -1.5652204710714275, 1.3972977661939605, -0.09520675389548858, -3.422496993174082], [-0.7460828497764993, -1.6871213034910817, 1.9780149286740232, -0.49531506030399897, -3.7560230791273845], [-0.9700690559277645, -1.510575054006364, 1.6292496824389624, -0.22555269237867157, -3.6809768567606302], [-1.0029256580109647, -1.491324577164275, 1.5538213665841374, -0.1581789449058448, -3.8781111940152835], [-1.461711063078636, -1.812126777897098, 1.8348868493305361, 0.30355831181751836, -3.888652631661124], [-0.23780570335401155, -0.5938257946209597, 1.8546602628455653, -0.6844513917996833, -3.707560451228237], [-0.33590756111547676, -1.2511092495941765, 1.2715840036861523, -0.8523128427673734, -3.076165636027804], [-0.23912371121441675, -1.6066429412081993, 1.7630041919971373, -0.5712635557671928, -3.7699857580977647], [-0.5764101651294935, -1.7220208286130907, 1.4201157127959207, -0.9594119015899953, -3.4752910377463224], [-0.6686757900471033, -1.5121533901955246, 1.3594090410593411, -0.8223677858309487, -3.770049242333708], [-0.9417888244334397, -1.6734592134672708, 1.3628609698505043, 0.038600392833899336, -3.8571628459275358], [-0.6231212395388346, -1.5393222608254076, 2.0858025200922152, -0.6309259965689851, -3.9103875735026965], [-0.6976302234141375, -1.7860945111271669, 0.6160916182357942, -0.5470674686950753, -3.809126777953415], [-0.6305765295097644, -1.5477810057062662, 2.331470472214998, -0.5578008482828299, -3.6334988751034403], [-1.3022842219578254, -1.6452482853942032, 2.4505439257378603, 0.13588242190535538, -3.8693131643715235], [-0.8925663890650712, -1.6163240144345268, 2.199444463154847, -0.10477493506143028, -3.8980072213407624], [-0.3675155943562192, -1.6155540844312901, 1.6251391471566234, -0.9817912297763115, -3.729389993652429], [-1.0487703282544998, -1.4549367436608265, 1.753558872263753, 0.20501822641598377, -3.624867155337879], [-0.33893898385590876, -1.2131633434400197, 2.0341712140577863, 0.741747373327392, -3.50257190865905], [-0.3774998190454653, -1.7193514435574926, 1.8744932804149204, -0.8478576918627319, -3.7492129142581154], [-0.07058195517718287, -0.6709293285178215, 0.6689109289774635, -0.8504347149771745, -3.35450441583269], [0.027186541252101265, -0.6899699139529853, 0.6569670592210684, -0.9816357241373824, -3.407466501780545], [0.15781012000972952, -0.5338412045436787, 0.0719574776032274, -1.2490058017536925, -3.461125352206012], [-0.10473087901929218, -0.8340778320860209, 0.9296491243968257, -1.1263684106282934, -3.6286559545748247], [1.105313965035545, -0.8906744457484997, 0.10672307977066539, -0.5532394360197577, -3.5762508400533197], [1.0964398045370778, -0.9362252189628487, -0.05600531450661786, -0.5625766229080178, -3.4801656800299265], [-0.41811622167888945, -2.1966885439098713, 0.22662460468662632, -0.6161213546069347, -3.6272649526537633], [0.3369642778635033, -1.3361460290718281, 0.19606750487408237, -0.582637058861198, -3.5337450227480782], [0.30239226094867805, -0.8433234106262264, 0.2975885196032147, -0.22799536723218677, -3.580008939148769], [-0.13622201969810627, -0.9328741844976309, 0.9955923676319629, -1.3193669693003318, -3.531196657009988], [0.03990023454411473, -0.9089689920778081, 0.9911302497690224, -1.4749788039836778, -3.6463205630166455], [0.029875945249279057, -0.5924610214556689, 0.792165651068432, -0.38891263942258986, -3.7765173855478817], [-1.4676441435068235, -2.710780516904587, -0.03505463980652348, -0.6507936164253408, -3.85022941408026], [-1.8376133815655986, -2.3458891478653556, 0.1303528728999415, -0.4906924376127079, -3.759369032004675], [-1.7357813062352256, -2.3594494405948225, 0.18467180874677164, -0.35258049427280275, -3.8513416039361803], [-1.1058194666648695, -2.8415986180703916, 0.10422918670580592, -0.5778320069174618, -3.6005100289082552], [-1.0099349015749206, -2.850706521870293, 0.07947049788377208, -0.6035864570718177, -3.3549171468514536], [-0.8074176014721658, -2.6502734712725764, 0.1915506355599416, -0.20108596761241568, -3.8333364554887766], [-1.8734351968763958, -2.135477477138446, 0.07044599837786694, -0.6489850707147747, -4.119666020626125], [-1.7301103562206555, -1.997144452588749, -0.06725717625543084, -0.32484204458447263, -3.8188498539724423], [-0.1167721453511564, -0.543738495399307, 2.625798907136521, -0.9918429416095547, -3.6513640820052506], [0.02741541615533198, -0.6671993703750181, 2.6035640879158275, -1.0455232998714792, -3.598001514434725], [-0.10268612756222908, -1.2236846251861693, 2.7182635182084622, 0.3160982070006431, -3.6269368387613032], [-1.4016123896916974, -1.6809370793870186, 2.5351228605240546, -0.1788877870307129, -3.9161779139316404], [0.06754103552712237, -1.0329200170040431, 2.9237869485888774, -1.043210657889315, -3.53234931059776], [-0.015317932376990917, -0.8744768537298186, 2.832322306419706, -1.2276933204602574, -3.318626314682776], [-0.0653536765425773, -0.8049650418965937, 2.661347904690541, -0.985480258563476, -3.434493447810635], [-0.6084762057202967, -1.6233214697286864, 2.461170672876045, -0.6231565853778374, -3.4034885688396943], [-0.7015014471841108, -1.534750513342333, 3.158554831677274, -0.686687797583204, -3.8599161413244603], [-0.848719515981265, -1.3283747821964238, 3.1272960342815197, -0.4492079259452931, -3.918429535006572], [-0.7174127004929869, -2.1282096428008908, 3.2796381693255454, 0.04247306255760162, -3.689753990867012], [-0.7154640446852941, -1.4627120662860427, 2.993438905824586, 0.2545869209377323, -3.8339383155240543], [-1.065812674497764, -1.8743679089461218, 2.922562358744647, 0.3947362644365774, -3.646090464324704], [-0.9418360133042714, -1.0129193805444165, 0.9170876324999923, -1.0914741066533733, -3.7218204131934947], [-0.9290017690264799, -1.9762810346869666, 1.2003636640092685, 0.5141396536386714, -3.491610988548591], [-0.9001572996201187, -1.3863927768569826, 1.6358171504171826, -0.631226977266952, -3.9568499234876247], [-0.06579712510138586, -0.9752565032290064, 1.1078930006183518, -0.0638391750178319, -3.326515344964284], [0.0006335435412205964, -1.0276438351847945, 1.0845440790248868, -0.03191556972507303, -3.4257556069830817], [-0.1380955305030519, -1.0622887289933383, 1.3444617034921669, -0.7142052602379585, -3.6738985336851133], [-0.3759908661969504, -1.426904780274951, 1.3688740483778408, -0.16575670238764117, -3.5143470079046573], [-0.9609190983846507, -1.7296431340813454, 1.7418285032830136, 0.038941399934935395, -3.6944480694087214], [0.23543686506126096, -0.13819375809903545, 0.6733126262855507, -1.3352390622291412, -3.403942521512353], [2.406376236414271, -0.8856593208643414, -0.8360496952187799, -1.9912570121961868, -3.5497361078379703], [2.4338652661574276, -0.7823625037045874, -0.8543640885544973, -2.1044682642913877, -3.4636042442311146], [0.9921791968082136, -1.2829015046766543, 0.19658955843774586, 0.17797057068916056, -3.6304298899332403], [-0.7415746119371283, -1.4872489492501275, 3.1490566609701793, 0.3081728961742851, -3.7514454154185595], [-0.9869523084741694, -1.4162669013410025, 3.2674147682263426, -1.561739663411984, -3.838312310924516], [-0.5252434164836136, -1.4364476642153525, 1.6886370814753453, 0.675846504062831, -3.64265308513827], [-0.6051994127389722, -1.8460624128136094, 1.4642971111683534, -0.13553307458881603, -3.639781112963389], [-0.7192204733310175, -1.9453762808149284, 1.4356758743518716, -0.12540880471259613, -3.6283175769488656], [-0.5732565825082855, -1.771648018410905, 1.9357011827291313, -0.0315546933657737, -3.5012722669074536], [-0.31309538870090226, -1.2438128163527582, 1.810563067806553, 0.0742002884931499, -3.7452865950875216], [-0.8207195857807609, -1.2693797446134574, 1.5537766496398064, -0.3246556153928167, -3.6219304997860258], [-0.699735490351536, -1.7146329210237683, 1.4589989385041653, -1.0826473890621808, -3.7933972908141658], [-0.005962566927123415, -0.7611998104604237, 0.9105928136317372, -0.24902882452569733, -3.405671053154617], [-0.6733420481124808, -1.69419661404391, 1.340836325571294, -0.8745116835815349, -3.5493137962650807], [-1.2077639685635908, -1.4618085474304443, 0.9336644287148673, 0.03891160282902978, -3.9661485158728658], [-0.1670749444270156, -1.7514529897686075, 1.3764955983480565, -0.11441957654685325, -3.7238854207950904], [-0.377515359580165, -1.656249267028577, 1.4404973919494524, -0.11094170850414158, -3.7809045851788827], [-0.48558845489934394, -1.547682320178952, 1.6187855752316613, -0.10717901203240547, -3.65365612998203], [-0.3715629302962501, -0.8741528027471519, 1.0888067821467524, -0.8776903582002918, -3.5896879019784795], [-0.9718097109759984, -1.4224004190799948, 2.279957544863272, -0.14805981704832788, -4.099130056924613], [-0.16203367862812731, -1.313536705762299, 1.583617813707348, -1.1455930535608678, -3.6115661707509914], [-0.783058051678827, -1.4831019546970825, 1.2302923258348826, -0.07442778473190165, -3.7008419696895505], [-1.0715977318179755, -1.6001208526556197, 1.2445526807290015, -0.4297188814657204, -3.827695587761696], [-0.390939181048124, -1.4802203260610456, 1.1682022417255433, -0.27524999602064565, -3.5562842139014585], [-0.011040103952795005, -0.9648684230752146, 1.4889501808132402, -0.7953857658853382, -3.4289911274160843], [-1.1921426698743356, -1.7478737777846214, 2.1408060548589147, -0.5846508040152901, -3.6831227527720167], [-1.0653769974042566, -1.880524394622807, 2.0752164469927985, -0.529790892255304, -3.5978274852566527], [-1.1478811747346782, -1.6624234729494394, 2.069027425636591, -0.2977097143199928, -3.5849715790843755], [-0.19728877953546817, -1.2040340768436602, 1.7530861503051016, 0.1362880717237961, -3.46561102802537], [0.03864609295101408, -0.8023917083780114, 0.25802012034785426, -1.3230874786041997, -3.692436890578062], [0.0038276679955873277, -0.6933236967991483, 1.3387339163303953, -0.7010972363975193, -3.729642257109617], [-0.44471347518544974, -1.2982139182301207, 1.6274799133387516, -1.2562864432557186, -3.7823510380883443], [-1.0569131848926745, -1.546998509596616, 1.2571787586526422, -0.047947128176161924, -4.026917638850633], [-1.1266586222706052, -1.80867930839547, 1.6609360213699516, -0.09481177926554102, -3.6009967840466963], [-1.0881765128786434, -1.5100524844416838, 1.8643988251775687, -0.31701968235939715, -3.71018674370065], [-0.8956567267269409, -1.3350430857172402, 1.6324988229045334, -0.7806063416243438, -4.0117608083963985], [-0.9800496958018962, -1.273123817188944, 1.6024707351185514, -0.7757348609150931, -3.8904179754157724], [-1.037227532410195, -1.3280633449514392, 1.5968237108876333, -0.7914058430118036, -4.008811223649175], [-0.6637627488965792, -1.7588487944222952, 2.121235841627509, -0.45007194472839746, -3.3645244649089285], [-0.9764909413726576, -1.1409775556467014, 1.7558949618577424, 0.04947206125036452, -3.557579441343905], [-0.5758417761102598, -1.6881713196447965, 2.135039631764473, 0.42831437549683615, -3.9132824906102366], [-0.7656912062576846, -1.536993739959255, 1.2507087999397097, -0.574855656831706, -3.8331730068582965], [-1.094846989131096, -1.6788650953316944, 0.6682759612902243, -0.20065639069714764, -3.647522547038497], [-0.6322361514681407, -1.5766873775565553, 1.2388505691470557, -0.3523070769020055, -3.886055999971112], [0.22950917379666597, -0.3669633228576499, 1.0082520598990845, -0.6492786974582246, -3.5371440984048172], [-0.10727151460738432, -1.2485460694938262, 0.8147060259900808, -1.1384117344777767, -3.611045917327137], [-0.17392612549554712, -1.0922376125247755, 0.9368779478211902, -0.7284382618462064, -3.3978050138770044], [-0.1517949258266971, -0.986236400371901, 1.1558167627739442, -0.46795873324412973, -3.728467164502733], [-0.07567753601112331, -0.7620893353891808, 0.49768873459658103, -0.5100719597227136, -3.5256422872830018], [-0.3581573327193506, -1.6694513309019294, 0.4515896452977294, -0.6557032193001662, -3.640136887259433], [-0.7102433785373932, -1.265839279869289, -0.1244664421877981, -0.6605088027268334, -3.6408789958307364], [-0.6786498022988944, -1.8264372534040794, 1.3616757511096074, -0.2832378723868005, -3.923546679548513], [-0.25717518120090255, -1.4767501261417426, 1.1973059284776542, -0.26925906856666426, -3.7809132052716534], [-0.07031539112706345, -0.760040380212973, 1.142628945862257, -0.6338354740588062, -3.6948339770253487], [-0.09883417909042556, -0.6294126150443495, 1.1854489948856388, -0.647087378266004, -3.5445976006505755], [-0.6835613250310878, -1.5321607634817254, 1.4769444888979473, -0.81614267788124, -3.7688290684700902], [-0.6659314017205599, -1.3366412041400992, 0.5069889058662183, -0.4139596510807359, -3.8283129976134096], [-0.4138464279980624, -1.4604847240509833, 0.4926945486821016, -0.9394730156967309, -3.2730524865765687], [-0.0915698504764334, -1.3675687481668315, 0.9381890210782344, -1.0445778588474195, -3.778717706608953], [-0.28424434342665694, -0.9578277357518639, 1.7132977803468223, -0.30567022597198934, -3.6544702535218496], [-0.7319642376856094, -1.36862866224671, 1.3061266911891354, -0.8335522033118966, -3.7365349037188222], [-0.6659956016507604, -1.2065547618669894, 1.39428035571544, -0.6740371322004163, -3.7833431677257625], [-0.447194135947082, -1.0651254674736859, 1.667428636588148, -0.6200268500954415, -3.6493388611128745], [-0.4190659778114996, -1.090401920130527, 1.7185909053650266, -0.643327798008089, -3.613369308815243], [0.0471188209837269, -1.2527441234888477, 1.8248940286606836, -0.5181072743981501, -3.625627107488234], [-0.40807433349157884, -0.9452164221328783, 1.9639786711027862, -0.3024414005485572, -3.6678609523564245], [-0.9526931045063912, -1.4968771602196598, 2.659247565585899, -0.7798875544885331, -3.8559675445764934], [-0.7835782779211503, -1.442142742361255, 2.4302962153028655, -1.0052918478210051, -3.6729297578623115], [-1.062709970040323, -1.479001013166528, 2.9267210481043606, -0.7420650287846157, -3.7740521297430596], [-0.9895951488202531, -1.5331583440953664, 2.8898407395431263, -1.2884947068786896, -3.8203997357930892], [-0.5835239998265167, -1.5364181248964501, 2.7887094306763127, -0.8802511514244724, -3.624875408037104], [-1.1080751778762414, -1.5560282119509095, 2.3617977546590447, -1.3058116408940896, -3.853264544161004], [-1.0008976524755073, -1.524781143290601, 2.3651456174619097, -1.4061909742432441, -3.8519903708635246], [-0.9412678238523775, -1.5500737774126345, 2.0550950416031415, -0.3811309646583058, -3.545491321730609], [-0.8616806147050676, -1.5764547680714769, 2.2475477598225497, -0.23941670072431415, -3.51908079954736], [-0.4590372205025646, -1.2110203883283712, 1.9893015960750255, -0.7114001304906095, -3.583198748650854], [-0.475930973336125, -1.1799092633712491, 0.8475381193237641, -0.10952134619801382, -3.738309526865897], [1.9132591040683151, -0.372590409845752, -0.22386617420211644, -1.3109064373620425, -3.461371108292423], [2.071541966718759, -0.8476199002621324, -0.16940483191389544, -1.30001841303003, -3.499498817679906], [1.3752617672212526, 0.15962030424753956, -0.6823536214355022, -1.698301620210182, -3.533339883212131], [1.3757963672805287, 0.17449068243329857, -0.6593132690932026, -1.4690433652567185, -3.6122304454971568], [1.6570937440392555, -0.05039895436297681, -0.6996673208475191, -1.35702669981329, -3.8103634418405457], [1.283389837162441, 0.21371023422464228, -0.4757078345990211, -1.364636180890788, -3.5393198244745334], [1.61091854252563, -0.3431584058467984, -0.291259854243455, -1.2234506038242843, -3.737845003802441], [1.4195447570594564, -0.16643059288691098, -0.25363491585131165, -1.782734968209294, -3.3726857351560087], [2.6539329563350837, 0.3487998779194067, -0.5875622207761584, -2.0414877246727, -3.4877334776237583], [2.575831961290274, 0.38615692699040277, -0.6491119442764138, -1.9414282393490938, -3.520697102304366], [2.5908848728619387, -0.18217041301889902, -0.7691270484910868, -1.1973516916146694, -3.844717357366105], [2.0048041538339225, -0.759039592962668, -0.38651891358176005, -1.3425207923108307, -3.654237612751879], [2.159457210459707, -1.0158266058703516, -0.361794165227935, -1.0944840369602686, -3.481992766618956], [2.0907129058219347, -0.43022781793710163, -0.07143460985961825, -1.3975344214263654, -3.8131905415051723], [1.8463763836134512, -0.6098766999817703, -0.41811224373392375, -1.3134256966272875, -3.5682607177166785], [1.245626473283569, -0.2693084345305268, -0.8947233295463682, -1.9419937694997835, -3.726348084082291], [1.2736884370293966, -0.7757745410460211, -1.1499445838455333, -1.4436828688662675, -3.757707911223687], [1.9268812020706707, -0.4293697177471144, -0.9934684193590714, -1.6486799701781174, -3.522643274781201], [1.5753247610624446, -0.6236035513632323, 0.09655607083689374, -0.44910941485015354, -3.7303316961979514], [0.6204308541552962, -0.4360573274362509, -0.3887132487756437, -1.386578043621283, -3.6139677149958005], [2.18721281238107, -0.7596056716901018, -0.04525182121343692, -1.1524142347812698, -3.432170468072763], [0.1332786412776609, -0.42151088803067716, -1.32066832789727, -2.387955979739926, -3.7285237608052078], [0.07415668936179375, -0.7726143355871633, -1.544035094050367, -2.2697576754726185, -3.694258352551479], [0.41289564473676693, -0.4527360860077999, -0.9227716760816892, -1.7901935426444715, -3.9125413667114026], [1.4526217168506739, -0.6954602803266705, -0.6771295330480895, -1.2906209906823223, -3.6270583300936514], [1.339195811532242, -0.7085915793444358, -0.7681107674710193, -1.5195131369091497, -3.5492609769198427], [1.1715137944197502, -0.3645737762315285, -0.9019969519779221, -1.5189894453355706, -3.49045735052319], [1.2267421453367895, -0.48163902361366645, -0.6937686368390708, -1.4155062660617108, -3.691455666607096], [1.7686554654186444, -0.5859365622487878, -0.9440860434008093, -1.6072793946248873, -3.7387624688614713], [1.2924908065184846, -0.18023115910448578, -0.4893621335970192, -1.4668733204357598, -3.553722947747843], [0.8149441707776575, -0.259926180134508, 0.13087747219508664, -0.8083603135972572, -3.4910699331729456], [1.1967752602720894, -0.7421552385327932, -0.6559435556032626, -1.3756078859408767, -3.713628152954661], [1.37951871120234, -0.30403958253245544, -0.7763019628276687, -1.3328030553491503, -3.7991923059588957], [1.6897377682131414, -0.09576762859961191, -0.634004388942927, -1.3891392875451551, -3.6515209820787238], [1.2199100231252775, 0.13624179932050853, -0.6240930541039816, -1.330758810093539, -3.7111223121068306], [2.272001867954417, -0.6763267364488187, -1.0005244140961855, -1.5260211423600674, -3.6029411217394953], [0.463924370377978, -0.18257964439632735, -0.07980299902507236, -1.1219688199412237, -3.499826451020535], [1.075636046171847, -1.665653691372246, 0.10857591395605826, -0.281320858200559, -3.514777225930273], [1.075636046171847, -1.665653691372246, 0.10857591395605826, -0.281320858200559, -3.514777225930273], [-0.7607262810801323, -1.0906899580282379, 0.3024582869174347, -0.9383008669845291, -3.618580423474541], [-0.25886708173460793, -1.4505678622136788, 0.741672292774473, -0.9720398270407552, -3.619762912849908], [1.9817594107438765, -0.06880431553290743, 0.10877217049463486, -0.37512829477984666, -3.5024039956417368], [1.7999637240834938, 0.23677095988357913, 0.17707456355344062, -0.5542585818343728, -3.614970666345971], [1.6240062315020396, 0.30024405060069614, -0.03233693236664753, -0.3952315818907528, -3.57882531600267], [-0.6014000413313395, -1.2023589088178093, 1.0670638596935778, 0.14371459198055925, -3.8006114724336224], [-0.972528702163972, -1.5619564553163603, 1.259821461846146, -0.13110720103952528, -3.609766538376097], [-0.2361939058796146, -0.6909425226971954, 1.6909206459734183, -0.62618084915727, -3.255003907596998], [-0.18211207967823428, -0.5782325660015406, 1.7434009200113028, -0.7397974420801319, -3.3417866769432387], [-0.7370601172224608, -1.8858570654957623, 2.98467335855386, -0.7941861002184993, -3.52178061256944], [-0.2687583501745366, -1.1568775615174838, 1.3668200188027146, 0.4028610821152143, -3.659449162334993], [-0.4110000849750997, -1.2679685278029862, 1.3244171858954183, 0.2938461289779395, -3.601536711571348], [-0.5215379687811648, -1.434717603541592, 1.4389791458383412, -0.6640354019977311, -3.772588863826403], [-1.1506492696356507, -1.4828135115321341, 1.315958079980376, -0.6235815118558387, -3.678901232851025], [-1.5813536642610297, -1.3230258511587927, 1.537185221499331, -0.5081254285925321, -3.4137613873568053], [-1.4254592463063673, -1.5355648142221514, 1.4183736919183687, -0.6416124810735024, -3.5185496699513537], [-0.5704025361381333, -1.6643206057944229, 1.4485318719007136, -0.8117594035656426, -3.8640107323323205], [-0.2954836078384776, -1.3084283266771455, 1.7401298003534955, -0.37565036824323084, -3.3587635097259385], [-0.44173153775693563, -1.7201939075959913, 1.6506075881008853, -0.529229638503683, -3.540782252927064], [-0.8857248074438193, -1.7588326085238464, 2.4041489394519706, -0.5005779216831688, -3.670905458622059], [-0.6022602488922153, -1.6020959958860022, 2.4182269275445956, -0.4561137960225532, -3.8663098457894733], [-0.7003813450523421, -1.4765670870442316, 2.4250194739226427, -0.40155961267914986, -3.86328888478258], [-0.8643036635297712, -1.6854181115489197, 1.3271749808793256, 0.10446026776811757, -3.5967841750191507], [-0.6900517315243273, -1.3866454920547593, 1.9394718283172305, -0.3225295367443055, -3.815120487410609], [-0.13390606216074227, -1.6300469355489187, 1.7658353939325129, -0.7012019357799386, -3.436073873720077], [2.568645338783007, -0.898907496844565, -0.017623087285243297, -1.1275108808032548, -3.440712479358129], [2.3942175968992636, 0.464294925538589, -0.11678178276293577, -1.3248987468066282, -3.482561925492348], [1.1732991232565952, -0.029602153542879345, -0.43990420864316493, -1.211663141048998, -3.6868522170159976], [1.4828845804711595, 0.005938488345242299, -0.19118115313596046, -0.9842972785059267, -3.497294077099458], [2.4168691568973926, -1.1368849626467714, -0.3774222120121529, -1.2806054224155803, -3.555760360250091], [1.4000775115695199, -0.8870195736520277, -0.9827265944027748, -1.5834896883041716, -3.7709867330228763], [2.0236778015560333, 0.20901652597230846, -0.5115663604420141, -1.3184998556454952, -3.653057046565417], [2.2629890239796397, -0.4801162049326647, -0.9597512480744081, -1.60424127932119, -3.7039754123380106], [2.3185828102798878, -0.3546921500551327, -0.79364115031409, -1.0806587950495974, -3.944052304605399], [2.965666618441642, -0.8226508021935808, -1.0616921071362566, -1.9931975362823608, -3.535919483792368], [2.9778036420148997, -0.9481533853641643, -1.1396440877171548, -2.1473418891782585, -3.6765740587604037], [0.8348766967543041, -1.0005106463754596, 0.011344022560496714, -0.4694601278759924, -3.564629572373481], [1.144345002864869, -0.40217398549322914, -0.472255741919704, -1.4469031913241635, -3.4713702421887347], [2.0092659063001, 0.03508473623794391, -0.7748389951343062, -1.5779827099006756, -3.7751175902688496], [1.6496775362615619, -0.773672118315401, -0.5632186420576684, -1.4572527235192663, -3.7358077663230804], [0.8624753564103967, -0.41623161643058143, -0.7961904046202112, -1.568641388660873, -3.7531937791788827], [1.101648804845, -0.8214407081704195, -0.6575352497851887, -1.3252047364258992, -3.444264051079333], [2.2182426593605347, 0.2034404689062569, -0.048002953162784634, -1.0344236428124198, -3.8575698038272113], [2.0461964289985546, -0.08785501819634599, -0.2331511576437259, -1.235172411934426, -3.48918944664624], [1.947157762893991, 0.00957802937271958, 0.013917536954055301, -0.9750622113398362, -3.7765054004219287], [1.947157762893991, 0.00957802937271958, 0.013917536954055301, -0.9750622113398362, -3.7765054004219287], [3.4992227700949803, -0.6275532890200046, -0.30177408956281604, -1.2693604061050192, -3.796942892353734], [3.1101156411904127, 0.7429179290803938, -0.5496067402497891, -1.6781385793333792, -3.8046881930849934], [1.9169138858090138, -1.0887393457729238, -0.6291367944959444, -1.3162373976815558, -3.4489986302907507], [1.7146656830078777, -1.0076972395512842, -0.7324716996068479, -1.1683320804949402, -3.982640310455975], [1.2797238801709707, -0.03009333057852029, -1.1302608663732165, -2.0793443561681717, -3.748866226081372], [1.4698571090533525, -1.272126500756074, 0.1766222798442958, -0.848082700263547, -3.320401098303783], [1.8194565339423807, -0.7418232764999703, -0.3536533375973859, -1.0266458365587274, -3.8240947396865543], [1.772868051264098, -0.44696808347710376, -0.27002703228034525, -1.5890374379969228, -3.496925516507758], [1.7293645781102904, -0.21895175452901272, -0.35670224787158733, -1.5856774838259178, -3.8991688815862546], [1.7570083042474796, -0.27315610981673333, -0.48090285026140533, -1.2949507631027375, -3.533938525929274], [1.5740722189411698, -0.43931612105922585, -0.5726227501497767, -1.4971862660602584, -3.6883332294578834], [1.5208332531266373, -0.4917135957311749, -0.4928645538734234, -1.414882153743921, -3.5334657568162555], [1.5677305224229054, -0.7728132817532799, -0.08201777226488208, -0.9306165821943778, -3.539472803557684], [2.01916296830681, -0.15327641765405467, -0.45783346913745865, -1.327873508957625, -3.6195113963628884], [2.0745065400479485, -0.41976114433420775, -0.964805922683698, -1.3265128721339328, -3.6212191771906337], [1.7850265865863368, -0.7412852220620151, -0.6361676055348988, -1.4106017662018517, -3.876839655680264], [2.478026707131303, -0.33224694215514333, -0.7609769491078112, -1.3763976020534914, -3.825409942173133], [2.806046491785154, 0.04230372774666245, -0.7198761710240079, -1.4602973950140599, -3.622448189021317], [1.8510159092734952, 0.18465910791897164, -0.42243716039601603, -1.2664565433218293, -3.8124753777849687], [2.0541001561949592, -0.1986119371672981, -0.04187916349112496, -1.2831718876255147, -3.183146728656898], [2.2954821694091248, -0.4271228765657913, -0.4631864626469164, -1.205514226088075, -3.957855582601743], [2.4185705341329595, -0.29273097319411606, -0.9488664207462837, -1.8295992446849696, -3.493818555373785], [-0.09724658916114559, -0.8959121718441507, 0.21426203582568748, -0.2226468919058023, -3.538831265988319], [0.551831124620308, -1.0027060172289886, -0.06737344052092722, -1.0837758045305768, -3.5312240328365077], [2.5939926834526292, -0.09440898162464498, -0.14329223975288208, -1.311999572892581, -3.657846039732878], [0.1235402017071692, -0.6322230006645644, 0.09791228120769742, -0.9743892331604673, -3.736864274413313], [0.1451126006095449, -0.5355841482095975, 0.1805095275720871, -0.8883108566458531, -3.3535187936446187], [1.4206964571982237, -1.140622925814698, -0.09567436247145104, -0.9219174471980842, -3.357831641175468], [1.994123893620878, -2.029039136416709, -0.041652587126477014, -0.944269418519836, -3.782797910160231], [2.022784756393603, -0.830027844291308, -0.09140827870897392, -1.14964476029297, -3.415993843928856], [2.0185456975450635, -0.2571953242359437, -0.4670471372423305, -1.4578239801500041, -3.7588010710597293], [2.227528849730865, -1.1138023122284766, -0.4243219080079926, -1.5580495965783463, -3.4581497756790394], [1.5078444337872814, -0.1996264168861607, -0.42795451246892, -1.245695677379997, -3.7609063096214825], [-1.1837167390971646, -1.7330651421071837, 2.2063670191976916, -0.53141244970178, -3.6478020898089056], [-0.12145689254479694, -1.0908460207933255, 2.22803704017647, 1.357912162240405, -3.292750535229386], [-0.3815755634010431, -1.4378863363925227, 2.728996679632381, 0.334504913313161, -3.736073546327884], [-0.9990537151907002, -1.4419189844773832, 2.8413772404100945, -0.8470765303553567, -3.607947230668425], [-0.4612862750691523, -1.3425693269554897, 2.6379219491056065, -0.08709704515395944, -3.8382849819316998], [-0.4183917422826229, -1.497410481523556, 2.079326800139761, -0.19784417688399272, -3.550733832179161], [0.030541992250048444, -0.919668173092204, 2.636754310487995, -0.0685415768450178, -3.6455045601370935], [-0.02984471205099975, -0.6641906834571536, 2.8597218725685707, -0.6551730514523597, -3.664499051589155], [-0.14313362768479904, -0.9524350405365689, 1.4106979371192994, 0.24283125590871601, -3.6752757628637327], [-0.13506152090226148, -1.2312839895207126, 1.4625508742779068, -0.006703952881720487, -3.4158965740943086], [0.07037901980611996, -1.1923525582324017, 1.3663613379761066, -0.09534147952518225, -3.355340650269783], [-0.16701551558882674, -1.0977073960572314, 1.346744246421296, -0.09514291979262346, -3.3251440171461093], [-0.18237509563452872, -0.9412699820477847, 1.3525724680927804, -0.106547343221415, -3.2534988491945556], [-0.4389593069085875, -1.780362358687569, 3.441947112356714, 0.188246499800026, -3.6985748790136026], [0.05526218499912221, -1.2549303739205868, 1.443508493128901, -1.1406838740544896, -3.6633790625007467], [-0.6454867970144692, -1.0312365604127998, 1.4922235808564641, -1.0456109385475445, -3.5462805893745055], [-0.22207413921778923, -0.8653702253585892, 1.625756118841396, -0.364544713626744, -3.5509705719769604], [-0.7764012548479656, -1.441165789369453, 1.7513190559147522, -1.1360319265748147, -3.5858577212434524], [-0.04424773313225505, -0.8744222182083486, 1.7394079647502938, 0.4324378503603799, -3.6173679870021003], [0.0984393283797643, -0.3154186207332388, 2.164770700849025, 0.6087835416952244, -3.6542566274016046], [-0.04201168580028215, -0.7676017544539224, 1.593228155359955, 1.5812241767160269, -3.499097195443709], [-0.1374342514045857, -1.1513665736415064, 1.2874096367582473, 1.4391011256885753, -3.8117062688917667], [-0.14347868733656974, -1.0260721790469474, 1.6984688497187554, 1.2767022163152417, -3.5939313142877034], [-0.014468685080817688, -1.0237668076028577, 2.2256548244976395, 0.9323436943092075, -3.2150060191959526], [-0.15060642374854974, -1.1039870213101572, 1.5268208416979483, -2.005752715304428, -3.761178442615212], [0.08008601556372925, -0.33832922993650827, 1.8514032572761812, -1.901564817043974, -3.3666974989450185], [0.07583250903019005, -0.759956362804146, 1.7869215851659799, -1.3357591924748304, -3.8750488305495243], [-0.2704718633293034, -0.961151958797481, 1.8330737497481115, -0.8797154484668599, -3.41753122255185], [-1.152182792173272, -1.5555482029241583, 1.3141101703052662, -0.17462265504149502, -3.6994416692970704], [-0.5519403156467861, -1.492851383997295, 1.1675892460197073, -0.7593402286795286, -3.6953386331528235], [-0.5626935280347787, -1.5665240450271047, 1.3526381684655213, -0.5135717780500868, -3.426029128491984], [-0.7047686695518076, -1.3877443437026378, 1.3269167899526841, -0.23820356339038287, -3.6669535003296163], [-0.34342124737845214, -1.6016514293239639, 1.4980906448514977, -0.636250150832031, -3.652732655145638], [0.07245588748199158, -0.6430736134181325, 1.2928259804990565, -0.6482286990277688, -3.57283973716975], [-0.2153639236229396, -1.2268063452433253, 0.35145390477643507, -0.6935721548341187, -3.506966939136098], [-0.12397629945654953, -1.095007157500415, 0.4358468216726953, -0.6044935823225914, -3.6096126347968975], [-0.9699457079467005, -1.604957057635008, 0.8637782204058647, -0.4276726748250024, -3.7627334494185494], [0.060282480992236924, -0.5959524051787256, 1.669523208466312, -0.699638167811023, -3.5819365189403363], [-1.2394678286655005, -1.5008762468455894, 1.922240801323142, 0.1393178358548831, -3.9049845448799236], [-0.11167684751955745, -1.0135890432858643, 1.1739940272629168, -0.665402755315607, -3.501601498186424], [-0.7283728860450968, -1.3279263308111244, 1.398487956270365, -0.7766052104197014, -3.610995670402318], [-0.5930455484108895, -1.224758770922478, 1.595611652135885, -0.6685802959237532, -3.8616579185050637], [-0.9157985088101293, -1.589361643312094, 1.7800056079243864, -0.9746986105072513, -3.770469035565452], [-0.5955841586607319, -1.36366613148187, 1.809843400864874, -0.16003575563065847, -3.7336867608769424], [-0.2914489440179927, -1.5140645410346822, 1.74191426873847, 0.07116067492699218, -3.432771704034371], [-0.3926262920984077, -1.2051576555534553, 2.8509848391362684, -0.4475688658381927, -3.4574117754322375], [-0.45958328747653937, -1.4618619030890143, 2.301695034837829, -1.20041117518312, -3.4745084786361944], [-1.1273646833588038, -1.796400280986996, 0.5129162557349566, -0.1812201054965751, -3.6687640992801915], [-1.4649010267688656, -2.9874078631124865, 0.14513791719439767, -0.816245178081089, -3.4010414449834814], [-1.495815645487898, -1.8147302317791287, 0.4860252060817492, -0.429286446675251, -3.705401081248501], [0.02806246449856009, -1.1692834252954412, 1.0411858368268543, -0.28780634715619136, -3.600805531221052], [-1.1206567830668523, -1.5251943009393565, 2.6651058142951762, -0.8039103077930181, -3.677761534006951], [-0.27601769880952925, -1.7270827228190633, 2.742127240969819, -0.8953939620259742, -3.7398467844550254], [-0.008883965389731407, -1.2734980024445428, 0.7424452737349233, -0.5754229292091892, -3.740244372625331], [0.030079222007105444, -0.7012951161047795, 2.4095071884867054, -0.7810985633537575, -3.6418700364869148], [-0.007231885040187944, -0.9170392244324755, 1.961123707390246, -0.4210460319429108, -3.541013919368697], [-0.40814857845653013, -1.3897933503676545, 1.2451541335125438, -1.4495431481464183, -3.6947129036705117], [-0.022029720932092545, -0.9658213051466467, 2.879973183494798, -0.1874410254813882, -3.539881755022499], [-0.49620638211658336, -1.53714255316844, 1.2830134032355158, -0.9695436269333879, -3.510220976489486], [-0.16165814148425858, -0.9830902452716379, 0.9761362144221919, -0.5125457182967799, -3.7340472268087965], [-0.3099557576176687, -1.2928546217248131, 1.400971057789855, -0.4459788825275457, -3.4734315397324513], [-0.6783839673540624, -1.5436456816022726, 1.2346396168632547, -0.2947070947326807, -3.567584717986493], [-0.37464654604066994, -1.401821358766339, 0.8594316801146652, -0.3938167810502559, -3.3515719554493097], [-0.046234313842915736, -1.1696354096487345, 0.598446910824164, -0.9319913358163794, -3.827657012308767], [-0.6793413897289403, -1.3023053070721768, 2.6537262786095432, -0.23053662448009637, -3.6196101450833122], [-0.6056719956967873, -1.598227738163005, 2.3847375722420465, -0.6764649897372063, -3.600767104259019], [-0.9241958766084702, -1.6593663135202876, 1.37637737278249, -0.30408659972407415, -3.701907881614991], [-0.5614115766065392, -1.6593079912503452, 1.0338976306567036, -0.8609689140398556, -3.556373425333625], [-0.17829381332406255, -1.878007873838207, 1.2133623842519505, -0.4405340333277753, -3.436221414370735], [-0.3334322613220836, -1.4838252316766718, 1.3290313645810423, -0.7642753782481129, -3.4025177283118087], [-0.7431081508100513, -1.7648530340838084, 2.1125622328542892, -0.2092744678270729, -3.783870283852957], [-0.764629348956835, -1.1445903187616329, 1.3234028017152737, -0.4937783525442961, -3.5181882088430854], [-0.8117187950966627, -1.2738690718569194, 1.3287500429257924, -0.5858773197684048, -3.3020532109306173], [-0.5274837722791126, -1.6456914687080504, 1.5716738631546119, -0.45108537500327894, -3.7992356535018574], [-0.28093652050658835, -1.220178749148396, 1.4423863940809922, 0.07280196021747659, -4.0530288979525375], [-0.06396043148537983, -1.0534486770281595, 1.3155401715596788, -0.2660582815366192, -3.1037146719160065], [0.09178579619241456, -0.9710239374561562, 1.2490606209764132, -0.8093341435842671, -3.4154503130925575], [-0.3528676625352891, -1.1191578626916066, 1.2000075775988632, -0.5716591389698022, -3.8830383761467875], [-0.20573954577728634, -1.2216591606568803, 1.1516223389518834, -0.6425522810093692, -3.8863791562456784], [-0.8894851854498024, -1.3366018348717128, 1.9460289156669184, -0.4814038829522824, -3.3522125933460565], [-0.8859468890519886, -1.4997020387211666, 2.021977930031069, -0.5325084318343473, -3.3817616144671616], [-0.646426453302375, -1.6768463306475296, 1.600053737662815, -0.4043056686697836, -3.9179202388088066], [-0.6434254608863693, -1.4821173415552986, 1.6157357555541971, -0.45079135239265095, -3.7924056872420913], [-1.4560082791258482, -1.7062872357975114, 1.0471026044109626, -0.6517093349298705, -3.68410257743358], [-0.9463213026867477, -1.924570537835957, 1.211415297690914, -0.7599067044843599, -4.070058175457606], [-1.0101699961997685, -2.0312954181746465, 1.2002729034917, -0.6293458074024121, -3.810385286223048], [0.8285008941497923, -0.5224295188759928, -0.0009916914776344765, -0.7247589811123154, -3.5478980665940147], [0.7887153921860314, -1.5168254323042818, 0.09831679123917786, -0.3944296752425066, -3.463724239061423], [0.8611257031566663, -0.9695356514036122, -0.2927289083832868, -1.2955896271052922, -3.486666423421569], [0.9116419493349811, -0.2747622437172065, 0.15428350740073515, -0.8837595746005481, -3.428927531218131], [0.804562754458353, -0.4528999018747638, 0.09687689778648798, -0.9085467610376607, -3.5477518309085894], [1.5957597701664683, -0.6634286017757649, -0.43630285656920753, -1.7638334870658003, -3.736731447656192], [1.5500814141446064, 0.141849402837542, -0.6157061611182553, -1.526648472822544, -3.7363914484990577], [1.2633598363056329, -0.981683641599409, -0.6709843694505286, -1.4704862386644535, -3.7888430803635558], [2.040844724481984, -0.3946112069046246, -0.5095298026016498, -0.8479242466489847, -3.6751041548372343], [1.9756004007501113, -0.14343792984651163, -0.6680257070727271, -1.8262064919598062, -3.763799330727083], [2.047149581600258, -0.2612105247156018, -0.8137473265819938, -1.8388294727398669, -3.6321983709016443], [1.6744533957897538, -0.4308433368221422, -0.6826293889423685, -1.6803872618344515, -3.7831810703611377], [1.6803358117770877, 0.1212664067906204, -0.06575119831438624, -0.8741722834242452, -3.7133227985613875], [1.0835845001347026, -0.35416610188426334, -0.9174959491698957, -1.645265048374189, -3.7823191999476062], [1.1725251597182227, -0.4743524890731518, -0.7313884540255915, -1.703966376002193, -3.646539182289535], [1.0210183056070854, -0.8105795493097201, -0.921924794527051, -1.2617774416661767, -3.499776205436372], [1.305614945515034, -0.6924201133845085, -0.4545461815063784, -1.5175260244596724, -3.7726527775699994], [1.401489263046927, -0.7763650765512357, -1.134574130528968, -1.6678379891017205, -3.895340393625381], [2.37316716515861, -0.1548386487554403, -0.7435641894962114, -1.3193901740887612, -3.665935791456471], [1.2757623560011169, -0.3685373109081838, -0.2034002938967791, -1.511001056233178, -3.4009182769781745], [0.9895509906657268, -0.6647872811137517, -0.33427343421759104, -1.1489864763829936, -3.7439576078419923], [1.0903422400630784, -0.5874752858263218, -1.165132680881735, -1.6795436050960344, -3.950932539134731], [0.9218738638973155, -0.8219417217233693, -0.8594116591823304, -1.548366120672848, -3.37104883823509], [1.199862546386047, -0.4635982554457281, -0.7774889067711024, -1.408024308261668, -3.9510636053327692], [1.664628879361688, 0.7190665172840847, -0.9569928331499448, -1.8804103832154555, -3.804026254357796], [2.2872292316245715, 0.5290801701755903, -1.2032172699820023, -1.4374374641116257, -3.701077305495538], [2.32210899936328, 0.600824058623276, -1.212418723094877, -1.4785425897268174, -3.7429463938738188], [2.14288445884971, 0.25248687715991286, -0.18745895058849774, -1.2447518451037882, -3.4490650722275125], [1.5920439698730011, -0.4633777800686113, -0.4855642464541423, -1.529946073137439, -3.7982444027412137], [2.0702567790852697, 0.13377223361563026, -1.4626087460270218, -1.691800856429401, -3.725293435770875], [2.1400136870699518, -0.4868900955491833, -0.7298960442310095, -1.6377811790533108, -3.5909067070626173], [0.4242169611987656, -0.606793812751243, -0.6780029461448642, -1.5632249352567469, -3.4010583449076774], [0.6997760989387682, -0.624829158843577, -1.202375798824935, -1.7404753835745996, -3.8077656995652096], [0.6761648378001514, -0.6714244293676725, -1.184033687053412, -1.5411193758627402, -3.848960138259836], [0.8431898576127284, -0.46257113646921083, -0.7899877217632254, -1.701496646408577, -3.6934931054591496], [0.9319959971200484, -0.6451067384386933, -0.6885154793448737, -1.721046368066639, -3.9101028664588546], [2.7615466861396123, 0.28298265709430764, -0.5433627386048541, -1.6335743876566906, -3.6599237416827757], [-0.3542170840618961, -1.1586898159003467, 0.5496193156053059, 0.5337773837024394, -3.478836843407341], [-0.36322498041018825, -1.1667338400678937, 0.585580987937459, 0.5525211889888249, -3.3654427473482156], [-0.09302955029258567, -0.9961434535579822, 0.9237455297568429, -0.3937944462021468, -3.7563238001538313], [-0.07311652179813806, -0.9283633446906948, 0.17765837563766926, -0.8842078890300177, -3.5271350995326807], [-0.08844098239834455, -0.9856179679081436, 2.1826927540646173, -0.2930038724485779, -3.5198536242447878], [0.21296986684247132, -0.15807954055356296, 2.2616715939102647, -0.10737489846517373, -3.841910644866024], [-0.9424760256536795, -1.9209423130636887, 2.983963444677522, -0.05529907782232513, -3.900842905906391], [-0.6038216084390061, -1.416336760701747, 2.770480312513413, -0.0014157183205398029, -3.741245881559188], [-0.5501496402993136, -1.341554385192722, 1.063519930818706, -0.5651017500864933, -3.6099133465081032], [-0.0848592473050006, -0.8435048145937817, 1.5550706256404847, -0.3109967928763858, -3.6685143246713237], [0.8396015573111749, -0.5437850802773281, -0.5698783866895123, -1.4158618237913074, -3.545503768684563], [1.9721366204829371, 0.10193118187510411, -0.6371268106347225, -1.55408170534559, -3.7451646004522714], [1.4579952378618717, -1.0708504158456944, -0.015623014770356734, -1.0133997008042663, -3.4788634474317903], [1.1482894554528347, -0.08054006092033807, -1.2078013276642798, -1.7545706484204806, -3.7962565076755816], [1.7634693927723057, -0.6458586650868066, -0.6788844418469085, -1.5621985675824628, -3.7064393919486487], [2.299359860281062, -0.2980817763840158, -0.7289253927811693, -1.4644679710901571, -3.562269377312841], [0.6772095562782052, -0.6789989268557082, -0.7677606517621595, -1.588720162555109, -3.830020810017015], [0.7778583333402513, -1.087429890316457, -1.133040546402297, -1.7027880444959138, -3.537352941670932], [1.0148726125370593, -0.9033784143115088, -0.8919169637755778, -1.6693380619334626, -4.143512863439906], [1.2928919729840125, -0.8207713242739184, -1.5846314654690965, -1.6310954691918713, -3.599007596568326], [1.535666963637297, 0.10150144616347083, -0.2637515508177808, -1.074366461562959, -3.6346699811280447], [1.3251676502601484, -1.0668241162082046, -0.41470656930220595, -1.1229026416115966, -3.7686627189563837], [1.7964794936240631, 0.29285168090944913, -1.072337992172537, -1.5322866083136628, -3.664788428625278], [1.3367560138452002, -1.0140432865245002, -0.3036974075815377, -1.4094937774710987, -3.5828545988975344], [0.8665156223419931, -0.46494191601460927, -0.569024872273983, -1.6926828157657645, -3.4828626694976896], [0.8874041363180099, -0.7567475812868912, -0.06297418876145522, -0.9870345293736819, -3.9250874621344822], [2.2190791341865643, -0.1466197144731658, -1.04412424450517, -1.5194494193987806, -3.64618917127163], [2.268037690733776, -0.15717839303251982, -1.1252839597177282, -1.6120358544633804, -3.5471686516941525], [0.9301138852209948, -0.8027004581259879, -0.13254323035867244, -1.1672381832921777, -3.724591003125014], [1.4722583133621696, -0.4116337916842854, -0.10175271670189062, -0.6921439784846518, -3.7336291575590774], [1.3064257028084203, -0.438643255021093, 0.08976542133651988, -1.0116719332289308, -3.709734336858627], [1.2227838171695726, -0.9808512644469335, -0.14101365536918636, -0.6509942378137276, -3.701834587739335], [0.625807108657586, -0.47769282946001923, -0.08516972343923437, -1.0286734023293074, -3.4319181453268888], [0.9106420219969869, -0.660290107441909, -0.11713947075693829, -1.075575257637717, -3.5684074988710646], [0.760033993814319, -0.9612020303239712, -0.387141083594228, -0.967789771628324, -3.7232317251135494], [0.9610198536446961, -0.64042898975462, -0.9206948313333781, -1.7873018278978225, -3.573005654590747], [1.0751463431656698, 0.10315361104767058, -0.026954905109120464, -0.7396611254619603, -3.4541448748579926], [0.8673701049209813, -1.129686908589019, 0.20341078479566246, -0.6479472799131469, -3.538520816539502], [0.8521471923729398, -1.0757974183251655, 0.221283041651042, -0.6343760634049495, -3.414451504173047], [-0.6537388561229444, -1.0435536396285228, 0.5505065711855196, -1.017964289809176, -3.5520662895600132], [-0.6397845634230538, -1.363716468506087, 0.5594151223101775, -0.6512005961066518, -3.8637963622916116], [-0.6040564261550629, -1.1728056457265204, 1.1673786743894132, -0.5573723977937346, -3.5308590223854073]], NamedTuple[(n_steps = 7, is_accept = true, acceptance_rate = 2.6920029590847735e-20, log_density = -16.124329758621073, hamiltonian_energy = 19.00050670704073, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 904.3331077013123, tree_depth = 2, numerical_error = false, step_size = 0.4, nom_step_size = 0.4, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -16.124329758621073, hamiltonian_energy = 19.195256882956112, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 6.406588441311311e10, tree_depth = 0, numerical_error = true, step_size = 0.9340259163636535, nom_step_size = 0.9340259163636535, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.277328745548868, hamiltonian_energy = 15.374103517039476, hamiltonian_energy_error = -2.121286723260148, max_hamiltonian_energy_error = -2.121286723260148, tree_depth = 3, numerical_error = false, step_size = 0.09209433883419865, nom_step_size = 0.09209433883419865, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9988840719974117, log_density = 12.562244140862749, hamiltonian_energy = -10.28844666997274, hamiltonian_energy_error = -0.10236001705004583, max_hamiltonian_energy_error = -0.14170726308395665, tree_depth = 3, numerical_error = false, step_size = 0.09591656221537206, nom_step_size = 0.09591656221537206, is_adapt = true), (n_steps = 63, is_accept = true, acceptance_rate = 0.7799992079092932, log_density = 11.850486566763928, hamiltonian_energy = -9.01404064358169, hamiltonian_energy_error = 0.18501000406869395, max_hamiltonian_energy_error = 1.044282110064314, tree_depth = 5, numerical_error = false, step_size = 0.1293199861565126, nom_step_size = 0.1293199861565126, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9979875135131515, log_density = 11.941464038908537, hamiltonian_energy = -11.13066338753847, hamiltonian_energy_error = -0.04370087257978916, max_hamiltonian_energy_error = -0.09989795939121038, tree_depth = 4, numerical_error = false, step_size = 0.10493939369934467, nom_step_size = 0.10493939369934467, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 12.93398875497344, hamiltonian_energy = -10.103655832608995, hamiltonian_energy_error = -0.13364281867575123, max_hamiltonian_energy_error = -0.197331665934513, tree_depth = 3, numerical_error = false, step_size = 0.17440305330023212, nom_step_size = 0.17440305330023212, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.10735833245964133, log_density = 12.93398875497344, hamiltonian_energy = -10.531836233961457, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 511.0784010205698, tree_depth = 2, numerical_error = false, step_size = 0.3085665886564684, nom_step_size = 0.3085665886564684, is_adapt = true), (n_steps = 63, is_accept = true, acceptance_rate = 0.9945193746167419, log_density = 12.492180714379346, hamiltonian_energy = -11.479478662581323, hamiltonian_energy_error = -0.0003796143082972492, max_hamiltonian_energy_error = 0.014296219652887743, tree_depth = 5, numerical_error = false, step_size = 0.0341390317729638, nom_step_size = 0.0341390317729638, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9878554147248166, log_density = 12.297436154335223, hamiltonian_energy = -11.916715272993446, hamiltonian_energy_error = 0.013307910990803862, max_hamiltonian_energy_error = 0.030018722947838583, tree_depth = 3, numerical_error = false, step_size = 0.06166253189274763, nom_step_size = 0.06166253189274763, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.8917461925162843, log_density = 12.124690735953823, hamiltonian_energy = -10.128066291985451, hamiltonian_energy_error = 0.09886243102755188, max_hamiltonian_energy_error = 0.2716556089274391, tree_depth = 4, numerical_error = false, step_size = 0.1110451106586289, nom_step_size = 0.1110451106586289, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9115356161138525, log_density = 12.04575492014021, hamiltonian_energy = -10.271505808266461, hamiltonian_energy_error = -0.1982278280942964, max_hamiltonian_energy_error = 0.33175993227141376, tree_depth = 4, numerical_error = false, step_size = 0.14897823982903974, nom_step_size = 0.14897823982903974, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9492479326086709, log_density = 12.079549412809357, hamiltonian_energy = -10.32387107100891, hamiltonian_energy_error = 0.08056737137336079, max_hamiltonian_energy_error = 0.11800352670766223, tree_depth = 3, numerical_error = false, step_size = 0.2137803972642609, nom_step_size = 0.2137803972642609, is_adapt = true), (n_steps = 8, is_accept = true, acceptance_rate = 0.004912589761399777, log_density = 12.079549412809357, hamiltonian_energy = -7.5618226879154555, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 263393.24420568516, tree_depth = 3, numerical_error = true, step_size = 0.34578911076789687, nom_step_size = 0.34578911076789687, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9995096450957278, log_density = 13.116131063813018, hamiltonian_energy = -11.366688226333991, hamiltonian_energy_error = -0.0021244970967373433, max_hamiltonian_energy_error = -0.0032524102640163477, tree_depth = 5, numerical_error = false, step_size = 0.029375190867740347, nom_step_size = 0.029375190867740347, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9713394243432528, log_density = 12.49716987602947, hamiltonian_energy = -10.782245246833737, hamiltonian_energy_error = 0.01486234708639067, max_hamiltonian_energy_error = 0.06276314933314708, tree_depth = 4, numerical_error = false, step_size = 0.0562211798842027, nom_step_size = 0.0562211798842027, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.837827549377842, hamiltonian_energy = -11.90185735843551, hamiltonian_energy_error = -0.015114134743191343, max_hamiltonian_energy_error = -0.03947121277257892, tree_depth = 3, numerical_error = false, step_size = 0.09810469519577944, nom_step_size = 0.09810469519577944, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.49988554170508365, log_density = 12.082252385996657, hamiltonian_energy = -9.47846905673639, hamiltonian_energy_error = 0.2119960542683721, max_hamiltonian_energy_error = 16.403002291417355, tree_depth = 3, numerical_error = false, step_size = 0.1857323838850028, nom_step_size = 0.1857323838850028, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9147561880742957, log_density = 9.344200159597689, hamiltonian_energy = -4.369152376124132, hamiltonian_energy_error = 0.11849908211473181, max_hamiltonian_energy_error = -0.26564982715277186, tree_depth = 3, numerical_error = false, step_size = 0.07660315973576944, nom_step_size = 0.07660315973576944, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.8815618924398109, log_density = 11.745304563875445, hamiltonian_energy = -6.460309429101301, hamiltonian_energy_error = -0.2028734090647859, max_hamiltonian_energy_error = 1.1788692879470482, tree_depth = 4, numerical_error = false, step_size = 0.11164840185144834, nom_step_size = 0.11164840185144834, is_adapt = true), (n_steps = 39, is_accept = true, acceptance_rate = 0.4312976084123244, log_density = 7.3761736207198965, hamiltonian_energy = -4.735768995322572, hamiltonian_energy_error = 2.126974814177637, max_hamiltonian_energy_error = 4.639660779154138, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.440114095287482, hamiltonian_energy = -6.548729297791773, hamiltonian_energy_error = -0.8387485734852049, max_hamiltonian_energy_error = -1.4396804285405862, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9602511668752153, log_density = 11.302045034732203, hamiltonian_energy = -7.148047706524614, hamiltonian_energy_error = -0.24613410618574516, max_hamiltonian_energy_error = 0.6972290332528637, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9726625566887405, log_density = 9.462280276493017, hamiltonian_energy = -8.547032740090884, hamiltonian_energy_error = 0.11748704426395307, max_hamiltonian_energy_error = 0.13322626334228538, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9863280232893319, log_density = 11.872566898746513, hamiltonian_energy = -7.54028077469333, hamiltonian_energy_error = -0.02867022360220961, max_hamiltonian_energy_error = -0.2655261525475723, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 12.291797090242445, hamiltonian_energy = -11.10690423031956, hamiltonian_energy_error = -0.06958478423175052, max_hamiltonian_energy_error = -0.16224655081096984, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9900371484254397, log_density = 11.631445805644148, hamiltonian_energy = -10.94848385225328, hamiltonian_energy_error = -0.05649960089547257, max_hamiltonian_energy_error = -0.0763497261083792, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9435777609425607, log_density = 10.167142228826062, hamiltonian_energy = -9.129650865958116, hamiltonian_energy_error = 0.0347440636487768, max_hamiltonian_energy_error = 0.11076921929869954, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.959183826104515, log_density = 12.063177297833438, hamiltonian_energy = -8.958391464543327, hamiltonian_energy_error = 0.05676652586558184, max_hamiltonian_energy_error = 0.15684092116531012, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9431435216870493, log_density = 12.011445384449068, hamiltonian_energy = -10.291342728848175, hamiltonian_energy_error = 0.025008159264148233, max_hamiltonian_energy_error = 0.19867826169365976, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9913754263377444, log_density = 11.676145543541908, hamiltonian_energy = -10.834483755357525, hamiltonian_energy_error = 0.02291792028049322, max_hamiltonian_energy_error = -0.2904426435855427, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.930669580917651, log_density = 11.241546517476252, hamiltonian_energy = -9.801692571765205, hamiltonian_energy_error = 0.15787451823238285, max_hamiltonian_energy_error = 0.1814093296181465, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9959271869692411, log_density = 11.621043927932469, hamiltonian_energy = -10.040957549248398, hamiltonian_energy_error = -0.15828812705950135, max_hamiltonian_energy_error = -0.22510641324675262, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9604150291451438, log_density = 8.760737824072447, hamiltonian_energy = -7.688639614402649, hamiltonian_energy_error = 0.058229016416674995, max_hamiltonian_energy_error = 0.0707558057018316, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9492639802012075, log_density = 11.981059464206622, hamiltonian_energy = -7.022051263364985, hamiltonian_energy_error = -0.04037545210612237, max_hamiltonian_energy_error = 0.14086482747708917, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9568606040205059, log_density = 9.609620398282923, hamiltonian_energy = -7.421716779623823, hamiltonian_energy_error = 0.15011296911143557, max_hamiltonian_energy_error = -0.2096113360796945, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9936894392439735, log_density = 10.579348608575398, hamiltonian_energy = -4.938019710826181, hamiltonian_energy_error = -0.4229145407482582, max_hamiltonian_energy_error = -0.45565710173023355, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9821220114392896, log_density = 12.244549365235002, hamiltonian_energy = -9.303857937937542, hamiltonian_energy_error = -0.013164714524943832, max_hamiltonian_energy_error = 0.08077505149836384, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9772321295361946, log_density = 12.6807275564575, hamiltonian_energy = -11.788681158176015, hamiltonian_energy_error = 0.0003084878744026298, max_hamiltonian_energy_error = 0.04200323648538351, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9079276524237387, log_density = 11.344490180937317, hamiltonian_energy = -9.905396096830513, hamiltonian_energy_error = -0.009300169874713049, max_hamiltonian_energy_error = 0.20537096955377443, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.5733689584131852, log_density = 7.468603798391028, hamiltonian_energy = -4.85200711831311, hamiltonian_energy_error = 0.7276850042419438, max_hamiltonian_energy_error = 1.1543034749600167, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.988530012347813, log_density = 9.008348202126665, hamiltonian_energy = -4.4442137372990596, hamiltonian_energy_error = -0.15993691709346347, max_hamiltonian_energy_error = -0.4001684314069598, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9629690055654886, log_density = 7.8462312251050506, hamiltonian_energy = -5.441705504596944, hamiltonian_energy_error = 0.1475235644745334, max_hamiltonian_energy_error = -0.19840986744185152, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9816295939944942, log_density = 7.265808570452759, hamiltonian_energy = -5.181816117741227, hamiltonian_energy_error = 0.3223509392419919, max_hamiltonian_energy_error = -0.44687684622543333, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7171404315741363, log_density = 9.95591121914963, hamiltonian_energy = -1.217709946185325, hamiltonian_energy_error = 0.09001409610227729, max_hamiltonian_energy_error = 0.8840322046398699, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.996206211140748, log_density = 12.145839828123954, hamiltonian_energy = -7.189990494595267, hamiltonian_energy_error = -0.06675970369441497, max_hamiltonian_energy_error = -0.08894757655929286, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8808143681529559, log_density = 10.709550544029081, hamiltonian_energy = -6.789447903840225, hamiltonian_energy_error = 0.10849790232925649, max_hamiltonian_energy_error = 0.44142367421940243, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9538221751141951, log_density = 12.631557567101682, hamiltonian_energy = -9.829705268882613, hamiltonian_energy_error = -0.4194910166077932, max_hamiltonian_energy_error = -0.6258065521507596, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9497471777145423, log_density = 12.010666096354562, hamiltonian_energy = -6.952761671301906, hamiltonian_energy_error = 0.06972557095694043, max_hamiltonian_energy_error = 0.18474678040546433, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9858810834453828, log_density = 11.341041573662995, hamiltonian_energy = -10.252476155247193, hamiltonian_energy_error = 0.034712712460033046, max_hamiltonian_energy_error = -0.1293255482932132, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.990994615933482, log_density = 11.786562553854994, hamiltonian_energy = -10.404049065141137, hamiltonian_energy_error = 0.018191624121971728, max_hamiltonian_energy_error = -0.20035749217416488, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9952133602861266, log_density = 12.723253599904584, hamiltonian_energy = -11.000618667600376, hamiltonian_energy_error = -0.1753779351476723, max_hamiltonian_energy_error = -0.1753779351476723, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9880863489824769, log_density = 13.065724507181544, hamiltonian_energy = -11.901808456218014, hamiltonian_energy_error = -0.004647799182892598, max_hamiltonian_energy_error = 0.039584253555760895, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9787180213228431, log_density = 11.504407081733826, hamiltonian_energy = -10.550730446356079, hamiltonian_energy_error = 0.032666990461763135, max_hamiltonian_energy_error = 0.05825762442677984, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8150015362208972, log_density = 12.689820947281351, hamiltonian_energy = -7.6216401541361325, hamiltonian_energy_error = -0.01861822678619518, max_hamiltonian_energy_error = 0.5062607460495716, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9947179726623859, log_density = 13.05109767829067, hamiltonian_energy = -11.493003147662701, hamiltonian_energy_error = 0.0040548760566920805, max_hamiltonian_energy_error = 0.03346482714240295, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8513845763950659, log_density = 10.211812298845572, hamiltonian_energy = -8.916377167660764, hamiltonian_energy_error = 0.24628997826624932, max_hamiltonian_energy_error = 0.39543162751428085, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 43, is_accept = true, acceptance_rate = 0.9532280451834425, log_density = 11.110913104720339, hamiltonian_energy = -8.774174481976583, hamiltonian_energy_error = -0.22375311767137163, max_hamiltonian_energy_error = 0.7151844387143784, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9147803257315916, log_density = 10.326850267790611, hamiltonian_energy = -6.463858500555194, hamiltonian_energy_error = -0.015589778438664936, max_hamiltonian_energy_error = -0.5143118937877098, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 63, is_accept = true, acceptance_rate = 0.9804379114095791, log_density = 10.125097511040451, hamiltonian_energy = -8.72971406406976, hamiltonian_energy_error = -0.05483220887102824, max_hamiltonian_energy_error = -0.6434399334670076, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.11792554923335447, log_density = 10.125097511040451, hamiltonian_energy = -7.6260650528881335, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 2.1659253525011266, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9996616875471652, log_density = 11.192694970283656, hamiltonian_energy = -8.74211954655251, hamiltonian_energy_error = -0.33984212905571276, max_hamiltonian_energy_error = -0.6036022550066171, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.8205419772496126, log_density = 11.569463330699344, hamiltonian_energy = -7.406763047455599, hamiltonian_energy_error = 0.1302624111328079, max_hamiltonian_energy_error = 0.5530356962739065, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9765744463014505, log_density = 9.77849678893344, hamiltonian_energy = -7.5331536416267975, hamiltonian_energy_error = 0.03705702145971035, max_hamiltonian_energy_error = 0.08361749440940613, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9103770112791418, log_density = 10.509801027680803, hamiltonian_energy = -7.0874208125279345, hamiltonian_energy_error = -0.06900196368453848, max_hamiltonian_energy_error = 0.2858836083576417, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9919532530126366, log_density = 12.306025132063109, hamiltonian_energy = -9.901283056829644, hamiltonian_energy_error = -0.036053024823580415, max_hamiltonian_energy_error = -0.036053024823580415, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9486739287221385, log_density = 12.670059343542205, hamiltonian_energy = -9.878193237782526, hamiltonian_energy_error = -0.03771592238920185, max_hamiltonian_energy_error = 0.11616078198559521, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9578816126951887, log_density = 12.045288723776835, hamiltonian_energy = -11.536536756870143, hamiltonian_energy_error = 0.07193046098880806, max_hamiltonian_energy_error = 0.10224976742669689, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9714918474508288, log_density = 12.534556533716513, hamiltonian_energy = -10.955825042274, hamiltonian_energy_error = -0.04031332101073204, max_hamiltonian_energy_error = 0.10615543234881031, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8760074595753673, log_density = 12.564068328446707, hamiltonian_energy = -10.47278448471249, hamiltonian_energy_error = 0.10841449262223612, max_hamiltonian_energy_error = 0.8403479543158152, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9702435799668514, log_density = 13.310849085111922, hamiltonian_energy = -11.903548193011858, hamiltonian_energy_error = -0.026014040277853923, max_hamiltonian_energy_error = 0.062162215694732126, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8998454995922199, log_density = 10.415015716198631, hamiltonian_energy = -9.29847923509029, hamiltonian_energy_error = -0.17577413398037578, max_hamiltonian_energy_error = -0.25449641627180775, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.397713392400512, hamiltonian_energy = -8.706416190231852, hamiltonian_energy_error = -0.4711083241679468, max_hamiltonian_energy_error = -0.601408159819794, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.999720767809689, log_density = 12.934761608194963, hamiltonian_energy = -10.977704319611275, hamiltonian_energy_error = -0.052312017136639355, max_hamiltonian_energy_error = -0.05489335289385089, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9788613797845055, log_density = 13.032859372330208, hamiltonian_energy = -11.961916895017445, hamiltonian_energy_error = 0.015162876908611622, max_hamiltonian_energy_error = 0.04579372663675585, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9675485190610988, log_density = 12.417776082606645, hamiltonian_energy = -11.605651729886322, hamiltonian_energy_error = 0.036624073445938876, max_hamiltonian_energy_error = 0.09001564987492472, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9979189275750887, log_density = 12.357196750391303, hamiltonian_energy = -11.716326541245637, hamiltonian_energy_error = -0.019250888978632474, max_hamiltonian_energy_error = -0.0699491900868594, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9970521043844324, log_density = 12.625756488918084, hamiltonian_energy = -11.632021706756817, hamiltonian_energy_error = -0.02095415693063174, max_hamiltonian_energy_error = -0.03861147027306622, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9544606482599897, log_density = 11.84929179945393, hamiltonian_energy = -10.987060747498536, hamiltonian_energy_error = 0.0940220123567066, max_hamiltonian_energy_error = 0.0940220123567066, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9959808826425126, log_density = 12.829081253454156, hamiltonian_energy = -10.439012956864714, hamiltonian_energy_error = -0.0718107333957434, max_hamiltonian_energy_error = -0.11387404661230782, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9531698247865193, log_density = 12.891239155650759, hamiltonian_energy = -11.354616165946718, hamiltonian_energy_error = 0.002362760026560551, max_hamiltonian_energy_error = 0.09564042563845554, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9348527113133299, log_density = 12.56468305936881, hamiltonian_energy = -10.994164764448055, hamiltonian_energy_error = -0.009390387929382626, max_hamiltonian_energy_error = 0.13870805097128525, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.963609161841811, log_density = 8.944941518397961, hamiltonian_energy = -7.807060511389192, hamiltonian_energy_error = 0.07359777822797486, max_hamiltonian_energy_error = 0.07434886973462618, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.959987132236249, log_density = 9.961022629895902, hamiltonian_energy = -6.173858562430633, hamiltonian_energy_error = 0.1291195608687108, max_hamiltonian_energy_error = -0.28682231446488515, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8742986577447238, log_density = 8.026519752148385, hamiltonian_energy = -6.0366336863865815, hamiltonian_energy_error = 0.30441551587902005, max_hamiltonian_energy_error = 0.41278952451280393, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9560306332845021, log_density = 11.569913364401842, hamiltonian_energy = -4.43092080128879, hamiltonian_energy_error = -0.5701780107878793, max_hamiltonian_energy_error = -0.5819500792446197, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9530924572627794, log_density = 11.567201030809422, hamiltonian_energy = -7.25563792052495, hamiltonian_energy_error = -0.07811030343036851, max_hamiltonian_energy_error = 0.2668962252517888, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8468168845017575, log_density = 13.009989825604471, hamiltonian_energy = -6.637119508113614, hamiltonian_energy_error = -0.097643237898426, max_hamiltonian_energy_error = 0.3380694184235349, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8670229338604155, log_density = 12.121456039033292, hamiltonian_energy = -9.018830972373657, hamiltonian_energy_error = 0.024410555097706066, max_hamiltonian_energy_error = 0.53492412769236, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9405751829962683, log_density = 11.854138696721119, hamiltonian_energy = -10.622907696283232, hamiltonian_energy_error = 0.14686643765457674, max_hamiltonian_energy_error = 0.14686643765457674, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.998717022189852, log_density = 10.83747531497532, hamiltonian_energy = -9.785719732074527, hamiltonian_energy_error = -0.06368054671689372, max_hamiltonian_energy_error = -0.1965467304950419, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9993966833384953, log_density = 12.848801565339793, hamiltonian_energy = -10.259744574850458, hamiltonian_energy_error = -0.1439638836260766, max_hamiltonian_energy_error = -0.1439638836260766, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.978044314212456, log_density = 10.354054003508526, hamiltonian_energy = -9.185727233532639, hamiltonian_energy_error = 0.03816418692813883, max_hamiltonian_energy_error = 0.04866392882846604, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9771488839094353, log_density = 12.143807720698003, hamiltonian_energy = -8.491308565465449, hamiltonian_energy_error = 0.013627432063300304, max_hamiltonian_energy_error = 0.07085247431071728, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9731401094232279, log_density = 11.761459373624477, hamiltonian_energy = -10.877960192054621, hamiltonian_energy_error = 0.05866443945882516, max_hamiltonian_energy_error = 0.07979002615091169, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9872317948211495, log_density = 11.362238569845976, hamiltonian_energy = -7.802612520639016, hamiltonian_energy_error = 0.02852682103004156, max_hamiltonian_energy_error = -0.09519482209340069, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7635201823597859, log_density = 10.399461503059374, hamiltonian_energy = -5.54359982775715, hamiltonian_energy_error = 0.03386892846148104, max_hamiltonian_energy_error = 1.3391871376643492, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7182789151867863, log_density = 11.318743577626902, hamiltonian_energy = -1.565485772612245, hamiltonian_energy_error = -0.07453281976406778, max_hamiltonian_energy_error = 0.9513999639541024, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9620544649997942, log_density = 10.972961328222922, hamiltonian_energy = -3.865802169764385, hamiltonian_energy_error = 0.02960106022018305, max_hamiltonian_energy_error = -0.24001631026370962, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9974461919551573, log_density = 11.673215112442346, hamiltonian_energy = -10.227667944149939, hamiltonian_energy_error = -0.15316680822370898, max_hamiltonian_energy_error = -0.24444249546981034, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9734161365618695, log_density = 11.483554146518454, hamiltonian_energy = -10.34927250979443, hamiltonian_energy_error = -0.025023398950963838, max_hamiltonian_energy_error = -0.07882270423088933, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9567488648260516, log_density = 12.016882610235578, hamiltonian_energy = -9.916216135391984, hamiltonian_energy_error = 0.009684222739151593, max_hamiltonian_energy_error = 0.18291374109834457, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.98010380954497, log_density = 12.25760620147382, hamiltonian_energy = -10.554375112072547, hamiltonian_energy_error = -0.119898815949945, max_hamiltonian_energy_error = 0.1839575879971065, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6589744161397114, log_density = 11.440208532323696, hamiltonian_energy = -10.58017815665343, hamiltonian_energy_error = 0.32898766951569947, max_hamiltonian_energy_error = 0.8746870896820589, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9645813670813062, log_density = 9.504884392432984, hamiltonian_energy = -6.950041859151842, hamiltonian_energy_error = -0.1389399468978727, max_hamiltonian_energy_error = 0.4369043488724085, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9794337034046308, log_density = 10.89358749479927, hamiltonian_energy = -8.02869257208123, hamiltonian_energy_error = 0.1505958794663762, max_hamiltonian_energy_error = -0.15985707383785552, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9993807694677822, log_density = 10.70239454132004, hamiltonian_energy = -9.831121732533258, hamiltonian_energy_error = 0.009331864705888648, max_hamiltonian_energy_error = -0.3527943220167149, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.5490306345036697, log_density = 11.440986604871068, hamiltonian_energy = -8.665559716084637, hamiltonian_energy_error = 0.3834930765990059, max_hamiltonian_energy_error = 1.546426479215583, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9948653860772055, log_density = 10.935109508533515, hamiltonian_energy = -10.63420805004969, hamiltonian_energy_error = 0.02677977246366936, max_hamiltonian_energy_error = -0.047818674725167654, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9504661888422973, log_density = 11.566912128241512, hamiltonian_energy = -9.400015503166152, hamiltonian_energy_error = 0.062153766304122726, max_hamiltonian_energy_error = 0.18062641292608816, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6664213772160464, log_density = 8.125711620215785, hamiltonian_energy = -4.7635218330260685, hamiltonian_energy_error = 0.18646683431778932, max_hamiltonian_energy_error = 4.308214102756371, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9937137326041812, log_density = 9.239971483616639, hamiltonian_energy = -5.80419308875404, hamiltonian_energy_error = -0.18951659465589898, max_hamiltonian_energy_error = -0.18951659465589898, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9707287174444273, log_density = 9.470837887642148, hamiltonian_energy = -8.790240252681752, hamiltonian_energy_error = 0.002113806327306733, max_hamiltonian_energy_error = 0.05384052054821886, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9576320644538739, log_density = 8.534612461621128, hamiltonian_energy = -7.39055278752051, hamiltonian_energy_error = 0.03014709738484722, max_hamiltonian_energy_error = 0.11335267379703406, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8378347819619528, log_density = 7.019058422501452, hamiltonian_energy = -5.222931697961781, hamiltonian_energy_error = 0.16217895509970504, max_hamiltonian_energy_error = 0.3164212836283671, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9884129220958352, log_density = 7.784241347358506, hamiltonian_energy = -5.985425759051315, hamiltonian_energy_error = -0.0446658976386507, max_hamiltonian_energy_error = -0.1543312882641681, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9994005706373222, log_density = 7.428028631230173, hamiltonian_energy = -6.049772773641992, hamiltonian_energy_error = -0.03483045197389778, max_hamiltonian_energy_error = -0.17447246599605215, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8234552362305025, log_density = 7.550929203388801, hamiltonian_energy = -4.8095625660446935, hamiltonian_energy_error = 0.2415316327178587, max_hamiltonian_energy_error = 0.37190065868041344, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9342385901186306, log_density = 8.91471096201796, hamiltonian_energy = -4.589964905331455, hamiltonian_energy_error = -0.059665728197795254, max_hamiltonian_energy_error = 0.5705211272357813, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9474643970335338, log_density = 10.421897061319001, hamiltonian_energy = -9.022887743269973, hamiltonian_energy_error = -0.2791795982682608, max_hamiltonian_energy_error = -0.2791795982682608, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7915703745219154, log_density = 11.012535401275715, hamiltonian_energy = -7.001840033812422, hamiltonian_energy_error = 0.10496684570475079, max_hamiltonian_energy_error = 0.4571211230920884, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8664855942627863, log_density = 9.6609970772288, hamiltonian_energy = -7.884525156430839, hamiltonian_energy_error = 0.15637381968309416, max_hamiltonian_energy_error = 0.18237609301734992, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.988663901885236, log_density = 9.452573552924559, hamiltonian_energy = -7.679960767823963, hamiltonian_energy_error = -0.10675784595839666, max_hamiltonian_energy_error = -0.1445643246744588, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.27802838174848676, log_density = 8.51470294393992, hamiltonian_energy = -3.8373653667930103, hamiltonian_energy_error = 0.6511227079399546, max_hamiltonian_energy_error = 2.5874517116618097, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9956385595987306, log_density = 10.217727743519946, hamiltonian_energy = -7.747287150468371, hamiltonian_energy_error = -0.07160694089225927, max_hamiltonian_energy_error = -0.18643271299833408, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9937407957541055, log_density = 11.366415602278863, hamiltonian_energy = -9.078685921909162, hamiltonian_energy_error = 0.018556724128123037, max_hamiltonian_energy_error = -0.10302394626698153, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 10.721797143152182, hamiltonian_energy = -9.251098207876524, hamiltonian_energy_error = -0.04791673396166196, max_hamiltonian_energy_error = -0.13460898371967822, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.650315463263143, log_density = 10.335708432548941, hamiltonian_energy = -5.622194165484549, hamiltonian_energy_error = 0.04029218870263929, max_hamiltonian_energy_error = 0.6741519269659557, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8182684794091903, log_density = 5.992802912088457, hamiltonian_energy = -3.0328575546496843, hamiltonian_energy_error = 0.3396624958466594, max_hamiltonian_energy_error = 0.5200101696188173, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9133156032234173, log_density = 10.744005053589284, hamiltonian_energy = -3.2688238603302278, hamiltonian_energy_error = -0.33072998837946344, max_hamiltonian_energy_error = 0.4698816036397391, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9736799063213268, log_density = 9.018047659196242, hamiltonian_energy = -8.450931281172315, hamiltonian_energy_error = 0.06834134740942055, max_hamiltonian_energy_error = 0.06834134740942055, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9628047657828219, log_density = 8.761320955852261, hamiltonian_energy = -6.402138427564591, hamiltonian_energy_error = 0.11832847377132438, max_hamiltonian_energy_error = 0.37486522957365853, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9820987628466109, log_density = 7.5519423343934875, hamiltonian_energy = -2.2100240062864414, hamiltonian_energy_error = -0.18584812920791194, max_hamiltonian_energy_error = -3.4982255977384122, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.98902752637136, log_density = 12.183589570240281, hamiltonian_energy = -5.782380703432641, hamiltonian_energy_error = -0.15815192168639935, max_hamiltonian_energy_error = -0.2609555847614793, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9275923912863197, log_density = 11.183962870353328, hamiltonian_energy = -4.3296927407411, hamiltonian_energy_error = -0.31025227799493216, max_hamiltonian_energy_error = -0.825267489193676, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9886385119596378, log_density = 11.623238771767191, hamiltonian_energy = -10.753418510042277, hamiltonian_energy_error = -0.03842835134898159, max_hamiltonian_energy_error = -0.13634226491465995, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9903974551952511, log_density = 13.076152627179313, hamiltonian_energy = -6.809839199252762, hamiltonian_energy_error = -0.10061857110014039, max_hamiltonian_energy_error = -0.11338399513277686, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.845718990830794, log_density = 12.71383968397381, hamiltonian_energy = -10.079815051193647, hamiltonian_energy_error = 0.06864873753632317, max_hamiltonian_energy_error = 0.30569875962183346, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9860667386576196, log_density = 12.33014604892862, hamiltonian_energy = -11.053042400424523, hamiltonian_energy_error = -0.009225920139545707, max_hamiltonian_energy_error = -0.04717780364260982, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9178312324113367, log_density = 10.046239401804144, hamiltonian_energy = -9.011108933325822, hamiltonian_energy_error = 0.145673287917365, max_hamiltonian_energy_error = 0.2383789744753848, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.6122131608643531, log_density = 9.494240031493224, hamiltonian_energy = -4.726357541434568, hamiltonian_energy_error = 0.6948738494728932, max_hamiltonian_energy_error = 1.028423762661098, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9343963139059178, log_density = 7.70900329458415, hamiltonian_energy = -7.058897484608666, hamiltonian_energy_error = 0.13648864036640873, max_hamiltonian_energy_error = -0.20239186808036536, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9524641066101398, log_density = 8.972916860981963, hamiltonian_energy = -2.6208775145916086, hamiltonian_energy_error = -0.053004514148712545, max_hamiltonian_energy_error = -0.3992932339502211, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9264816730501184, log_density = 10.63511024510289, hamiltonian_energy = -7.064813643631602, hamiltonian_energy_error = 0.0985635896370578, max_hamiltonian_energy_error = -0.2138283818127391, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9616806483920723, log_density = 6.963914449049476, hamiltonian_energy = -4.575992586866251, hamiltonian_energy_error = 0.07124269285734908, max_hamiltonian_energy_error = 0.1669386886297044, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9997512249424031, log_density = 10.801370118736333, hamiltonian_energy = -6.5695361748130985, hamiltonian_energy_error = -0.08556710421265379, max_hamiltonian_energy_error = -0.14534519365918452, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8525146790114941, log_density = 11.708599219857035, hamiltonian_energy = -6.398709165069405, hamiltonian_energy_error = 0.06976389217551127, max_hamiltonian_energy_error = 0.2809279702426801, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9941262026215266, log_density = 11.132211302084169, hamiltonian_energy = -10.393672433378802, hamiltonian_energy_error = 0.03146664370334484, max_hamiltonian_energy_error = -0.09457143045138139, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9807886068327079, log_density = 11.576177035116938, hamiltonian_energy = -8.738337953289406, hamiltonian_energy_error = -0.04249652876186971, max_hamiltonian_energy_error = -0.14386479475742142, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.984052867428066, log_density = 12.16135931009092, hamiltonian_energy = -10.209781393039192, hamiltonian_energy_error = -0.038252621536269515, max_hamiltonian_energy_error = -0.10568588118424493, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9923254956564426, log_density = 12.45622634377948, hamiltonian_energy = -10.696318132653985, hamiltonian_energy_error = 0.016306540809502224, max_hamiltonian_energy_error = -0.12699841736068151, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9989874300826307, log_density = 11.498092611004516, hamiltonian_energy = -10.670809190358174, hamiltonian_energy_error = 0.0011334545089951575, max_hamiltonian_energy_error = -0.10858439411460097, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8819876728730512, log_density = 11.831640992388799, hamiltonian_energy = -7.522374737733864, hamiltonian_energy_error = -0.052377213031151726, max_hamiltonian_energy_error = 0.7929578560221984, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9595115414503721, log_density = 12.350109065951592, hamiltonian_energy = -10.631285578950617, hamiltonian_energy_error = 0.02088882936935832, max_hamiltonian_energy_error = 0.14003089080217812, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9738289371001833, log_density = 9.703571948604658, hamiltonian_energy = -8.953345814086262, hamiltonian_energy_error = 0.06313305589541152, max_hamiltonian_energy_error = -0.07941212609477155, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8217685313669879, log_density = 9.48919390597911, hamiltonian_energy = -5.680871428238098, hamiltonian_energy_error = 0.06756186510563644, max_hamiltonian_energy_error = 0.6435954656723935, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 11.49867686240071, hamiltonian_energy = -8.414885482818354, hamiltonian_energy_error = -0.1275234362147728, max_hamiltonian_energy_error = -0.2369405402572422, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9740310056211866, log_density = 12.802107710726139, hamiltonian_energy = -9.646532046353503, hamiltonian_energy_error = -0.12038064890830036, max_hamiltonian_energy_error = -0.1299873876025135, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9009638501788106, log_density = 11.354803573121618, hamiltonian_energy = -7.906681532821198, hamiltonian_energy_error = 0.16986471719350504, max_hamiltonian_energy_error = 0.21966311093525803, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7359975446612089, log_density = 10.123033487280356, hamiltonian_energy = -8.132139938510065, hamiltonian_energy_error = 0.16141204877158977, max_hamiltonian_energy_error = 0.7742469719481155, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9967252100579623, log_density = 12.124915587158918, hamiltonian_energy = -7.399822117322428, hamiltonian_energy_error = -0.3130928566112443, max_hamiltonian_energy_error = -0.3130928566112443, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.998774763732019, log_density = 12.756266750495028, hamiltonian_energy = -11.508124015273363, hamiltonian_energy_error = -0.01788701307663132, max_hamiltonian_energy_error = -0.019451198663201552, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9840213698214755, log_density = 12.860104143135812, hamiltonian_energy = -11.93291218619096, hamiltonian_energy_error = 0.002988334308017926, max_hamiltonian_energy_error = 0.03105331537226519, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9832865132194611, log_density = 12.747784790309783, hamiltonian_energy = -11.468791039382682, hamiltonian_energy_error = 0.029433419108885417, max_hamiltonian_energy_error = 0.057407558101491674, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9615265131200592, log_density = 12.40840496508947, hamiltonian_energy = -11.394245061531398, hamiltonian_energy_error = -0.004854578105552676, max_hamiltonian_energy_error = 0.15673825758890736, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8864577928215825, log_density = 11.466121371136666, hamiltonian_energy = -9.872786700767644, hamiltonian_energy_error = 0.11977818164202425, max_hamiltonian_energy_error = 0.3041090007695022, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9790150432290419, log_density = 10.97622599184919, hamiltonian_energy = -10.214157846467636, hamiltonian_energy_error = 0.07159648456662282, max_hamiltonian_energy_error = 0.08099440899615828, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9772187450975791, log_density = 11.532578405665188, hamiltonian_energy = -7.2704165862099615, hamiltonian_energy_error = -0.0456969998101453, max_hamiltonian_energy_error = -1.0225212778345938, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9512071736976772, log_density = 12.171479265790389, hamiltonian_energy = -9.585806222640107, hamiltonian_energy_error = -0.13104907872680904, max_hamiltonian_energy_error = 0.18265973776104616, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9928292993999147, log_density = 11.202171069130456, hamiltonian_energy = -8.915247678099345, hamiltonian_energy_error = 0.002681109279190963, max_hamiltonian_energy_error = -0.06310920537063858, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9578357230880867, log_density = 12.26433163422204, hamiltonian_energy = -9.58038126000109, hamiltonian_energy_error = 0.019275952225537907, max_hamiltonian_energy_error = 0.12135597167869427, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9830996233529422, log_density = 11.175206017151181, hamiltonian_energy = -8.08324673722189, hamiltonian_energy_error = 0.010306929242618779, max_hamiltonian_energy_error = 0.07242914892227326, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.978188749678244, log_density = 11.079844569112405, hamiltonian_energy = -7.052324932872786, hamiltonian_energy_error = 0.03341260508222721, max_hamiltonian_energy_error = -0.11409755451691872, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.468843934927872, hamiltonian_energy = -9.338185843092571, hamiltonian_energy_error = -0.02425794133117698, max_hamiltonian_energy_error = -0.06522249941675007, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9979121789815061, log_density = 12.468006413571095, hamiltonian_energy = -10.052905447023807, hamiltonian_energy_error = -0.04544416102649862, max_hamiltonian_energy_error = -0.09582560559834619, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8428954871224161, log_density = 11.34983464957175, hamiltonian_energy = -7.59285933433973, hamiltonian_energy_error = 0.14608224370340483, max_hamiltonian_energy_error = 0.3122378577244884, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.999836188138074, log_density = 11.728140309319912, hamiltonian_energy = -10.779995046871075, hamiltonian_energy_error = -0.07198773851405527, max_hamiltonian_energy_error = -0.16876206617178902, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.987874727035332, log_density = 11.087723625979113, hamiltonian_energy = -10.531184623044743, hamiltonian_energy_error = 0.05316130833409005, max_hamiltonian_energy_error = -0.0718534819226111, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9890406959517165, log_density = 10.863327956952254, hamiltonian_energy = -9.769011387643996, hamiltonian_energy_error = 0.057942069792552786, max_hamiltonian_energy_error = -0.11558941084935981, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9350113421764651, log_density = 9.595602733304185, hamiltonian_energy = -8.028725047217161, hamiltonian_energy_error = 0.11835472635356581, max_hamiltonian_energy_error = 0.2803346450905364, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.713024081679173, hamiltonian_energy = -8.094537615711625, hamiltonian_energy_error = -0.044481520405449615, max_hamiltonian_energy_error = -0.31445129164798047, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 13.122512519688392, hamiltonian_energy = -8.129975108146487, hamiltonian_energy_error = -0.3058576841151712, max_hamiltonian_energy_error = -0.3058576841151712, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9845699443086237, log_density = 10.668368263139925, hamiltonian_energy = -10.501811037511978, hamiltonian_energy_error = 0.04516555952841017, max_hamiltonian_energy_error = 0.04600340521568569, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9823898291337981, log_density = 12.12973323145292, hamiltonian_energy = -8.782467362087521, hamiltonian_energy_error = 0.04542700439272629, max_hamiltonian_energy_error = -0.0945683904609318, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.973216002534724, log_density = 11.259691009995265, hamiltonian_energy = -8.361438955864477, hamiltonian_energy_error = -0.0498991516031122, max_hamiltonian_energy_error = -0.27811171746806806, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7163589090405913, log_density = 11.526495537303553, hamiltonian_energy = -9.150217497335063, hamiltonian_energy_error = 0.3635079480706569, max_hamiltonian_energy_error = 0.4722873256873985, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9272801235936933, log_density = 12.21392858471676, hamiltonian_energy = -10.185242977220778, hamiltonian_energy_error = 0.06174328665484907, max_hamiltonian_energy_error = 0.13562347483835957, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7900322792344227, log_density = 12.685979357879397, hamiltonian_energy = -9.30820661423684, hamiltonian_energy_error = 0.15545300834902598, max_hamiltonian_energy_error = 0.4312870103984885, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9619006513390883, log_density = 11.978946714464527, hamiltonian_energy = -10.563782323578701, hamiltonian_energy_error = -0.020700982474261664, max_hamiltonian_energy_error = 0.11737401899975275, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9920071551923922, log_density = 10.806754107041938, hamiltonian_energy = -10.22217226654929, hamiltonian_energy_error = -0.0002029400452219221, max_hamiltonian_energy_error = -0.17121250458046688, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.244539642831043, hamiltonian_energy = -8.612678509801928, hamiltonian_energy_error = -0.044655400429864045, max_hamiltonian_energy_error = -0.12035940031712755, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8165860973470506, log_density = 10.665540855877364, hamiltonian_energy = -4.750665133645755, hamiltonian_energy_error = 0.1935335894925272, max_hamiltonian_energy_error = 0.4151895350692367, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9068958060553006, log_density = 11.900334385774928, hamiltonian_energy = -6.490890776196034, hamiltonian_energy_error = -0.11546577793212975, max_hamiltonian_energy_error = 0.2650760463512061, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9814285206962364, log_density = 12.489741288912288, hamiltonian_energy = -10.817371380418672, hamiltonian_energy_error = -0.09685822033824287, max_hamiltonian_energy_error = -0.17065677657688383, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9114761114136589, log_density = 11.900506212864011, hamiltonian_energy = -10.673093897662564, hamiltonian_energy_error = 0.0801320153004017, max_hamiltonian_energy_error = 0.37364295742285236, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9552886230821994, log_density = 13.041194407466332, hamiltonian_energy = -8.832534596217837, hamiltonian_energy_error = -0.06463005842944547, max_hamiltonian_energy_error = -0.7295072672538048, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9865394303026851, log_density = 11.306492358087457, hamiltonian_energy = -10.810797640263202, hamiltonian_energy_error = 0.03459403957901408, max_hamiltonian_energy_error = 0.0358315866497918, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8585184477955965, log_density = 9.16174485285012, hamiltonian_energy = -8.597161679373256, hamiltonian_energy_error = 0.25888150702511403, max_hamiltonian_energy_error = 0.260088075721157, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9885969302826311, log_density = 10.55058338076816, hamiltonian_energy = -6.786632612435642, hamiltonian_energy_error = -0.24851220733822377, max_hamiltonian_energy_error = -0.24851220733822377, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8707121356852915, log_density = 12.271150537567065, hamiltonian_energy = -8.529176469880316, hamiltonian_energy_error = 0.1716898683018755, max_hamiltonian_energy_error = 0.8899887184212059, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9976288016021646, log_density = 13.025103528026664, hamiltonian_energy = -12.056631344959925, hamiltonian_energy_error = -0.03306243950732224, max_hamiltonian_energy_error = -0.11629433603879136, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9835566415348944, log_density = 12.69445169594979, hamiltonian_energy = -12.258299625471809, hamiltonian_energy_error = 0.02775319274318022, max_hamiltonian_energy_error = 0.04179180126164006, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.991260306753869, log_density = 12.402746256544848, hamiltonian_energy = -11.443210479545225, hamiltonian_energy_error = 0.010044753764663739, max_hamiltonian_energy_error = -0.054974646063239874, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9937516986811238, log_density = 12.524456462877785, hamiltonian_energy = -12.198822207435846, hamiltonian_energy_error = -0.0010723841411053314, max_hamiltonian_energy_error = -0.06396516661381924, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9244611639389113, log_density = 11.225647202615523, hamiltonian_energy = -10.96921290471637, hamiltonian_energy_error = 0.2569802449853711, max_hamiltonian_energy_error = 0.2569802449853711, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7975224274945594, log_density = 11.577958826453006, hamiltonian_energy = -9.297663044172957, hamiltonian_energy_error = 0.3387530076919596, max_hamiltonian_energy_error = 0.41368654099496815, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9828145862797343, log_density = 11.90492154560367, hamiltonian_energy = -10.101957288886535, hamiltonian_energy_error = -0.08354787645752104, max_hamiltonian_energy_error = 0.2247629012783019, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9874524807010014, log_density = 12.236070852476912, hamiltonian_energy = -11.06580636578653, hamiltonian_energy_error = -0.012684350195431904, max_hamiltonian_energy_error = 0.03465800624969617, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9564117683973087, log_density = 11.172056665049244, hamiltonian_energy = -9.490512717563055, hamiltonian_energy_error = 0.034678128857942525, max_hamiltonian_energy_error = 0.07617794922514776, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9854370202104753, log_density = 10.033695566103308, hamiltonian_energy = -7.596560837080403, hamiltonian_energy_error = -0.021417210707241452, max_hamiltonian_energy_error = 0.04937389273242321, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9929936281844837, log_density = 11.764903708655334, hamiltonian_energy = -8.936948673203373, hamiltonian_energy_error = -0.02309673839934412, max_hamiltonian_energy_error = 0.023237103134622572, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9539647182064133, log_density = 10.422349492069415, hamiltonian_energy = -8.846225387971524, hamiltonian_energy_error = 0.027984268690863345, max_hamiltonian_energy_error = 0.09484470511247522, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9976937264644482, log_density = 10.175539180490155, hamiltonian_energy = -9.372014202375496, hamiltonian_energy_error = 0.014395957510009438, max_hamiltonian_energy_error = -0.042703232884770514, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9163595751906676, log_density = 12.292061986474742, hamiltonian_energy = -7.769575399085524, hamiltonian_energy_error = 0.061593029544410705, max_hamiltonian_energy_error = 0.18526864052757297, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9951068453246107, log_density = 12.109848516505156, hamiltonian_energy = -9.558379978960389, hamiltonian_energy_error = -0.0036898234209683523, max_hamiltonian_energy_error = -0.095489150091014, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9944827734025395, log_density = 12.644789509495322, hamiltonian_energy = -11.341563630690224, hamiltonian_energy_error = -0.03660168253291474, max_hamiltonian_energy_error = -0.08890671269398887, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9645863893932781, log_density = 11.466847090142789, hamiltonian_energy = -9.24274611867937, hamiltonian_energy_error = 0.016638800396586717, max_hamiltonian_energy_error = 0.08888660043639263, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9228331752979294, log_density = 12.780021310418103, hamiltonian_energy = -6.100323608408917, hamiltonian_energy_error = 0.01869054524040692, max_hamiltonian_energy_error = 0.2653342230468869, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9675225726195528, log_density = 12.561878554898543, hamiltonian_energy = -10.922061643805005, hamiltonian_energy_error = -0.016667361414137716, max_hamiltonian_energy_error = 0.08865368901381565, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.867158707678108, log_density = 11.539390359020919, hamiltonian_energy = -9.741289367930747, hamiltonian_energy_error = 0.15871378313964257, max_hamiltonian_energy_error = 0.22519489867665854, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.958760537613874, log_density = 12.156553073348142, hamiltonian_energy = -9.67229168317817, hamiltonian_energy_error = -0.037489622443400705, max_hamiltonian_energy_error = 0.08208727322818277, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9718102920483537, log_density = 12.651880608714507, hamiltonian_energy = -10.759368197926637, hamiltonian_energy_error = 0.01429387242903779, max_hamiltonian_energy_error = 0.05273682803575497, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9837461340297805, log_density = 11.62201417100078, hamiltonian_energy = -10.999771822269441, hamiltonian_energy_error = 0.014848879497890266, max_hamiltonian_energy_error = 0.049239215357392396, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9924421089121395, log_density = 12.822197620413249, hamiltonian_energy = -10.667948054591736, hamiltonian_energy_error = -0.012676388273550998, max_hamiltonian_energy_error = -0.07218137982821204, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8737575495437759, log_density = 10.061659191788603, hamiltonian_energy = -8.595601552753072, hamiltonian_energy_error = 0.11915819873297195, max_hamiltonian_energy_error = 0.24825393991496192, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9648051269076993, log_density = 7.732890783274691, hamiltonian_energy = -5.044433019542258, hamiltonian_energy_error = 0.09036224936675552, max_hamiltonian_energy_error = -0.18876720441620964, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 9.068453234850567, hamiltonian_energy = -7.398847419379657, hamiltonian_energy_error = -0.08472295130732999, max_hamiltonian_energy_error = -0.26508532323035805, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9982496372520171, log_density = 11.21521658676177, hamiltonian_energy = -8.586856671734788, hamiltonian_energy_error = -0.0869443173104898, max_hamiltonian_energy_error = -0.16933688886340725, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9976317507195941, log_density = 12.929889972686798, hamiltonian_energy = -10.504242842279147, hamiltonian_energy_error = -0.06562279155469142, max_hamiltonian_energy_error = -0.12974596924356874, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9418715919282316, log_density = 11.41750413205863, hamiltonian_energy = -11.08675773064979, hamiltonian_energy_error = 0.10258763303310836, max_hamiltonian_energy_error = 0.10258763303310836, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9421469501827447, log_density = 10.74554642975844, hamiltonian_energy = -8.838951538293397, hamiltonian_energy_error = 0.23022390386479685, max_hamiltonian_energy_error = 0.23022390386479685, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.056092313238446, hamiltonian_energy = -9.85288193058494, hamiltonian_energy_error = -0.20736623785593622, max_hamiltonian_energy_error = -0.3247818180391633, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9748224055810286, log_density = 11.423522257904343, hamiltonian_energy = -9.278316243201374, hamiltonian_energy_error = 0.03851708151272781, max_hamiltonian_energy_error = 0.10217878503671152, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.960828226661725, hamiltonian_energy = -10.47736589582551, hamiltonian_energy_error = -0.036368562040191676, max_hamiltonian_energy_error = -0.09813770248734954, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8631181033709621, log_density = 12.014235109783707, hamiltonian_energy = -7.759544323701602, hamiltonian_energy_error = 0.03926674307740807, max_hamiltonian_energy_error = 0.4585761437655833, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9607742246180517, log_density = 11.480767855163572, hamiltonian_energy = -10.305418274759665, hamiltonian_energy_error = -0.056426397250325167, max_hamiltonian_energy_error = 0.1399397296479954, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9970229135861579, log_density = 11.989101940340124, hamiltonian_energy = -10.651193313297593, hamiltonian_energy_error = -0.03905827282521912, max_hamiltonian_energy_error = -0.06339443844308335, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9666613203560255, log_density = 11.934438825038693, hamiltonian_energy = -10.796925716217215, hamiltonian_energy_error = 0.009099003446037202, max_hamiltonian_energy_error = 0.12396502222208561, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.8898336077359708, log_density = 10.312255266945044, hamiltonian_energy = -7.3381211760076575, hamiltonian_energy_error = -0.1310890493785255, max_hamiltonian_energy_error = 0.3501083034451593, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9442851541414237, log_density = 9.558327846021756, hamiltonian_energy = -8.781060755522486, hamiltonian_energy_error = 0.0543526286151117, max_hamiltonian_energy_error = 0.08193525490732334, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8408583913465918, log_density = 10.421773623494035, hamiltonian_energy = -7.318261272762893, hamiltonian_energy_error = 0.2763455847390075, max_hamiltonian_energy_error = 0.2763455847390075, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8368825084418273, log_density = 12.99970347544052, hamiltonian_energy = -5.4083777104645465, hamiltonian_energy_error = -0.1744197030096979, max_hamiltonian_energy_error = 0.4518769839389698, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9357648942059349, log_density = 12.935888806943817, hamiltonian_energy = -9.943883210563529, hamiltonian_energy_error = 0.008951911290319359, max_hamiltonian_energy_error = 0.3445091149793633, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9036437574339726, log_density = 12.059198737649393, hamiltonian_energy = -10.705869747110576, hamiltonian_energy_error = 0.09347918746658301, max_hamiltonian_energy_error = 0.2846538225405837, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9862312300095067, log_density = 13.346290838607429, hamiltonian_energy = -11.654360032388906, hamiltonian_energy_error = -0.15742999267645885, max_hamiltonian_energy_error = -0.15742999267645885, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9965985319206363, log_density = 13.142345545008705, hamiltonian_energy = -12.864010250048494, hamiltonian_energy_error = 0.0017096714893369835, max_hamiltonian_energy_error = 0.008149301734993841, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9904706009267874, log_density = 12.74708530051041, hamiltonian_energy = -12.410674204130293, hamiltonian_energy_error = 0.017827102338728196, max_hamiltonian_energy_error = 0.01857559144392873, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9693858029707811, log_density = 11.344820815639792, hamiltonian_energy = -10.1467154218177, hamiltonian_energy_error = 0.09661368880931143, max_hamiltonian_energy_error = -0.11152176623823351, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8787729035183667, log_density = 13.15269104717353, hamiltonian_energy = -6.059148554117909, hamiltonian_energy_error = -0.21670645036398284, max_hamiltonian_energy_error = 0.46092719949102445, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9476742334823052, log_density = 12.924443122669752, hamiltonian_energy = -11.087941270922256, hamiltonian_energy_error = -0.012220772664004897, max_hamiltonian_energy_error = 0.268503757840012, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.981565175545075, log_density = 12.986074370489431, hamiltonian_energy = -11.875164785408934, hamiltonian_energy_error = -0.019484288242065162, max_hamiltonian_energy_error = 0.052948488984650766, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.985843946702837, log_density = 11.946529195908502, hamiltonian_energy = -11.548951171685124, hamiltonian_energy_error = 0.01583606125722703, max_hamiltonian_energy_error = 0.02234076855087963, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8989176729288626, log_density = 12.15751163859639, hamiltonian_energy = -7.139841502148722, hamiltonian_energy_error = 0.013118165307516527, max_hamiltonian_energy_error = 0.5535301183507721, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.965599261079421, log_density = 11.157016362189804, hamiltonian_energy = -9.427034544333514, hamiltonian_energy_error = -0.036165413295679016, max_hamiltonian_energy_error = 0.13772332247225627, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9751544043054635, log_density = 10.305063108818024, hamiltonian_energy = -9.206525713037951, hamiltonian_energy_error = 0.006038880874767116, max_hamiltonian_energy_error = 0.1253096210680198, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.16220840170550013, log_density = 10.305063108818024, hamiltonian_energy = -7.185769823234571, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 2.913123317670034, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9565440017497885, log_density = 9.61126797527869, hamiltonian_energy = -7.325449590637874, hamiltonian_energy_error = 0.03442987506189965, max_hamiltonian_energy_error = 0.29886506346297637, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.991661823413467, log_density = 11.683178072618995, hamiltonian_energy = -8.388628000610355, hamiltonian_energy_error = -0.14329454175231682, max_hamiltonian_energy_error = -0.14329454175231682, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9534901414738172, log_density = 10.776359384603126, hamiltonian_energy = -7.91393766809953, hamiltonian_energy_error = 0.043411654355661966, max_hamiltonian_energy_error = 0.12321053570629115, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9590432843850653, log_density = 10.683516463840636, hamiltonian_energy = -9.294097209138359, hamiltonian_energy_error = 0.07850116430650189, max_hamiltonian_energy_error = 0.17985572631588198, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.3316520202508792, log_density = 9.867949130110702, hamiltonian_energy = -6.967065377287709, hamiltonian_energy_error = 0.66003311950616, max_hamiltonian_energy_error = 2.18067706669659, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.6748355561742363, log_density = 11.046571754046274, hamiltonian_energy = -6.934627568520714, hamiltonian_energy_error = 0.48014952643456876, max_hamiltonian_energy_error = 0.5930014146657294, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8720809681507772, log_density = 12.347518648117465, hamiltonian_energy = -8.910434084131765, hamiltonian_energy_error = 0.03224484659892468, max_hamiltonian_energy_error = 0.2638880113613755, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8225464525070852, log_density = 8.825719409483185, hamiltonian_energy = -7.025206346366687, hamiltonian_energy_error = 0.3778049546630369, max_hamiltonian_energy_error = 0.560393069754114, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.291160833593159, hamiltonian_energy = -7.215364673687876, hamiltonian_energy_error = -0.05889641940357304, max_hamiltonian_energy_error = -1.2898407343021345, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9605574190830011, log_density = 9.696620607458959, hamiltonian_energy = -6.1053777158451155, hamiltonian_energy_error = -0.6159478615009126, max_hamiltonian_energy_error = -0.7727669663923749, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9786547250131733, log_density = 11.260082268214564, hamiltonian_energy = -8.080148551588005, hamiltonian_energy_error = -0.08126748516654381, max_hamiltonian_energy_error = -0.33841131978560846, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9905573196225467, log_density = 11.530517415907434, hamiltonian_energy = -10.51077754724527, hamiltonian_energy_error = -0.003985804934623971, max_hamiltonian_energy_error = -0.04154439987218694, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9846040674047764, log_density = 12.939169434003865, hamiltonian_energy = -7.962778654227717, hamiltonian_energy_error = -0.018203118699113396, max_hamiltonian_energy_error = -0.11025522798927412, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.987956844743804, log_density = 12.102174756016602, hamiltonian_energy = -10.970287987716304, hamiltonian_energy_error = -0.020573489581513726, max_hamiltonian_energy_error = -0.14446531998596512, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.5250153425306471, log_density = 3.537953044510136, hamiltonian_energy = -2.573289390421526, hamiltonian_energy_error = 0.8784596775617919, max_hamiltonian_energy_error = 0.8784596775617919, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 8.86600491492796, hamiltonian_energy = -2.0548069880714355, hamiltonian_energy_error = -0.5593896286453983, max_hamiltonian_energy_error = -0.8979899630739503, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9867713989974388, log_density = 11.63831131746165, hamiltonian_energy = -8.476822698144868, hamiltonian_energy_error = -0.2181615814740656, max_hamiltonian_energy_error = -0.4739894968526439, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9979973299201672, log_density = 12.099292046106697, hamiltonian_energy = -9.420031106329294, hamiltonian_energy_error = -0.04928195910301447, max_hamiltonian_energy_error = -0.2131911857703308, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9849913152934183, log_density = 12.32806995875842, hamiltonian_energy = -9.760859582903926, hamiltonian_energy_error = -0.10104749161471815, max_hamiltonian_energy_error = 0.12524957624171407, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9457474383998279, log_density = 12.13844135417732, hamiltonian_energy = -8.10504169171632, hamiltonian_energy_error = -0.06420576318486759, max_hamiltonian_energy_error = 0.1809259724416341, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8037517486706879, log_density = 11.68655328309498, hamiltonian_energy = -6.882694851222251, hamiltonian_energy_error = 0.0896648098224837, max_hamiltonian_energy_error = 0.43317699304134116, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9968986870526338, log_density = 12.283653439264404, hamiltonian_energy = -10.916649329569571, hamiltonian_energy_error = -0.11052996789880787, max_hamiltonian_energy_error = -0.1640310584407576, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9685005777959819, log_density = 11.908025378616387, hamiltonian_energy = -9.208418693343159, hamiltonian_energy_error = -0.019456560725057415, max_hamiltonian_energy_error = 0.09841224383486669, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9968572491247187, log_density = 12.915156962437017, hamiltonian_energy = -11.4010703611319, hamiltonian_energy_error = -0.01779591717021667, max_hamiltonian_energy_error = -0.04892400931118601, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9071532960283317, log_density = 10.838502557035678, hamiltonian_energy = -9.39405040371479, hamiltonian_energy_error = 0.17561055947561144, max_hamiltonian_energy_error = 0.17561055947561144, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 1.0, log_density = 10.98243926274594, hamiltonian_energy = -7.983884840943336, hamiltonian_energy_error = -0.07445418424164263, max_hamiltonian_energy_error = -0.23238379695558553, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9996396087550525, log_density = 10.820929787544268, hamiltonian_energy = -9.3111403213849, hamiltonian_energy_error = -0.01897049026546682, max_hamiltonian_energy_error = -0.10223756888713353, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.987205253615443, log_density = 12.116519461506137, hamiltonian_energy = -8.998541876046644, hamiltonian_energy_error = -0.001044317572949538, max_hamiltonian_energy_error = 0.06077054591878017, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9817029496058635, log_density = 12.194438217882869, hamiltonian_energy = -10.621979950575078, hamiltonian_energy_error = -0.08226851899634013, max_hamiltonian_energy_error = -0.20723616281399515, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8471905964720804, log_density = 11.52946102536053, hamiltonian_energy = -7.598690507504366, hamiltonian_energy_error = 0.010258536229161841, max_hamiltonian_energy_error = 0.33404970398387057, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.987209120975652, log_density = 12.745405787564131, hamiltonian_energy = -8.54882388571043, hamiltonian_energy_error = -0.03692276845469955, max_hamiltonian_energy_error = -0.05868382489805413, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9955863125989249, log_density = 12.164168841378643, hamiltonian_energy = -11.919637911455442, hamiltonian_energy_error = 0.01078210871555818, max_hamiltonian_energy_error = 0.011762718079106449, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9981059559644223, log_density = 12.725651555558628, hamiltonian_energy = -11.25467881824775, hamiltonian_energy_error = -0.037960090250400924, max_hamiltonian_energy_error = -0.037960090250400924, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8334974712450723, log_density = 10.260792638302421, hamiltonian_energy = -8.13578727947855, hamiltonian_energy_error = 0.26227698549177525, max_hamiltonian_energy_error = 0.31663506488555804, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9923528665487419, log_density = 8.032144606667314, hamiltonian_energy = -7.167869631765445, hamiltonian_energy_error = 0.03760874318182328, max_hamiltonian_energy_error = -0.25173180161502984, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8593255757091938, log_density = 5.421137120188213, hamiltonian_energy = -4.012639196570891, hamiltonian_energy_error = 0.2772740721630509, max_hamiltonian_energy_error = 0.2772740721630509, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.95827261612596, log_density = 11.699584374514103, hamiltonian_energy = -1.5967839551781235, hamiltonian_energy_error = -0.46459352067846016, max_hamiltonian_energy_error = 2.257400220920437, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9824355563008255, log_density = 12.565118946848552, hamiltonian_energy = -10.700485650544818, hamiltonian_energy_error = 0.008569906428263607, max_hamiltonian_energy_error = -0.16935541687340816, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9938364573887711, log_density = 12.659830931109035, hamiltonian_energy = -10.50792973110354, hamiltonian_energy_error = -0.05875576052520515, max_hamiltonian_energy_error = -0.05875576052520515, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9952206756992629, log_density = 13.033109478035549, hamiltonian_energy = -12.22408122210824, hamiltonian_energy_error = 0.0054714432147680014, max_hamiltonian_energy_error = 0.018754260770252884, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9997220202383633, log_density = 12.647621184473234, hamiltonian_energy = -11.353811733975764, hamiltonian_energy_error = -0.034271668699801694, max_hamiltonian_energy_error = -0.04171128469731755, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8851781103092154, log_density = 11.802230549225394, hamiltonian_energy = -10.511831473276377, hamiltonian_energy_error = 0.1466954367116564, max_hamiltonian_energy_error = 0.26052500486523833, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.962508659239091, log_density = 10.30528052513109, hamiltonian_energy = -9.187007871330922, hamiltonian_energy_error = -0.026949732483929623, max_hamiltonian_energy_error = -0.24670242869001768, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9844092314813376, log_density = 12.528700140286242, hamiltonian_energy = -9.586405112790748, hamiltonian_energy_error = -0.14933116050646333, max_hamiltonian_energy_error = -0.18913396713309005, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9508219135864813, log_density = 11.453036197759909, hamiltonian_energy = -10.980893971922612, hamiltonian_energy_error = 0.03643040554141663, max_hamiltonian_energy_error = 0.13693330298486295, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.5481316360527846, log_density = 11.453036197759909, hamiltonian_energy = -10.016058828983835, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 0.9416371359651414, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9983469968826789, log_density = 9.089617239529435, hamiltonian_energy = -7.490469888432406, hamiltonian_energy_error = 0.025107621623519982, max_hamiltonian_energy_error = -0.15860034803794854, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9815869412614405, log_density = 8.583825054781782, hamiltonian_energy = -6.132286235094117, hamiltonian_energy_error = 0.030083817202494423, max_hamiltonian_energy_error = -0.09044502741335236, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7316571654387105, log_density = 11.342014454948734, hamiltonian_energy = -1.610874383868989, hamiltonian_energy_error = 0.060076070134355675, max_hamiltonian_energy_error = 0.6283452771558515, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9627539310353121, log_density = 10.54611717798798, hamiltonian_energy = -8.46792518872155, hamiltonian_energy_error = -0.006617471162071453, max_hamiltonian_energy_error = 0.11913167102880351, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7870426247697935, log_density = 9.13898209008985, hamiltonian_energy = -4.595249640075718, hamiltonian_energy_error = 0.15560029895186567, max_hamiltonian_energy_error = 0.6628131544326186, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.99212258778666, log_density = 8.795585049776488, hamiltonian_energy = -7.129347865760577, hamiltonian_energy_error = -0.07071426463457886, max_hamiltonian_energy_error = -0.5140447598584466, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.427470331423297, hamiltonian_energy = -8.341923858616955, hamiltonian_energy_error = -0.33990736667910326, max_hamiltonian_energy_error = -0.6601585061543389, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9715067832332144, log_density = 12.386644500602191, hamiltonian_energy = -9.430090196047608, hamiltonian_energy_error = -0.10995117492000617, max_hamiltonian_energy_error = -0.3325931705168834, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8707833304996572, log_density = 10.728750516551099, hamiltonian_energy = -9.444833179333683, hamiltonian_energy_error = 0.24231094740848214, max_hamiltonian_energy_error = 0.26345388879403053, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 12.783611414553882, hamiltonian_energy = -10.283839528420774, hamiltonian_energy_error = -0.24004541006297409, max_hamiltonian_energy_error = -0.27217576220262885, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9634479400532164, log_density = 13.31527119635596, hamiltonian_energy = -12.02991866510689, hamiltonian_energy_error = -0.04173358009878747, max_hamiltonian_energy_error = 0.08658786604320667, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9534051511577992, log_density = 13.098944316711812, hamiltonian_energy = -11.651317728433122, hamiltonian_energy_error = 0.024220672220586437, max_hamiltonian_energy_error = 0.0967084047500073, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9985347472137679, log_density = 12.901690080129708, hamiltonian_energy = -12.515517189908406, hamiltonian_energy_error = -0.021267761502702598, max_hamiltonian_energy_error = -0.03826195771883789, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.905428114427175, log_density = 12.791415105852188, hamiltonian_energy = -10.988192107533914, hamiltonian_energy_error = 0.1654670551896018, max_hamiltonian_energy_error = 0.28588917703549477, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9229687135785238, log_density = 11.895293614266224, hamiltonian_energy = -9.309249194750583, hamiltonian_energy_error = 0.03988220930529707, max_hamiltonian_energy_error = 0.21088540353780516, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9790728473639909, log_density = 12.445042866145037, hamiltonian_energy = -10.360610517479584, hamiltonian_energy_error = -0.025271678916528373, max_hamiltonian_energy_error = -0.09936526458120021, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.980414651344698, log_density = 12.354414373245813, hamiltonian_energy = -11.112362836321104, hamiltonian_energy_error = -0.07881367774600712, max_hamiltonian_energy_error = -0.10194307018086413, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9970705684176462, log_density = 11.697046805094432, hamiltonian_energy = -11.035531899719112, hamiltonian_energy_error = -0.011684074026904412, max_hamiltonian_energy_error = -0.03176669008360378, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9064047604962208, log_density = 11.507331350908222, hamiltonian_energy = -8.184232809279578, hamiltonian_energy_error = 0.10613068907365708, max_hamiltonian_energy_error = 0.34875563866775927, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9152062932674473, log_density = 9.246161305066915, hamiltonian_energy = -7.938500620683404, hamiltonian_energy_error = 0.2202988698472934, max_hamiltonian_energy_error = 0.25432693478873425, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9926808447076626, log_density = 10.29351546467051, hamiltonian_energy = -8.41929814681433, hamiltonian_energy_error = 0.11629488905420615, max_hamiltonian_energy_error = -0.39587827087121497, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9931824834203685, log_density = 10.704461275696064, hamiltonian_energy = -8.910028002381265, hamiltonian_energy_error = -0.14234962529847017, max_hamiltonian_energy_error = -0.3092935624646209, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9954639860342994, log_density = 10.8877138030589, hamiltonian_energy = -9.09482188632313, hamiltonian_energy_error = -0.05493413984796014, max_hamiltonian_energy_error = -0.18979983747954066, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9973030896138657, log_density = 11.839199373194695, hamiltonian_energy = -10.557797721190553, hamiltonian_energy_error = -0.0464172124494997, max_hamiltonian_energy_error = -0.11326314243271796, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9916876162046364, log_density = 11.817131979200212, hamiltonian_energy = -10.21924883281168, hamiltonian_energy_error = 0.010451396233891685, max_hamiltonian_energy_error = -0.045324447921858635, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9895459258147365, log_density = 11.612227410304044, hamiltonian_energy = -10.57897327765225, hamiltonian_energy_error = 0.014374865555341287, max_hamiltonian_energy_error = -0.04777630897534557, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 35, is_accept = true, acceptance_rate = 0.9493563449242732, log_density = 10.973339686126083, hamiltonian_energy = -9.904208449735602, hamiltonian_energy_error = 0.06829330791432042, max_hamiltonian_energy_error = 0.1414506747689206, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.976494062914036, log_density = 11.202726868407403, hamiltonian_energy = -9.250489872887865, hamiltonian_energy_error = 0.0533459506112699, max_hamiltonian_energy_error = -0.4364726590992394, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8573748931505569, log_density = 7.506680159279574, hamiltonian_energy = -5.64535224069412, hamiltonian_energy_error = -0.03524363524491125, max_hamiltonian_energy_error = 0.8162705832602084, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9967981261131853, log_density = 12.141017893226547, hamiltonian_energy = -6.605160199200328, hamiltonian_energy_error = -0.0961408137068478, max_hamiltonian_energy_error = -0.16045710604903185, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.961787998227983, log_density = 12.625591595632349, hamiltonian_energy = -11.34294474900354, hamiltonian_energy_error = 0.020933457882771123, max_hamiltonian_energy_error = 0.08506907539088715, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8818897986582886, log_density = 11.373835369724208, hamiltonian_energy = -8.390101521928784, hamiltonian_energy_error = 0.04583883457238613, max_hamiltonian_energy_error = 0.3150152625472664, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8909260788836962, log_density = 12.52774585373987, hamiltonian_energy = -7.074778142131469, hamiltonian_energy_error = 0.002653034010479338, max_hamiltonian_energy_error = 0.7368208122962114, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9984181223568743, log_density = 11.394727782203724, hamiltonian_energy = -9.5484776026689, hamiltonian_energy_error = -0.010428232562937012, max_hamiltonian_energy_error = -0.1295564758282275, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9386323774607547, log_density = 6.802145358631943, hamiltonian_energy = -5.083673948705648, hamiltonian_energy_error = 0.03022143735933902, max_hamiltonian_energy_error = -0.21287371086274476, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9999254451395155, log_density = 10.879472294944971, hamiltonian_energy = -6.262169306001641, hamiltonian_energy_error = -0.19270559355973926, max_hamiltonian_energy_error = -0.24133913058423406, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9739674068214875, log_density = 10.891552154445378, hamiltonian_energy = -7.923367162365437, hamiltonian_energy_error = 0.03574929212298361, max_hamiltonian_energy_error = 0.10755232953929816, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9915134304131065, log_density = 11.12746392226147, hamiltonian_energy = -8.640015677442383, hamiltonian_energy_error = 0.051943798772002836, max_hamiltonian_energy_error = -0.09439278239973348, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9947862621647187, log_density = 12.705610023103336, hamiltonian_energy = -9.849583429012409, hamiltonian_energy_error = -0.10158283279522529, max_hamiltonian_energy_error = -0.11938608866033285, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9897917476579632, log_density = 11.21067363556466, hamiltonian_energy = -10.67881981862212, hamiltonian_energy_error = 0.0356995485141951, max_hamiltonian_energy_error = 0.037476472992532095, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9806884908995566, log_density = 10.057779454345514, hamiltonian_energy = -8.209126854136715, hamiltonian_energy_error = 0.023578832651464765, max_hamiltonian_energy_error = 0.06552971751411008, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9903514308786636, log_density = 11.732231269189265, hamiltonian_energy = -7.469853006094064, hamiltonian_energy_error = -0.038364819927729776, max_hamiltonian_energy_error = -0.10435710025228406, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9803325777455062, log_density = 12.070696656430693, hamiltonian_energy = -10.988198316787079, hamiltonian_energy_error = 0.03986528069117057, max_hamiltonian_energy_error = 0.0573310114693939, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8390813269402668, log_density = 10.089102738441063, hamiltonian_energy = -8.72718324351514, hamiltonian_energy_error = 0.33579991085061245, max_hamiltonian_energy_error = 0.33579991085061245, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9277424591815162, log_density = 11.447127178183958, hamiltonian_energy = -9.027593148182161, hamiltonian_energy_error = -0.006531329984907686, max_hamiltonian_energy_error = 0.24433223236995438, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.961606214923075, log_density = 10.277644493451783, hamiltonian_energy = -9.505448830147525, hamiltonian_energy_error = 0.127736608671686, max_hamiltonian_energy_error = -0.17504717202330866, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9980175693023567, log_density = 8.537842787355927, hamiltonian_energy = -6.447172044136689, hamiltonian_energy_error = -0.16128665868507497, max_hamiltonian_energy_error = -0.3164783023465656, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9465758207990461, log_density = 9.992682759024618, hamiltonian_energy = -5.913501609158423, hamiltonian_energy_error = 0.3894217508811533, max_hamiltonian_energy_error = 0.3894217508811533, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9821347666010399, log_density = 10.824223219344628, hamiltonian_energy = -9.21611298600159, hamiltonian_energy_error = -0.02767494448201191, max_hamiltonian_energy_error = -0.275118159036003, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9610402658599306, log_density = 12.18575881651363, hamiltonian_energy = -8.983765874034287, hamiltonian_energy_error = -0.7403813454469113, max_hamiltonian_energy_error = -1.3573842005752752, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9893995359851764, log_density = 11.987689074711188, hamiltonian_energy = -10.687628679756743, hamiltonian_energy_error = -0.014443626126427134, max_hamiltonian_energy_error = -0.12995433328885397, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9965615127893541, log_density = 11.493573974967362, hamiltonian_energy = -10.720567710691922, hamiltonian_energy_error = -0.03472732044719251, max_hamiltonian_energy_error = -0.03472732044719251, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.894112815170344, log_density = 9.13792363280156, hamiltonian_energy = -7.487501512284505, hamiltonian_energy_error = 0.013485932057904826, max_hamiltonian_energy_error = 0.2159066345810805, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9977920987490118, log_density = 6.121257768157722, hamiltonian_energy = -4.865080651297407, hamiltonian_energy_error = 0.013606868911781866, max_hamiltonian_energy_error = -0.10155413730061458, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8767419082475753, log_density = 4.933304239850468, hamiltonian_energy = -2.505727753818066, hamiltonian_energy_error = 0.16803821906008753, max_hamiltonian_energy_error = 0.3796687717349885, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8943821592778244, log_density = 8.276785317107954, hamiltonian_energy = -2.9676305354590236, hamiltonian_energy_error = -0.15968408389513922, max_hamiltonian_energy_error = 0.37564720899894555, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7855486066976185, log_density = 7.263900940799527, hamiltonian_energy = -4.09081303392837, hamiltonian_energy_error = 0.31698199782277836, max_hamiltonian_energy_error = 0.4685851362798452, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9887620185718237, log_density = 7.315310641928264, hamiltonian_energy = -4.428184427738911, hamiltonian_energy_error = -0.24269078454164372, max_hamiltonian_energy_error = -0.3438009522610699, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9874800173807963, log_density = 8.029236364080274, hamiltonian_energy = -5.50270806138205, hamiltonian_energy_error = -0.006190178501885413, max_hamiltonian_energy_error = -0.2037263229958448, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9619568961553518, log_density = 9.312109506950225, hamiltonian_energy = -5.503336035205431, hamiltonian_energy_error = 0.044367668588759734, max_hamiltonian_energy_error = -0.16784319390998448, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6561947313052479, log_density = 11.415851426210303, hamiltonian_energy = -5.691334593988922, hamiltonian_energy_error = 0.14342117539833854, max_hamiltonian_energy_error = 1.2142620632894001, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8540195025551767, log_density = 12.086533489478661, hamiltonian_energy = -9.364917874819355, hamiltonian_energy_error = 0.19314421132790294, max_hamiltonian_energy_error = 0.3841940594019171, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9978604637146534, log_density = 13.00647271641961, hamiltonian_energy = -11.381544086823087, hamiltonian_energy_error = -0.06267928934735423, max_hamiltonian_energy_error = -0.06267928934735423, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.900717235070889, log_density = 12.341751114687277, hamiltonian_energy = -10.921044141243328, hamiltonian_energy_error = 0.0947372082868867, max_hamiltonian_energy_error = 0.18619036240880682, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9903400988594606, log_density = 13.106331477475536, hamiltonian_energy = -11.018249075568885, hamiltonian_energy_error = -0.09388323352767358, max_hamiltonian_energy_error = -0.09388323352767358, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9500836929945071, log_density = 12.689761458348684, hamiltonian_energy = -11.421223548346319, hamiltonian_energy_error = 0.03393029656036539, max_hamiltonian_energy_error = 0.1243742780328585, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9818493601771697, log_density = 12.59808318460042, hamiltonian_energy = -11.098372507122297, hamiltonian_energy_error = -0.15050192558004483, max_hamiltonian_energy_error = 0.18039540593976255, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9895336016703756, log_density = 11.644544669214962, hamiltonian_energy = -11.475865848784897, hamiltonian_energy_error = 0.020524382963444054, max_hamiltonian_energy_error = 0.02380286028083134, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9811815944227752, log_density = 12.133693753155551, hamiltonian_energy = -9.973356732030215, hamiltonian_energy_error = -0.02626803468898231, max_hamiltonian_energy_error = 0.041693196291767265, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9667182346046445, log_density = 12.473464338541747, hamiltonian_energy = -9.287205176998667, hamiltonian_energy_error = -0.025089520708229784, max_hamiltonian_energy_error = 0.0680615518297838, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9909931615405928, log_density = 12.225008821268268, hamiltonian_energy = -11.511335281723643, hamiltonian_energy_error = -0.03544694976573837, max_hamiltonian_energy_error = -0.03544694976573837, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9883445565578924, log_density = 10.922155403778493, hamiltonian_energy = -9.791854616491282, hamiltonian_energy_error = 0.04490718714704656, max_hamiltonian_energy_error = 0.04490718714704656, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9679423812315108, log_density = 13.011620308462735, hamiltonian_energy = -6.27214613986823, hamiltonian_energy_error = -0.009953653719720457, max_hamiltonian_energy_error = 0.11627226821512959, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8949242718597245, log_density = 12.875876031809838, hamiltonian_energy = -11.57006669594938, hamiltonian_energy_error = 0.129130735237867, max_hamiltonian_energy_error = 0.16167885971509044, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9886237139113722, log_density = 12.278717471035538, hamiltonian_energy = -11.925428577207198, hamiltonian_energy_error = 0.051386160563144045, max_hamiltonian_energy_error = 0.051386160563144045, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9891937979325752, log_density = 12.560744590673398, hamiltonian_energy = -9.937140348067551, hamiltonian_energy_error = -0.11476982371928912, max_hamiltonian_energy_error = -0.14245111840952163, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.99617235211123, log_density = 12.94135907238983, hamiltonian_energy = -12.253769924504558, hamiltonian_energy_error = 0.0034845114623109907, max_hamiltonian_energy_error = -0.01722619501919631, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9554457876524091, log_density = 11.792618855473641, hamiltonian_energy = -11.155867511048282, hamiltonian_energy_error = 0.04346854586953697, max_hamiltonian_energy_error = 0.08694990772822209, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.978604408314589, log_density = 10.96638828323692, hamiltonian_energy = -9.312829321379308, hamiltonian_energy_error = 0.023606089450996848, max_hamiltonian_energy_error = -0.07826768119628014, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9985564558715244, log_density = 11.204677074299354, hamiltonian_energy = -9.600605736972923, hamiltonian_energy_error = -0.03045258887885538, max_hamiltonian_energy_error = -0.09875141649096264, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9952438625796513, log_density = 10.095698463841083, hamiltonian_energy = -6.731458896831121, hamiltonian_energy_error = -0.0015876789078719256, max_hamiltonian_energy_error = -0.27139070551448174, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6794435328065263, log_density = 5.24560669277378, hamiltonian_energy = -3.0083239363368772, hamiltonian_energy_error = 0.1640874560007104, max_hamiltonian_energy_error = 2.27524945673382, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.5856801149362338, log_density = 8.838968814298058, hamiltonian_energy = -1.2250608204174593, hamiltonian_energy_error = 0.7705858706622863, max_hamiltonian_energy_error = 0.7931281539050219, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.968209796601821, log_density = 11.769886305874785, hamiltonian_energy = -6.7475334030962095, hamiltonian_energy_error = -0.4119846646910137, max_hamiltonian_energy_error = -0.4119846646910137, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.262213835940074, hamiltonian_energy = -9.846544156061341, hamiltonian_energy_error = -0.0376360227080923, max_hamiltonian_energy_error = -0.1697740581986622, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8703171270099032, log_density = 9.748587079281648, hamiltonian_energy = -7.689528706681776, hamiltonian_energy_error = 0.11782007263717897, max_hamiltonian_energy_error = 0.25416893570364163, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 1.0, log_density = 10.84544449923705, hamiltonian_energy = -7.686026948623059, hamiltonian_energy_error = -0.061866957792035215, max_hamiltonian_energy_error = -0.2698111707464763, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.889800443552902, log_density = 11.328745309701658, hamiltonian_energy = -6.763458689251737, hamiltonian_energy_error = -0.30933160501369983, max_hamiltonian_energy_error = 1.0066319279443041, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.989161645256646, log_density = 12.668243383080767, hamiltonian_energy = -11.024146684616609, hamiltonian_energy_error = -0.006488775141969327, max_hamiltonian_energy_error = 0.024974297390485845, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9796724454900037, log_density = 10.023029225563906, hamiltonian_energy = -9.371872582040846, hamiltonian_energy_error = 0.07167382281794765, max_hamiltonian_energy_error = 0.07167382281794765, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9106074833436253, log_density = 11.057163971908246, hamiltonian_energy = -6.189602337211127, hamiltonian_energy_error = -0.01806637019583235, max_hamiltonian_energy_error = 0.23670993045844746, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.88285011430521, log_density = 12.237359271882545, hamiltonian_energy = -9.05087060339545, hamiltonian_energy_error = 0.14117447479040734, max_hamiltonian_energy_error = 0.3415301260166306, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9566607568864032, log_density = 12.512013289484008, hamiltonian_energy = -10.114717486969775, hamiltonian_energy_error = 0.015149341632476165, max_hamiltonian_energy_error = 0.11988873543728751, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9856706623655804, log_density = 12.943795152312942, hamiltonian_energy = -11.5590201462958, hamiltonian_energy_error = -0.016003315961588882, max_hamiltonian_energy_error = -0.12564693079508338, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9796111300239206, log_density = 12.922954167817055, hamiltonian_energy = -11.134781762761591, hamiltonian_energy_error = -0.019986018628337376, max_hamiltonian_energy_error = -0.09669624906716301, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9145844044142634, log_density = 11.29618074449795, hamiltonian_energy = -9.396699636515422, hamiltonian_energy_error = 0.12786150349713488, max_hamiltonian_energy_error = 0.2336631670893876, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9761119237251831, log_density = 10.42327887521445, hamiltonian_energy = -8.002774501544284, hamiltonian_energy_error = 0.019677251964193232, max_hamiltonian_energy_error = -0.3192567734331284, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9972410088458376, log_density = 11.943506217813642, hamiltonian_energy = -8.838531840945134, hamiltonian_energy_error = -0.14452414641694666, max_hamiltonian_energy_error = -0.24839109671118642, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9916252837986401, log_density = 12.56196061702046, hamiltonian_energy = -10.629904062299547, hamiltonian_energy_error = -0.02851785803484219, max_hamiltonian_energy_error = -0.03654753952447365, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9997692818144035, log_density = 13.116644097977328, hamiltonian_energy = -12.06296162791687, hamiltonian_energy_error = -0.009702449468079521, max_hamiltonian_energy_error = -0.01291314726553594, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9674712693346919, log_density = 12.205130789067042, hamiltonian_energy = -11.133408764219068, hamiltonian_energy_error = 0.04723815054238045, max_hamiltonian_energy_error = 0.05935531784047221, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9005222887864335, log_density = 8.930479515392356, hamiltonian_energy = -6.485235418435872, hamiltonian_energy_error = 0.11388795398645701, max_hamiltonian_energy_error = 0.308429647321506, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.210562570486688, hamiltonian_energy = -7.502127019500927, hamiltonian_energy_error = -0.3038185486061993, max_hamiltonian_energy_error = -0.3038185486061993, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9995477453366394, log_density = 12.077147851914265, hamiltonian_energy = -11.160479457301392, hamiltonian_energy_error = 0.006201177316068396, max_hamiltonian_energy_error = -0.07297653547426819, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9434858364603769, log_density = 11.47088704422934, hamiltonian_energy = -9.877504153876808, hamiltonian_energy_error = 0.13533313202212582, max_hamiltonian_energy_error = 0.17841298725714516, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8870912922227329, log_density = 9.779613038257413, hamiltonian_energy = -7.649779089339891, hamiltonian_energy_error = 0.18973658048489384, max_hamiltonian_energy_error = 0.3423804284055443, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.941807032289511, log_density = 12.365872456381997, hamiltonian_energy = -7.491940672254296, hamiltonian_energy_error = -0.39074990967615797, max_hamiltonian_energy_error = -0.4057113103031966, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7916037676459222, log_density = 7.790217263790524, hamiltonian_energy = -6.925659793493028, hamiltonian_energy_error = 0.5735229704709486, max_hamiltonian_energy_error = 0.5735229704709486, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.821038796122535, hamiltonian_energy = -7.015154001234465, hamiltonian_energy_error = -0.1365888719420747, max_hamiltonian_energy_error = -0.6604229999105851, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9370324471238071, log_density = 11.455771499316967, hamiltonian_energy = -4.789836041927087, hamiltonian_energy_error = -0.21674858231677696, max_hamiltonian_energy_error = -0.3060022412856398, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9440529129871756, log_density = 11.330791578185403, hamiltonian_energy = -9.336771973999399, hamiltonian_energy_error = 0.21769292054038125, max_hamiltonian_energy_error = 0.21769292054038125, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9926533609903794, log_density = 11.34133671616751, hamiltonian_energy = -9.628749783496495, hamiltonian_energy_error = -0.03346229489986996, max_hamiltonian_energy_error = -0.19701992851093308, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8224736705962016, log_density = 10.159002935780133, hamiltonian_energy = -7.461946756779093, hamiltonian_energy_error = 0.3909811159723322, max_hamiltonian_energy_error = 0.43291942689606966, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9646265490278386, log_density = 11.035888905498002, hamiltonian_energy = -9.042682954725134, hamiltonian_energy_error = -0.1018268226002288, max_hamiltonian_energy_error = -0.4044847167076533, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9846125285288511, log_density = 11.658499893261634, hamiltonian_energy = -9.718031952023571, hamiltonian_energy_error = -0.023133897235348755, max_hamiltonian_energy_error = -0.27371256721957593, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.992636875960581, log_density = 13.16361278197318, hamiltonian_energy = -10.513651937736466, hamiltonian_energy_error = -0.20219907425149053, max_hamiltonian_energy_error = -0.2787072505190604, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9633023253001084, log_density = 10.071303813336185, hamiltonian_energy = -8.053357680076667, hamiltonian_energy_error = 0.06901099737684113, max_hamiltonian_energy_error = -0.2702536995372693, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8226611712011022, log_density = 8.928218007744775, hamiltonian_energy = -5.8101957643700235, hamiltonian_energy_error = 0.2592227111027672, max_hamiltonian_energy_error = 0.38753738571174967, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9899523604906924, log_density = 10.439402622929308, hamiltonian_energy = -6.223874296632745, hamiltonian_energy_error = -0.25422062399278555, max_hamiltonian_energy_error = -0.34197005984258055, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9647213435474942, log_density = 12.638626295119748, hamiltonian_energy = -7.124764612396022, hamiltonian_energy_error = -0.04208662449523892, max_hamiltonian_energy_error = -0.37549500296411953, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6786907250793549, log_density = 10.883109006129898, hamiltonian_energy = -7.829424167517816, hamiltonian_energy_error = 0.4586686314541044, max_hamiltonian_energy_error = 0.9573087134586542, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8535518625145314, log_density = 12.041253522734213, hamiltonian_energy = -8.811566884950304, hamiltonian_energy_error = 0.04750913693542991, max_hamiltonian_energy_error = 0.805772064458834, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9586883573771011, log_density = 10.510489435761967, hamiltonian_energy = -9.914040137961226, hamiltonian_energy_error = 0.37497709187922723, max_hamiltonian_energy_error = 0.37497709187922723, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9966371245729112, log_density = 11.866713525613825, hamiltonian_energy = -8.626920008889947, hamiltonian_energy_error = -0.40052490115573036, max_hamiltonian_energy_error = -0.40052490115573036, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8554117315400784, log_density = 11.685157354662286, hamiltonian_energy = -10.120114777962275, hamiltonian_energy_error = 0.2108187390616294, max_hamiltonian_energy_error = 0.258891134895574, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8830080280659813, log_density = 12.354139411668331, hamiltonian_energy = -6.939514463289672, hamiltonian_energy_error = -0.09175226121571711, max_hamiltonian_energy_error = 0.3152190650089617, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9975202762119352, log_density = 12.51671263811906, hamiltonian_energy = -11.811290918842756, hamiltonian_energy_error = -0.00016535707870524163, max_hamiltonian_energy_error = -0.030939276266485294, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.8880707611651694, log_density = 10.65211570494887, hamiltonian_energy = -9.363342279063456, hamiltonian_energy_error = 0.13413200583720553, max_hamiltonian_energy_error = 0.23451671651913486, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9719837386850245, log_density = 11.579167592740962, hamiltonian_energy = -9.416721567359481, hamiltonian_energy_error = -0.04480117368772163, max_hamiltonian_energy_error = -0.2369568278007783, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9711837694424387, log_density = 11.905857246328779, hamiltonian_energy = -9.666138838952893, hamiltonian_energy_error = -0.04165967149512362, max_hamiltonian_energy_error = 0.11834688755912381, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9692482158681035, log_density = 12.802774312226633, hamiltonian_energy = -10.426741557447343, hamiltonian_energy_error = -0.014844621414725978, max_hamiltonian_energy_error = 0.1383234998145717, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9575430320823562, log_density = 11.941296009892747, hamiltonian_energy = -10.41661748162102, hamiltonian_energy_error = -0.00612615787836468, max_hamiltonian_energy_error = 0.13209335909320785, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9904983170587678, log_density = 12.84599240819098, hamiltonian_energy = -8.68304282609229, hamiltonian_energy_error = -0.09695312743384399, max_hamiltonian_energy_error = -0.0975104436022427, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.941665384036664, log_density = 12.926055326884526, hamiltonian_energy = -9.933021893072656, hamiltonian_energy_error = 0.022523193137164554, max_hamiltonian_energy_error = 0.14800934819329292, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8863806115855187, log_density = 10.75245750279751, hamiltonian_energy = -10.631632379679335, hamiltonian_energy_error = 0.23060888320243578, max_hamiltonian_energy_error = 0.2446619472553273, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9971010785510102, log_density = 12.612241279737942, hamiltonian_energy = -10.480700254795074, hamiltonian_energy_error = -0.19551903727023756, max_hamiltonian_energy_error = -0.2519198803045235, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9854244952536853, log_density = 12.258956673720299, hamiltonian_energy = -11.047960770735994, hamiltonian_energy_error = -0.08152481850967597, max_hamiltonian_energy_error = -0.10264525578459782, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9205482707284588, log_density = 12.360241320225452, hamiltonian_energy = -8.205727022528134, hamiltonian_energy_error = 0.050754782742810534, max_hamiltonian_energy_error = 0.43268456072475825, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9231543113908409, log_density = 11.875549126299727, hamiltonian_energy = -9.815159875416413, hamiltonian_energy_error = 0.06976122471169788, max_hamiltonian_energy_error = 0.2046031228855174, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9946434094249353, log_density = 12.422325296351385, hamiltonian_energy = -11.096301149666427, hamiltonian_energy_error = -0.038989180873038265, max_hamiltonian_energy_error = -0.12052959723792434, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9497374934079301, log_density = 11.952717662488066, hamiltonian_energy = -9.363856180453062, hamiltonian_energy_error = -0.03593984689242724, max_hamiltonian_energy_error = 0.2095678885746004, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.77523156790031, log_density = 10.642573442092129, hamiltonian_energy = -7.640086129742396, hamiltonian_energy_error = 0.28701463871895694, max_hamiltonian_energy_error = 0.4313442640680609, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9569812667539512, log_density = 12.194795636511754, hamiltonian_energy = -9.22418911721104, hamiltonian_energy_error = -0.21800414325845452, max_hamiltonian_energy_error = -0.21800414325845452, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8604324271184283, log_density = 9.336764698023405, hamiltonian_energy = -6.4389346362501865, hamiltonian_energy_error = 0.07386285734106401, max_hamiltonian_energy_error = 0.2906879093871666, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9771448033099969, log_density = 9.645985898465511, hamiltonian_energy = -7.221458329248117, hamiltonian_energy_error = 0.04580019629025589, max_hamiltonian_energy_error = -0.1167277662695545, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.703955556282171, hamiltonian_energy = -9.167905627159978, hamiltonian_energy_error = -0.041567719286678795, max_hamiltonian_energy_error = -0.14733521094894897, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.675158356917104, hamiltonian_energy = -8.972979620401166, hamiltonian_energy_error = -0.04238381762422172, max_hamiltonian_energy_error = -0.10377518707261402, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9821763274521451, log_density = 12.610285560645234, hamiltonian_energy = -10.691925907728546, hamiltonian_energy_error = 0.023583339760032018, max_hamiltonian_energy_error = 0.0692845881106603, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.231249758754563, hamiltonian_energy = -7.8225828859960735, hamiltonian_energy_error = -0.02759280716008128, max_hamiltonian_energy_error = -0.1855238015234466, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.793273629130919, hamiltonian_energy = -6.700140070168327, hamiltonian_energy_error = -0.14035639343133255, max_hamiltonian_energy_error = -0.14035639343133255, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9310611258130582, log_density = 10.306274146432308, hamiltonian_energy = -8.437700797214347, hamiltonian_energy_error = 0.10352754679486864, max_hamiltonian_energy_error = 0.37879603608381274, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9968081936477539, log_density = 11.320741091440574, hamiltonian_energy = -8.75642899488117, hamiltonian_energy_error = -0.13515183144548182, max_hamiltonian_energy_error = -0.14899785938422028, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9890094609977572, log_density = 11.295923754324402, hamiltonian_energy = -10.779268004598688, hamiltonian_energy_error = 0.02219170546056226, max_hamiltonian_energy_error = -0.03828091290836255, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.353676024376684, hamiltonian_energy = -10.978024756246716, hamiltonian_energy_error = -0.022353176927580876, max_hamiltonian_energy_error = -0.036302464793378064, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9014946792989412, log_density = 11.220322591920649, hamiltonian_energy = -10.497034108810928, hamiltonian_energy_error = 0.20139989053166651, max_hamiltonian_energy_error = 0.20139989053166651, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9843725105565952, log_density = 11.026404408138369, hamiltonian_energy = -8.546843923031622, hamiltonian_energy_error = -0.1774538295590773, max_hamiltonian_energy_error = -0.39800190041411376, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9812836141972441, log_density = 7.114856015530125, hamiltonian_energy = -5.958367985072554, hamiltonian_energy_error = 0.09451667247756568, max_hamiltonian_energy_error = -0.1844459839397654, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9459702962407399, log_density = 6.338057653042613, hamiltonian_energy = -5.9887381922538765, hamiltonian_energy_error = 0.09439589897244627, max_hamiltonian_energy_error = 0.09439589897244627, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.329710730508552, hamiltonian_energy = -5.275961980637732, hamiltonian_energy_error = -0.3022902423161451, max_hamiltonian_energy_error = -0.3022902423161451, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9782050424858408, log_density = 11.695784968880522, hamiltonian_energy = -10.548892864595555, hamiltonian_energy_error = -0.024558579771063904, max_hamiltonian_energy_error = 0.09134112587438459, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.967228367620325, log_density = 12.479824550743107, hamiltonian_energy = -9.917116361199248, hamiltonian_energy_error = -0.004696745627853716, max_hamiltonian_energy_error = 0.09819519138059718, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.4972108316921836, log_density = 8.19344653442921, hamiltonian_energy = -5.396374503159565, hamiltonian_energy_error = -0.06848025256901114, max_hamiltonian_energy_error = 1.898036207002395, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6952644998082963, log_density = 8.818201627784372, hamiltonian_energy = -4.379853293083954, hamiltonian_energy_error = 0.2080321523287445, max_hamiltonian_energy_error = 1.987199220640533, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9775663149887451, log_density = 11.729156177621467, hamiltonian_energy = -6.281760242222168, hamiltonian_energy_error = -0.12097182531564066, max_hamiltonian_energy_error = -0.12097182531564066, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9942506622712103, log_density = 12.997878930363436, hamiltonian_energy = -9.908419333439625, hamiltonian_energy_error = -0.0314306648604763, max_hamiltonian_energy_error = -0.07985134337117472, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9790224605834379, log_density = 12.669135120681263, hamiltonian_energy = -10.277087096066055, hamiltonian_energy_error = -0.23002734601648278, max_hamiltonian_energy_error = -0.3922228330098818, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9937794327955071, log_density = 12.481814401706263, hamiltonian_energy = -9.680735532112635, hamiltonian_energy_error = 0.0010102169659091942, max_hamiltonian_energy_error = -0.04820108332905626, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9947138182308131, log_density = 12.463462008696922, hamiltonian_energy = -10.92201572389089, hamiltonian_energy_error = 0.010201997425987486, max_hamiltonian_energy_error = 0.03105014156425767, tree_depth = 5, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9631308711027659, log_density = 12.149629564130835, hamiltonian_energy = -10.753998896476247, hamiltonian_energy_error = -0.02359263499886488, max_hamiltonian_energy_error = 0.12991249681885364, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8060100482585589, log_density = 11.383002157135024, hamiltonian_energy = -9.520030470020103, hamiltonian_energy_error = 0.1973303938271549, max_hamiltonian_energy_error = 0.5171089473666992, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9824656928295682, log_density = 13.271710907326735, hamiltonian_energy = -10.218692841494658, hamiltonian_energy_error = -0.014397361403460707, max_hamiltonian_energy_error = -0.14760526461813228, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9097313676245281, log_density = 12.590327975503964, hamiltonian_energy = -10.869761440523558, hamiltonian_energy_error = 0.053594561101864, max_hamiltonian_energy_error = 0.18532587452426164, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9533860205502079, log_density = 12.008684086473865, hamiltonian_energy = -10.699483443563476, hamiltonian_energy_error = -0.011238140862893431, max_hamiltonian_energy_error = 0.12743599173911235, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.897729296693524, log_density = 9.696929279344108, hamiltonian_energy = -8.740003836319339, hamiltonian_energy_error = 0.17382291588120324, max_hamiltonian_energy_error = 0.22700919691906662, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8479824065138725, log_density = 8.869150798117255, hamiltonian_energy = -5.658539730569763, hamiltonian_energy_error = 0.1620147696695886, max_hamiltonian_energy_error = 0.3623120450806425, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.841396850433753, hamiltonian_energy = -4.545069076479033, hamiltonian_energy_error = -0.12628787742692626, max_hamiltonian_energy_error = -0.44420119363231514, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9728308783967342, log_density = 12.205454557215894, hamiltonian_energy = -2.6827326184897764, hamiltonian_energy_error = -0.05305666048357871, max_hamiltonian_energy_error = -0.2858559684422417, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9784235510736489, log_density = 11.588742212261938, hamiltonian_energy = -8.286973631557622, hamiltonian_energy_error = 0.13172925342712283, max_hamiltonian_energy_error = -0.43098239272729444, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9913576394052508, log_density = 11.452256177127452, hamiltonian_energy = -9.164399668686626, hamiltonian_energy_error = -0.005616098407843495, max_hamiltonian_energy_error = -0.06184950380835019, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9080576751354028, log_density = 12.50877117958129, hamiltonian_energy = -8.187268682288911, hamiltonian_energy_error = -0.0589219665626306, max_hamiltonian_energy_error = 0.47410381813907865, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9679883306798263, log_density = 11.660078095830428, hamiltonian_energy = -8.973740335512204, hamiltonian_energy_error = 0.036846225222349815, max_hamiltonian_energy_error = 0.08119100385566291, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9160147930299118, log_density = 10.332708784202989, hamiltonian_energy = -8.779275591036171, hamiltonian_energy_error = 0.24841520155283092, max_hamiltonian_energy_error = 0.24841520155283092, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9844189627507004, log_density = 12.046527263998632, hamiltonian_energy = -9.421254620070805, hamiltonian_energy_error = -0.1867789412035581, max_hamiltonian_energy_error = -0.2704674555529376, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8515476424731604, log_density = 11.104198959131494, hamiltonian_energy = -9.702429572010866, hamiltonian_energy_error = 0.08486347716954512, max_hamiltonian_energy_error = 0.21583111409386646, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9784234060110795, log_density = 12.489067968632776, hamiltonian_energy = -10.433792266132258, hamiltonian_energy_error = -0.17606935677520852, max_hamiltonian_energy_error = 0.2264891485360092, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9703794935872444, log_density = 11.760652587603264, hamiltonian_energy = -11.362617772669351, hamiltonian_energy_error = 0.08426566659184331, max_hamiltonian_energy_error = -0.09895282649286763, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9287063967147803, log_density = 11.570739137179471, hamiltonian_energy = -10.122025452922673, hamiltonian_energy_error = 0.26779100473008377, max_hamiltonian_energy_error = 0.4007282892250821, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9783055602628359, log_density = 11.187316130443941, hamiltonian_energy = -10.192188799177053, hamiltonian_energy_error = -0.019823216389482923, max_hamiltonian_energy_error = -0.5277839590911011, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9366142045752504, log_density = 11.980071602892762, hamiltonian_energy = -8.0173034016761, hamiltonian_energy_error = -0.181901220288208, max_hamiltonian_energy_error = -0.5288842375147533, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.946939781408836, log_density = 13.006416136376986, hamiltonian_energy = -11.119346974828476, hamiltonian_energy_error = -0.05497107093103004, max_hamiltonian_energy_error = 0.10767094397648513, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8636533774301499, log_density = 11.16448594871697, hamiltonian_energy = -10.87346436654632, hamiltonian_energy_error = 0.16364840976910067, max_hamiltonian_energy_error = 0.16646661846936261, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9972448469147378, log_density = 12.003968568434848, hamiltonian_energy = -10.06823140980409, hamiltonian_energy_error = -0.019096123076755234, max_hamiltonian_energy_error = -0.1908794514807468, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.961089257247419, log_density = 11.418106765673421, hamiltonian_energy = -7.513299211874533, hamiltonian_energy_error = -0.09117442965450806, max_hamiltonian_energy_error = -0.6498610106690164, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7921435992442263, log_density = 10.715537560208688, hamiltonian_energy = -6.513672937374064, hamiltonian_energy_error = 0.3088586306151395, max_hamiltonian_energy_error = 0.5733479777013191, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7176938603837438, log_density = 10.029984076475053, hamiltonian_energy = -8.920482587923734, hamiltonian_energy_error = 0.10922846681782516, max_hamiltonian_energy_error = 0.5579347715249803, tree_depth = 2, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 1.0, log_density = 10.043650441404653, hamiltonian_energy = -6.9470836126945334, hamiltonian_energy_error = -0.33470447462810693, max_hamiltonian_energy_error = -0.7063530519508197, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9515492338674854, log_density = 11.421385241527691, hamiltonian_energy = -8.618767857867143, hamiltonian_energy_error = -0.09260687840672688, max_hamiltonian_energy_error = 0.14486414917841373, tree_depth = 3, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9969151164245759, log_density = 12.26084923902354, hamiltonian_energy = -9.865845024844631, hamiltonian_energy_error = -0.01128051779641659, max_hamiltonian_energy_error = -0.09706260125049404, tree_depth = 4, numerical_error = false, step_size = 0.11148571695111154, nom_step_size = 0.11148571695111154, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other WrappedGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising WrappedGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#AbstractGP","page":"Internals","title":"AbstractGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP and CompositeGP implement the AbstractGPs.jl API. Please refer to the AbstractGPs.jl docs for more info on this.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#WrappedGP","page":"Internals","title":"WrappedGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a WrappedGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = wrap(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for WrappedGPs in terms of the AbstractGP that they wrap. So if you want a particular behaviour, just make sure that the AbstractGP that you wrap has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = wrap(GP(mf, kf), gpc)\ng = wrap(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = wrap(GP(mf, kf), GPC())\ng = wrap(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and GPs. We describe the implemented transformations below.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of WrappedGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = wrap(GP(SEKernel()), gpc)\nf2 = wrap(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"}]
}
