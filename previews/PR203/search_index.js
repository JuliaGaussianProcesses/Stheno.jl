var documenterSearchIndex = {"docs":
[{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = GPPPInput(:f3, randn(5))\n\ny = rand(f(x, 0.1))\n\nlogpdf(f(x, 0.1), y) ≈ elbo(f(x, 0.1), y, f(x, 1e-9))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPINput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the GP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = wrap(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we that makes use of a variety of packages from the Julia ecosystem. In particular, we'll make use of","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.05.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"21.3164470240351","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well.\n    s_noise = positive(0.1),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-0.9162907691270586, Bijectors.Exp{0}(), 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.6094379869399091, Bijectors.Exp{0}(), 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(1.6094379094538682, Bijectors.Exp{0}(), 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.490116130486996e-8, Bijectors.Exp{0}(), 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-2.3025852420056685, Bijectors.Exp{0}(), 1.4901161193847656e-8))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     8.235725e+00     3.255170e+01\n * time: 0.024564027786254883\n     1    -5.020994e+00     2.754339e+01\n * time: 1.4065680503845215\n     2    -1.510765e+01     1.975018e+01\n * time: 1.4175801277160645\n     3    -1.999223e+01     5.069752e+00\n * time: 1.433427095413208\n     4    -2.211148e+01     3.183496e+00\n * time: 1.4753870964050293\n     5    -2.388769e+01     2.641885e+00\n * time: 1.486133098602295\n     6    -2.484520e+01     1.047849e+00\n * time: 1.4966459274291992\n     7    -2.487751e+01     1.090193e+00\n * time: 1.5070040225982666\n     8    -2.496275e+01     4.472823e-01\n * time: 1.5224189758300781\n     9    -2.497402e+01     1.219649e-01\n * time: 1.5327560901641846\n    10    -2.497438e+01     1.030546e-02\n * time: 1.5431361198425293\n    11    -2.497440e+01     4.061425e-03\n * time: 1.5537409782409668\n    12    -2.497440e+01     2.445825e-04\n * time: 1.5642259120941162\n    13    -2.497440e+01     3.921796e-06\n * time: 1.5913550853729248\n    14    -2.497440e+01     2.599819e-09\n * time: 1.6024649143218994\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -1.0526058831165508\n -1.4367392357161712\n  1.7096709107598562\n -0.09958593421936507\n -2.292741833373176","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.8),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-1.0526058831165508, -1.4367392357161712, 1.7096709107598562, -0.09958593421936507, -2.292741833373176], [-1.0526058831165508, -1.4367392357161712, 1.7096709107598562, -0.09958593421936507, -2.292741833373176], [-1.3921742406172664, -2.376665895953767, 1.4225467827078548, -0.18082662908384464, -4.246956548259304], [-1.3387937727705137, -2.246566525228262, 1.331455220298836, -0.373973244091069, -4.2350426936528365], [-1.1641426586657144, -2.2440779592855833, 1.385745104834246, -0.3977177027971012, -3.8045887693054263], [-1.1465167909657445, -2.1814661490631, 1.2661677404203775, -0.1956664480540908, -3.8290098320167343], [0.09355632055978925, -1.3708177286872625, 2.3776078566090586, 0.6340403479983334, -3.3686258115870644], [-0.7550060621501778, -1.7299344535256411, 0.6172948588085062, 0.20746763124126, -3.593148006331008], [-0.4130449878888495, -2.3629219622187665, 1.266593862655908, 0.41804125322979785, -3.6565436143917993], [0.3181167764609777, -1.8679593864391975, 1.925301785208244, 0.8505907288209784, -3.641644083831389], [0.42345460485275954, -1.850869660025782, 1.9470786166875376, 0.9033376998716705, -3.614588244025561], [-0.7887439255052469, -1.4600945798157283, 1.4980156972512697, 0.2001501617866031, -3.9057824190053783], [-0.803687757213295, -1.5516270349708037, 1.3935481434010961, 0.25534732780790687, -3.7340826503446536], [-0.34585231724471216, -2.252492815330381, 1.7762119285724864, 0.6119453613184911, -3.60055876552279], [0.27127789073854347, -0.6760535512997955, 1.220224152013557, -0.1485674091780146, -3.632284776741536], [-0.021770539286600714, -1.3846550955838062, 1.638761257711329, 0.3719614331308707, -3.599654631260682], [0.5336997231420982, -0.4544107060798266, 2.149038076909105, 0.8005735957128425, -3.475244026485037], [0.6822200096558417, -0.7348724738714872, 1.8769900901490355, 0.4997174413468181, -3.569671935933773], [0.6176076301051445, -0.6667198069121141, 1.7929352749092742, 0.04477208002052693, -3.4434761361471864], [-0.34474651656548727, -1.4493876150141725, 1.1503442730107687, 0.35997555107454504, -3.5951908976076927], [0.012137054673548114, -1.1785827196463854, 1.0799116591972981, -0.30993172753159, -3.6672944560393463], [-0.5248215417943927, -2.3008568955889315, 1.4178980878291951, 0.7118920148900201, -3.5717155601638284], [-0.9649176211920321, -1.8262510397513634, 1.6001482156545392, 0.557730955106227, -3.766506823407835], [-1.0095254749017397, -2.6736739467038153, 0.6717472564353794, -0.15048498939620003, -3.6630462463617466], [-0.9445445862686719, -2.5380295998836835, 0.7039677213560681, -0.3834525165221634, -3.5980289627491406], [0.4546104022230544, -0.15166946671351839, 2.6315192127860816, 1.4147214201059426, -3.6556670126381854], [0.5498142174460021, -0.1264360438316562, 2.8673799119000365, 1.5036752948331467, -3.729729695512509], [0.07414036199719681, -0.8931679257855183, 2.881316862557993, 0.7269390013857022, -3.572623163511807], [0.05996250198600234, -1.0060508714169596, 2.6884012266309893, 0.7611492716836755, -3.653975666480993], [0.2632544690556392, -0.5673494805346303, 2.1826061029182102, 1.707260196165571, -3.5752737740444496], [0.29730063384340893, -1.2171959989851204, 1.466926000601284, 1.4852416745080346, -3.3362225316579828], [0.188977691970631, -0.7413531226936318, 1.5175770664651482, 0.8096125768052211, -3.8067776292404116], [-0.9518284610996142, -2.201980388570957, 1.4300781019385498, 0.018933454198063922, -4.0027317459893235], [0.9925602065287739, -0.05879999996733061, 1.0417259052803987, -0.2477542016219627, -3.5833728432681617], [1.004035714636313, 0.4931914367600379, -0.7927756049644323, -2.2624871622323894, -3.796426144288199], [2.3692849067769206, 0.6335283181411064, -1.1217379980479831, -1.973056668041668, -3.971918520874862], [1.5856210849449974, 0.8604855472776114, -0.3574183665716844, -1.9834050220806134, -3.373661923548096], [1.4700894041121062, 0.9342079919227824, 0.004425045449803752, -1.110816622038921, -3.861264491369271], [1.8985340797827923, 0.8968421518459847, 0.19532384745734527, -1.1950416723392168, -3.5080951098715496], [1.8334172459355869, 1.289732511411448, 0.5209773643784487, -1.8168785864479902, -3.496172310238832], [0.6589166200429565, 0.52768115349048, 0.7784327282520103, -1.649512138225206, -3.4024900338361643], [0.652830722619244, 0.44675621242021635, 2.081487862054136, -3.330430170157075, -3.818189197888157], [0.972983996970187, 0.021885642801563743, 1.3524010069100767, -2.181774301283841, -3.5708018515108155], [1.5728832539958302, -0.4744762094423541, 0.5199996377451932, 0.3052122282988463, -3.465397378685412], [1.3636728314964843, -0.33816249140580196, 0.9248297428399325, 0.030591357588447887, -3.4269300868610397], [1.0684487408083898, 0.31599607337093333, -0.15241771538119941, -1.7315284737088739, -3.5784029067667436], [0.45244831662854934, -0.16737702658054668, -0.3686657415499341, -1.7427866128605842, -3.593606487573977], [0.9474037945341713, -0.22877899840291385, 0.0006490771410477061, -1.9240428440691542, -3.596879338382028], [0.8977468683784774, 0.08599736969324401, 0.28786704013007774, -1.7542527420877692, -3.4756638356805096], [0.8012810518090406, 0.24617101369705024, 0.4383751855204136, -2.2457719447423012, -3.7570225294150417], [1.0427130992405227, 0.30595012873684113, 0.12556312497788474, -1.441634582744257, -3.30242937375765], [0.931245326578837, -0.11476709499670538, 0.16668839297076665, -1.3615956368637112, -3.3613121500126666], [1.4634576433373054, 0.4069414607542453, -0.6607312159332374, -1.977902570127593, -3.6126228947175405], [1.3334615394210305, 0.405202643453803, -0.7430105771330764, -1.940009706999807, -3.8622549814552793], [1.9452338282377821, 1.1057873424198508, -0.9521798552543304, -2.1285198086759163, -3.6507706408695975], [1.967886528242087, 0.8488061499558887, -0.8183787021298367, -2.133815033049421, -3.632222112610669], [1.2056917820978252, -0.1399717480533293, -0.43445547937828655, -2.2876061230068605, -3.7924052015584233], [0.9673409082821742, 0.1619529513575877, -0.6044504874777149, -2.052233867583622, -3.553003640371497], [1.3558907756968743, 0.6187995799648434, -0.26953105752459156, -1.499037641819847, -3.6778571054709044], [1.9192548012579653, 0.5077280462478577, -0.6338747956072731, -1.79316258732474, -3.422980860155405], [1.518456490717208, 0.4174381014243471, -0.41565784372237935, -1.8171235907425127, -3.8765006669604034], [1.0236675489097096, 0.20312434445641198, -1.1792976336725964, -1.8890492688364835, -3.756507336252178], [0.11591037024365788, -0.7754255792495879, 0.9219510766526686, -0.13153418939781772, -3.65107076840543], [-0.24063358018337425, -1.367236259906443, 2.0248421362040654, 0.5243335533380785, -3.6473355666300593], [-0.4863156424516306, -2.7810909849937575, 0.819429443768822, -0.03400166352836788, -3.681987608479618], [-0.24192440706372206, -1.96472373288144, 1.2570779313995968, 0.3653961122322718, -3.535135491966803], [-0.2620078484383882, -2.187138997785859, 1.439879855277104, 0.6523724268851976, -3.6890668206784905], [-0.007423154718915942, -1.586687381495721, 1.489436873557336, 0.4440291841350657, -3.3911930094514027], [0.19712908593616285, -1.3596539985475837, 0.940084099900248, 0.9112094221619271, -3.6911126670790444], [0.14311813749076135, -1.417249363750285, 1.4827931016228169, 1.1895071111886375, -3.4282742718156176], [0.08969702587391631, -1.5206335815990988, 2.3912794354600826, 0.9722122944318384, -3.674452476585545], [-0.19736756520972862, -1.4413779206089588, 2.440746257983318, 1.0629112735017925, -3.511522000068079], [0.11339342970502499, -0.8700121243758393, 2.0949222261555147, 0.7972412281312459, -3.5815905816757945], [0.0758209107214803, -0.7854962064115795, 1.6833561113311806, 0.6025757990476291, -3.6143727920983477], [0.36537561393388784, -1.1350967315223215, 1.077558801881022, -0.8786625804036584, -3.632415812531683], [0.6672721137517454, -1.0577051959451325, 1.0723889872041006, -0.3757129086182477, -3.321876485226309], [0.9654105346793058, 0.23307921032247625, 0.48106151076307624, -0.15769826979627352, -3.4897501680184675], [1.0065830063020393, -0.042233653858247344, 0.543959985737589, -1.2554679665019024, -3.3547284343742034], [1.9047533264195093, 0.509233358651492, 0.07467115437063802, -1.1841866933197058, -3.4503986011160603], [1.264169296927037, 0.16540668456425084, 0.041939320526152804, -1.153210544438497, -3.4494618005022684], [0.7103293116231446, 0.8131144821529029, 0.29151803395704456, -1.0200208907077537, -3.679050821319589], [1.2267888025719573, 0.30031463620371934, -0.04520568634715695, -0.7766866479265867, -3.5165007928896723], [0.7934777575992878, -0.18235163338138982, 0.38067986527104203, -1.5423444141094678, -3.3944652415099394], [1.2953573971279582, 0.2741366354003064, -0.9406500278944949, -1.4185749337487505, -3.871273099196496], [1.34184223954386, 0.11278898612054675, -0.16196467439555878, -1.3104989391178454, -3.711526557874244], [1.6280016275441396, 0.428099615841114, 0.3434273937157629, -1.803025157638229, -3.4190527576215612], [1.262718386059116, 0.09907955626180566, 0.024240786111434418, -0.5624585630877774, -3.6922036330898154], [1.4377256898308608, -0.2943396617923896, 0.9086251264334503, -0.7144941625725544, -3.451903242811717], [1.483158113483129, 0.7396139210128272, -0.33848365922374013, -1.258091261214467, -3.7207825494334568], [0.8872185123455026, -0.4057848917627131, -0.4628935125507329, -2.3274314419587676, -3.42088654043666], [1.5079594736773585, 0.7571231491390404, -0.09740812845998198, -1.6733242023089319, -3.686745002542457], [1.6571964737683977, 0.8750215925917677, -0.3211371149636891, -1.9308217541364965, -3.1873358444127278], [1.8616254512068342, 0.7900609331267148, -0.17176915569445203, -1.8520320380931714, -3.281325846581318], [1.5171186894723863, 0.5221555663597136, -0.04947366134513334, -2.037134531241011, -3.861884236350772], [1.9723660362474664, 0.03969247609688542, -0.4413388704284624, -1.4510399321931473, -3.339104353353221], [1.9208929330369617, 0.01230310137116937, -0.32230465418510734, -1.5945079799662962, -3.307227252282429], [1.2028868839120817, 0.6227112875832739, -0.1587611585305392, -1.4493826365446392, -3.3219003957871758], [1.377888906466379, -0.23689095880302452, 0.057082074839188604, -1.002247347590364, -3.2748316742909944], [0.8361215825508265, 0.1009606459696359, 0.6587812445875305, -0.6960240177842223, -3.7730102756836192], [0.8908750212314359, -0.20485504492815687, 0.28021073363225646, -0.8334449047473093, -3.2395539795431123], [1.8073708252855472, 0.5747384755111411, 0.540944643921561, -0.847385605020175, -3.3273775860625947], [1.3113682548480814, 0.30292168783149775, -0.9160160657086132, -2.110099426818479, -3.545264334073471], [1.3714338084565922, 0.5884966770213963, -0.5800174768084864, -1.7670874322773984, -3.567256244714553], [1.1640985779770092, 0.07636753480168718, -0.38688036241689094, -2.128563363307342, -3.698791562096337], [0.720232682150648, -0.11818764471117135, -0.7798939428703837, -2.575244233878074, -3.9220897695395873], [0.9408639257169829, 0.07223459814072691, -0.8703926662022169, -2.660814738341003, -3.875660014815952], [0.8478794210038957, 0.06255882951494175, -1.738207022771021, -2.550183633361555, -3.442591024688639], [0.8958069531962038, 0.1481559453215377, -1.1941528570389939, -2.506385329118131, -3.933797099844047], [1.4505446365443284, 0.21188605518386952, -0.9814102707603501, -2.2080992955106193, -3.5178412565130697], [1.8515211046403186, 0.25279643050983797, -1.0880735989188097, -2.2032245044576757, -3.788294453032457], [1.57037135716126, 0.7478127784363953, -0.749092716362385, -2.2696629115031097, -3.6640310530800977], [1.4785070653097734, 0.6429380684367815, -1.0482192684482372, -1.7372935401188627, -3.762974130165177], [0.6258495321602584, -0.35858763950039085, 1.348261713450142, -0.17032980348660365, -3.332591442575924], [0.014608852762724306, -1.1816326605504832, 2.4250488726951342, 1.1791257272276554, -3.384332175488964], [-0.18317222460380936, -1.3084541482503695, 2.0404545078762526, 0.738051297279903, -3.5796110247636257], [0.2714495458206207, -1.8438095654370215, 1.70900162851277, 0.7754958123059034, -3.583420813730286], [-0.1769333616830025, -1.679690573315031, 1.5186901578821077, 0.4099891167412254, -3.519086131151461], [-1.364815266471682, -2.2236839720708654, 1.0887069893308985, 0.2653001421299349, -3.8526201311322774], [-1.3883447094200032, -2.3514337187927614, 0.8374481714366175, 0.36419836334026945, -3.8790779555132024], [-0.9214903227286224, -2.139498659683462, 1.0252450112136142, 0.044312527306412455, -3.548303600131562], [-0.5207456400295851, -1.6572098608829258, 1.6871612434927914, 0.825557230956358, -3.89167016718674], [-0.7024320839583706, -1.8519254667017613, 1.8110539441990121, 1.0954537304445973, -3.392028359510507], [-0.36006593812584314, -1.3591214145286103, 1.8266510675119965, -0.12278543139696131, -3.6386459472641044], [0.04490144838653895, -1.7942478469240135, 0.9124933274631192, 0.25916317674058476, -3.565413171405061], [-0.3761494944539596, -1.9399395995661586, 0.9711404849123484, 0.23641919159118796, -3.640652482555734], [1.2595667965603508, -1.44082945401222, 1.5086161780468106, 0.6740261308975407, -3.49471693372209], [0.37027102866322403, 0.0480262733970504, 2.0860697776625847, 1.0308542204463065, -3.682385727506125], [0.8132934362519464, 0.10729828131702736, 1.8182184749429118, 1.1651420736954685, -3.126821461641748], [0.6514072714355247, 0.33251113384017783, 1.633799185760786, 1.0266526215280294, -3.27905526029098], [1.6915131247229198, 0.015637279844686422, -0.2133430044578481, -2.104910761460191, -3.893074151021832], [0.3697245063261893, 0.15084354324497232, 0.9956275019988562, -1.0214475197108006, -3.708023806135659], [0.49580650352404265, 0.21232233404710013, 0.7986924785145796, -1.0393484090652725, -3.6694355497529116], [1.6179538281167223, -0.457058298746693, 0.6835991299963032, 0.11203329278856863, -3.6439520717773486], [2.042412185365609, -1.1531361854482092, 0.9677485760348901, -0.1952549673658877, -3.3540886960105873], [2.2379296597560576, -0.21358553897740834, 1.2676308828810001, -0.05755679000450611, -3.4600869817917377], [1.7173421076101971, -0.8807231540890136, 0.29628586007623475, -0.024648425760386547, -3.634840391278018], [0.2940511873607707, -0.8424599265451787, 1.3509368717725792, -0.24240428612230602, -3.510883939912116], [-0.04790392957158711, -0.8533012982137912, 0.7493507072483065, -0.6443732715410078, -3.708805235861769], [2.511457110703552, 0.4615658114313132, 1.7651527502916347, 0.4517021059260503, -3.597249720473594], [2.2463972076553995, 0.9312699807152979, 0.3485486142468278, -0.1096048902829307, -3.794110454713771], [2.760712182437427, 0.6150973680526471, 0.7702198116173297, 0.24653176896500023, -3.35739811882146], [2.3617413312544238, -0.24291076059490535, 0.7046350945056339, -0.030419884340893988, -3.8167846600732815], [2.245357186297001, -0.1214738357366571, 0.9643436482419278, -0.06814499271648604, -3.5759104395453067], [1.0053989136858217, -1.5488318677861954, 0.943311897233186, 0.04553077331038268, -3.232768824198326], [-0.1180417549389545, -1.9913430753065302, 1.9210434570245725, 1.6979465735390231, -3.5886185366020413], [-0.6783465301734344, -1.5288010839531991, 2.213514291548835, 0.2866880986300695, -3.739797147132507], [0.07393397486660591, -1.4396999882859411, 1.8540568389620475, 0.41691582270096306, -3.4607213676351107], [0.7748473868273211, 0.33932637023551615, 0.6826485560735729, -0.026891156158666676, -3.55042833563916], [0.7456842380848963, -0.4377832734408, 0.8848860478692768, -1.1537476998094274, -3.376035209618056], [0.6029754642329218, 0.4257253344037166, 0.43193899699422295, -0.07788794160895351, -3.456287722841978], [1.3865711624472754, -0.05921982111015203, 0.7652811163748672, -0.8108872513977343, -3.5658029759760925], [1.223001132138889, 0.7309646269923904, -0.3279739638442666, -1.3349327601954544, -3.7518170588491566], [1.3214850385095942, -0.23921808703288064, 1.2855153075151693, -0.22295622246585217, -3.5494667579654657], [0.3943918519052142, -1.8500794160987333, 0.7623972879850216, 0.024193313394112348, -3.758912944442576], [0.5212612302257202, -1.5528997279828307, 1.6507237197331008, -0.05657946525804021, -3.131119878955088], [-0.27833004396747474, -0.7853291836332292, 1.7048745930883038, 0.5027642692158021, -3.723867582799183], [-0.7414363343936161, -1.3495136314533474, 1.657255581424736, 0.5316104771560617, -3.657448904006676], [-0.5450526315112262, -1.6490723809211714, 1.676409004846759, 0.569611678269408, -3.683424629050114], [-0.6094415655489519, -1.6298831998031766, 1.1152093814790769, 0.2644742237103061, -3.5045842132360403], [0.10741804411332709, -1.4331371115809062, 1.5337490334343782, -0.1378335852144615, -3.74360642857789], [-0.12124203977734216, -1.2706032902482243, 2.125006671464027, 0.348147934421299, -3.4958786416755325], [-0.1687707504855543, -1.5331129890471837, 2.4388526737536833, 0.1510036891988249, -3.8217773985305548], [0.06063665121251349, -1.623750189935903, 1.937108192930779, 0.7913787135360986, -3.3667762820230656], [0.08372917494868284, -0.7815346197274499, 2.2632578873556577, 0.2227798310759369, -3.604315828411381], [1.56801350716045, 0.49118191817108114, 0.21240640496361632, -1.560228571226479, -3.4715263131212257], [1.7107263686213423, 0.5182171999588211, -1.0508143711071534, -1.8975032747493554, -3.6557368373623547], [1.3086996015309125, 0.4267753961331066, -0.25493794658785807, -1.9373479754368552, -3.7623380165735774], [1.05592919524185, 0.31411681203105446, 0.016445438432904386, -0.9191839228098433, -3.6941569383593986], [1.6962165316333493, 0.5101809843803415, 0.2686658359122975, -1.4782450655051609, -3.693147897784444], [2.485618314008413, 1.223537153948328, -0.15240637832043102, -1.561570961114491, -3.502169332757098], [1.6227196935873645, 0.2056154649869482, 0.08290770773960576, -1.657435266189766, -3.4017955322973847], [1.0059852247961218, 0.416719315726434, -1.0908491614882103, -1.7640973067995873, -3.541147091656459], [1.2659640629784494, -0.06859997568780074, -0.6863911565551679, -2.2380016518525356, -3.4734479045164814], [1.0970514579564516, 0.032431637069008284, -0.7017640534334313, -2.402585901311762, -3.52098841846006], [1.797533763336584, 0.9413470783996506, -0.42986304865337566, -1.7705711080335829, -3.751773615191131], [0.5243788184710632, -1.18334439324089, 1.5731436875877451, 0.008262698839280797, -3.5524055449816627], [-0.057387157648424544, -0.8951031858117808, 2.0994532428709043, 0.9569837682494807, -3.56475602613254], [-0.7629594176951849, -2.835738553707488, 0.8377619822445791, 0.14879837774175664, -3.5699797937012154], [-0.7113344513995512, -2.6734797107485586, 0.8092052393820989, -0.0021239738097121874, -3.664676889290822], [0.07722914386436927, -0.9084307226400901, 1.2915878998819699, 0.029655596137862547, -3.5643610741014866], [0.7845734099784724, 0.022968515246371835, 1.0738963222706293, 0.017769217774546195, -3.393429926720989], [0.7736613264296405, -0.11979599668250995, 1.1722130277309462, 0.30121463157394834, -3.5881639603861917], [0.3406384769356707, -0.6007581043233351, 0.898455479568117, -0.30816978216026447, -3.659105084814483], [0.03744832793661551, -1.5506646680657141, 1.0793294968510065, 0.47191509851942404, -3.7094029469355347], [-0.6417536425809517, -1.5078532141656875, 2.1464266905898453, 1.4153205974705303, -3.6937931556728008], [-0.532733083879948, -2.4484482075818823, 1.83490035895024, 0.8349139028296587, -3.54044069799185], [-0.45030440784765036, -2.5183676879006733, 1.5063138722356118, 0.49494628935652335, -3.259147347876623], [-0.23066888086612086, -1.5129379606786972, 1.277859693766288, 0.25489127274826195, -3.8880761213248722], [-0.14300917276802616, -1.7940939608689828, 0.9125358208738876, -0.07002721682022954, -3.8017467489141437], [0.21479594288080822, -2.055572207183249, 0.5279865360967059, 0.18708279130609545, -3.3532563893584197], [-0.6228371512154333, -1.8658260326488194, 1.456295575939078, -0.05462800663154424, -3.3377481261257493], [-0.5920730423389327, -1.8101592127982196, 1.1085930869157885, 0.3084711365854491, -3.6561684362233082], [-0.848998496031546, -2.2057193087044356, 1.3203804786721443, 0.5344540558110784, -3.6398740682039663], [-0.1249840277072155, -1.4562941753540408, 1.1830099891687567, 0.07500141197341187, -3.7240961371648096], [0.06957523253047693, -1.5604270256325192, 1.2070588239139983, 0.3369736077591432, -3.717168058762105], [0.27129003971446697, -1.3651188431317742, 1.1360425036319943, 0.40838469886054973, -3.3946292811931134], [0.5812356852385945, -0.025851674498108247, 1.2400949735876474, -0.16231094814286562, -3.496745252119434], [0.5979295259188442, 0.09142527360366262, 1.3241358037721846, -0.2594039212042695, -3.306279914225799], [2.452762259044885, 0.5571901888987836, 0.2905472848170869, -1.498534045624681, -3.545181425759644], [2.0493326584303704, 1.0316864842867308, -0.23056215306380173, -1.5235415041695632, -3.586095197624331], [1.611755541092795, 0.7659352229486676, -0.2654659959453312, -1.4784105950102653, -3.453597762239887], [1.0202511404298429, 0.12619594386777314, -0.24928785499714756, -1.8667095091418682, -3.6294805512978456], [0.9076822468664748, -0.09060887273623469, -1.2358335607917286, -2.3723196686454497, -3.6430056861394235], [1.6902422365333973, 0.5906678450735627, -0.8347121775874885, -2.1378461578865564, -3.7532873492738306], [1.372322880465621, 0.26881407061016277, -0.9966141522417344, -2.0469030740866394, -3.7953749646940493], [1.9771786614936657, 0.6805373740815825, 0.4648860483921948, -0.9518772848137302, -3.3723001087395055], [1.7741014015473522, -0.2548831685697406, -0.03420081081516929, -1.3250535973392406, -3.750338266765546], [1.9828562106295275, 0.9743378761217166, -0.5028780050227897, -1.7419644202032252, -3.447393159235872], [1.2700250631933303, 0.01645774030141861, -0.2539567023399467, -1.1464077158621735, -3.8595674349704434], [1.0411176827251822, 0.18298130927560957, 1.3883838790983933, -2.089170883637229, -3.2884397834388457], [0.6306776561555127, -0.1733890151472805, 2.159316234873917, -1.2491711086471096, -3.384289148972706], [0.6739039622437464, -0.08328137594713284, 2.1001815411609557, -1.244494756488991, -3.4618262729248617], [0.8298717251079563, 0.00185203185542325, 1.4353663031243518, -1.620308905408293, -3.6716559795546155], [0.7157838517885949, -0.09245946020077626, 1.5073742674996824, -1.7443490422321568, -3.6637123101652587], [0.8956821796744272, 0.02838716370710964, 1.5551443903412854, -1.8464736579055658, -3.711423179110709], [0.927617561364885, 0.12348430882730557, 0.7234620009433439, -0.11050569814049999, -3.3730085052528604], [0.7646829660152145, -0.4389906699581846, 1.803638118311707, -0.35766659707418036, -3.723838280742255], [0.8501407394645062, -0.34887733576273317, 1.9546051085177727, -0.48618560206336736, -3.583419593672869], [0.4846303487826596, 0.02215014881555069, 1.8735684118228346, -0.3831712684285383, -3.3531166724126273], [0.37201020998579726, 0.14357739502889816, 0.2749650125769154, -0.2392967474406346, -3.4302644435560303], [0.41251180586513375, 0.13351518161648881, 0.35824328429045915, -0.29864510553883866, -3.574160703577275], [-0.2946879999100019, -1.407829215126224, 2.2496457826014935, 1.2233740291742123, -3.7425354195861185], [0.030222471974199028, -1.4981166523213005, 1.9741406501392025, 0.2034647872901275, -3.391385366995902], [0.4387585085520444, -1.1782140727568666, 1.9210993546216464, 0.6386793015591157, -3.4454967691502074], [-0.17851101539104317, -1.2343937751836065, 1.9438946525021692, 0.24953254393800609, -3.695127922704509], [0.19501686580726862, -0.6843067956464032, 1.2237755385905733, -0.2148454023784686, -3.5774209337251355], [-0.1808378547122943, -2.0871967341133675, 0.7306729991769914, 0.3011535694841566, -3.589105369272647], [0.28839015794114603, -0.6926002666027211, 2.34918335435296, 0.2492702755125077, -3.4924368101550023], [0.7072538171686519, -0.6479752493761889, 2.2061569991903016, 0.6184428366292619, -3.5015567826580725], [0.17914539967418008, -0.878787891745636, 1.909972863296567, 0.5776919388626754, -3.615753641489785], [0.7514844609223287, -0.558847256812604, 1.274244181280347, 0.6935943879409212, -3.4742259612760966], [0.3182915127042393, -0.8010625400433034, 2.3069871427757027, 0.527608438391548, -3.6108119641731986], [-0.09765246305591085, -1.7473522372042314, 1.7477628771674523, 0.911670939268, -3.791664995334178], [-0.14354226564345574, -1.6806411061505795, 1.6848890227814382, 0.8945862371594546, -3.708903157955044], [-0.025796014525495577, -1.3496075999370913, 1.5871749466826173, 0.9404605111691045, -3.5756563748055115], [0.40344593270005924, -0.8192697605771304, 1.5670872789611248, 0.45406301808920957, -3.6344813220269], [-0.0195535587909884, -1.827321999086817, 1.5719974673666808, 0.3158929483087772, -3.5268016045574644], [0.5465020584886302, -1.894583532254705, 1.7157187899159896, 0.3724434744492518, -3.382419815766343], [0.8598057906918456, 0.5255321189264982, 0.600170164464227, -0.22319271919595404, -3.658236506257414], [0.6626970491183476, -0.5991346924147325, 1.6984029593763477, -0.6338962598114055, -3.5945751330832816], [-0.3847971198956493, -1.7782173202844929, 1.7874140063964203, 1.7029883565397048, -3.7455189135260682], [-0.40834559091463696, -1.955176684558376, 1.8128931084651432, 1.6760305928461474, -3.578653619136596], [-0.5562708390488942, -2.09800661824274, 1.7024268943958085, 0.8244017325930004, -3.4875133880354348], [-0.5568380585175939, -2.291333182127194, 1.5705949288123724, 0.6257126458242956, -3.694932888821823], [-0.7353489553615483, -1.5538189132841085, 1.1798505763504838, 0.32878037785035236, -3.7062969858791086], [0.19505873655913333, -1.6305113622947167, 1.9811297765883582, 0.6303090531097996, -3.473043110310304], [-1.043313378668934, -2.1224208802284186, 1.5027754975836074, 1.3898308890575883, -3.909071133295799], [-1.2095801833581832, -2.149420703264265, 2.1716097063943676, 0.8575896387545277, -3.6744907903667983], [-1.1083592842383199, -2.0078407047404268, 1.976275649984545, 0.9669530012506425, -3.546313786265321], [1.4475483839050765, 0.44850189952527675, 0.5145883436574215, -0.6320629594279223, -3.5302700940924847], [1.645028921643884, -0.3095214251281419, 0.30705719616986477, -1.0310427692975268, -3.708234299072168], [1.301195483330607, 0.3818037080790828, 0.0915850536532918, -1.0840059002154365, -3.6419713818921635], [1.119968893615669, 0.023752093014905457, -0.3279293950468447, -1.846073156403831, -3.63220404660922], [1.0046142111328364, 0.24844111634364274, 0.5770857936060989, -0.9492229515261564, -3.575525541561514], [0.6070548696776868, 0.8078498723638088, 1.1570443546945315, -0.938044156141347, -3.497735707364774], [0.9042004465035067, 0.2013743283039131, 1.44142339505658, -1.0890302685623556, -3.383043406808258], [0.678899957184055, -0.16854369594924068, 1.2887298092488528, -0.389224025908564, -3.670623888966384], [1.808953272171267, 0.33118781365201383, -0.5091650315552042, -1.8603384681055743, -3.6782915014983133], [0.6037686339064816, 0.1441557905618842, -0.11762592125670127, -1.7153268359508402, -3.4805737936860597], [2.1247396215115506, 0.002886849389147062, 0.8317433454266566, 0.7636639283290358, -3.4753206338121228], [0.5503434810878007, 0.35255240022116313, 1.3553711042333592, -0.5185683903634506, -3.416733412739558], [1.2971437978239284, 0.29412164802770685, 2.1947224351063297, -1.1323622842881877, -3.1671647545686], [0.9852949524482686, 0.23158027801983913, 2.6469392908080875, -0.6436757609273381, -3.69717666183012], [1.4064321293983852, 0.9799329686336564, 0.8331377978403398, -0.5687664090431356, -3.6797444282937173], [0.8834958340807916, -0.03648203667247785, 1.5374766735167076, 0.6568405988206025, -3.5362275994639587], [0.939787508398985, -0.055563103880422765, 1.5935553393658477, 0.4828488611292461, -3.813076005571247], [1.1683594965613233, 0.40642093532824375, 0.3320446401382108, -0.7758684785400044, -3.6872332255973688], [1.3279969319408926, -0.03402966253876859, 0.5333811494316336, -1.0275690619689357, -3.5479601021879947], [1.0571982457297582, 0.44344183162245165, -0.49701998024485605, -2.160683360846727, -3.773539095162587], [0.7146472936395214, -0.43581345165055485, -0.6103363186092603, -2.1768048248503606, -3.559122197178756], [0.92026545511033, 0.35805073624049444, -1.3217290460984281, -2.2667026099192267, -3.8378950398863556], [0.8319326999142069, -0.11750805608880754, -1.6096631405359048, -2.0121826534161906, -3.6902806239105717], [0.8479350607321652, 0.5163504477021572, -1.6920393036478127, -2.9857237993056653, -3.753989006524098], [2.365277060262143, 0.7200774466962475, -0.14041230620161776, -1.6422891248541216, -3.7669086199923134], [2.0537323152356497, 0.0789211938731364, -0.6357059978007029, -2.005390097954478, -3.4689356841740357], [2.0194960054716797, 0.14566904988639479, -0.4959114012144297, -1.9443609708220984, -3.4303920765302722], [0.9594924621403038, 0.9266938040147495, 0.09571538819715839, -1.3366658191862018, -3.659005032745091], [-0.577848103600135, -1.1211129215009892, 0.947386427545147, 0.023324912623625016, -3.7001815728850436], [-0.25578959868179785, -1.8187033219310453, 1.379535570650534, -0.23880839624769667, -3.6349145971590016], [0.7620942921512946, -0.0936172817453915, 1.8489901849593666, -0.03422810415294247, -3.2563722190455766], [0.11138018336278618, -1.2109555546569957, 1.5297092822989968, 0.8033735834285634, -3.876511541328731], [-1.067986078346034, -2.015725887755628, 0.8235151031518515, 0.14891674167626634, -3.6285947043642626], [-0.9745692780064781, -2.437287485857454, 1.5644564927765876, -0.38326042528613846, -3.6669009316084904], [-0.7897526951860361, -1.8573716112098826, 1.1593551432024443, -0.05151613628539026, -3.394375825049224], [0.26139451899317295, -1.4331609927090099, 1.316137749397982, 0.35633650491684504, -3.337681917907604], [-0.9548470798406131, -1.7776291459574824, 1.2281632388391825, 0.21977962289522623, -3.622497226482951], [-0.8977846353745266, -2.171639959852446, 1.1991599655902438, 0.15862709587850993, -3.9578312066241756], [-0.9080328007562705, -1.793728557200051, 1.264453803384147, -0.07672378380251255, -3.66925182324161], [-0.23218510537467324, -2.321007661806638, 1.2758498997202714, 0.6374404025844239, -3.5242816806122184], [-0.3279232039674042, -1.2141520053919284, 0.9177460295038701, 0.10815158916430953, -3.7077389477727793], [-0.6834835157472863, -0.8751517896874685, 0.580711819021973, -0.008750610108739246, -3.615618009261422], [-0.04060110007562251, -2.2229212410849932, 1.716495573311521, 1.2614499538946131, -3.56275744526665], [-0.22075382652158032, -2.1396977906613035, 1.5365244632788402, 1.2240779064559015, -3.6209651675334804], [-0.0041209777824238875, -2.0354264709258576, 1.8170456791095475, 1.58131266968853, -3.6528944643780594], [0.09198321032100783, -1.794234928006432, 1.944996567644113, 1.765625188153175, -3.561346522031579], [-0.33631900715005814, -2.2783649815984783, 1.7487138518928949, 1.3964638030120735, -3.5428376677960447], [1.3673041268423676, 0.17528628287465, 0.502851453088702, 0.03117161990299777, -3.4028923648523435], [0.8441897915051922, 0.5268218791080073, 0.7684092476145401, -0.22769058987063076, -3.557338938866197], [1.5387567774297433, 0.22837552075227013, 0.2683056064874832, -0.9448039902767205, -3.676493611856244], [1.8849498709728096, 0.04365012816620304, -0.08176733607853318, -1.5836606450079196, -3.4877566126728676], [1.5351700198794036, 0.2126050809168838, 0.007714348516662542, -1.4693794127591802, -3.427643178879323], [1.5544415947090697, -0.0748770463735825, -0.04855170898137314, -1.5344886458017215, -3.616035548997079], [1.3871785292689414, 0.2160538100222235, -0.5663331150476454, -1.4904678939628666, -3.6951943309195854], [1.5197598448574183, 0.5600320182335748, -0.654560089945745, -1.7483886373806083, -3.7079188591197965], [1.3522156934529277, 0.4577105321128965, -1.1655120708968738, -2.1247079978037657, -3.7736709023733033], [1.3545223613919193, 0.552067827031224, -1.0396115331929419, -2.098428030729558, -3.979399068186163], [1.765608434228076, 0.47703375634361145, 0.21658649197848595, -1.3879221039637282, -3.8461821219195165], [1.0268560066873478, 0.580483986262217, -0.4267349571902741, -1.8272841064656589, -3.3169379244319455], [1.4139205992859478, 0.11349816788152994, -0.7647198812428431, -1.4533952353430577, -3.996524253359239], [0.8423628005800181, 0.29102967511075756, 2.3032982258729, -0.7443105443083367, -3.847478028575059], [0.8493504170922023, -0.14548704901794363, 1.2424900954145637, 0.4414034631072858, -3.8191317345770366], [0.8765493317164528, -0.2834837563630432, 1.7157649523040621, -0.27429954838473064, -3.265778184420814], [-0.27724467409411846, -2.273979056945329, 1.5552886263199068, 0.9823094452367667, -3.6102751175716254], [-0.8146146392502073, -1.4527273225322062, 1.5414952198518916, 0.14082839907904446, -3.858359668851447], [-1.1529531957484696, -2.2371243576300155, 1.4234849173118946, 0.25274199429203514, -3.774992824106304], [-0.837624113807646, -1.7714531701664733, 0.9402315911661562, 0.3801792269714576, -3.500584748191764], [-0.4945825483008637, -1.3870794134735924, 0.9266815975691951, 0.4366273933281127, -3.698360486461201], [-0.37026548894180805, -2.156736064221338, 0.9380341739839055, -0.2900927181378083, -3.3695069712674566], [0.2646271407675115, -0.824172800269203, 1.4082363223466103, 0.5282102818624179, -3.3558900317426037], [-0.1577894780959998, -1.6593610371757626, 1.701375901279885, 0.2345499733976676, -3.391657677257159], [-0.4290247353335547, -1.5731980173539297, 1.119109656852764, 0.45750062016609444, -3.4222214623079834], [-1.0877465920683709, -2.432724391884399, 1.0232223232405393, -0.25714779569761015, -3.938033366667051], [-1.0092595521737338, -2.2120549700657217, 1.005879629582536, -0.24616256385442098, -3.426443644083448], [-1.0690514335982229, -2.0691231969860318, 0.36770705443879304, 0.24793072938324182, -3.6807881208576507], [-1.0222622163123947, -2.0543970268254608, 0.47078513787865583, 0.11212809846833793, -3.7537125762169117], [0.2392838164382013, -1.141993531498665, 1.8133450275692362, 1.5119986456540593, -3.5649692795140777], [0.856845678691637, -1.2355275766008678, 1.1993292937119582, 0.4290382757132347, -3.3285964870474194], [-0.7307490926964798, -1.5323728539522354, 2.59582444019322, 1.1302693058489026, -3.64102550142954], [0.10525152094632495, -1.591091105270936, 3.182438524881613, 1.4634666814149115, -3.524100192022118], [0.4833086726882082, -0.9562762224815409, 0.9343902416863994, 0.061517389866245914, -3.43554924414588], [1.8609506133413578, 0.21684255189034576, -0.27263340815277626, -1.9335483107345286, -3.7277608201663712], [0.7138026867007828, 0.2332492742740788, 0.5442735651249658, 0.15462605506474716, -3.5052044069029145], [0.7467952250775935, -0.16556481989007518, 1.6579945550247286, -0.044315526257630924, -3.366954891872988], [1.254433737286345, -0.2528998575564199, 1.706124486732395, -0.15311195754807225, -3.4706419462450757], [0.6334548345937501, 0.2049845786180131, 0.2903099902870203, -0.4247735749810286, -3.6673753444517736], [1.4396024105344336, -0.30108655151572417, 0.9738543324839445, -0.3303554728250359, -3.5139158206418246], [2.019546864074113, -1.3155186007555741, 0.7630476099663962, 0.036142818594669335, -3.5699927979237542], [1.4041974964638613, -1.1962641305101944, 1.0002251295725657, -0.2783854318544633, -3.4136829998980613], [0.3803393297900406, -1.9661912710241496, 0.6686935172421473, 0.7135758948619839, -3.576770950194057], [0.12044162586620258, 0.1783445261138234, 1.556765539233004, 0.4401944392616479, -3.5944085724906807], [0.39362753498210884, -0.4798467233604327, 2.0711939595993227, -0.15347854151414364, -3.7172876725683373], [0.13820828779030106, -1.3075087154790146, 1.9335213273046168, 1.2059793432669372, -3.6190553787294784], [-0.17086419972268357, -1.1455591175188382, 1.8699377826044188, 0.9569966536536103, -3.5819116703630205], [0.35548472927322194, -0.8413946026595235, 1.640590181014102, -0.1666459495215658, -3.579704558180966], [0.9708581991912105, -0.019052550551732265, 0.5844108013723558, -0.05236601095311465, -3.6239559138353648], [0.051733461633353794, -1.3438643921188085, 1.3794134816096488, -0.05973292881149156, -3.639058010470271], [-0.14721025210533567, -1.7610556994247797, 0.9845866967569523, -0.19398455039898663, -3.4627070401712343], [0.3682217106262376, -0.5169790911605314, 1.5345933509927836, 0.6048799110101244, -3.510524797388108], [0.16495160928835054, -1.2291151995883716, 1.8422503560047006, 0.2068418391534373, -3.552069555351656], [0.22809416652778766, -1.1361084483494184, 1.2593069694915446, 0.3110977638393261, -3.61554909777189], [0.7153905393061317, 0.08658736115333313, 0.8202645191753436, -0.6585275135310303, -3.553478809859267], [-0.23349486364138372, -1.7315950937832618, 1.4344655651728955, 0.6344524047977206, -3.471966427801814], [0.7147312529078373, -0.11344144291352604, 1.4516353505187642, -0.08275450087665424, -3.430711626819726], [-0.1080019200249192, -1.46974630498918, 1.0504285820087018, 0.5150233589939862, -3.5672210725220177], [-1.0713130677084535, -2.350319862814691, 1.2890203344331097, 0.3625479849417428, -3.865320092831739], [-1.3280171853593878, -1.9941658724670046, 0.937184063380177, -0.16657646637215925, -3.7309051143969634], [-1.140892313188788, -2.193264956172898, 0.9156884665713313, -0.11836471242158758, -3.787402948022764], [0.2553797052839171, -0.9744133268826868, 2.495611972203625, 0.8337945969272478, -3.6006564306070747], [-0.2983423660072608, -1.8994089271232695, 1.2193748884736755, 0.659637715118173, -3.6323257231942203], [1.1773724173521551, 0.3580933583549162, 0.9757479115397171, 0.69800938098847, -3.442895830025372], [0.9100287435533246, 0.23589103021574043, 1.1175710487447763, 0.15818361576640078, -3.488772375372], [1.2749639875788366, 0.8202355912723797, -1.3080958546462087, -2.502834744689158, -3.70323179387117], [1.2854919348312737, -0.22382607647854058, -0.8875318221879404, -1.8207775972932871, -3.7371283188181983], [0.9632986528096579, 0.7431379585447768, -0.9118743280591429, -2.1371037918512177, -3.4338871230788617], [1.6471648015027376, -0.3309150010982498, 0.1759874720833503, -1.1178343965452693, -3.3264014495423986], [1.7065291124865092, 0.7857250625417327, -0.2149133352811382, -1.526242834598593, -3.286704563727989], [2.435719325849086, 0.5246167832792743, -0.5057369581415327, -1.5664441241287417, -3.9540169592638037], [1.7798081924957905, 0.9168596555059757, -0.44299371404565596, -1.4836560451160803, -3.4256984553143512], [0.814571563415652, -0.2414205089558509, -0.7214284727244594, -2.2340176058350805, -3.3018278753327364], [2.287867816867431, 0.5110813735413591, 0.21138579426256315, -1.1874786134312805, -3.8510857930545623], [2.192791211096603, 0.3383746187506194, 0.10036069650284214, -1.2000373361909715, -3.4214880419322715], [1.9320152714547925, 0.4630357541906616, 0.17207729333360222, -1.0116426046093538, -3.738764963525464], [1.7124491127344508, 0.4237716939848434, -0.1621051933187873, -1.3800255079576091, -3.794979744595443], [0.41790257437823697, -0.6332983979106219, 1.1617178436371487, 0.9326153202709635, -3.4535230806025385], [0.058778594756417474, -0.4825945531228842, 1.2997573870246144, 0.9904299035051366, -3.551629071778619], [0.5413076250550263, -1.3117202571740645, 1.0630340910566392, 0.32000292001404335, -3.7223074490905224], [0.5825607485013866, -1.534839268743862, 0.7747065889750899, 0.6833999581186297, -3.403106305808183], [1.1919826204242556, -0.9273129829710975, 0.8342311211741629, -0.3731840781171941, -3.4741810017016435], [1.8251062075656412, 1.431670598251422, 0.027626591256091126, -1.6475724277054005, -3.456326093550452], [2.164933680083525, 0.9928142591841573, -0.36265284428272276, -1.4965958397380232, -3.7241356954617406], [0.7825004083886017, -0.4949917891059919, 0.11938454733180717, -0.5241957483718536, -3.353254335175246], [0.4991229415885219, -0.07148116699772959, 1.1144487212222478, -0.5080114152090413, -3.3544814201624202], [1.801778680974059, 0.47328495558871125, -0.23028624366135553, -2.2624459667655104, -3.3890732903384446], [1.885751531462307, 0.38544866281944, -0.3003251379793167, -2.3060319041528965, -3.342596925456691], [0.8051988339170028, -0.5964682247340912, 1.69877674452619, 0.1030437449760037, -3.2460378455841155], [-0.4037211088874472, -1.324087082851066, 1.0924051010867655, 0.14242029507039586, -3.60955521352617], [0.18834472278549716, -1.7134943853442182, 1.5680441321744223, 0.4002980308989911, -3.6122643950657194], [0.8217251712230084, -0.8407634611582603, 1.2267567821425145, 0.20265815948728524, -3.1587966204259152], [-0.5398829972804017, -1.389098013798026, 1.4074012403307437, 0.4199921869956693, -3.5583077412542217], [0.08370753205854368, -1.1805819568877285, 1.9189647917254962, 0.7199103489432166, -3.520772274176934], [0.08217918820898032, -1.2701530856592746, 2.000356310039083, 0.9226149708973885, -3.6597545898751593], [-0.7436881463028879, -2.1567768825272076, 2.4367223262747215, 1.0589732132082275, -3.489048657069111], [-1.0723382668337083, -2.0209306666037876, 1.7513560577351686, 0.7038896040174878, -3.773413138846246], [-1.0771709788496033, -1.7551470902273423, 1.6049668074917642, 0.7720644422102679, -3.99290642714587], [-1.0102022320413877, -2.475242913350824, 1.529043335948825, 0.6763243580131464, -3.5137279835312], [-1.0974961630301003, -2.272460363232041, 1.4701778916838564, 0.26540882191371096, -3.819475771331498], [-0.7867256729039718, -1.9771696759397133, 1.4449858696317421, 0.7033090964583076, -3.6741229811558216], [0.7241302673955556, -0.36309955846892233, 1.0157260173474096, 0.07855362886524574, -3.2527246247548245], [0.04608097461415527, -1.2034428870085827, 2.1842046525004823, 0.38980216647726934, -3.750222006301667], [0.7326239403002441, -0.26689116289171333, 0.9711490048500788, 0.17054470360511428, -3.437391593977636], [0.9906373580035404, 0.5192037296510233, 1.2386131829824722, -0.3459485923465674, -3.786254119007162], [0.8736589032409349, 0.013549054623684859, 1.4981443783232464, 0.21425312239970148, -3.1889840772164484], [-0.41974084444766435, -1.8177540688379217, 1.842085272987854, -0.043695067640974056, -3.3740558684549242], [0.2732413552601981, -1.3762874359791915, 1.3827868839481898, -0.18093873306274227, -3.615602901403761], [-0.04107964343533195, -1.205582951950576, 1.514353473296074, 0.08801650061116, -3.5449414827291568], [-0.8804192558148265, -1.778482184545933, 1.072472410269802, 0.4882986483594003, -4.034819288740723], [-0.7753539702617587, -1.8968519833813515, 1.4421069833693574, 0.36830823618085873, -3.8722881617843536], [-0.7409493476103187, -2.0672742535096407, 1.4277596119159666, 0.2627080500590889, -3.993348274457666], [0.16846939474941797, -0.9167172971734492, 1.678823407157112, 0.9543172881082372, -3.8654420927959605], [-0.04664491288699911, -1.7717086212456636, 2.2312233044994425, 0.6171547405191706, -3.7771507882576665], [-0.9607417992253799, -1.9469235430228107, 0.877131327359223, 0.29249645231973326, -3.6365530812278393], [-1.2074859457257145, -2.1021135013652192, 1.5356475016995939, 0.536419955669119, -3.733719598807787], [-1.2752645190632486, -2.1004461248987334, 1.422015791644653, 0.23347532423962458, -3.774428564743692], [-1.7721117878137542, -2.1774315700716427, 1.171480471380618, 0.39883264982469724, -3.8133363793528914], [-1.5428742744995312, -2.17394534421116, 1.006408393012431, 0.3611530051423136, -3.9291182939164897], [1.1386677838407875, 0.7440516626115954, -1.3908375440390357, -2.89024533495144, -3.7402976142417073], [0.9813174858385427, 0.8491464120271798, -1.3567748325021296, -2.248366521250452, -3.5821261990401205], [0.4774254388677245, -0.21769193201533282, 1.7235240452578773, 0.39222221871955826, -3.361994361857534], [1.19795922003259, 0.0862513202419587, 1.5181794119687197, 0.4085062385833069, -3.528829995166571], [1.522479582290519, 0.7377685926419921, 1.3868001333145579, 0.5465801094372037, -3.546956906890874], [0.9022340262792594, -0.8935974608932766, 0.22348779347851738, -0.47899046223529274, -3.4465921504460844], [0.8731881360359174, -1.0419581259784731, 0.32527706790874716, -0.3679240578575725, -3.431588288421429], [1.0725514868854704, -1.0499547816581347, 1.0056106166863823, 0.23242484064932528, -3.318873627799508], [1.4954838974633917, -0.2999717065060685, 0.8802668080773728, 0.07612488278418386, -3.1797089430578276], [1.2517657489340255, 0.8414877499831821, 1.987204494517208, 0.10563325093190341, -3.688194317662856], [1.1423351409068707, 1.055605217070458, 1.831035580710362, 0.04973862274317341, -3.466529951222883], [1.1978762683421467, -0.7787177194905962, 1.993819947908552, 1.011478689925099, -3.416039040073286], [0.9724425336088707, 1.01613902779512, 0.3831819061590014, -0.8850172441131274, -3.224594426912993], [1.306960607817442, 0.6811714454123694, 0.21563855453336547, -0.8858744761621378, -3.847514031395915], [-0.13332336669742284, -2.1157568961595223, 1.8301260626533031, 0.9777943787489077, -3.493935731620115], [0.9673787364638015, -0.12461090335538802, 0.9445823017902371, -0.3372412473917741, -3.3280377027055383], [1.3238792289870507, 0.38927810163088117, -1.0323932760116554, -1.8086054560869433, -3.559911105629971], [1.0478532975051393, 0.4345817186401402, -0.08770295439063852, -1.6106559857257219, -3.608330441533142], [1.2304233856317655, 0.5916177690485803, -0.9409465652575267, -2.1340597071975114, -3.8558358597082005], [1.2575519603268028, 0.17130761661533586, -0.7309810076139285, -2.0144121854863934, -3.679367732202616], [1.6644606549266867, 0.5816099052420135, 0.4904935359248833, -0.524440698470524, -3.6378441474131122], [1.2798179620036387, -1.0553732332466355, 0.8671226788017075, -0.08163473760919489, -3.655848324788964], [1.0209949633807218, -1.5495587689298917, 0.9881845353739798, 0.2229599361798046, -3.6299285358130335], [0.9088423865031493, -0.9580066524791302, 1.494481610313746, 0.6205248473288458, -3.3558957099665085], [-0.21501700216880268, -1.609684634056492, 2.2577196339495607, 0.29120473063339897, -3.582658493817614], [-0.22744752833918558, -1.106807539746423, 1.805184743142914, 0.8548032704698343, -3.8140785925606746], [-0.9320329719018098, -2.6711640488160286, 2.5665688752103795, 1.2576661902192945, -3.3283650274278798], [-0.8916612626061314, -1.4079231592085415, 0.9591630104007373, 0.7823732557775729, -3.9229008348900205], [-0.45092443431558393, -1.3722463099460593, 0.7601400602312586, 0.6759873596670953, -3.598783077149857], [-0.8160536158258953, -2.285521534600259, 1.7540167008654723, 0.1834105358248123, -3.7550128053135916], [-1.146629909930026, -1.639902000275088, 1.4330537961413208, 0.3178358781070857, -3.664185305338718], [-0.7830203418366422, -2.1535740017389298, 1.1457780953899837, 0.671065704642557, -3.8144649455226096], [-0.8852258003577096, -1.900205313614349, 1.5798273270966505, 0.7640787945994193, -3.694106786160695], [0.9679570963580656, -0.21164838887916526, 0.8177378449503779, 0.12193735532811278, -3.538185119577905], [0.2393086802102686, -0.5556572789697216, 1.4744985361686356, -0.08303157562644507, -3.3848153780349013], [-0.33479208682339995, -1.6176800490205783, 1.8545421071689019, 0.7956879785716502, -3.5849512278609126], [-0.7305802736169215, -2.1732783802187567, 1.260737897990649, 0.32876742526207126, -3.689456406937417], [-0.33967997232107106, -2.1006057407314485, 1.1790050137224788, 0.40409602635955316, -3.569023291486604], [-0.7995331648831142, -1.9365346339955782, 1.372581615121191, 0.3310955337463295, -3.722352483750247], [-1.305462468582741, -1.8784149222697555, 0.9697789342300493, -0.32911412202798457, -3.7912932136391415], [-1.3545346779480376, -2.6786410795792013, 1.1688717962853399, 0.843788106724203, -3.5420855025813185], [-0.9162740187630614, -1.9901849372102678, 1.6098602681556415, -0.086376908387154, -3.613192032912755], [-0.47718303697150677, -1.9618444337732117, 1.0609306129094065, 0.8628215133234834, -3.503341055297143], [-0.051706449536175925, -0.8818384581430472, 1.4626167871969782, 0.22316451563756057, -3.7615257856483133], [0.17588658981915298, -1.1714701248664434, 1.455522030439232, -0.2161731193537374, -3.271306343240934], [0.12664679880181048, -0.724025838190745, 2.123674315565644, 0.8272768325335635, -3.427231779814205], [0.29820262786771434, -1.0119133205372615, 2.1238811856370257, 0.6579203967203076, -3.59700898311158], [-0.04287873282785551, -1.3304529424116807, 2.0815662941902358, 0.16124027073872116, -3.725479474165154], [0.008619244918360424, -1.3083094205552488, 2.123449934066806, 0.06616341087586924, -3.740536657919272], [-0.20560537646982496, -1.3386143078764547, 2.0123933294618586, 0.33934552868798284, -3.5670848139877918], [0.6236871577887344, -0.7185406850810881, 2.0437535540726657, 1.0200678297440722, -3.762737958443779], [1.413423466532868, 0.2713079652663618, 0.5020820478237422, -0.27101788832991114, -3.3311151746631946], [1.2462925574158197, -0.3909315735709118, 0.6537733954306921, -0.5512955199699665, -3.39844828629713], [1.235279316163812, -0.5293580905166955, 0.511891708108549, -0.825410108531126, -3.380371279753418], [1.4316604601981842, 0.012790188223007537, 0.13777082857432515, -0.9134775162341834, -3.746305031141979], [1.583274100688664, 0.18031161201920495, 0.13057642199127428, -0.9410637299276587, -3.5168631493021048], [2.184686082553299, 0.572293524510535, -0.22000617773474931, -1.7346223580652553, -3.6971929701021695], [1.2230682252631497, 0.6013510877073537, 0.19146371656324906, -1.2488309108265265, -3.5098054846950006], [1.25651978374516, 0.20454921531466955, -0.09000031407023229, -1.3190729499600753, -3.495877046478399], [1.25363105430286, 0.039318368904954715, -0.28022481010938527, -1.2612577361318051, -3.898848574347939], [1.9467204560657043, 0.23624941733298227, -0.1978446243166708, -1.0253294860298532, -3.4954284764931605], [1.4241872506193507, -0.10105994086238662, -0.0020443017352927, -1.4290551303222077, -3.6989148290531353], [0.9411616227982254, 0.004211740104961809, 1.1545717659964048, 0.281977928883008, -3.3784025459142835], [1.1257562953000109, -0.16919804624762946, 0.9438121519830622, 0.3983128160286436, -3.572329323436989], [1.0942079133179494, -0.20036756121532956, 0.9439819302009907, 0.3202018111131568, -3.632254271510249], [1.1294081576327284, 0.3443661916999588, 0.7751666636522746, -0.042341678932923565, -3.390903448057517], [0.5053674132294672, -0.29516018847412345, 1.056657391846661, 0.21764570504879702, -3.385673885357761], [0.4349152381537487, -1.1731306679125852, 1.2856299383579408, 0.022050142277119877, -3.6258052177735447], [0.21369429763203124, -0.47956244162262796, 1.1586675473339718, 0.2342164099230326, -3.6645595564565445], [1.5462564722647463, -0.09096804985362267, 0.3114478759880538, -0.2943712107060644, -3.2842964487750215], [1.3372999403757322, -0.3698276392227994, 0.3793265671762319, -0.7380622140144212, -3.434469664648001], [1.542337217754514, -0.1471071830435892, -0.05755596254835929, -0.9738966449956036, -3.5153573466166943], [1.358686084580094, 0.03359793794334451, 1.3336620655594797, -2.2476932345341405, -3.601518037392193], [2.089353472495029, -0.5416099130726181, 0.07759219188020469, -0.5101517276799818, -3.5050983086025003], [2.7335698003073103, 1.218205726333016, 1.0389007809352628, -0.4664754218227312, -3.689103690347254], [1.1539582106382142, -0.40446824712642393, -0.7573393191573428, -1.402420544440291, -3.4303181511484095], [2.6160686494052676, 0.4255210180030557, 0.4388245714722683, -0.5019746477233734, -3.2649786141389034], [2.0544370600345006, 0.08847195973575775, 0.6512314280653577, -0.44555850132894026, -3.435484574471616], [1.9505926403274498, 0.5644380886506242, -0.09778144168906813, -1.3543325506941812, -3.717259684955683], [2.345614486365959, 0.8610413321852026, 0.017824296294280707, -1.3985412156712185, -3.6176887688404733], [2.1486808902021157, 0.9832544309886763, -0.16798665219438122, -1.2192673602547877, -3.4641841992574602], [1.848428176691543, 1.3524917711592626, -0.19133554103243494, -1.3640703440302646, -3.3010775250354474], [1.632109807201379, 1.372159497465688, 0.07765032526064414, -1.3278149297145792, -3.2350978251149383], [2.7605057229341057, 1.1957577330088982, -0.5417288466139187, -1.763807273095726, -3.32335028282635], [1.3564018586867264, 0.7206881418294874, -0.891525601416589, -1.611196860868499, -3.8609720915901673]], NamedTuple[(n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -17.324001967309258, hamiltonian_energy = 18.69404610699232, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 2.0412264349829176e8, tree_depth = 0, numerical_error = true, step_size = 0.8, nom_step_size = 0.8, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -17.324001967309258, hamiltonian_energy = 23.364387392531555, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 55168.304853702306, tree_depth = 0, numerical_error = true, step_size = 1.8680518327273068, nom_step_size = 1.8680518327273068, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.6671837541848104, log_density = 3.8566395344094193, hamiltonian_energy = 15.202647138554637, hamiltonian_energy_error = -8.49371029345661, max_hamiltonian_energy_error = -8.49371029345661, tree_depth = 2, numerical_error = false, step_size = 0.18418867766839725, nom_step_size = 0.18418867766839725, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.9147194450654972, log_density = 3.45670542014366, hamiltonian_energy = 0.666443258359541, hamiltonian_energy_error = -0.008850433695632987, max_hamiltonian_energy_error = -0.38273799517406104, tree_depth = 2, numerical_error = false, step_size = 0.07902565502653515, nom_step_size = 0.07902565502653515, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.175470162425242, hamiltonian_energy = -0.5730124019997831, hamiltonian_energy_error = -0.2885795183432611, max_hamiltonian_energy_error = -0.358585653582451, tree_depth = 3, numerical_error = false, step_size = 0.07857574815940392, nom_step_size = 0.07857574815940392, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 11.491837307076883, hamiltonian_energy = -8.014767278762159, hamiltonian_energy_error = -0.40388613257884476, max_hamiltonian_energy_error = -0.40388613257884476, tree_depth = 2, numerical_error = false, step_size = 0.11665828578738933, nom_step_size = 0.11665828578738933, is_adapt = true), (n_steps = 23, is_accept = true, acceptance_rate = 0.9710404822662904, log_density = 11.653188465771496, hamiltonian_energy = -10.607555763845099, hamiltonian_energy_error = 0.11894831248401161, max_hamiltonian_energy_error = -0.2919087111226002, tree_depth = 4, numerical_error = false, step_size = 0.19201092985204038, nom_step_size = 0.19201092985204038, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.8759359365656201, log_density = 11.185204085229735, hamiltonian_energy = -9.746135075982613, hamiltonian_energy_error = 0.37088160608205634, max_hamiltonian_energy_error = -0.40848966579373425, tree_depth = 3, numerical_error = false, step_size = 0.3073780537752526, nom_step_size = 0.3073780537752526, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.35248730034508774, log_density = 12.518348034730302, hamiltonian_energy = -9.948090198733116, hamiltonian_energy_error = -0.49403552891582336, max_hamiltonian_energy_error = 5.116680902175096, tree_depth = 2, numerical_error = false, step_size = 0.3781382611094926, nom_step_size = 0.3781382611094926, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9622734289662357, log_density = 10.508643201549935, hamiltonian_energy = -9.316010662944077, hamiltonian_energy_error = 0.05421545760666291, max_hamiltonian_energy_error = 0.1086515474819123, tree_depth = 5, numerical_error = false, step_size = 0.09067692175770624, nom_step_size = 0.09067692175770624, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 9.946052975550124, hamiltonian_energy = -9.618598111971291, hamiltonian_energy_error = -0.0249584745484146, max_hamiltonian_energy_error = -0.2817867064069226, tree_depth = 2, numerical_error = false, step_size = 0.1505414946409908, nom_step_size = 0.1505414946409908, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.08428929724149321, log_density = 11.705974564167967, hamiltonian_energy = -5.56304732077885, hamiltonian_energy_error = 0.07627531569427859, max_hamiltonian_energy_error = 471.9934624468548, tree_depth = 3, numerical_error = false, step_size = 0.2844290556537125, nom_step_size = 0.2844290556537125, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.995690740870693, log_density = 12.988958447528569, hamiltonian_energy = -9.252005109564369, hamiltonian_energy_error = -0.006723544324762187, max_hamiltonian_energy_error = 0.01447786104486326, tree_depth = 5, numerical_error = false, step_size = 0.030163195076069554, nom_step_size = 0.030163195076069554, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9938271437490332, log_density = 12.273150568734732, hamiltonian_energy = -11.137056012434897, hamiltonian_energy_error = 0.00913597123333254, max_hamiltonian_energy_error = 0.015848185429396366, tree_depth = 4, numerical_error = false, step_size = 0.05710169216841716, nom_step_size = 0.05710169216841716, is_adapt = true), (n_steps = 23, is_accept = true, acceptance_rate = 0.988712341887076, log_density = 13.053055434559887, hamiltonian_energy = -8.638695964493028, hamiltonian_energy_error = -0.02416074279260272, max_hamiltonian_energy_error = 0.06604987259013484, tree_depth = 4, numerical_error = false, step_size = 0.1073755067810033, nom_step_size = 0.1073755067810033, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.8915979553692461, log_density = 13.940577714513271, hamiltonian_energy = -12.543912510673902, hamiltonian_energy_error = -0.07115421445368497, max_hamiltonian_energy_error = 0.25674546868355463, tree_depth = 4, numerical_error = false, step_size = 0.19799038541007263, nom_step_size = 0.19799038541007263, is_adapt = true), (n_steps = 14, is_accept = true, acceptance_rate = 0.11016143565821768, log_density = 11.50215693207529, hamiltonian_energy = -10.923965338464228, hamiltonian_energy_error = -0.54699735367846, max_hamiltonian_energy_error = 1070.0197837304315, tree_depth = 3, numerical_error = true, step_size = 0.269261342303484, nom_step_size = 0.269261342303484, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9999561844092878, log_density = 12.281037241996458, hamiltonian_energy = -11.231536866310325, hamiltonian_energy_error = 0.0003087573128688348, max_hamiltonian_energy_error = -0.0028515065697831687, tree_depth = 5, numerical_error = false, step_size = 0.03357928255121869, nom_step_size = 0.03357928255121869, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9947588991145772, log_density = 12.49992573143461, hamiltonian_energy = -11.110119164404646, hamiltonian_energy_error = -0.0020366311567325823, max_hamiltonian_energy_error = 0.01591967280316453, tree_depth = 4, numerical_error = false, step_size = 0.06422103557848903, nom_step_size = 0.06422103557848903, is_adapt = true), (n_steps = 23, is_accept = true, acceptance_rate = 0.9851787791825188, log_density = 13.242013837751262, hamiltonian_energy = -11.028178145201249, hamiltonian_energy_error = -0.015085607160610692, max_hamiltonian_energy_error = -0.08713264015161748, tree_depth = 4, numerical_error = false, step_size = 0.1198839200666344, nom_step_size = 0.1198839200666344, is_adapt = true), (n_steps = 23, is_accept = true, acceptance_rate = 0.9873588769633492, log_density = 12.543161761854046, hamiltonian_energy = -11.095598855757508, hamiltonian_energy_error = -0.0361697895448998, max_hamiltonian_energy_error = 0.05743363507982302, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9860719141171126, log_density = 12.552304636819077, hamiltonian_energy = -10.41139093847431, hamiltonian_energy_error = -0.007315080218656789, max_hamiltonian_energy_error = 0.05930385561811846, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9696376469818179, log_density = 13.443569998109416, hamiltonian_energy = -11.717432642984626, hamiltonian_energy_error = -0.058611263338580244, max_hamiltonian_energy_error = 0.07572235736172672, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9332165867356139, log_density = 10.424415878171718, hamiltonian_energy = -9.320356695170926, hamiltonian_energy_error = 0.09476671679464133, max_hamiltonian_energy_error = 0.11560989054393289, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9197628138739148, log_density = 9.627302550255788, hamiltonian_energy = -7.4543266913470205, hamiltonian_energy_error = 0.06701192712693071, max_hamiltonian_energy_error = 0.20963188224420826, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.993129710137845, log_density = 8.145035619405078, hamiltonian_energy = -6.40772890461426, hamiltonian_energy_error = 0.014391129532436153, max_hamiltonian_energy_error = -0.05046565858313201, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.96407132553712, log_density = 6.796995612512756, hamiltonian_energy = -4.725509399288967, hamiltonian_energy_error = 0.09682882912998014, max_hamiltonian_energy_error = 0.21250094899165983, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9707076791521797, log_density = 9.731206512639694, hamiltonian_energy = -1.9610844448210134, hamiltonian_energy_error = -0.11959492352589685, max_hamiltonian_energy_error = -0.5915270998322093, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 11.044692196898534, hamiltonian_energy = -9.604630818404035, hamiltonian_energy_error = -0.04405456138234598, max_hamiltonian_energy_error = -0.04405456138234598, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9471386036338942, log_density = 8.978105461416211, hamiltonian_energy = -6.053250887995784, hamiltonian_energy_error = 0.026632149976489217, max_hamiltonian_energy_error = 0.09065086560640623, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9009488311943082, log_density = 8.677431480619305, hamiltonian_energy = -5.437911881082679, hamiltonian_energy_error = 0.18276281321189902, max_hamiltonian_energy_error = 0.23023488977151363, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.353564937882066, hamiltonian_energy = -7.895490352247062, hamiltonian_energy_error = -0.0439041731262817, max_hamiltonian_energy_error = -0.2173624039825297, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.7257038256257706, log_density = 10.876658582962191, hamiltonian_energy = -5.723683076886605, hamiltonian_energy_error = 0.13366960543932915, max_hamiltonian_energy_error = 0.8645270366012303, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9813885103541303, log_density = 12.131593814517618, hamiltonian_energy = -8.258118815487569, hamiltonian_energy_error = -0.15429366137013112, max_hamiltonian_energy_error = -0.30772247649564655, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.989255199214458, log_density = 12.228313400301916, hamiltonian_energy = -8.074236252558673, hamiltonian_energy_error = -0.09463696940822519, max_hamiltonian_energy_error = -0.16265919382942062, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8690569249219028, log_density = 9.010656754879117, hamiltonian_energy = -6.172360071721836, hamiltonian_energy_error = 0.19592546179958426, max_hamiltonian_energy_error = 0.34630721464030945, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9995210500902978, log_density = 11.865695111797628, hamiltonian_energy = -7.7121174540426205, hamiltonian_energy_error = -0.06952656490599107, max_hamiltonian_energy_error = -0.16747131569802676, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9686160229275216, log_density = 10.958175370426625, hamiltonian_energy = -8.884304305579287, hamiltonian_energy_error = 0.08165050655144235, max_hamiltonian_energy_error = -0.2050229781113888, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9661269819606086, log_density = 12.7878646471986, hamiltonian_energy = -9.325881865323987, hamiltonian_energy_error = -0.21688028664550352, max_hamiltonian_energy_error = -0.21688028664550352, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8397719231132184, log_density = 8.984342289828282, hamiltonian_energy = -8.023514466909536, hamiltonian_energy_error = 0.1318635828583492, max_hamiltonian_energy_error = 0.2655818423002696, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9596302972046638, log_density = 9.322697938493578, hamiltonian_energy = -7.0483873079378005, hamiltonian_energy_error = 0.09274953749671866, max_hamiltonian_energy_error = -0.18577217946842506, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9376970322810525, log_density = 2.3000806653151766, hamiltonian_energy = -0.968988432766049, hamiltonian_energy_error = 0.14148691690405646, max_hamiltonian_energy_error = -0.2591529979048772, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9767264931509791, log_density = 9.312561480767737, hamiltonian_energy = 1.586084978061212, hamiltonian_energy_error = -0.3396241650591394, max_hamiltonian_energy_error = -0.3396241650591394, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9328006712271986, log_density = 10.173050352798708, hamiltonian_energy = -7.8874965209609185, hamiltonian_energy_error = 0.04539321515670558, max_hamiltonian_energy_error = 0.1812313639526959, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9802494639349254, log_density = 12.180983135153873, hamiltonian_energy = -9.005624665324452, hamiltonian_energy_error = -0.2096119846021942, max_hamiltonian_energy_error = -0.2096119846021942, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9924654784003805, log_density = 13.550923028937467, hamiltonian_energy = -10.098624080680896, hamiltonian_energy_error = -0.03254790481261338, max_hamiltonian_energy_error = -0.08085847849535277, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9648429289015906, log_density = 10.579929575428716, hamiltonian_energy = -9.410080034239877, hamiltonian_energy_error = 0.03260652999323099, max_hamiltonian_energy_error = 0.06893923315146111, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.980834271902047, log_density = 11.971955345835184, hamiltonian_energy = -8.521884938714773, hamiltonian_energy_error = -0.013411784086002854, max_hamiltonian_energy_error = 0.07504005421797544, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9730912233573115, log_density = 12.150847329033837, hamiltonian_energy = -10.48648822566995, hamiltonian_energy_error = -0.0071826653019648745, max_hamiltonian_energy_error = 0.07887239680050939, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9076065086582952, log_density = 9.284218937116885, hamiltonian_energy = -7.491091588300958, hamiltonian_energy_error = 0.20391339172042766, max_hamiltonian_energy_error = 0.20391339172042766, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9556122337674434, log_density = 11.955592510328241, hamiltonian_energy = -7.637355446438215, hamiltonian_energy_error = -0.02270543964858529, max_hamiltonian_energy_error = -0.26359310146445036, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9867510088525139, log_density = 12.201156815312395, hamiltonian_energy = -10.514690548744133, hamiltonian_energy_error = -0.07260697712924546, max_hamiltonian_energy_error = -0.19796621274722703, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9988680810143202, log_density = 13.920993274404303, hamiltonian_energy = -11.110469952913354, hamiltonian_energy_error = -0.13317546420726067, max_hamiltonian_energy_error = -0.14168930621469045, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8608942534173609, log_density = 13.4721162958134, hamiltonian_energy = -11.217642951652275, hamiltonian_energy_error = 0.04558131367974205, max_hamiltonian_energy_error = 0.2620437003648526, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.973913011273886, log_density = 12.3265420199616, hamiltonian_energy = -10.030582831000489, hamiltonian_energy_error = -0.050670155334085365, max_hamiltonian_energy_error = 0.09010986430313217, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9623973294469037, log_density = 12.464496837474758, hamiltonian_energy = -9.535061928810055, hamiltonian_energy_error = 0.024677947348655138, max_hamiltonian_energy_error = 0.07796502434209174, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.926384400007369, log_density = 11.308259571362335, hamiltonian_energy = -10.43141443637542, hamiltonian_energy_error = 0.14086592016616883, max_hamiltonian_energy_error = 0.16313436444102436, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.06380095722914, hamiltonian_energy = -11.106126398898516, hamiltonian_energy_error = -0.1371364779629758, max_hamiltonian_energy_error = -0.16559158109578576, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9833036281798055, log_density = 13.340605560516961, hamiltonian_energy = -10.174681849831723, hamiltonian_energy_error = 0.0005706266142997407, max_hamiltonian_energy_error = 0.06576239362043346, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.895313020092167, log_density = 11.91693838809488, hamiltonian_energy = -11.099825356340457, hamiltonian_energy_error = 0.1734548448870239, max_hamiltonian_energy_error = 0.24468555397923097, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.689113486481734, hamiltonian_energy = -11.668527850669914, hamiltonian_energy_error = -0.009437360095008174, max_hamiltonian_energy_error = -0.17297065549541912, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9980610424536552, log_density = 12.591234870806609, hamiltonian_energy = -11.3946257169971, hamiltonian_energy_error = -0.12134703731324237, max_hamiltonian_energy_error = -0.16583198325527704, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9157930555211087, log_density = 12.729850322208973, hamiltonian_energy = -9.093572362082426, hamiltonian_energy_error = -0.0002771240057359847, max_hamiltonian_energy_error = 0.2678840645551315, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9968524468822795, log_density = 13.08498461579238, hamiltonian_energy = -12.317450598805111, hamiltonian_energy_error = 0.006150372101853208, max_hamiltonian_energy_error = -0.058275577582646676, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9225597215689698, log_density = 10.243284781679815, hamiltonian_energy = -8.251439431562357, hamiltonian_energy_error = 0.027177487541587553, max_hamiltonian_energy_error = 0.13254509591829056, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9894222035048681, log_density = 13.518251384398727, hamiltonian_energy = -9.3845934083711, hamiltonian_energy_error = -0.07648184871387365, max_hamiltonian_energy_error = -0.07648184871387365, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9807314466487789, log_density = 12.588935110080017, hamiltonian_energy = -11.471041045482327, hamiltonian_energy_error = 0.046033666465561396, max_hamiltonian_energy_error = 0.06896495422360971, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9682855553250638, log_density = 13.07856653468588, hamiltonian_energy = -10.672549216984203, hamiltonian_energy_error = 0.06669752765037273, max_hamiltonian_energy_error = 0.10677257194729428, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9176499315976424, log_density = 10.298270763257705, hamiltonian_energy = -8.845599654885874, hamiltonian_energy_error = 0.045759194312253726, max_hamiltonian_energy_error = 0.23404530594884854, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9911431553811829, log_density = 11.065770438284597, hamiltonian_energy = -7.700821291034849, hamiltonian_energy_error = -0.06480181991911138, max_hamiltonian_energy_error = -0.14915338164668146, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9562815423411398, log_density = 12.126458872340468, hamiltonian_energy = -8.262318906183841, hamiltonian_energy_error = -0.12934859420112943, max_hamiltonian_energy_error = -0.12934859420112943, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.994723161923577, log_density = 11.858678231382626, hamiltonian_energy = -11.502153672140045, hamiltonian_energy_error = 0.01180970600523601, max_hamiltonian_energy_error = -0.044910301204330594, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9974291858190248, log_density = 12.481269786496421, hamiltonian_energy = -10.117247388898068, hamiltonian_energy_error = -0.047606236292043747, max_hamiltonian_energy_error = -0.09615712124943876, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9895053329701369, log_density = 12.695334262588052, hamiltonian_energy = -10.543385367077468, hamiltonian_energy_error = 0.022314837369606266, max_hamiltonian_energy_error = 0.04100138512463225, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9566936438376352, log_density = 7.284431752084366, hamiltonian_energy = -6.4187076266679375, hamiltonian_energy_error = 0.19378416647379737, max_hamiltonian_energy_error = 0.19378416647379737, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9630778269425649, log_density = 10.427817844087862, hamiltonian_energy = -4.045299161596766, hamiltonian_energy_error = -0.13991707317593916, max_hamiltonian_energy_error = -0.24151245176149372, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9953886143261104, log_density = 12.182123678211942, hamiltonian_energy = -8.712075618748033, hamiltonian_energy_error = -0.13144381355568768, max_hamiltonian_energy_error = -0.21870354615867527, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9627687133523976, log_density = 11.891704668013375, hamiltonian_energy = -10.073410113086627, hamiltonian_energy_error = 0.0476492073037349, max_hamiltonian_energy_error = 0.09220477633764013, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9988528091171484, log_density = 13.174741329197753, hamiltonian_energy = -11.102338798923618, hamiltonian_energy_error = -0.09938161417775326, max_hamiltonian_energy_error = -0.16171389107311285, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9866363202748611, log_density = 13.415427654616723, hamiltonian_energy = -12.239011645456042, hamiltonian_energy_error = 0.0037027904383748478, max_hamiltonian_energy_error = -0.07414423003486093, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9360896114500047, log_density = 9.34465786416461, hamiltonian_energy = -8.543475027070302, hamiltonian_energy_error = 0.15242580882603818, max_hamiltonian_energy_error = 0.2102468971922331, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.133669910832877, hamiltonian_energy = -8.288714833497792, hamiltonian_energy_error = -0.08016880600503384, max_hamiltonian_energy_error = -0.22745637267106922, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9991802653400067, log_density = 11.387257610359324, hamiltonian_energy = -10.910151604206153, hamiltonian_energy_error = -0.020896259933602224, max_hamiltonian_energy_error = -0.14354125089686498, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9925044968250515, log_density = 11.106781023917057, hamiltonian_energy = -6.633873678196595, hamiltonian_energy_error = -0.02150042777964245, max_hamiltonian_energy_error = -0.2765184653457746, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9689106200129207, log_density = 13.452553846963887, hamiltonian_energy = -8.201331610121327, hamiltonian_energy_error = -0.28289484175614277, max_hamiltonian_energy_error = -0.28289484175614277, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9040097943713002, log_density = 11.615751650212612, hamiltonian_energy = -10.934465532972965, hamiltonian_energy_error = 0.10689393042665962, max_hamiltonian_energy_error = 0.15459971693045382, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9789449163389586, log_density = 11.730925386752677, hamiltonian_energy = -8.390480881885946, hamiltonian_energy_error = -0.006497680909191672, max_hamiltonian_energy_error = -0.1337082825155793, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.998487637203251, log_density = 10.746478508254278, hamiltonian_energy = -10.573105655769464, hamiltonian_energy_error = 0.01371744149019527, max_hamiltonian_energy_error = -0.12147587338779253, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9975818983822203, log_density = 12.256021638925798, hamiltonian_energy = -9.88037103633855, hamiltonian_energy_error = -0.055109104253086016, max_hamiltonian_energy_error = -0.16726844807864616, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.823400720895471, log_density = 9.340975953247206, hamiltonian_energy = -6.800646561763031, hamiltonian_energy_error = 0.17875795020932905, max_hamiltonian_energy_error = 0.5346036761889374, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.259460045439454, hamiltonian_energy = -8.295167420579357, hamiltonian_energy_error = -0.1781933376020728, max_hamiltonian_energy_error = -0.21419434776626467, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6578386103231714, log_density = 9.681745219926311, hamiltonian_energy = -6.374738674099229, hamiltonian_energy_error = 0.5114834096896743, max_hamiltonian_energy_error = 0.6420601897385083, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.76315291975942, log_density = 11.070874305289655, hamiltonian_energy = -4.623007587556936, hamiltonian_energy_error = -0.1888253244739868, max_hamiltonian_energy_error = 0.47171256367836456, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9707318575087337, log_density = 11.095110286564587, hamiltonian_energy = -8.718812328275327, hamiltonian_energy_error = 0.06624697605755259, max_hamiltonian_energy_error = -0.24416902218472636, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.997748102936581, log_density = 10.033213769367194, hamiltonian_energy = -8.878623286681979, hamiltonian_energy_error = 0.01588884119132672, max_hamiltonian_energy_error = -0.2879997157970511, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.997938116404227, log_density = 10.313127159651838, hamiltonian_energy = -8.61867169169415, hamiltonian_energy_error = -0.00731999606135858, max_hamiltonian_energy_error = -0.2803885225920073, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9969137591494767, log_density = 11.512880262684087, hamiltonian_energy = -9.37275662285575, hamiltonian_energy_error = -0.08461141237339476, max_hamiltonian_energy_error = -0.35541659244346135, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.987224635985421, log_density = 10.788389746800132, hamiltonian_energy = -10.163203719963201, hamiltonian_energy_error = 0.028537949558030462, max_hamiltonian_energy_error = -0.2861694812121556, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9130292487411514, log_density = 11.332632881470182, hamiltonian_energy = -7.404484561039908, hamiltonian_energy_error = -0.15571102371290202, max_hamiltonian_energy_error = -0.37965146035981956, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9774955669868788, log_density = 10.77474329394318, hamiltonian_energy = -9.942561514191892, hamiltonian_energy_error = 0.06822148482794077, max_hamiltonian_energy_error = -0.23702811907165078, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9946887493723167, log_density = 11.880818867052566, hamiltonian_energy = -10.00705329023929, hamiltonian_energy_error = -0.16680637009001487, max_hamiltonian_energy_error = -0.34214504630927145, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9975685893317291, log_density = 13.415920927274513, hamiltonian_energy = -8.71856879364232, hamiltonian_energy_error = -0.07564117834214201, max_hamiltonian_energy_error = -0.1561388282817866, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9973444761659108, log_density = 13.46944994482567, hamiltonian_energy = -13.140606073463369, hamiltonian_energy_error = -0.017510289136577484, max_hamiltonian_energy_error = -0.06672727821987401, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9846583444166569, log_density = 13.122387500787813, hamiltonian_energy = -12.198169021444537, hamiltonian_energy_error = -0.011648149661301233, max_hamiltonian_energy_error = 0.0547455782430486, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7782404538527317, log_density = 9.355949529447027, hamiltonian_energy = -6.604626088880878, hamiltonian_energy_error = 0.27934253579493795, max_hamiltonian_energy_error = 0.39985832611350425, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8960155826987916, log_density = 10.319471488496395, hamiltonian_energy = -7.113846372717511, hamiltonian_energy_error = -0.09241550663973541, max_hamiltonian_energy_error = 0.37389849554264387, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9962459746588355, log_density = 9.12686352386363, hamiltonian_energy = -7.783586703620181, hamiltonian_energy_error = -0.015254498277204043, max_hamiltonian_energy_error = -0.24666559866276572, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.885063181900302, hamiltonian_energy = -8.526222770132362, hamiltonian_energy_error = -0.008558206153375991, max_hamiltonian_energy_error = -0.1937142301782604, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9959492828542772, log_density = 12.740952825251139, hamiltonian_energy = -9.81171873261019, hamiltonian_energy_error = -0.06863381458212992, max_hamiltonian_energy_error = -0.16474989294390419, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9102412573150672, log_density = 10.817585973305317, hamiltonian_energy = -9.409523256018998, hamiltonian_energy_error = 0.16834819578354399, max_hamiltonian_energy_error = 0.16834819578354399, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9934298098559851, log_density = 13.084212729914254, hamiltonian_energy = -9.6288759406013, hamiltonian_energy_error = -0.17189267853784074, max_hamiltonian_energy_error = -0.17189267853784074, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9566093159421298, log_density = 12.805745806795919, hamiltonian_energy = -11.815462366010978, hamiltonian_energy_error = 0.028177946996343906, max_hamiltonian_energy_error = 0.08650134726989123, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 51, is_accept = true, acceptance_rate = 0.9474100429900485, log_density = 12.099956214226253, hamiltonian_energy = -10.7662565227629, hamiltonian_energy_error = 0.08683082213205395, max_hamiltonian_energy_error = 0.16104784132887318, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9760600075213999, log_density = 10.897359623888628, hamiltonian_energy = -8.95237497549351, hamiltonian_energy_error = 0.037117956986532974, max_hamiltonian_energy_error = -0.16030392915019753, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9991258157279633, log_density = 12.935271536302377, hamiltonian_energy = -8.025992231430472, hamiltonian_energy_error = -0.12840719461093997, max_hamiltonian_energy_error = -0.19464676714696338, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9282183964466082, log_density = 11.543133202924633, hamiltonian_energy = -10.859557218831682, hamiltonian_energy_error = 0.10978206976495386, max_hamiltonian_energy_error = 0.10978206976495386, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.780516517426028, hamiltonian_energy = -11.385872454119557, hamiltonian_energy_error = -0.09568088757509408, max_hamiltonian_energy_error = -0.09568088757509408, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9845771038474692, log_density = 12.38097271049562, hamiltonian_energy = -10.188863287164267, hamiltonian_energy_error = 0.025929040778713386, max_hamiltonian_energy_error = -0.0416079745451583, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9799590972122675, log_density = 11.119320647269888, hamiltonian_energy = -10.716746705919153, hamiltonian_energy_error = 0.041517158064335646, max_hamiltonian_energy_error = -0.07690048352667667, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8926988037912694, log_density = 12.855392965366768, hamiltonian_energy = -9.162675455577062, hamiltonian_energy_error = 0.01645172830900954, max_hamiltonian_energy_error = 0.25020277815563396, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9665014283651989, log_density = 12.168501925088297, hamiltonian_energy = -10.27159152227378, hamiltonian_energy_error = 0.10933590191098119, max_hamiltonian_energy_error = 0.11928277628585349, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8597692878670937, log_density = 11.174444446751234, hamiltonian_energy = -8.519128694277951, hamiltonian_energy_error = 0.15364086735296034, max_hamiltonian_energy_error = 0.40150736694387845, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9613441078424884, log_density = 11.617829004153618, hamiltonian_energy = -5.743024607708589, hamiltonian_energy_error = -0.19125890618402241, max_hamiltonian_energy_error = 0.3053674467636407, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.99939201733847, log_density = 12.782267766758252, hamiltonian_energy = -10.647123844312558, hamiltonian_energy_error = -0.060416276059569896, max_hamiltonian_energy_error = -0.11262754817674114, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9934941127284452, log_density = 13.231438425226957, hamiltonian_energy = -11.17560258645085, hamiltonian_energy_error = 0.014090519010652613, max_hamiltonian_energy_error = -0.07596171734232016, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9285741921767555, log_density = 9.224328417167552, hamiltonian_energy = -6.368321071642907, hamiltonian_energy_error = -0.010144489767404785, max_hamiltonian_energy_error = -0.25031913057136546, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9835401981494534, log_density = 8.729540498495364, hamiltonian_energy = -6.358338616458749, hamiltonian_energy_error = -0.020471685861522815, max_hamiltonian_energy_error = -0.14957929588637242, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7026838094435177, log_density = 6.98505995153981, hamiltonian_energy = -3.2431270710028484, hamiltonian_energy_error = 0.29558342762056267, max_hamiltonian_energy_error = 0.566959067873829, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9718140202716062, log_density = 7.876954776286316, hamiltonian_energy = -2.1994621672486163, hamiltonian_energy_error = -0.07079301696235873, max_hamiltonian_energy_error = -0.45484385225430923, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.980591008109322, log_density = 9.363837747006784, hamiltonian_energy = -4.494304672735161, hamiltonian_energy_error = 0.1216309477352322, max_hamiltonian_energy_error = -0.39994133960243783, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8447905063749445, log_density = 9.917832834355451, hamiltonian_energy = -2.442242182764944, hamiltonian_energy_error = -0.36203067099430886, max_hamiltonian_energy_error = 0.7532756706521542, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.994038156437796, log_density = 10.731246447256025, hamiltonian_energy = -9.187490884271346, hamiltonian_energy_error = -0.047718979582489496, max_hamiltonian_energy_error = -0.09984843815375477, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9695898510057568, log_density = 11.463449522074797, hamiltonian_energy = -8.283654667504546, hamiltonian_energy_error = 0.02507166272933148, max_hamiltonian_energy_error = -0.1433145890294636, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9144310078133275, log_density = 8.955242887768122, hamiltonian_energy = -7.6086583763379085, hamiltonian_energy_error = 0.10653592093654307, max_hamiltonian_energy_error = 0.21814310747401766, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9951189681014256, log_density = 9.121981946563967, hamiltonian_energy = -6.670182420868741, hamiltonian_energy_error = -0.022608281930521557, max_hamiltonian_energy_error = -0.21144453550970344, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9867673724096301, log_density = 9.58482295510493, hamiltonian_energy = -7.102953407815118, hamiltonian_energy_error = -0.06094353706283506, max_hamiltonian_energy_error = -0.2497959779424903, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9482891893661227, log_density = 12.889592085615, hamiltonian_energy = -7.4072200091077205, hamiltonian_energy_error = -0.2009009241671551, max_hamiltonian_energy_error = 0.4352359579927594, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9368562188773061, log_density = 9.239561525388325, hamiltonian_energy = -8.126139541071282, hamiltonian_energy_error = 0.15175630827385156, max_hamiltonian_energy_error = 0.15175630827385156, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7743148998756446, log_density = 5.927802944902325, hamiltonian_energy = -4.827330613079631, hamiltonian_energy_error = 0.39730180064250753, max_hamiltonian_energy_error = 0.39730180064250753, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9623380548203596, log_density = 8.622933171053493, hamiltonian_energy = -3.496002314928858, hamiltonian_energy_error = 0.03231230860104617, max_hamiltonian_energy_error = -0.10441903906242533, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9741448725558094, log_density = 8.039188752213285, hamiltonian_energy = -4.574435615731138, hamiltonian_energy_error = -0.09028871075795752, max_hamiltonian_energy_error = 0.18529782448612675, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9024293968342008, log_density = 8.579641371415475, hamiltonian_energy = -4.464022058634485, hamiltonian_energy_error = 0.20479353589626914, max_hamiltonian_energy_error = 0.22239917644117035, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9769470300060897, log_density = 10.339985904496212, hamiltonian_energy = -7.433891517139118, hamiltonian_energy_error = -0.2849935425077339, max_hamiltonian_energy_error = -0.29670184170584246, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.8898212924504528, log_density = 9.84455661385455, hamiltonian_energy = -6.4450607873655965, hamiltonian_energy_error = 0.15503189178359644, max_hamiltonian_energy_error = 0.3008433929024932, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9891104796988263, log_density = 9.701442754566148, hamiltonian_energy = -8.193141307081142, hamiltonian_energy_error = -0.048595660437358745, max_hamiltonian_energy_error = -0.24974588558730026, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9973756378060636, log_density = 11.372061035050217, hamiltonian_energy = -8.494502588204742, hamiltonian_energy_error = -0.037939954034094114, max_hamiltonian_energy_error = -0.05404869615340857, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9457365782244574, log_density = 13.30870694474768, hamiltonian_energy = -8.91338441597635, hamiltonian_energy_error = -0.007683954937862225, max_hamiltonian_energy_error = 0.1706119681473126, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.7791854390596792, log_density = 11.683312027936779, hamiltonian_energy = -6.230179370917254, hamiltonian_energy_error = -0.016219378424061404, max_hamiltonian_energy_error = 0.6163562326186902, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9556958524137822, log_density = 10.214873466234787, hamiltonian_energy = -8.842034976549952, hamiltonian_energy_error = 0.08941334351239405, max_hamiltonian_energy_error = 0.1377543156232086, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9171280824731289, log_density = 10.168108872332732, hamiltonian_energy = -8.027754558170008, hamiltonian_energy_error = 0.13336856078071868, max_hamiltonian_energy_error = 0.19964418723055832, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9819434259411418, log_density = 12.094633327451769, hamiltonian_energy = -8.437415025234074, hamiltonian_energy_error = -0.06543300188439005, max_hamiltonian_energy_error = -0.08320152536797742, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9753282052058034, log_density = 11.955144495459127, hamiltonian_energy = -7.304419562630094, hamiltonian_energy_error = -0.01832123391723428, max_hamiltonian_energy_error = 0.17408630670794611, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9473683106339789, log_density = 10.17729786309124, hamiltonian_energy = -7.251084647777455, hamiltonian_energy_error = 0.0830004129825852, max_hamiltonian_energy_error = -0.2826109079604331, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8109614142755881, log_density = 10.335843184377685, hamiltonian_energy = -5.6742396509979045, hamiltonian_energy_error = 0.24075321553688855, max_hamiltonian_energy_error = 0.4293014108505222, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7668901402764424, log_density = 8.100362805073118, hamiltonian_energy = -4.7051922970955005, hamiltonian_energy_error = 0.5288470165339074, max_hamiltonian_energy_error = 0.5288470165339074, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9924911387458095, log_density = 10.381443793869963, hamiltonian_energy = -7.326997802322508, hamiltonian_energy_error = -0.3520151377552301, max_hamiltonian_energy_error = -0.5666232920797603, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.850736252679116, hamiltonian_energy = -7.052655146615545, hamiltonian_energy_error = -0.22014289546227506, max_hamiltonian_energy_error = -0.6545936492387483, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9981386056519445, log_density = 13.518882817475566, hamiltonian_energy = -11.702037356772006, hamiltonian_energy_error = -0.1034601844577896, max_hamiltonian_energy_error = -0.1034601844577896, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9374854349377207, log_density = 12.83086851620434, hamiltonian_energy = -9.497420936577235, hamiltonian_energy_error = 0.08057474233178752, max_hamiltonian_energy_error = 0.1635933096861084, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9776130625013607, log_density = 12.355497263158881, hamiltonian_energy = -9.608604871130735, hamiltonian_energy_error = 0.0008124160946998416, max_hamiltonian_energy_error = -0.10558341260028214, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9930313060110968, log_density = 12.604027924996014, hamiltonian_energy = -8.262396228412463, hamiltonian_energy_error = -0.08964496759866591, max_hamiltonian_energy_error = -0.184119143152639, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8907724029189704, log_density = 9.551606804060313, hamiltonian_energy = -8.997294488057287, hamiltonian_energy_error = 0.20211094714608713, max_hamiltonian_energy_error = 0.20211094714608713, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9949242352359501, log_density = 12.064758826790786, hamiltonian_energy = -8.385063145712767, hamiltonian_energy_error = -0.06400567421086656, max_hamiltonian_energy_error = -0.23168383286030192, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.994561800896304, log_density = 11.581047752275786, hamiltonian_energy = -9.321150951153598, hamiltonian_energy_error = -0.10268134784751481, max_hamiltonian_energy_error = -0.14090974910907583, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9938093001437096, log_density = 13.05803494928579, hamiltonian_energy = -9.430722324470604, hamiltonian_energy_error = -0.06065437864521961, max_hamiltonian_energy_error = -0.1591818083372889, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9182817016923244, log_density = 12.952093596440921, hamiltonian_energy = -9.115086917675672, hamiltonian_energy_error = -0.02974551547366211, max_hamiltonian_energy_error = 0.21406690143303386, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9112544368197033, log_density = 13.211026923380913, hamiltonian_energy = -10.007226108427172, hamiltonian_energy_error = 0.0735186439233253, max_hamiltonian_energy_error = 0.1635467455448243, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9795797355335771, log_density = 12.833261723207432, hamiltonian_energy = -10.905056703863446, hamiltonian_energy_error = -0.054115081724621206, max_hamiltonian_energy_error = -0.10673236300699429, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8659581450749957, log_density = 12.60528542010325, hamiltonian_energy = -10.015507378443795, hamiltonian_energy_error = 0.15149660356623507, max_hamiltonian_energy_error = 0.22304965182460457, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9244604062146624, log_density = 11.630288422775928, hamiltonian_energy = -9.234909804413412, hamiltonian_energy_error = -0.04759337297183741, max_hamiltonian_energy_error = 0.19423476550894314, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7581759156438385, log_density = 12.676614238615166, hamiltonian_energy = -5.75620903985102, hamiltonian_energy_error = 0.14583446228828922, max_hamiltonian_energy_error = 0.5260647012361197, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9414622243285045, log_density = 11.282305715541249, hamiltonian_energy = -9.67223967035169, hamiltonian_energy_error = 0.12126244874983527, max_hamiltonian_energy_error = 0.18930239591550269, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9988964689072434, log_density = 12.042863741654593, hamiltonian_energy = -10.570784093266322, hamiltonian_energy_error = -0.09218094617604322, max_hamiltonian_energy_error = -0.2197058312253013, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.982234023393819, log_density = 12.237996424151383, hamiltonian_energy = -9.931451474700491, hamiltonian_energy_error = -0.031864206103536574, max_hamiltonian_energy_error = 0.09926622517050454, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9909567360231034, log_density = 12.802060284709304, hamiltonian_energy = -10.26138001376637, hamiltonian_energy_error = -0.036742359665197455, max_hamiltonian_energy_error = -0.08673621711718837, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.8669846964535425, log_density = 12.395912318010378, hamiltonian_energy = -9.101848782087906, hamiltonian_energy_error = 0.08747076019916733, max_hamiltonian_energy_error = 0.34383585792606475, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9934676259006939, log_density = 11.51752360397288, hamiltonian_energy = -10.732936761291803, hamiltonian_energy_error = 0.03201663932067511, max_hamiltonian_energy_error = -0.0538632200736231, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7929856069546264, log_density = 10.507832608756335, hamiltonian_energy = -7.081867917617377, hamiltonian_energy_error = 0.09595409986508319, max_hamiltonian_energy_error = 0.3949482108639737, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9824737847742954, log_density = 11.073357745355096, hamiltonian_energy = -8.774935088341532, hamiltonian_energy_error = -0.010388569247028911, max_hamiltonian_energy_error = -0.044373263295375054, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8640400605892592, log_density = 13.380608612010175, hamiltonian_energy = -7.165277018776856, hamiltonian_energy_error = 0.07043453633125285, max_hamiltonian_energy_error = 0.20798427076512915, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9586307862466252, log_density = 12.366272964804487, hamiltonian_energy = -11.129048967789235, hamiltonian_energy_error = 0.03992116321700223, max_hamiltonian_energy_error = 0.10452605768540835, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9961288812186943, log_density = 12.477476633381913, hamiltonian_energy = -11.818803123131017, hamiltonian_energy_error = -0.032961575803108545, max_hamiltonian_energy_error = -0.07344254510648263, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9861710321461589, log_density = 12.470269771292966, hamiltonian_energy = -11.883629810778563, hamiltonian_energy_error = 0.023930180928777744, max_hamiltonian_energy_error = 0.03507524253673999, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9725186067581129, log_density = 12.941004392164915, hamiltonian_energy = -9.810307840722752, hamiltonian_energy_error = 0.036214987938423704, max_hamiltonian_energy_error = 0.0733040959882949, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9127832302624577, log_density = 10.97156085461485, hamiltonian_energy = -6.901091360772382, hamiltonian_energy_error = 0.01344399862716461, max_hamiltonian_energy_error = 0.29030195610304776, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9708447793837294, log_density = 11.33974906008389, hamiltonian_energy = -9.27222781545375, hamiltonian_energy_error = 0.051684746166294815, max_hamiltonian_energy_error = 0.09058322985042899, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8394643341484375, log_density = 9.823303346785496, hamiltonian_energy = -7.08009687940653, hamiltonian_energy_error = 0.23598249545673156, max_hamiltonian_energy_error = 0.38427943206631454, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.334896290043105, hamiltonian_energy = -9.290402018223588, hamiltonian_energy_error = -0.11121643966224859, max_hamiltonian_energy_error = -0.28815365379947444, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9395640952184661, log_density = 12.216994962218664, hamiltonian_energy = -10.504717810849403, hamiltonian_energy_error = -0.10192191612852142, max_hamiltonian_energy_error = 0.21207605600252677, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.978563583243617, log_density = 9.126036956049138, hamiltonian_energy = -8.470823636138322, hamiltonian_energy_error = 0.0753832559359715, max_hamiltonian_energy_error = -0.14906756017865597, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9588823899321343, log_density = 10.830557061972875, hamiltonian_energy = -7.387045192894995, hamiltonian_energy_error = 0.08332827488807304, max_hamiltonian_energy_error = -0.19396970925653, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.985556598889632, log_density = 13.638769205149707, hamiltonian_energy = -9.7775670096667, hamiltonian_energy_error = -0.3099512515768801, max_hamiltonian_energy_error = -0.3099512515768801, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9412140705306365, log_density = 13.46332827157377, hamiltonian_energy = -10.806164819559273, hamiltonian_energy_error = -0.0020101545270918564, max_hamiltonian_energy_error = 0.11486894765314837, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9318235279589416, log_density = 13.603743024149079, hamiltonian_energy = -11.41897463408643, hamiltonian_energy_error = 0.009819147318369303, max_hamiltonian_energy_error = 0.14762119912949068, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.891121053824356, log_density = 13.382382420336995, hamiltonian_energy = -9.721537458467054, hamiltonian_energy_error = 0.06324079524625326, max_hamiltonian_energy_error = 0.2136882160530611, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9840537115737088, log_density = 12.628609703183944, hamiltonian_energy = -11.98823703187515, hamiltonian_energy_error = 0.04004753783422821, max_hamiltonian_energy_error = -0.06801985437048685, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9306614023875596, log_density = 12.323108507309826, hamiltonian_energy = -9.608705246462744, hamiltonian_energy_error = -0.06772943987918723, max_hamiltonian_energy_error = 0.23058495861132933, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8697870627879476, log_density = 10.849158390432063, hamiltonian_energy = -9.405628896585737, hamiltonian_energy_error = 0.19837987943932056, max_hamiltonian_energy_error = 0.2591098730690522, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9905122565571467, log_density = 11.345940657909257, hamiltonian_energy = -7.189766479307644, hamiltonian_energy_error = -0.045284544491997814, max_hamiltonian_energy_error = -0.3234493936891125, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9830794518545558, log_density = 12.653507474841946, hamiltonian_energy = -10.298004031011049, hamiltonian_energy_error = -0.024691961176760202, max_hamiltonian_energy_error = -0.07215888234154377, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9591967701076929, log_density = 12.624475050676926, hamiltonian_energy = -9.992921799052898, hamiltonian_energy_error = 0.08778415433089748, max_hamiltonian_energy_error = 0.1242604188485057, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9895841468220209, log_density = 13.480959746244269, hamiltonian_energy = -11.213425943522774, hamiltonian_energy_error = -0.1339297508011743, max_hamiltonian_energy_error = -0.1339297508011743, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9842110944888538, log_density = 11.89070143733694, hamiltonian_energy = -10.130987311272353, hamiltonian_energy_error = 0.011820484492124805, max_hamiltonian_energy_error = 0.03606762645067896, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9680662760860236, log_density = 13.392242507065344, hamiltonian_energy = -9.63993432381199, hamiltonian_energy_error = -0.0007426126569374247, max_hamiltonian_energy_error = 0.07447195097682169, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9990533919976022, log_density = 13.742052725569003, hamiltonian_energy = -12.802496759899867, hamiltonian_energy_error = -0.025060413566553308, max_hamiltonian_energy_error = -0.02830204983191642, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9512930582785465, log_density = 12.028904955892042, hamiltonian_energy = -10.992262264761733, hamiltonian_energy_error = 0.07834662962515537, max_hamiltonian_energy_error = 0.10254475003405439, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.930461866513495, log_density = 11.561576753694116, hamiltonian_energy = -8.274205376405435, hamiltonian_energy_error = -0.053969660816509446, max_hamiltonian_energy_error = 0.24103663535215336, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8645540911704757, log_density = 11.946417208125817, hamiltonian_energy = -6.654558018153397, hamiltonian_energy_error = 0.10789659730280032, max_hamiltonian_energy_error = 0.3291544742168897, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.979625102201733, log_density = 11.485460157853732, hamiltonian_energy = -7.552164377794553, hamiltonian_energy_error = 0.07558045428244231, max_hamiltonian_energy_error = -0.14914296652649206, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9907472943645438, log_density = 8.766714020293293, hamiltonian_energy = -6.262000045326507, hamiltonian_energy_error = -0.11367369070301336, max_hamiltonian_energy_error = -0.36223336203201395, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9964219830909051, log_density = 9.254589843148135, hamiltonian_energy = -6.820929118525479, hamiltonian_energy_error = -0.06562308455254495, max_hamiltonian_energy_error = -0.35231935150252713, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9976112164471438, log_density = 9.990397968574175, hamiltonian_energy = -9.16963230901611, hamiltonian_energy_error = -0.06457222083794001, max_hamiltonian_energy_error = -0.09161655872958718, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9609841438461354, log_density = 10.34966837236349, hamiltonian_energy = -8.474198695810697, hamiltonian_energy_error = 0.06016717401296212, max_hamiltonian_energy_error = -0.17304739112334744, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9550301981234985, log_density = 9.962319356864636, hamiltonian_energy = -9.189460725968361, hamiltonian_energy_error = -0.020735091763274482, max_hamiltonian_energy_error = 0.12428505479916296, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9459415599066415, log_density = 9.246441601754295, hamiltonian_energy = -7.542400037736865, hamiltonian_energy_error = 0.09753998924673812, max_hamiltonian_energy_error = 0.1406968598165621, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9262983667529868, log_density = 12.190599668940221, hamiltonian_energy = -7.707982840193377, hamiltonian_energy_error = -0.1030409247487265, max_hamiltonian_energy_error = 0.3014463211959404, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9293894178048062, log_density = 10.616907771529275, hamiltonian_energy = -10.151561222564226, hamiltonian_energy_error = 0.19304591608656985, max_hamiltonian_energy_error = 0.21130945092517806, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.998022696747087, log_density = 10.71526904464847, hamiltonian_energy = -8.184026492741069, hamiltonian_energy_error = -0.11741239938828052, max_hamiltonian_energy_error = -0.2221960144141466, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9160076464303515, log_density = 10.001079060912751, hamiltonian_energy = -9.255674509401459, hamiltonian_energy_error = 0.15813206028949267, max_hamiltonian_energy_error = 0.22390646013687565, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9254322656408671, log_density = 9.603321914704964, hamiltonian_energy = -6.192098756790171, hamiltonian_energy_error = 0.028939443427688616, max_hamiltonian_energy_error = -0.25375707777445733, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9863198626797103, log_density = 10.683163025655876, hamiltonian_energy = -9.183371624707636, hamiltonian_energy_error = -0.11361088400831143, max_hamiltonian_energy_error = -0.11361088400831143, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9918320402265929, log_density = 11.50973945914174, hamiltonian_energy = -7.422818359649689, hamiltonian_energy_error = 0.022336301151124616, max_hamiltonian_energy_error = -0.11072981373930002, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8180157931977287, log_density = 12.349391743271504, hamiltonian_energy = -7.476551915362589, hamiltonian_energy_error = 0.10975896472279878, max_hamiltonian_energy_error = 0.4142946133652954, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9506728198321212, log_density = 12.427506203279, hamiltonian_energy = -9.55253784794046, hamiltonian_energy_error = -0.0424162490045461, max_hamiltonian_energy_error = 0.18026454282981597, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9944314810540322, log_density = 12.824279933421623, hamiltonian_energy = -10.922970118299261, hamiltonian_energy_error = -0.010927329327570234, max_hamiltonian_energy_error = -0.10384809273216966, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9933912527309052, log_density = 12.804318673362928, hamiltonian_energy = -11.23746368811214, hamiltonian_energy_error = -0.04978466750471533, max_hamiltonian_energy_error = -0.09063446020422994, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9790933492225493, log_density = 11.620910801748312, hamiltonian_energy = -8.151254401371435, hamiltonian_energy_error = -0.0346333342900742, max_hamiltonian_energy_error = -0.13762218549976346, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.998104643977548, log_density = 11.417086159432888, hamiltonian_energy = -10.283418942496384, hamiltonian_energy_error = 0.001920053829453039, max_hamiltonian_energy_error = -0.07265054992051923, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.989294032213747, log_density = 11.649718024925175, hamiltonian_energy = -10.108254228469853, hamiltonian_energy_error = -0.03564960535005035, max_hamiltonian_energy_error = -0.049762372711112945, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9608674646834743, log_density = 13.137351381319966, hamiltonian_energy = -8.845803587989717, hamiltonian_energy_error = -0.021360050880046444, max_hamiltonian_energy_error = 0.08425694304167841, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9627815017332046, log_density = 11.907253471882324, hamiltonian_energy = -10.691038269083599, hamiltonian_energy_error = 0.03552385516183776, max_hamiltonian_energy_error = 0.0787452923354941, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8829865602033434, log_density = 12.235607854154049, hamiltonian_energy = -8.79615139418407, hamiltonian_energy_error = -0.038155576960368975, max_hamiltonian_energy_error = 0.29398040342474197, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9075120898163923, log_density = 12.18996424083534, hamiltonian_energy = -9.75513929675342, hamiltonian_energy_error = 0.14051569990904866, max_hamiltonian_energy_error = 0.20614579901002195, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 12.947896502175285, hamiltonian_energy = -12.041056377152993, hamiltonian_energy_error = -0.1144223321795046, max_hamiltonian_energy_error = -0.12393578794908144, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9935381611512923, log_density = 12.859788627858922, hamiltonian_energy = -11.95230351157216, hamiltonian_energy_error = -0.017189668067217667, max_hamiltonian_energy_error = -0.049197901047143944, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9870723098649492, log_density = 13.14297514666289, hamiltonian_energy = -11.555479409238194, hamiltonian_energy_error = 0.010820726416682191, max_hamiltonian_energy_error = 0.0421657412473575, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9889681952112694, log_density = 13.313749883775312, hamiltonian_energy = -12.214892945228856, hamiltonian_energy_error = -0.003937621469527031, max_hamiltonian_energy_error = 0.047638824941365954, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8813649938363789, log_density = 9.987389985432808, hamiltonian_energy = -9.282119992291376, hamiltonian_energy_error = 0.15103073180017113, max_hamiltonian_energy_error = 0.18247885042069356, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9749111457960411, log_density = 11.245520577194524, hamiltonian_energy = -7.165761336891615, hamiltonian_energy_error = -0.06008028499702167, max_hamiltonian_energy_error = -0.22237152705580687, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9984072267966411, log_density = 10.777777505900486, hamiltonian_energy = -9.363745910955288, hamiltonian_energy_error = -0.04733589255373971, max_hamiltonian_energy_error = -0.20538202110023818, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9991585009078775, log_density = 9.849793823797906, hamiltonian_energy = -7.305040574663625, hamiltonian_energy_error = -0.04585556346101338, max_hamiltonian_energy_error = -0.2932166630177093, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9629023250228197, log_density = 10.15126724427629, hamiltonian_energy = -8.14336059362012, hamiltonian_energy_error = -0.017727018799011063, max_hamiltonian_energy_error = 0.18593085059100112, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9762680158296685, log_density = 12.637192924529456, hamiltonian_energy = -4.681782842047199, hamiltonian_energy_error = -0.04361022283801663, max_hamiltonian_energy_error = -0.14248969989701799, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9958990992873511, log_density = 12.857764579858049, hamiltonian_energy = -11.712110272598197, hamiltonian_energy_error = -0.03625218964038801, max_hamiltonian_energy_error = -0.08381628419351195, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9887799121901892, log_density = 13.077519110979274, hamiltonian_energy = -11.954108975666427, hamiltonian_energy_error = -0.0024393849538135726, max_hamiltonian_energy_error = 0.053683638466285544, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9768160541724709, log_density = 12.448384652103535, hamiltonian_energy = -10.904949991260324, hamiltonian_energy_error = 0.03174102364175013, max_hamiltonian_energy_error = 0.061303827621948415, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9638650710026285, log_density = 10.085668578021895, hamiltonian_energy = -7.742197921765273, hamiltonian_energy_error = 0.045979754009528584, max_hamiltonian_energy_error = 0.12025407030000412, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.611691948361566, hamiltonian_energy = -8.501354706340928, hamiltonian_energy_error = -0.055894895812292233, max_hamiltonian_energy_error = -0.0953323021951018, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8886799550935738, log_density = 11.569598649129347, hamiltonian_energy = -8.069164646668273, hamiltonian_energy_error = 0.01742704583768173, max_hamiltonian_energy_error = 0.22774757596362694, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8896622915413608, log_density = 13.00178776601165, hamiltonian_energy = -6.556819301931192, hamiltonian_energy_error = 0.09082980448834999, max_hamiltonian_energy_error = 0.3449809009183875, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9728690161869428, log_density = 11.763210721393934, hamiltonian_energy = -10.137942937984644, hamiltonian_energy_error = 0.05583663961271412, max_hamiltonian_energy_error = 0.10254535596702397, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9935943573941276, log_density = 13.711841455192637, hamiltonian_energy = -10.564761313088727, hamiltonian_energy_error = -0.11801964594212677, max_hamiltonian_energy_error = -0.11801964594212677, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8691308438777307, log_density = 13.585389253515942, hamiltonian_energy = -10.794426730232825, hamiltonian_energy_error = 0.07846332854600213, max_hamiltonian_energy_error = 0.26661062556464543, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9795801021826199, log_density = 12.767019504875734, hamiltonian_energy = -10.865093080034605, hamiltonian_energy_error = 0.028269108606483684, max_hamiltonian_energy_error = 0.055322029580635146, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9683490168034095, log_density = 8.086964089539315, hamiltonian_energy = -6.870232576363454, hamiltonian_energy_error = 0.07120550819428839, max_hamiltonian_energy_error = 0.07389534059921399, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.932755815729448, log_density = 11.279146277146317, hamiltonian_energy = -6.255126283969335, hamiltonian_energy_error = -0.355144321941677, max_hamiltonian_energy_error = -0.355144321941677, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9943699494452031, log_density = 12.189926251552048, hamiltonian_energy = -10.545991233351039, hamiltonian_energy_error = 0.02428869512259091, max_hamiltonian_energy_error = -0.05168249444983708, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9744414957177426, log_density = 13.108949047739493, hamiltonian_energy = -8.683650837436826, hamiltonian_energy_error = -0.1274111824300448, max_hamiltonian_energy_error = -0.1274111824300448, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9897452093116953, log_density = 11.502294218120468, hamiltonian_energy = -10.41534873908892, hamiltonian_energy_error = 0.03940032987313202, max_hamiltonian_energy_error = -0.08073648502431752, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9738538083995762, log_density = 8.630036452401846, hamiltonian_energy = -7.262871579874364, hamiltonian_energy_error = 0.02223211489944177, max_hamiltonian_energy_error = -0.18841668337087825, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9660953783742255, log_density = 10.178797252743305, hamiltonian_energy = -7.120383661002773, hamiltonian_energy_error = 0.08010125232553023, max_hamiltonian_energy_error = 0.15239406547757195, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9120043438867567, log_density = 7.337420401228943, hamiltonian_energy = -5.74302951649271, hamiltonian_energy_error = 0.0799169693215811, max_hamiltonian_energy_error = 0.3850589110203648, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9897246356551224, log_density = 8.299875340037882, hamiltonian_energy = -5.971761216061053, hamiltonian_energy_error = -0.12668092865340785, max_hamiltonian_energy_error = -0.39471583595323523, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9674547959753236, log_density = 9.969434993678744, hamiltonian_energy = -4.37369836574597, hamiltonian_energy_error = -0.24238031244662306, max_hamiltonian_energy_error = -0.24238031244662306, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.995835123183047, log_density = 11.591877685607407, hamiltonian_energy = -6.020153999927748, hamiltonian_energy_error = -0.19350746561173437, max_hamiltonian_energy_error = -0.2230507892532838, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.688540645371571, log_density = 9.239207044609572, hamiltonian_energy = -8.323686843803833, hamiltonian_energy_error = 0.4765700625827467, max_hamiltonian_energy_error = 0.4765700625827467, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9872417382646572, log_density = 12.960015182166508, hamiltonian_energy = -6.0825991420545975, hamiltonian_energy_error = -0.35523090603953467, max_hamiltonian_energy_error = -0.4520839336244089, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9901541291716333, log_density = 12.869719427653655, hamiltonian_energy = -12.074999869258223, hamiltonian_energy_error = -0.0053793866413816005, max_hamiltonian_energy_error = 0.03877226290605584, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9467711569719204, log_density = 12.385873540144633, hamiltonian_energy = -9.064588470851506, hamiltonian_energy_error = 0.10256442862589665, max_hamiltonian_energy_error = -0.20493532211925825, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9936304901747963, log_density = 9.93865225776436, hamiltonian_energy = -8.73911709770797, hamiltonian_energy_error = -0.016922504969061336, max_hamiltonian_energy_error = -0.14355056451283055, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.958564435369754, hamiltonian_energy = -8.435101819866004, hamiltonian_energy_error = -0.10697990039935767, max_hamiltonian_energy_error = -0.15341797923525036, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9043064189191777, log_density = 10.141798125191976, hamiltonian_energy = -8.591339188178408, hamiltonian_energy_error = 0.07602166186629056, max_hamiltonian_energy_error = 0.16190960425787182, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9297494313040154, log_density = 7.539216662922026, hamiltonian_energy = -5.7296123947031825, hamiltonian_energy_error = 0.09035724006039647, max_hamiltonian_energy_error = 0.16341056388436748, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.977981082806232, log_density = 12.065433818674705, hamiltonian_energy = -4.234870960522651, hamiltonian_energy_error = -0.35275374978784235, max_hamiltonian_energy_error = -0.35275374978784235, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9614450004434284, log_density = 9.907220267373786, hamiltonian_energy = -7.019813675548251, hamiltonian_energy_error = 0.12410244083151412, max_hamiltonian_energy_error = -0.2194765286516258, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.703513160368875, hamiltonian_energy = -9.108232764410443, hamiltonian_energy_error = -0.044111330370652624, max_hamiltonian_energy_error = -0.2247605487899378, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9923417123961368, log_density = 10.719977495035334, hamiltonian_energy = -8.929912590258809, hamiltonian_energy_error = -0.05414619708817625, max_hamiltonian_energy_error = -0.18057093566404347, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9773315046261271, log_density = 10.908066086896845, hamiltonian_energy = -7.739417044694619, hamiltonian_energy_error = 0.0016281831125795065, max_hamiltonian_energy_error = -0.22942990138194386, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9956287662100168, log_density = 12.094052949065883, hamiltonian_energy = -9.154962484129204, hamiltonian_energy_error = -0.037746358437967586, max_hamiltonian_energy_error = -0.037746358437967586, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9161216612117103, log_density = 10.682434599184928, hamiltonian_energy = -9.245916361053851, hamiltonian_energy_error = 0.1680450532618032, max_hamiltonian_energy_error = 0.20105759317936212, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.8153215418024382, log_density = 11.286839265647867, hamiltonian_energy = -6.0137901040771276, hamiltonian_energy_error = -0.10339682950457352, max_hamiltonian_energy_error = 0.7403238252495967, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9993430956172777, log_density = 12.395081231616349, hamiltonian_energy = -9.174395698157916, hamiltonian_energy_error = -0.23688860028007674, max_hamiltonian_energy_error = -0.31114363137115575, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7584417397741233, log_density = 5.771658166425187, hamiltonian_energy = -4.730232541960294, hamiltonian_energy_error = 0.6266162104258166, max_hamiltonian_energy_error = 0.6266162104258166, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.639666756356323, hamiltonian_energy = -3.0972310036478916, hamiltonian_energy_error = -0.4058490435099418, max_hamiltonian_energy_error = -0.4538782749722894, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9631985059760106, log_density = 12.469493789563593, hamiltonian_energy = -8.419356746817662, hamiltonian_energy_error = -0.04887242281305504, max_hamiltonian_energy_error = 0.21752669476460262, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.954172822002272, log_density = 13.171079037439872, hamiltonian_energy = -8.671460801678489, hamiltonian_energy_error = -0.10190474686457485, max_hamiltonian_energy_error = 0.1778953937289014, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9218745119367598, log_density = 12.266341657157728, hamiltonian_energy = -11.032865852262967, hamiltonian_energy_error = 0.11645838863698721, max_hamiltonian_energy_error = 0.1588470767750927, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9436654762081055, log_density = 12.754711043672296, hamiltonian_energy = -10.414984571277952, hamiltonian_energy_error = -0.09639553980626303, max_hamiltonian_energy_error = 0.18754418264418327, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9524858134510303, log_density = 11.822945867074543, hamiltonian_energy = -10.928674176908196, hamiltonian_energy_error = 0.06193417006448243, max_hamiltonian_energy_error = 0.08766962821533042, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9766289889090188, log_density = 12.173463925466779, hamiltonian_energy = -8.75207268795495, hamiltonian_energy_error = -0.0352525197556357, max_hamiltonian_energy_error = -0.1785385609570671, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9259016971411973, log_density = 6.944783565244212, hamiltonian_energy = -6.164735968539802, hamiltonian_energy_error = 0.15195028998369065, max_hamiltonian_energy_error = 0.15195028998369065, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9939521926079526, log_density = 10.256588017933137, hamiltonian_energy = -5.4953437484792325, hamiltonian_energy_error = -0.23200555131121803, max_hamiltonian_energy_error = -0.2902359766782254, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9775513462594647, log_density = 10.925398004596598, hamiltonian_energy = -8.030964369637779, hamiltonian_energy_error = -0.00452030552322924, max_hamiltonian_energy_error = -0.0971179280718033, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8979465808908397, log_density = 9.40307588420908, hamiltonian_energy = -6.924652974673854, hamiltonian_energy_error = 0.024215982002238512, max_hamiltonian_energy_error = 0.28202906977217257, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9358232882303458, log_density = 9.172006595165929, hamiltonian_energy = -6.837251661849779, hamiltonian_energy_error = -0.03468388577006287, max_hamiltonian_energy_error = 0.21614617539251935, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.976895477870167, log_density = 10.343454144375576, hamiltonian_energy = -6.618831196926892, hamiltonian_energy_error = -0.002414408148935898, max_hamiltonian_energy_error = -0.10260161180164751, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9644557206119888, log_density = 11.278624167236957, hamiltonian_energy = -5.594668268100084, hamiltonian_energy_error = -0.13920502739807095, max_hamiltonian_energy_error = -0.32305753833705353, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7304507649278975, log_density = 11.560700894676042, hamiltonian_energy = -5.061506773086537, hamiltonian_energy_error = -0.09644914512942826, max_hamiltonian_energy_error = 0.9921673879694994, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9727064089924585, log_density = 13.48520623772567, hamiltonian_energy = -9.972416076256078, hamiltonian_energy_error = -0.025709227407967106, max_hamiltonian_energy_error = 0.08326567385121031, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9886618608648381, log_density = 12.548301940727963, hamiltonian_energy = -11.489813154341007, hamiltonian_energy_error = 0.03485855242812619, max_hamiltonian_energy_error = -0.07022998465975228, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8853318596873821, log_density = 13.341115667209703, hamiltonian_energy = -7.089283006756825, hamiltonian_energy_error = 0.10424150341927874, max_hamiltonian_energy_error = 0.29694532767769033, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9831405167039746, log_density = 13.145629268164488, hamiltonian_energy = -12.28700926179028, hamiltonian_energy_error = -0.05818954549894073, max_hamiltonian_energy_error = -0.08569108482025989, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9571964064720023, log_density = 13.290529868145057, hamiltonian_energy = -11.632891843352635, hamiltonian_energy_error = 0.030034685877753375, max_hamiltonian_energy_error = 0.09492385365328104, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.994582526581647, log_density = 13.800711643765244, hamiltonian_energy = -12.748701805903753, hamiltonian_energy_error = -0.02099970740388457, max_hamiltonian_energy_error = -0.0319763722490638, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9726094609525312, log_density = 13.459067123607213, hamiltonian_energy = -12.036244999464493, hamiltonian_energy_error = -0.011283857499858385, max_hamiltonian_energy_error = 0.06434472248120215, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8488260728684782, log_density = 12.334374455723507, hamiltonian_energy = -10.915150167832302, hamiltonian_energy_error = 0.15438627003081073, max_hamiltonian_energy_error = 0.3086465688769593, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.986194295002759, log_density = 11.625459900058942, hamiltonian_energy = -10.815865852831957, hamiltonian_energy_error = 0.11680672712708784, max_hamiltonian_energy_error = -0.22041034556147032, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9999714591331752, log_density = 10.704878672605943, hamiltonian_energy = -8.829808461187477, hamiltonian_energy_error = 0.0004282046689052521, max_hamiltonian_energy_error = -0.36140357806546675, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9532667524170767, log_density = 10.814982344303276, hamiltonian_energy = -7.949228160776799, hamiltonian_energy_error = -0.17217201846436136, max_hamiltonian_energy_error = -0.29079250594927863, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9294555314968675, log_density = 7.534419425206188, hamiltonian_energy = -5.721021434810086, hamiltonian_energy_error = 0.2673751490321443, max_hamiltonian_energy_error = -0.29078298854167617, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 9.91506005482708, hamiltonian_energy = -6.471744180919362, hamiltonian_energy_error = -0.048633242823198586, max_hamiltonian_energy_error = -0.43858646724785544, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9845414797786742, log_density = 10.711678854737126, hamiltonian_energy = -7.73153487076578, hamiltonian_energy_error = -0.13134017600801418, max_hamiltonian_energy_error = -0.4030053459855818, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9987231215716849, log_density = 11.629428735569629, hamiltonian_energy = -9.077453095948638, hamiltonian_energy_error = -0.12971586656709988, max_hamiltonian_energy_error = -0.1726536012669726, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9847724446480237, log_density = 11.64404204671952, hamiltonian_energy = -10.486854918615947, hamiltonian_energy_error = 0.05429560217981155, max_hamiltonian_energy_error = -0.1269611612967676, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9882706557049203, log_density = 13.184900237144053, hamiltonian_energy = -8.936683834470857, hamiltonian_energy_error = -0.17259514302208423, max_hamiltonian_energy_error = -0.17259514302208423, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8342712890743288, log_density = 11.856455628521733, hamiltonian_energy = -10.400722647913309, hamiltonian_energy_error = 0.2081381147118595, max_hamiltonian_energy_error = 0.29148541688274676, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9850572392398629, log_density = 11.954208524553723, hamiltonian_energy = -9.11531952668126, hamiltonian_energy_error = -0.11185427121022684, max_hamiltonian_energy_error = -0.22738016511569903, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8984977658229423, log_density = 10.382939752008996, hamiltonian_energy = -8.906622794767395, hamiltonian_energy_error = 0.1661175725045272, max_hamiltonian_energy_error = 0.23209064780491495, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 1.0, log_density = 12.296302778936584, hamiltonian_energy = -9.234666560331398, hamiltonian_energy_error = -0.049067490789536095, max_hamiltonian_energy_error = -0.21446357773285385, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9895641697767334, log_density = 12.653765076001644, hamiltonian_energy = -11.03511127189537, hamiltonian_energy_error = -0.024946706296059773, max_hamiltonian_energy_error = -0.15211080854014547, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9765914637080425, log_density = 12.166081833715252, hamiltonian_energy = -11.116520580770295, hamiltonian_energy_error = 0.05438292632796937, max_hamiltonian_energy_error = -0.15522043785142792, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.996269377934839, log_density = 9.81618944423138, hamiltonian_energy = -8.032328876891105, hamiltonian_energy_error = 0.026461389271492664, max_hamiltonian_energy_error = -0.2315681876823259, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9975765226921862, log_density = 10.534423029028982, hamiltonian_energy = -7.57717200387396, hamiltonian_energy_error = -0.04353210535311014, max_hamiltonian_energy_error = -0.1646005399211372, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9558813224629586, log_density = 8.72739903529128, hamiltonian_energy = -6.122168299798751, hamiltonian_energy_error = -0.036000671553885866, max_hamiltonian_energy_error = 0.15474385688515646, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.994409811459508, log_density = 10.301108948074702, hamiltonian_energy = -8.244610966461366, hamiltonian_energy_error = -0.09135216837037063, max_hamiltonian_energy_error = -0.256604041719136, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9239715107046994, log_density = 10.519800232094168, hamiltonian_energy = -7.765163390157381, hamiltonian_energy_error = -0.028950333411867923, max_hamiltonian_energy_error = 0.22548679373375702, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6471423409105507, log_density = 10.797236592444214, hamiltonian_energy = -1.6889503504587626, hamiltonian_energy_error = 0.11632308464945851, max_hamiltonian_energy_error = 1.0117810812591634, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9998425539075726, log_density = 10.622215355124313, hamiltonian_energy = -7.254540091952118, hamiltonian_energy_error = -0.1459640595758085, max_hamiltonian_energy_error = -0.21650242636177452, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9758414042867194, log_density = 8.735294891723953, hamiltonian_energy = -6.743599901865652, hamiltonian_energy_error = -0.013849639592601548, max_hamiltonian_energy_error = -0.1301613560434145, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9935413917490183, log_density = 12.819507118382877, hamiltonian_energy = -7.289680843175744, hamiltonian_energy_error = -0.010252839086707155, max_hamiltonian_energy_error = -0.047531145518889595, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9961443487419306, log_density = 12.22536735793645, hamiltonian_energy = -11.223819038827152, hamiltonian_energy_error = 0.029431140949771617, max_hamiltonian_energy_error = -0.12059840625447826, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9659180411817244, log_density = 11.047711978080791, hamiltonian_energy = -8.73867646660836, hamiltonian_energy_error = 0.002117106592006479, max_hamiltonian_energy_error = 0.11714715658303021, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9551551414141826, log_density = 11.998249237155006, hamiltonian_energy = -9.64510648587146, hamiltonian_energy_error = 0.00210568660608601, max_hamiltonian_energy_error = 0.16201702276121388, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.4117196320405404, log_density = 9.990267543769013, hamiltonian_energy = -1.6395049535506274, hamiltonian_energy_error = 0.6778487315643211, max_hamiltonian_energy_error = 1.555636252404799, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.991124837610353, log_density = 11.550502538353447, hamiltonian_energy = -9.084321891799025, hamiltonian_energy_error = -0.09831010381167182, max_hamiltonian_energy_error = -0.17588794592835377, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9721410475742778, log_density = 11.441789214721613, hamiltonian_energy = -10.17039520381856, hamiltonian_energy_error = 0.05792483849119989, max_hamiltonian_energy_error = 0.05946591004413371, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9996121133754252, log_density = 10.337431996239268, hamiltonian_energy = -8.69637333010327, hamiltonian_energy_error = -0.1430018359339158, max_hamiltonian_energy_error = -0.1430018359339158, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8748204011270632, log_density = 9.551685504441823, hamiltonian_energy = -7.000158857901145, hamiltonian_energy_error = 0.20755343599247222, max_hamiltonian_energy_error = 0.2423659457536269, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9874965338786819, log_density = 8.36833655458349, hamiltonian_energy = -5.723779700337117, hamiltonian_energy_error = 0.038737003046694696, max_hamiltonian_energy_error = -0.18675618072195377, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.996557187124427, log_density = 7.40911573694031, hamiltonian_energy = -5.77904882181107, hamiltonian_energy_error = -0.06846821463465069, max_hamiltonian_energy_error = -0.3428839258638883, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9810659867996308, log_density = 11.052586054113098, hamiltonian_energy = -3.2262048960761023, hamiltonian_energy_error = -0.32016168031833026, max_hamiltonian_energy_error = -0.4251126325301806, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.891150200198731, log_density = 12.047999850143558, hamiltonian_energy = -8.249971979286027, hamiltonian_energy_error = -0.06394107581758668, max_hamiltonian_energy_error = 0.3572549436162289, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9306883492407102, log_density = 12.103834366642118, hamiltonian_energy = -10.749117205390755, hamiltonian_energy_error = 0.048244604098064414, max_hamiltonian_energy_error = 0.10474489477010174, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8235091023804452, log_density = 12.86224181405044, hamiltonian_energy = -7.585038468860778, hamiltonian_energy_error = -0.17528452165369046, max_hamiltonian_energy_error = 0.576174122534181, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9941775254051933, log_density = 12.353042362785441, hamiltonian_energy = -11.224560886219034, hamiltonian_energy_error = 0.004112245881371379, max_hamiltonian_energy_error = -0.0540267567339594, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9607071782341338, log_density = 13.547228348934455, hamiltonian_energy = -9.6106695676074, hamiltonian_energy_error = -0.05460741400975877, max_hamiltonian_energy_error = 0.10461290000326962, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9479191770115328, log_density = 12.411622155998751, hamiltonian_energy = -10.982935741089964, hamiltonian_energy_error = 0.07048442861662174, max_hamiltonian_energy_error = 0.10181775131258775, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9954773193562754, log_density = 12.53609426577427, hamiltonian_energy = -10.888124938438969, hamiltonian_energy_error = -0.05190863357207043, max_hamiltonian_energy_error = -0.09416023032997956, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9950976720842009, log_density = 13.529723508896959, hamiltonian_energy = -11.96187083092117, hamiltonian_energy_error = -0.030592271082056754, max_hamiltonian_energy_error = -0.0646920094577208, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9848667914020284, log_density = 13.765443614018222, hamiltonian_energy = -12.997251400847718, hamiltonian_energy_error = -0.0009215383880949446, max_hamiltonian_energy_error = 0.037088737349334266, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9762254847526021, log_density = 12.497076232981001, hamiltonian_energy = -12.127189649833317, hamiltonian_energy_error = 0.021254695076216024, max_hamiltonian_energy_error = 0.04672620738247346, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9364399614746727, log_density = 13.234929950285963, hamiltonian_energy = -9.326808577671777, hamiltonian_energy_error = 0.04360691321195276, max_hamiltonian_energy_error = 0.1876102411353795, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9969150610852561, log_density = 12.469781854898086, hamiltonian_energy = -9.811827379716163, hamiltonian_energy_error = -0.02998367689982473, max_hamiltonian_energy_error = -0.07337582155760103, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9205481656310898, log_density = 13.065998607411206, hamiltonian_energy = -10.580770313948346, hamiltonian_energy_error = 0.0018698513229402636, max_hamiltonian_energy_error = 0.2175222241940027, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9470083107205916, log_density = 12.610511430205886, hamiltonian_energy = -10.703964522858227, hamiltonian_energy_error = 0.0640669631416948, max_hamiltonian_energy_error = 0.1420183565063553, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.89110027746567, log_density = 11.43535985931764, hamiltonian_energy = -8.462155423862159, hamiltonian_energy_error = -0.006221887668077741, max_hamiltonian_energy_error = 0.27311829718878755, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9962150620970047, log_density = 12.30481105724901, hamiltonian_energy = -11.00817730362203, hamiltonian_energy_error = -0.045464050860029914, max_hamiltonian_energy_error = -0.045464050860029914, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9711591016511127, log_density = 11.932265639459947, hamiltonian_energy = -10.83385530460372, hamiltonian_energy_error = 0.03034869713474997, max_hamiltonian_energy_error = 0.05416920537111736, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9801063451505065, log_density = 12.99068477689191, hamiltonian_energy = -10.225184668113007, hamiltonian_energy_error = -0.005191393948722478, max_hamiltonian_energy_error = 0.079978779476086, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9638174722990015, log_density = 10.55102061242692, hamiltonian_energy = -8.013123991207776, hamiltonian_energy_error = 0.030491478082273815, max_hamiltonian_energy_error = 0.11786306265055835, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9880755104695345, log_density = 12.176602844241287, hamiltonian_energy = -10.025181949387505, hamiltonian_energy_error = -0.015069361260136915, max_hamiltonian_energy_error = 0.0413307081527261, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9521908459936337, log_density = 10.90019157241376, hamiltonian_energy = -8.229833675460029, hamiltonian_energy_error = 0.060910896853130225, max_hamiltonian_energy_error = 0.10395838500838472, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.992003961016642, log_density = 11.952171702596461, hamiltonian_energy = -8.691450390715005, hamiltonian_energy_error = -0.04501779079499357, max_hamiltonian_energy_error = -0.14602509220842386, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8654153186081643, log_density = 10.285000587816516, hamiltonian_energy = -8.790852326716532, hamiltonian_energy_error = 0.21333534849420666, max_hamiltonian_energy_error = 0.2979944767379692, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9921449607372339, log_density = 10.828043318573872, hamiltonian_energy = -7.887914453561514, hamiltonian_energy_error = -0.0007536125952007922, max_hamiltonian_energy_error = -0.3037227463749126, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9452094770767995, log_density = 11.239112988470554, hamiltonian_energy = -8.293455874366565, hamiltonian_energy_error = 0.07019333402968186, max_hamiltonian_energy_error = -0.2300452062221865, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9741955230344566, log_density = 9.713128459218277, hamiltonian_energy = -8.3717307529028, hamiltonian_energy_error = -0.040473862354611256, max_hamiltonian_energy_error = -0.335384642416388, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.607847834081419, hamiltonian_energy = -8.451828408667424, hamiltonian_energy_error = -0.08719613282554661, max_hamiltonian_energy_error = -0.23753563820940649, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9625705654715264, log_density = 9.448543030645407, hamiltonian_energy = -8.552613781995397, hamiltonian_energy_error = 0.13136532961130065, max_hamiltonian_energy_error = -0.19998387535957285, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9574489593661873, log_density = 11.037062122686836, hamiltonian_energy = -2.887826611754763, hamiltonian_energy_error = -0.07324422784642692, max_hamiltonian_energy_error = 0.3151652054699827, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9929285413497334, log_density = 12.33241627866921, hamiltonian_energy = -10.44529092056784, hamiltonian_energy_error = -0.15740276559860433, max_hamiltonian_energy_error = -0.2902140767421617, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9939336622590764, log_density = 12.953576909290504, hamiltonian_energy = -11.124878840074652, hamiltonian_energy_error = -0.04116687737671221, max_hamiltonian_energy_error = -0.08535853585145148, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9926545325903976, log_density = 13.012463311840822, hamiltonian_energy = -12.126469365403011, hamiltonian_energy_error = 0.041560313038988994, max_hamiltonian_energy_error = -0.07081156743221939, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9947688006445428, log_density = 11.05550319196918, hamiltonian_energy = -8.190837850002108, hamiltonian_energy_error = -0.049182859737598505, max_hamiltonian_energy_error = -0.23667582653392394, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9825539217265046, log_density = 9.796574672361489, hamiltonian_energy = -8.76593443576658, hamiltonian_energy_error = 0.04989295339668942, max_hamiltonian_energy_error = 0.05710719860717717, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9685458216930489, log_density = 11.418616487706283, hamiltonian_energy = -7.643102161679785, hamiltonian_energy_error = 0.03235294719539539, max_hamiltonian_energy_error = -0.18078921350860355, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9949940919094067, log_density = 9.521212706738131, hamiltonian_energy = -7.906238104891864, hamiltonian_energy_error = -0.10696016464246583, max_hamiltonian_energy_error = -0.28104941735839795, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9987057018439718, log_density = 11.0080284110831, hamiltonian_energy = -7.390654783030449, hamiltonian_energy_error = -0.09199777943193066, max_hamiltonian_energy_error = -0.2228011210129397, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9819007026483303, log_density = 10.765151447034583, hamiltonian_energy = -8.444152479331025, hamiltonian_energy_error = -0.0076482656394407655, max_hamiltonian_energy_error = -0.16433309958636144, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9986212454155887, log_density = 12.285807267462417, hamiltonian_energy = -10.132030591271093, hamiltonian_energy_error = -0.06206187545904385, max_hamiltonian_energy_error = -0.1032243830671753, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8958823909910812, log_density = 9.908671576497003, hamiltonian_energy = -9.49486245541443, hamiltonian_energy_error = 0.23823807879714032, max_hamiltonian_energy_error = 0.23823807879714032, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.26013416322493, hamiltonian_energy = -8.860565171072334, hamiltonian_energy_error = -0.05403397241606278, max_hamiltonian_energy_error = -0.28171703814201443, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9960479156779017, log_density = 10.970927798937435, hamiltonian_energy = -9.758456708276476, hamiltonian_energy_error = -0.040698886391451694, max_hamiltonian_energy_error = -0.24164116717951067, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9628745113424363, log_density = 9.827504778245373, hamiltonian_energy = -9.397337935180216, hamiltonian_energy_error = 0.08773667873566104, max_hamiltonian_energy_error = -0.14791158221437328, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9969184249545686, log_density = 10.990267574646774, hamiltonian_energy = -7.863341549307792, hamiltonian_energy_error = 0.00594400199486067, max_hamiltonian_energy_error = -0.2348313757076923, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9739382092388766, log_density = 12.765740260616417, hamiltonian_energy = -9.110815972637159, hamiltonian_energy_error = -0.09861526014120159, max_hamiltonian_energy_error = -0.19434506399184848, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.9996528793572729, log_density = 12.909400515803108, hamiltonian_energy = -12.357591546428331, hamiltonian_energy_error = 0.004557061572356247, max_hamiltonian_energy_error = -0.08232793293835172, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8125056228269825, log_density = 10.107741706014025, hamiltonian_energy = -4.730492731520439, hamiltonian_energy_error = 0.2863612986516868, max_hamiltonian_energy_error = 0.38621312630185134, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 1.0, log_density = 12.674657925309951, hamiltonian_energy = -7.61491620573591, hamiltonian_energy_error = -0.28150413504829697, max_hamiltonian_energy_error = -0.3730516049934609, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9915695509126118, log_density = 13.240784741651623, hamiltonian_energy = -10.44875638117937, hamiltonian_energy_error = -0.0745910663774616, max_hamiltonian_energy_error = -0.0789830534599485, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9924759006522691, log_density = 12.891524753718677, hamiltonian_energy = -10.717402114608793, hamiltonian_energy_error = -0.00026696985250573846, max_hamiltonian_energy_error = 0.030475913567517665, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9538854769515444, log_density = 10.13995370018311, hamiltonian_energy = -9.33100357385187, hamiltonian_energy_error = 0.09789364858925254, max_hamiltonian_energy_error = 0.09999583898951947, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9975138032336212, log_density = 13.138887155081726, hamiltonian_energy = -8.148686168261824, hamiltonian_energy_error = -0.19078621274559104, max_hamiltonian_energy_error = -0.19078621274559104, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8963049521038728, log_density = 11.474578715320236, hamiltonian_energy = -10.936095936101632, hamiltonian_energy_error = 0.18785539583691424, max_hamiltonian_energy_error = 0.18785539583691424, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9969283472347354, log_density = 11.89851971886975, hamiltonian_energy = -10.1765805802495, hamiltonian_energy_error = -0.0670730617175348, max_hamiltonian_energy_error = -0.13081694197010485, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9890334486672464, log_density = 12.935338326991753, hamiltonian_energy = -10.542963821201518, hamiltonian_energy_error = -0.05972692858492934, max_hamiltonian_energy_error = -0.068419819614018, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9676889702051106, log_density = 13.664989929680152, hamiltonian_energy = -11.794021157779863, hamiltonian_energy_error = -0.027935400796049947, max_hamiltonian_energy_error = 0.09226016640170798, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8631802964674095, log_density = 11.549903256580947, hamiltonian_energy = -8.581110935974806, hamiltonian_energy_error = 0.12601928702333076, max_hamiltonian_energy_error = 0.29126096065345664, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.970311570201801, log_density = 12.548191304218946, hamiltonian_energy = -8.671235199868963, hamiltonian_energy_error = -0.21856148655038155, max_hamiltonian_energy_error = -0.26283072820427655, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.7954709419935581, log_density = 12.657562179505312, hamiltonian_energy = -8.39339775238815, hamiltonian_energy_error = 0.00901676502600779, max_hamiltonian_energy_error = 0.5891901923707454, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8601837053716674, log_density = 9.71855034346587, hamiltonian_energy = -8.902863110222695, hamiltonian_energy_error = 0.27180102803343864, max_hamiltonian_energy_error = 0.3787689856091543, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9874154465059861, log_density = 10.29356195175925, hamiltonian_energy = -7.950652822587344, hamiltonian_energy_error = -0.00974981823943466, max_hamiltonian_energy_error = -0.3236600153503524, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9772292716031287, log_density = 10.428050534183631, hamiltonian_energy = -6.528146986742953, hamiltonian_energy_error = -0.09716319909323712, max_hamiltonian_energy_error = -0.3431520499487286, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9963430957359937, log_density = 12.510257331601618, hamiltonian_energy = -6.997486573553673, hamiltonian_energy_error = -0.24321136271242594, max_hamiltonian_energy_error = -0.24321136271242594, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.572865428216101, hamiltonian_energy = -12.217537477767095, hamiltonian_energy_error = -0.06135273218653836, max_hamiltonian_energy_error = -0.06135273218653836, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8217577143858164, log_density = 10.888319870310843, hamiltonian_energy = -6.688400716831921, hamiltonian_energy_error = 0.3289892035264437, max_hamiltonian_energy_error = 0.3861855649601349, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9662218912613812, log_density = 13.470817389746765, hamiltonian_energy = -9.693300804003009, hamiltonian_energy_error = -0.2928813958296299, max_hamiltonian_energy_error = -0.2928813958296299, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.790682703150881, log_density = 11.850678260808206, hamiltonian_energy = -10.781279254684996, hamiltonian_energy_error = 0.2603407140031013, max_hamiltonian_energy_error = 0.41904168940842546, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9457612671809682, log_density = 10.699701903245725, hamiltonian_energy = -8.100579024117124, hamiltonian_energy_error = 0.01623281259881537, max_hamiltonian_energy_error = -0.23695668291856897, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.78383341132508, hamiltonian_energy = -10.142389708495795, hamiltonian_energy_error = -0.16242426368738805, max_hamiltonian_energy_error = -0.2955589203201665, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9927441106805367, log_density = 12.59428204645537, hamiltonian_energy = -10.82046599882361, hamiltonian_energy_error = -0.08840580058851089, max_hamiltonian_energy_error = -0.16218633011465933, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9381723442659566, log_density = 13.31878934668275, hamiltonian_energy = -10.083645009964666, hamiltonian_energy_error = -0.10234006472067136, max_hamiltonian_energy_error = 0.14811765995096415, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9466343195958267, log_density = 13.008549467228683, hamiltonian_energy = -11.76475456546031, hamiltonian_energy_error = 0.011386024848363263, max_hamiltonian_energy_error = 0.1028398085480422, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9686488946699189, log_density = 10.873917314998351, hamiltonian_energy = -10.554302434633907, hamiltonian_energy_error = 0.04064120405414151, max_hamiltonian_energy_error = 0.048554344447820696, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9898523199555964, log_density = 11.213363377913105, hamiltonian_energy = -10.04368194363572, hamiltonian_energy_error = 0.029876463867541503, max_hamiltonian_energy_error = -0.05257528078345963, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.900742285047222, log_density = 8.403209214645733, hamiltonian_energy = -6.1861018550049565, hamiltonian_energy_error = 0.2621394345279606, max_hamiltonian_energy_error = 0.39863277619117454, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.990978954731423, log_density = 9.879039304946378, hamiltonian_energy = -6.943543250466194, hamiltonian_energy_error = -0.007436220474472677, max_hamiltonian_energy_error = -0.0909749864645768, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9829136667180504, log_density = 11.320957619482522, hamiltonian_energy = -8.339930828266539, hamiltonian_energy_error = 0.06624203668043727, max_hamiltonian_energy_error = -0.20893415003770777, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9590931191604196, log_density = 10.643160492008246, hamiltonian_energy = -7.956570880158454, hamiltonian_energy_error = -0.11600195688544979, max_hamiltonian_energy_error = -0.16564157024567017, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.994500080047762, log_density = 8.985176322107609, hamiltonian_energy = -8.632784133316283, hamiltonian_energy_error = 0.02357939314279278, max_hamiltonian_energy_error = -0.14060359271862666, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.980352659417136, log_density = 9.82386371891359, hamiltonian_energy = -8.220997106495359, hamiltonian_energy_error = 0.03471137683471248, max_hamiltonian_energy_error = 0.07099523571238109, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9996674563949189, log_density = 10.051884507358693, hamiltonian_energy = -8.16532585333653, hamiltonian_energy_error = -0.02235469714316629, max_hamiltonian_energy_error = -0.19793905025106717, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.944941031778655, log_density = 11.13868366874446, hamiltonian_energy = -8.470611197661128, hamiltonian_energy_error = -0.028715793884714458, max_hamiltonian_energy_error = -0.18454717540700472, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7666207670706582, log_density = 10.139499581911588, hamiltonian_energy = -6.751766286898521, hamiltonian_energy_error = 0.2027214761648315, max_hamiltonian_energy_error = 0.6281565123343613, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8624860220114442, log_density = 7.458645210826749, hamiltonian_energy = -4.154319306204581, hamiltonian_energy_error = 0.04132933653405679, max_hamiltonian_energy_error = 0.4843145156751065, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.540138845548343, hamiltonian_energy = -6.778765556766867, hamiltonian_energy_error = -0.2587057394844541, max_hamiltonian_energy_error = -0.2587057394844541, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9576422373966426, log_density = 9.285571669955395, hamiltonian_energy = -6.287241909973819, hamiltonian_energy_error = 0.029050196387901295, max_hamiltonian_energy_error = 0.15425016109883316, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.7894811013268999, log_density = 8.024987805628664, hamiltonian_energy = -2.03739923926016, hamiltonian_energy_error = 0.29983751775865475, max_hamiltonian_energy_error = 0.5658595189406492, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.334748489620736, hamiltonian_energy = -7.4353065368780324, hamiltonian_energy_error = -0.16244773545890645, max_hamiltonian_energy_error = -0.3664838220549589, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.961841852223061, log_density = 11.722861187804746, hamiltonian_energy = -8.291485223109802, hamiltonian_energy_error = -0.07539113854726942, max_hamiltonian_energy_error = -0.268140191173007, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9697723719938727, log_density = 11.904464976532273, hamiltonian_energy = -7.98033522935308, hamiltonian_energy_error = 0.20391153365457892, max_hamiltonian_energy_error = 0.20391153365457892, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9600892775854947, log_density = 12.747561441229347, hamiltonian_energy = -9.379516208102476, hamiltonian_energy_error = -0.01632716131358336, max_hamiltonian_energy_error = -0.2217893851296946, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9912880285145544, log_density = 13.31972601382687, hamiltonian_energy = -11.647185694473725, hamiltonian_energy_error = -0.07898079008113612, max_hamiltonian_energy_error = -0.11919354156726847, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9611176785401884, log_density = 12.84822695048521, hamiltonian_energy = -11.758555114146514, hamiltonian_energy_error = 0.06122570266754224, max_hamiltonian_energy_error = 0.08440807373029635, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9764759605899499, log_density = 13.91605889348072, hamiltonian_energy = -11.83259967770826, hamiltonian_energy_error = -0.09779849399096108, max_hamiltonian_energy_error = -0.09779849399096108, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9427963059660762, log_density = 12.457761997434655, hamiltonian_energy = -10.945002705852163, hamiltonian_energy_error = 0.07856131191680227, max_hamiltonian_energy_error = 0.10889941518069968, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9450526495822268, log_density = 11.23899013147344, hamiltonian_energy = -9.179622562726584, hamiltonian_energy_error = 0.09195138459704388, max_hamiltonian_energy_error = 0.16487198562266592, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.986168755706795, log_density = 10.842486473864664, hamiltonian_energy = -9.47410837814925, hamiltonian_energy_error = -0.004183670798983741, max_hamiltonian_energy_error = -0.1923827919601777, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8715016917412559, log_density = 10.908030994288325, hamiltonian_energy = -6.832496393368236, hamiltonian_energy_error = 0.037373433124769484, max_hamiltonian_energy_error = 0.2787676549808271, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9309990894256026, log_density = 12.150188939015532, hamiltonian_energy = -5.683865119584879, hamiltonian_energy_error = -0.20232444919671888, max_hamiltonian_energy_error = 0.37417200538065476, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.84605841967902, log_density = 11.256295675407149, hamiltonian_energy = -8.390416694532815, hamiltonian_energy_error = 0.17697415685175422, max_hamiltonian_energy_error = 0.30525506335888863, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9307364875127269, log_density = 4.259115753172303, hamiltonian_energy = -3.3986081897685816, hamiltonian_energy_error = 0.15269933133596947, max_hamiltonian_energy_error = -0.1933054714277631, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9991608008231603, log_density = 8.690627536086335, hamiltonian_energy = -3.5416174917950727, hamiltonian_energy_error = -0.10726057477631379, max_hamiltonian_energy_error = -0.48296728769166286, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9974036709230518, log_density = 10.062142963048455, hamiltonian_energy = -6.2395802611287365, hamiltonian_energy_error = -0.07502531850896066, max_hamiltonian_energy_error = -0.41202565376722866, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.988656297874875, log_density = 11.169434177148734, hamiltonian_energy = -7.72286756339015, hamiltonian_energy_error = -0.15638043881575658, max_hamiltonian_energy_error = -0.3256435595595377, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.672176950267142, hamiltonian_energy = -9.297327256638628, hamiltonian_energy_error = -0.08355922680742722, max_hamiltonian_energy_error = -0.17043677063167628, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9889756929658645, log_density = 12.31536577299007, hamiltonian_energy = -9.935046312287836, hamiltonian_energy_error = -0.04627217529004746, max_hamiltonian_energy_error = -0.06929944059497828, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9960594149510703, log_density = 13.554821901001954, hamiltonian_energy = -11.541030546294817, hamiltonian_energy_error = -0.1217890306151741, max_hamiltonian_energy_error = -0.1217890306151741, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.957061627937247, log_density = 12.675969146943782, hamiltonian_energy = -12.11055289138136, hamiltonian_energy_error = 0.034416312991741194, max_hamiltonian_energy_error = 0.07592950468285586, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8603986871617122, log_density = 11.93740676565952, hamiltonian_energy = -10.691221733970659, hamiltonian_energy_error = 0.196913571139552, max_hamiltonian_energy_error = 0.29638621229402773, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.9887711580188044, log_density = 13.161902103708945, hamiltonian_energy = -10.76471933714798, hamiltonian_energy_error = -0.14744520888645596, max_hamiltonian_energy_error = -0.17632065206342062, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9730492551756176, log_density = 13.692517208900144, hamiltonian_energy = -12.04320508563363, hamiltonian_energy_error = -0.006530245184132255, max_hamiltonian_energy_error = 0.06115910779356959, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9695834597680627, log_density = 13.172453730252451, hamiltonian_energy = -12.32963319798112, hamiltonian_energy_error = 0.02478443813631337, max_hamiltonian_energy_error = 0.062489924581731415, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9819730970849566, log_density = 14.0609509216769, hamiltonian_energy = -11.230228773470012, hamiltonian_energy_error = -0.08024213055265328, max_hamiltonian_energy_error = -0.08024213055265328, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8905848046864123, log_density = 10.048552841963087, hamiltonian_energy = -8.65950175056876, hamiltonian_energy_error = 0.15736455456272758, max_hamiltonian_energy_error = 0.21849970206939773, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9902512238340021, log_density = 9.250552895580764, hamiltonian_energy = -7.451970930983213, hamiltonian_energy_error = 0.026310201857917548, max_hamiltonian_energy_error = -0.12237078249862243, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9610747181428803, log_density = 11.238434725207753, hamiltonian_energy = -4.248856988277695, hamiltonian_energy_error = -0.020677082187667395, max_hamiltonian_energy_error = -0.21665791074403895, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9975794929222287, log_density = 11.08370403848688, hamiltonian_energy = -9.348599572958538, hamiltonian_energy_error = 0.01708873377415543, max_hamiltonian_energy_error = -0.1348086011221099, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9916338759391593, log_density = 12.359151094467933, hamiltonian_energy = -7.318282103278848, hamiltonian_energy_error = -9.456205555125052e-5, max_hamiltonian_energy_error = -0.18499917869381122, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8732943576948587, log_density = 11.07363482949982, hamiltonian_energy = -9.54157679204792, hamiltonian_energy_error = 0.19095779517049394, max_hamiltonian_energy_error = 0.2690472528902621, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.998612317153885, log_density = 11.325899524775165, hamiltonian_energy = -9.218553483998534, hamiltonian_energy_error = -0.11487290535385952, max_hamiltonian_energy_error = -0.31392833939008824, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.890164822683019, hamiltonian_energy = -10.943144659722579, hamiltonian_energy_error = -0.1523357150817386, max_hamiltonian_energy_error = -0.1523357150817386, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.953993551415266, log_density = 12.567660167394248, hamiltonian_energy = -8.798169189670697, hamiltonian_energy_error = 0.02501563419366981, max_hamiltonian_energy_error = 0.1491236724875158, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9500206195016972, log_density = 11.98540337044326, hamiltonian_energy = -11.537572120751454, hamiltonian_energy_error = 0.04531686779698951, max_hamiltonian_energy_error = 0.1116387900651894, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9989926853731685, log_density = 12.983552911730182, hamiltonian_energy = -11.417017909261194, hamiltonian_energy_error = -0.06431419285173234, max_hamiltonian_energy_error = -0.07712013131995121, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8983557013470033, log_density = 9.947846935539904, hamiltonian_energy = -9.01079811641774, hamiltonian_energy_error = 0.24611501065115426, max_hamiltonian_energy_error = 0.24611501065115426, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 55, is_accept = true, acceptance_rate = 0.9999243430257766, log_density = 11.662914319403914, hamiltonian_energy = -9.195009055033795, hamiltonian_energy_error = -0.08176986470999381, max_hamiltonian_energy_error = -0.279153487029447, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9566263936666559, log_density = 12.131200382130416, hamiltonian_energy = -9.709012988515791, hamiltonian_energy_error = -0.143831044094906, max_hamiltonian_energy_error = -0.19819220314862385, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9755816260740138, log_density = 11.057676713540644, hamiltonian_energy = -10.156954069690018, hamiltonian_energy_error = 0.06741062864538172, max_hamiltonian_energy_error = 0.0936424948017347, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9992347363165237, log_density = 13.006367439702457, hamiltonian_energy = -10.524612238361309, hamiltonian_energy_error = -0.06808475361667199, max_hamiltonian_energy_error = -0.19227031980380538, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9049424985338012, log_density = 13.486607835833189, hamiltonian_energy = -10.194076090652901, hamiltonian_energy_error = -0.013756794306001296, max_hamiltonian_energy_error = 0.26255007446917844, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.96961042934595, log_density = 12.744825297103056, hamiltonian_energy = -10.730351907416768, hamiltonian_energy_error = 0.002356807417807971, max_hamiltonian_energy_error = 0.09680790528028993, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9591038594236045, log_density = 13.110431983435188, hamiltonian_energy = -11.219697741720775, hamiltonian_energy_error = 0.01884715384003144, max_hamiltonian_energy_error = 0.093354200280924, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9770573888434114, log_density = 13.614681494875423, hamiltonian_energy = -11.695104913774381, hamiltonian_energy_error = 0.0025502368964858135, max_hamiltonian_energy_error = 0.07023279081882983, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8703346134254693, log_density = 11.423390745496839, hamiltonian_energy = -10.930333972090779, hamiltonian_energy_error = 0.22986188033299015, max_hamiltonian_energy_error = 0.22986188033299015, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9967914623986369, log_density = 11.711486481718888, hamiltonian_energy = -10.205237130767475, hamiltonian_energy_error = -0.08746203921067952, max_hamiltonian_energy_error = -0.20571876632850916, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.956309863258586, log_density = 13.151144598315067, hamiltonian_energy = -9.49392020764542, hamiltonian_energy_error = -0.12682268455074563, max_hamiltonian_energy_error = 0.1357873732304533, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9796925803654659, log_density = 11.888808037414671, hamiltonian_energy = -10.699084259646675, hamiltonian_energy_error = 0.039002614700546445, max_hamiltonian_energy_error = 0.07045281889010546, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9825014115369985, log_density = 11.961935601308788, hamiltonian_energy = -10.605793951839782, hamiltonian_energy_error = -0.06534025553669309, max_hamiltonian_energy_error = -0.07181349243170132, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.979476160123015, log_density = 11.889353046506827, hamiltonian_energy = -11.501495669152614, hamiltonian_energy_error = 0.0479007716978348, max_hamiltonian_energy_error = 0.0479007716978348, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9991919904160363, log_density = 12.059129703894026, hamiltonian_energy = -10.975756604642187, hamiltonian_energy_error = -0.00956649318354863, max_hamiltonian_energy_error = -0.13650477916889514, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9188537764867613, log_density = 12.177234600123057, hamiltonian_energy = -8.36210964335277, hamiltonian_energy_error = 0.08975674052697968, max_hamiltonian_energy_error = 0.16661752934911433, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9945501298327662, log_density = 12.934165713567811, hamiltonian_energy = -9.658957258509602, hamiltonian_energy_error = -0.018146489526461806, max_hamiltonian_energy_error = -0.09745183564928972, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.954200451926922, log_density = 12.485849126750619, hamiltonian_energy = -11.575575904815933, hamiltonian_energy_error = -0.014389549449818517, max_hamiltonian_energy_error = 0.13551059107306962, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.8281286377350423, log_density = 10.379551374234172, hamiltonian_energy = -9.041188987014438, hamiltonian_energy_error = 0.3471447129767693, max_hamiltonian_energy_error = 0.4926990310174908, tree_depth = 5, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9315324801360602, log_density = 12.187027283187401, hamiltonian_energy = -8.127191888951609, hamiltonian_energy_error = -0.2564370775338034, max_hamiltonian_energy_error = -0.29180504249696604, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9851306418225819, log_density = 12.303241137887909, hamiltonian_energy = -9.048946610973369, hamiltonian_energy_error = 0.009174683412428664, max_hamiltonian_energy_error = -0.06585444216948666, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7189088289663559, log_density = 6.586014152543427, hamiltonian_energy = -4.9434463959980555, hamiltonian_energy_error = 0.45021913930466884, max_hamiltonian_energy_error = 0.45021913930466884, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9757265828246796, log_density = 8.746308152729135, hamiltonian_energy = -4.840516234714215, hamiltonian_energy_error = -0.1915253694084038, max_hamiltonian_energy_error = -0.570360671116525, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9142139296767187, log_density = 6.812877891605726, hamiltonian_energy = -2.501736977762029, hamiltonian_energy_error = 0.10510148133037589, max_hamiltonian_energy_error = 0.4452232369517972, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9750604563131774, log_density = 8.33880176738029, hamiltonian_energy = -3.853156882272585, hamiltonian_energy_error = -0.0013722807730180975, max_hamiltonian_energy_error = -0.2965086240337609, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9705483568310004, log_density = 8.731594282618342, hamiltonian_energy = -5.45824610945477, hamiltonian_energy_error = -0.05657805309163688, max_hamiltonian_energy_error = -0.3114530448280597, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9750875837342364, log_density = 11.83595212966847, hamiltonian_energy = -7.496032191185893, hamiltonian_energy_error = -0.26120799530592986, max_hamiltonian_energy_error = -0.35090217035007587, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9962006473695785, log_density = 13.298470225009702, hamiltonian_energy = -10.025007013739422, hamiltonian_energy_error = -0.01953999798864281, max_hamiltonian_energy_error = -0.10760774705318887, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9927720178096571, log_density = 12.73364094430449, hamiltonian_energy = -10.744051662771213, hamiltonian_energy_error = -0.02957100513534172, max_hamiltonian_energy_error = -0.04995238732867335, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.908333645976044, log_density = 11.75161171557654, hamiltonian_energy = -11.084831724968572, hamiltonian_energy_error = 0.1357444212935981, max_hamiltonian_energy_error = 0.15713230113965615, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8868835587531605, log_density = 9.460432275850827, hamiltonian_energy = -7.37778196913412, hamiltonian_energy_error = 0.1929854958282986, max_hamiltonian_energy_error = 0.3028401570296806, tree_depth = 2, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9869868114960672, log_density = 8.762126718279399, hamiltonian_energy = -4.693724435970334, hamiltonian_energy_error = 0.015430855209495498, max_hamiltonian_energy_error = -0.33585026483341984, tree_depth = 3, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9998390942465204, log_density = 8.509963075458455, hamiltonian_energy = -6.386645217770827, hamiltonian_energy_error = -0.06899353261024199, max_hamiltonian_energy_error = -0.3395144623326889, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9908472162887987, log_density = 12.128714192496568, hamiltonian_energy = -5.807750010829794, hamiltonian_energy_error = -0.28873868901995436, max_hamiltonian_energy_error = -0.29747445838894926, tree_depth = 4, numerical_error = false, step_size = 0.12019705621689582, nom_step_size = 0.12019705621689582, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other WrappedGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising WrappedGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#AbstractGP","page":"Internals","title":"AbstractGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP and CompositeGP implement the AbstractGPs.jl API. Please refer to the AbstractGPs.jl docs for more info on this.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#WrappedGP","page":"Internals","title":"WrappedGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a WrappedGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = wrap(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for WrappedGPs in terms of the AbstractGP that they wrap. So if you want a particular behaviour, just make sure that the AbstractGP that you wrap has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = wrap(GP(mf, kf), gpc)\ng = wrap(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = wrap(GP(mf, kf), GPC())\ng = wrap(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and GPs. We describe the implemented transformations below.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of WrappedGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = wrap(GP(SEKernel()), gpc)\nf2 = wrap(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"}]
}
