var documenterSearchIndex = {"docs":
[{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = GPPPInput(:f3, randn(5))\n\ny = rand(f(x, 0.1))\n\nlogpdf(f(x, 0.1), y) ≈ elbo(f(x, 0.1), y, f(x, 1e-9))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPINput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the GP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = wrap(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we that makes use of a variety of packages from the Julia ecosystem. In particular, we'll make use of","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.05.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"17.48786877248046","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well.\n    s_noise = positive(0.1),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-0.9162907691270586, Bijectors.Exp{0}(), 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.6094379869399091, Bijectors.Exp{0}(), 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(1.6094379094538682, Bijectors.Exp{0}(), 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.490116130486996e-8, Bijectors.Exp{0}(), 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-2.3025852420056685, Bijectors.Exp{0}(), 1.4901161193847656e-8))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     1.162267e+01     3.205989e+01\n * time: 0.022855043411254883\n     1    -4.867724e+00     2.438779e+01\n * time: 1.3407728672027588\n     2    -7.368643e+00     2.268004e+01\n * time: 1.3516778945922852\n     3    -1.428596e+01     1.054969e+01\n * time: 1.4241359233856201\n     4    -1.737939e+01     1.386635e+00\n * time: 1.4347138404846191\n     5    -1.745281e+01     1.299748e+00\n * time: 1.4450879096984863\n     6    -1.770998e+01     1.686033e+00\n * time: 1.4554829597473145\n     7    -1.791979e+01     1.653216e+00\n * time: 1.4761030673980713\n     8    -1.803627e+01     1.111869e+00\n * time: 1.4864368438720703\n     9    -1.810236e+01     1.158042e+00\n * time: 1.4968159198760986\n    10    -1.814066e+01     2.311175e-01\n * time: 1.5122029781341553\n    11    -1.814745e+01     1.193247e-01\n * time: 1.5528819561004639\n    12    -1.814783e+01     2.725029e-02\n * time: 1.5632870197296143\n    13    -1.814785e+01     2.108346e-03\n * time: 1.5737030506134033\n    14    -1.814785e+01     1.750014e-04\n * time: 1.5841219425201416\n    15    -1.814785e+01     4.212615e-07\n * time: 1.5997390747070312\n    16    -1.814785e+01     2.312343e-08\n * time: 1.61533784866333\n    17    -1.814785e+01     1.653598e-11\n * time: 1.6308338642120361\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -0.9233302461391626\n -1.5581424154539563\n  1.7405306919449801\n -0.08363479790701622\n -2.120234852475914","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.4),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-0.9233302461391626, -1.5581424154539563, 1.7405306919449801, -0.08363479790701622, -2.120234852475914], [-0.9233302461391626, -1.5581424154539563, 1.7405306919449801, -0.08363479790701622, -2.120234852475914], [-0.2713387643605867, -1.5077727403671746, 1.284904241253861, -0.01803024555238856, -3.8010334873109004], [0.11065722792563147, -1.414758588346008, 1.4082937043565702, 0.1396849918232074, -3.2071275369572367], [-0.12029252263350543, -1.2715184866613547, 1.3922626117063763, 0.2959863211548527, -3.2393000446911495], [-0.21937865284826297, -1.0199923900253425, 0.9628369564869487, 0.2203385961635727, -3.607714319844568], [-0.12830089561776015, -1.2457307676404734, 1.0776263343330026, 0.13090308426971742, -3.3852501192991475], [0.2592638948002897, -0.4798761820808388, 0.8667176126631118, -0.08652267717393977, -3.3443006604851995], [0.2592638948002897, -0.4798761820808388, 0.8667176126631118, -0.08652267717393977, -3.3443006604851995], [0.28578853597787035, -0.4868641486160221, 0.8688345382688786, -0.06639088825495211, -3.3402744268787044], [-0.03352018822064236, -0.6514197947954844, 0.9114527418239297, 0.03717991017340243, -3.6439609768367927], [0.27854370533874984, -0.9473815432965524, 0.8236035720080556, -0.06970903568805599, -3.5100014876755714], [-0.37952690557550317, -1.073823520660914, 0.34996327464160093, 0.12699638360247992, -3.6691713289696986], [-0.5251967343665722, -1.1408001780411698, 0.33640992522668, 0.1987221603533953, -3.705836607911471], [-0.8628481593016315, -1.7760484570965787, 0.25119399933912734, -0.16472558728114306, -3.5444740251230282], [0.024729866685670676, -2.0366700418156354, 0.7049543960730442, -0.21590752312752298, -3.590244742357747], [-1.0553841974828013, -1.8309028141222337, 0.9246150519981342, -0.35231711939631344, -3.737047181929763], [-1.1042134554561305, -1.7068513225451516, 0.8363634981656892, -0.39080044082765353, -3.615616793157389], [-0.8438042003884372, -1.5869029898862765, 0.8368714770042593, 0.03467931450878012, -3.5522580533826393], [-0.8438042003884372, -1.5869029898862765, 0.8368714770042593, 0.03467931450878012, -3.5522580533826393], [-1.1029982815235702, -1.8845871938154488, 0.2454268380264667, -0.39681563813679666, -3.46065246693871], [-0.7627570700262689, -1.873387187311771, 0.1572129177952793, -0.42571975922211713, -3.317442477117099], [-0.9563097919448865, -1.5179825594846463, 1.1778694665592473, 0.026420437923379947, -3.4261223676401884], [-0.4416428483371268, -1.2674559396083709, 1.1585844500399545, 0.02831084206441098, -3.405857475350601], [-0.4574179385418475, -1.2220483788121825, 1.6165130538036614, 0.5911131353413795, -3.6340295968403584], [-0.3769845846454396, -1.8724420584543886, 1.9233803317669453, 0.27241580279164956, -3.4455653475448886], [-0.5221084622817341, -1.3492242128025849, 1.9871361395999991, 0.7489228939533676, -3.124653618805438], [-0.13962962780380955, -1.2314332829865724, 1.4746546248075867, 0.24437660754629853, -3.629014347626421], [0.04556354810425827, -1.2884054495292492, 1.537895131447359, 0.012979506939424595, -3.4106332343129204], [0.0710076974178002, -0.9165042462954892, 1.4394879682396708, -0.1426394604411928, -3.6050013465149195], [0.01580893875005346, -0.9087764763392185, 0.6719400083388609, -0.3433409868603997, -3.6124078277394975], [0.2842700866485055, -1.0628515546144186, 0.7561046625438587, -0.5425032514691346, -3.610625836401559], [0.2822588261868588, -0.6105088755516701, 1.364857456988689, 0.3830844870435582, -3.4825496973324057], [-0.08336264407568425, -1.1988360160797769, 1.4973292148214463, -0.26383248398085996, -3.4382505853016534], [0.18940363231484444, -0.3155561624128576, 0.5913769303713593, -0.0713578683680789, -3.445154408851016], [0.835444230629189, -0.1083600482937073, 0.07738384119804308, -0.6195085716196114, -3.64524316930533], [-0.03814372859465643, -0.6833727469254833, 1.236240397016899, -0.8572314326351348, -3.42333693340657], [0.42665296194156055, -0.2731600945989557, 0.9327950534857146, -0.43425770311998624, -3.4764045962959362], [1.3438719852482284, -0.6377412342087171, 0.07658500192957166, -0.6663785015472987, -3.5089097188475233], [1.2379039389953292, -0.30211279337439745, 0.07878619456697171, -1.2110816756116332, -3.513518860255825], [1.2379039389953292, -0.30211279337439745, 0.07878619456697171, -1.2110816756116332, -3.513518860255825], [0.5356013828110503, -0.10059934362966291, 0.6285563752245571, -1.1281261214181308, -3.2026073113941056], [0.20895686495909205, -0.09683236048099275, -0.6853784752518985, -1.7432092159717645, -3.4934767616844415], [0.9208026480884859, -0.28726053923165895, -0.5649399033720134, -1.8223064934695699, -3.5608705813111667], [0.5577652576281821, 0.08312770053689916, 0.8701599582292849, -1.153404137262445, -3.6483941569471963], [0.19928651524344157, -0.847539332648956, 1.3986780528082843, 0.10050474034936624, -3.7246959112253735], [-0.025563239000719745, -1.0133159363532147, 1.5323258710016998, -0.6614823370816436, -3.3121023695136804], [0.23413332134886916, -0.5863772552684496, 1.1248183456223544, 1.5139327699872263, -3.3379492101698673], [0.41248691034079077, -0.04203960720506042, 1.9463670230622994, -1.6081160599388675, -3.708985372691128], [0.14505166422367355, -0.7760677708243796, 0.7822694590896556, -0.16001484763625573, -3.3630241107077103], [0.16466229246511666, -0.7010951845072146, 1.0517869042502843, -0.19978169435179305, -3.6856160584844346], [0.7544631075980042, 0.43517717230090114, 0.3211504518409399, 0.048782472653693704, -3.7442534097357965], [1.6328085554555516, -0.5045604071435895, -0.15502436255050883, -1.617924400951176, -3.6981234668143603], [1.5423897759585747, -0.2476564673088083, -0.21111763453311252, -1.6043613390447269, -3.3454701333818733], [0.8362685378575998, -0.05415195312037015, -0.7240288946952934, -1.3177930823426112, -3.4671746872049987], [1.643565352330613, 0.009241449261155665, -0.8739106774872912, -1.7871104239662328, -3.7947754450460183], [1.1180254039201802, -0.03891394703241115, -0.5648311097119607, -1.0645821099735375, -3.802641894634782], [1.151304234723151, 0.20949875113618682, -0.5877857980838921, -1.5804043266436252, -3.5384983364462985], [0.2927408564320806, -0.2636204500843329, -1.3999952080413685, -2.5937291987996574, -3.6832735935174696], [0.9730705389398633, -0.07574025636464038, -0.4714858679541175, -1.3430436930123473, -3.3643176100874177], [1.2485477570244903, -0.2536693352212534, 0.03463396911392114, -0.3679953066155013, -3.3329744323333346], [1.361345429258285, -0.2843759780868226, 0.5952514001142264, -0.6249618182191706, -3.2581939548683123], [0.19879217643648203, -0.4748038779959961, 1.0782944694972112, -1.328510013032423, -3.353793745783411], [0.23550927923397663, -0.5006403614881386, 0.9068911804764738, -0.7865944977153436, -3.655244097055312], [-0.27655506333921415, -0.1980196982105374, 1.1111103619222669, -0.8633192852138554, -3.3467925813915755], [0.16230273557523825, -0.8996942330807532, 1.2964885902373386, -0.7562987060927017, -3.7128779269987082], [0.08041157456275408, -0.6057712802243622, 0.7846221496557618, 0.16237147238309066, -3.718034849848698], [0.34540260538073203, -0.11868632470955455, 0.6209205270415955, -0.9203324928089187, -3.453962357357662], [0.41290372121035857, 0.22238021179257744, 0.7815363365281798, -0.9627407608256341, -3.7360688492143375], [0.39343463170290743, 0.31759577915999637, 0.7635403028926384, -0.8928838177437576, -3.3976346444180114], [0.42066577334432387, -0.5102614400520009, 0.13910741649211594, -0.932133481355013, -3.6097203069499972], [0.26183469836503875, 0.3127684306612858, 0.7850348806568412, -1.25891597423035, -3.5512171884481836], [0.5803986020132975, 0.29298744836212387, 0.8299929900787086, -1.2365802915444577, -3.385170567593735], [-0.3732768774225754, -1.6877672297241175, 1.108350572889226, 0.26010290112913126, -3.6035479476362733], [-0.15871338243983005, -1.0191355479271798, 1.4385337780477723, 0.16911080504245835, -3.3935951893066116], [-0.1576006294542665, -0.6309267573263525, 1.4247590338956846, 0.26535645698110333, -3.2091867096475606], [0.2475019113755399, -0.406217138337381, 1.1872764061939405, -0.3668666602653067, -3.6639510936042257], [0.20059922557519339, -0.9763750038050215, 1.2714153101167236, 0.18703179770587408, -3.2143972605966598], [0.5410427923411892, 0.12984034667770317, 1.0374428838586687, -1.3437352398167364, -3.2377115535777334], [0.41981002891764935, -0.21340084157695513, 1.5075362690886878, -0.9929741564319159, -3.3959853087804195], [0.19841756042039319, -0.5221264691164725, 1.0897635627850568, 0.10041348436219139, -3.657632510993307], [-0.007060031274794293, -0.9923686488174418, 1.6868390216821996, -0.12252818010674074, -3.7314546088883365], [0.07969696744587165, -0.5910815391233256, 0.9150540410902499, -0.7696095572666503, -3.752028266465037], [0.3429759750737711, -0.07183233233618591, 0.601787247681624, -0.5967091019296398, -3.5324835423747682], [0.5472777755777506, 0.1830916476823223, 0.07986871386913413, -1.1197782158184828, -3.544030727132727], [0.3096133994919152, -0.22164081426411175, -0.4781742722748542, -2.8319626335684793, -3.4963919760194835], [0.37265312269451606, -0.05218688798478631, 0.8138931401646196, -0.9022514216696986, -3.530298632858574], [0.46211473476514753, 0.1381418348605209, 1.1611522193120947, -1.0094195586975168, -3.5649648713639386], [0.37626508853396895, 0.2669310457658762, 1.0065125597174123, -0.6171658777198338, -3.736636622386476], [0.15988352897845884, -0.9313290961775054, 1.4941967235147755, -0.35525710699107127, -3.4404044369085103], [0.056428685378965754, -0.5473788473580612, 1.5009899859159637, -0.10318445171357112, -3.5703390216186826], [0.551319775686229, 0.07832004145007349, 0.28914696650898947, -0.5371193601622173, -3.627034633985846], [0.306595110715454, -0.3973453767094939, 0.9971523239410908, 0.9152042358236381, -3.6682099737816825], [0.3243037024451225, -0.2719693401418112, 1.3430380981855277, 0.5870718383409133, -3.35353523216658], [-0.12415915926430274, -1.3469715153945856, 2.076641279003685, 0.6864710074160854, -3.36210452757023], [0.025117568144406438, -1.3690734332090735, 1.8523590852739593, 0.8344460902736746, -3.220034265540549], [0.288443624581708, -0.36339592865913234, 0.6364816381313836, -1.4749784478186632, -3.2032825299602914], [0.8944386488136754, -0.33171980351262603, 0.5100689704167323, -0.15209234700912747, -3.207390289265716], [0.784641386402619, -0.6669288665175312, 0.15151491538017042, -0.4388101005012675, -3.7862524833242843], [0.3126292114172354, -0.5320045629260424, 0.7866369428688723, -0.4431895235485606, -3.818888313415411], [0.40200752839412596, -0.4916154358277247, 0.618942921135348, -0.32498014425633753, -3.449078445647212], [-0.875594789953565, -1.2346327456291215, 1.7277115726978027, 0.11332552157804537, -3.6877901890976075], [-0.33372820119250424, -1.600226265722881, 1.3686750552166564, -0.19445401971599705, -3.404600578088584], [-0.12516833914355505, -1.9099295707658062, 1.7487458584241544, -0.26831384864613267, -3.4208611529108564], [-0.2415343732411007, -1.7326989265942332, 1.6744587723260402, -0.16623960036074759, -3.700343015375471], [-0.3410656994783557, -1.1569861992624966, 1.4050683624595313, 0.3269231643967604, -3.870374871999528], [0.644830416467161, -0.32621811517596344, 1.1354771343536458, -0.4850090299691146, -3.1330270354151377], [-0.3353283581931602, -1.0900373128660994, 1.294901440149904, -0.5255068827702393, -3.8511070278233372], [0.15189539346068773, -1.0524448972780833, 1.2784723715192192, -0.3409526489759292, -3.3712797792712363], [0.06017869616721761, -0.8596040127365145, 1.5249852727274784, 0.17403266917037097, -3.5553062651167044], [0.3424365860659269, -1.0685163402177837, 0.3287627019958456, -0.659493340006806, -3.445773816149906], [2.307491210631196, 1.062092144134361, 0.016336265861235627, -1.1473682956404474, -3.5370519317176474], [2.3798023608397396, 1.1062908499469584, 0.034493347313088646, -1.336696733792706, -3.71560896508098], [0.8319005915137276, -2.3617338756771997, 0.25007287318796956, -0.16133436847697294, -3.604162259887392], [1.0666734462659213, 0.4697311151095768, 0.18809301588874738, -0.8411788755534481, -3.60813151009589], [0.9978701532264314, -0.5561295468144081, 0.38816620424005843, -0.23640218157642146, -3.615914040908596], [0.7050767412341487, 0.23603872142922225, 0.5302039986153753, -0.2786934941789077, -3.2432092829850028], [0.42931671698957863, 0.07746560230362515, 0.08527330569869743, -0.8731922874996814, -3.097829541455318], [1.4891564111456848, -0.4839210568453841, 0.16560390400506506, -0.9312173006109407, -3.5471718431006147], [0.03381732131417492, -0.9829955092965205, 0.8862817491184041, -0.35193272949818527, -3.5936169718742317], [0.21769001623182513, -1.0515604032548334, 1.5021079414095975, 0.3360380457520095, -3.2096524290761876], [0.08375084947933376, -1.2545909410689426, 1.3441965799024924, -0.3582719454099029, -3.132668954925677], [-0.0755942929658907, -0.6851742883021597, 1.3607026241574098, -0.3206682001866336, -3.6477283452984315], [0.304960799521414, -0.26491782519842866, 0.4482613225374777, -0.3321117300060898, -3.3722893495113597], [-0.5130970010544552, -1.6628033545077188, 1.6613139577353204, 0.23702748585411093, -3.5833530571100507], [0.30113940226362934, -0.9310187282747097, 1.3831471614586044, 0.2274275154845678, -3.698013744523813], [-0.18695105389546957, -1.1197182598136366, 0.6488148713382449, -1.2460294158990093, -3.334530565105905], [0.013377729356034096, -1.1533797710579292, 0.5156818839353057, -1.1456155973342301, -3.1745996306571844], [0.21859285551671956, -0.3943007310056711, 1.109902464519149, 0.5315129298842264, -3.391497725891919], [-0.025976803486052167, -1.2782882963139084, 2.0803691092680427, 0.30521975374624394, -3.365272460168413], [-1.072906752076714, -1.780768085362048, 1.454569609447292, 0.5094494267724986, -3.8364944029532837], [-0.9664423086141566, -1.6908772313729954, 1.490112287692051, 0.3887590501891431, -3.6385753214233025], [-0.9664423086141566, -1.6908772313729954, 1.490112287692051, 0.3887590501891431, -3.6385753214233025], [-0.8626976311734529, -1.7015045838266205, 1.3049757700938298, 0.5859003284465112, -3.6273805427468186], [-0.8288308565671664, -1.526812352544031, 1.4033736908938341, 0.24664262132714615, -3.614661878840969], [-0.06829425806507072, -0.7549143544929203, 1.6505072493540653, 0.18941839132464197, -3.6061819617186455], [0.3885145756831135, -0.4993386347212812, 0.8508637775635094, -0.7613634394923761, -3.5906094688625756], [0.22990193022181127, -0.238919028783686, 1.0394588841177463, 0.14601004426154807, -3.476824244135832], [0.3235642456466217, -0.5783839763350038, 2.1945224884717534, 0.6026514562037788, -3.6023153263625027], [0.1881481876981663, -0.68303438379147, 1.8551747818010416, 0.3604415716653402, -3.415326768230558], [0.4520214696634824, -0.016628084526284795, 1.748788859862718, -1.0466345409822821, -3.3417813889807553], [0.3254934231995389, 0.16398893541675438, 1.9434616018994453, -1.3439086106989182, -3.373958915300671], [0.5963441394108663, 0.10504977070867236, 1.791965739509179, -1.3672345345864667, -3.3802895492795986], [0.1132600360566123, -1.830624139384148, 0.41447857729572146, 0.28487995420212014, -3.7175565662441956], [0.1743780316691752, -2.1670231319299096, 0.544176763886587, 0.4503344592722338, -3.1656428334037963], [0.5059073692745073, -1.5509958722733652, 0.36210191129076186, -0.016604695380991907, -3.20288469140455], [1.3972276863813708, 0.026634158105641348, 0.18592602831615695, -0.969558486113776, -3.490914938681045], [0.4106455802517161, -0.44915620759474767, -0.03273234038069679, -0.9539259837054436, -3.363098745152672], [1.7860671466681433, -0.3891829278670544, 0.20118672509514016, -0.8715185881651399, -3.582686817322994], [0.9604045331778795, -0.17625460165500226, 0.11633352000387055, -1.032017641745688, -3.5258833265014533], [1.4421677043053331, 0.8080561781992864, -0.6919446680269222, -1.346303988172619, -3.90237396335639], [0.2565011937997813, -0.12272399049733854, 0.2681968403680424, -0.7763156790669422, -3.761451200457849], [0.2841437461677509, -0.2101480023106151, 0.40496754810023233, -0.6057141844884473, -3.3554855106294954], [0.49578677277701905, -0.3196770796700446, 0.3057783896700005, -0.26405904492748344, -3.5062104219696875], [0.22254775332661697, -0.713959033054727, 1.1686843112629874, -0.07091076847032927, -3.521044674331509], [0.17160807654294064, -0.6267666144997928, 0.909866077260658, -0.3608620629577958, -3.572006406997446], [-0.3010315000708028, -1.9878339461541021, 0.3220461178507293, -0.24708361888299996, -3.442327161999753], [-0.6022594519237037, -1.7312236801008711, 0.4462113994661326, -0.15927180040319955, -3.3670398466322875], [-0.15347482950914254, -0.6912148420625521, 0.9838605298329769, -0.2799563507062669, -3.406456205161289], [-0.1326534094001792, -1.446853446642213, 1.3532771838790956, -0.8243752211540283, -3.5366706400461885], [-0.09048544702918748, -1.2791626632836075, 0.3026667966796505, 0.21928917065270043, -3.4744241206269644], [0.19417351354955528, -0.9650823665097554, 0.8776249941654795, -0.10990739045255635, -3.5883253349507833], [-0.04135580556087287, -0.8228124530286788, 1.0370591516729144, -0.4190863288295053, -3.577167457371102], [0.407344449501596, -0.34430673129303435, 0.9919398453314887, -0.5513807197805003, -3.3470914648071464], [0.619736325668643, -0.8069131155123955, 0.40568902552097397, 0.2785930345623995, -3.3961452010574176], [1.3316311771810658, 0.1426575249004182, -0.007843515532365536, -0.9596210067828439, -3.5603031780834504], [1.336254096995896, -0.015200488509432314, 0.13044404661210532, -1.0677306671519935, -3.685469768492748], [1.072048940291302, -0.13397942588784134, 0.1642399329523203, -0.3045591672183334, -3.326033097676037], [1.3597904908527159, -0.41417825161463817, -0.16994617575682597, -1.3332406553190934, -3.6012413060502833], [0.5210603346542586, 0.011197449454469405, 0.973701913814433, 0.11284167761109908, -3.5938754999577047], [0.5259031862468427, -0.955554299294918, 0.30215870675671125, -0.5399048100839284, -3.3668239380329545], [1.1590888939958868, -0.2117622209071407, 0.4050414515551517, -0.264140521530813, -3.5786806157189535], [0.9582357063753554, -0.7181633981840944, 0.18729121525155518, -0.7775750312416445, -3.41564110852977], [-0.20518706883741766, -1.32453134795515, 1.6210041767869192, -0.0680096579295967, -3.498651966192063], [0.13753911291954896, -1.3116054393957561, 1.6071951061552558, 1.0422381167777863, -3.317874658640525], [0.4767768510167708, 0.17527079594395237, 0.37996719519319644, -2.5049601817088583, -3.550294297643532], [0.41632934990463943, 0.3193790052227959, 0.8638635021338813, -2.475757832823018, -3.6072741253008833], [0.7898817950729737, -0.4049360976942362, 0.32556901892468754, 0.03242937979992258, -3.603984070659897], [1.0950325401748595, -0.26596740321486734, -0.05447160672852794, -0.8995371941698027, -3.5939104297529014], [1.0088991478049532, -0.5100915396869277, 0.2273060317667544, -0.7018330753742799, -3.4259610329012284], [0.3909219353492623, -0.5344942199742037, 0.389112546310769, -0.1768894424473159, -3.4197105047607614], [0.16263283663882028, -0.6377045444064638, 0.40288411856474104, -0.6677037958280543, -3.5779252149028458], [-0.2147617872591363, -1.5227633587353346, 1.332645407839505, 0.03246381834077303, -3.5569840932498127], [0.13507002573791158, -0.2290692947538524, 1.3374673119677871, -0.4271817833279218, -3.410486277245803], [0.22503833434085077, -0.3321447097394991, 0.9135772275518599, -2.0508871571928484, -3.425556508587535], [0.5046605678280716, 0.13304081807954982, 0.7835573828511843, -1.7333893035054666, -3.469865764864714], [0.31465362950915887, -0.14500538660214213, 0.8612343216800191, -0.6760224804108067, -3.548274857651212], [0.3314483348499812, -0.528943672116928, 0.8498212447527392, -1.0880655828680081, -3.5974606445160235], [0.4221051558522262, 0.15785008049500454, 0.8448270371982256, -0.7450058860831562, -3.4306059135042535], [-0.32928166830861516, -1.6005178847823247, 1.1613574353570404, 0.6621118437997175, -3.439592538023418], [-0.41053667655756204, -1.740770967151837, 1.3036842993422968, -0.250120568687332, -3.3624069327961825], [-0.9533215088283699, -1.1413720105084013, 1.6199369115816529, -0.4429975105958436, -3.785825371511002], [0.05571497593838809, -1.7463580823158058, 1.1742130054661308, -0.05766323645103652, -3.340627189102585], [0.6042992455169398, -0.25515629489951386, 1.2005308962138643, -0.8030451411688546, -3.434671778912454], [0.032649865727263944, -0.03990943175893808, 1.7992310443239699, -0.41261431359341094, -3.582436641530549], [0.40676223905037734, -0.24250509281109203, 1.5548923332080613, -0.4201379118505222, -3.131336941623859], [0.5789159482687934, 0.2163663709488589, 0.8487152377264973, 0.4366365759943022, -3.2108209194332558], [-0.04856454342813252, -1.077156062132249, 0.8822708342369348, 0.11690004696807543, -3.7527300962916286], [1.2855726943172792, -0.7203998854955763, 0.033167034341440554, -0.7657946590213707, -3.6919359629052093], [1.4100025158549618, -0.5570664713932577, 0.2711052041481222, 0.01992294959848362, -3.4874551278241785], [0.45127303569267885, -0.16588672007754868, 0.8647624930037767, -0.7382805442068048, -3.417605575224003], [1.2236946286575208, -0.5503804852804375, 0.13648383519487828, -0.766324012361201, -3.33727616615394], [-0.15735432614652695, -0.7907266825791917, 1.5430615854282221, -0.470648339587329, -3.5716457765054637], [-0.02191816966518892, -0.708210495657664, 1.55444515231414, 0.081223073206285, -3.430214200259135], [0.19012788944326164, -1.2315795683351085, 1.4264268536556364, 0.5527657265770044, -3.4110222150074354], [0.24204993465444966, -0.5517908561288188, 1.0859410089183592, -1.0832049782112274, -3.5576774671263176], [0.1851257415127548, -0.7135955711553927, 1.0537303554562354, -1.2720325599285691, -3.377741389211935], [0.0815762851386759, -1.0437033654220502, 0.6453112896166217, -0.32289626270658844, -3.690416001025629], [0.09277022142159044, -0.7606230847215153, 1.133577329099861, -0.08183600166454347, -3.586705246789781], [0.18180982142112645, -0.2744281394295195, 0.8405456890694987, 0.32540991290983445, -3.6223049259172972], [0.06720376850158974, -0.37309957863487486, 1.024135069916068, -0.3314146990549315, -3.2441197199629386], [0.5633457102550904, 0.12231310130272152, 2.2895873861682774, 0.154857299055712, -3.29099542180831], [0.25818111293508306, -0.2983789023160389, 0.051957050614278855, -1.7856682332863965, -3.440753155674735], [0.3467181811547902, -0.11063954519720753, 0.9353367955132504, -1.2576300406934338, -3.5334228272906754], [0.265465404569071, -0.2530525805678944, 0.528183290292583, -1.7545970092117797, -3.51643361942525], [0.3151178332979807, -0.7119969786799013, 0.555473724756698, -0.4336043959262997, -3.283448500113708], [0.23093465506742084, -0.5837851518211358, 1.5462374634361673, 0.45988716541055435, -3.270387638063804], [0.3126020578192887, -0.541171235006371, 1.517740358652563, 0.22524381018750297, -3.5229826541064773], [0.248113803570386, -0.5980173110252861, 1.5413095186350225, 0.23794309772967737, -3.486846243133181], [0.09193737240304473, -0.7887089090647746, 1.1912375451631667, -0.3218778651627761, -3.642156333512503], [0.41750368362780443, -0.5631920693130591, 0.3401133530038476, -0.05126413379129115, -3.6431587799700784], [0.29509795891370083, -0.6472898066360455, 0.579807887421661, -0.07358010593803607, -3.4319635964953905], [0.22337023657188348, -0.7791824449471841, 1.4707519982801276, -0.13488601399361252, -3.420132869851428], [0.05668186522734683, -0.9753256693151131, 1.3655269142542419, 0.0871890992525424, -3.624522106378808], [1.0645339669761669, -0.13582139574162538, -0.2786179265669116, -1.4198659722396711, -3.5777799239374177], [1.1685791659295186, -0.3551667028563483, 0.2994983340246502, -0.4657134749537728, -3.374527258221728], [0.6461479622012509, -0.6336246992464408, -0.033980644575659635, -1.2543854873108657, -3.5108442758161647], [1.3345627811200678, -0.31817675534104395, -0.6839427108555051, -1.2978166408611382, -3.676213039307093], [0.39550667197629785, -0.19505409367379456, -0.7884231015000787, -1.752043770376325, -3.49079619067758], [0.5709970840109507, 0.152975730346608, -0.9745706501190762, -1.6868284522562207, -3.5124393332717627], [1.408476119838797, -1.0777899743800536, 0.5554067249411582, 0.05719120226790245, -3.3799280884768024], [-0.005270500899438757, -0.7319659140494892, 0.3889136819893767, -0.8216185351838081, -3.372440331403157], [1.140802436652891, -1.6456295033444714, 0.40566199044846596, 0.36535282382341955, -3.3175686223613208], [1.4992554955689308, -1.828478921425554, 0.5814969854301084, 0.3676733372933553, -3.74250958616773], [1.4572003019494428, -1.7442700020600537, 0.5234119077873346, 0.3961888538268677, -3.5424789518295503], [-0.8846008933643071, -1.3094954483346353, 1.184604159076642, 0.2444219237568185, -3.545531651164797], [-0.38521811403154305, -1.2753915275524745, 1.5862637380971834, 0.04083669500259003, -3.4080175667162673], [-0.004871393603684715, -0.8894033025449251, 1.6311845281011255, 0.20542139051911193, -3.5219650744443847], [0.4346752465723254, -0.05231939350579828, 0.08865636417801223, -0.8704641553112158, -3.582847373257091], [1.3888094917285523, -0.6032582233221192, 0.3875345158413139, 0.001875183209440509, -3.3760334026560637], [0.22060971006481866, -0.1797215442852642, 0.5065120268921862, -1.4372374454094892, -3.4984450953774657], [0.6547447613711694, 0.06510184789994612, 0.5259954258888802, -0.32913518635257466, -3.619914884925008], [0.2858403460439145, 0.01438819885260384, 0.48898060345350214, -0.06344016413911542, -3.445029609071746], [0.7069861581228453, 0.07609831840021448, 0.48577895180804853, -0.09926932500611535, -3.5947053665784265], [0.37921360868311554, -0.15541046116623802, 0.07069349283045373, -0.730047323049816, -3.435280304820818], [1.2088412695855804, -0.07187198738771136, 0.07723483445301484, -1.340912977715795, -3.323673546920505], [1.5555787013484985, 0.12413869570670799, -0.30335175633396066, -0.6031656967347624, -3.3482103153526035], [1.462311077299559, -0.2573251199671657, -0.0003812584663055729, -1.1310226000283956, -3.4134385177017], [0.5688700478505668, -0.487378480735873, 0.13219847759415448, -0.15291538386736991, -3.482916885282659], [1.5878711866950561, 0.04955642358097701, -0.9605671965465532, -1.5690924835555273, -3.947270979102011], [1.6066941422500947, 0.4110445116459774, -0.3774666699002738, -1.0948981918440501, -3.577658786247674], [1.389106196697812, 0.25261706917849985, -0.6949993448679924, -1.4869202333865417, -3.859828384509168], [1.1114472848500363, -0.7155967255822, 0.1360729153053592, -0.7161386712839466, -3.65176266975006], [0.3359303053107626, -0.2637354977119789, 0.3422660367370731, -0.2188160457819919, -3.587935547788968], [1.6293044074977525, -0.10986843158066412, -0.04968388572842186, -1.1734932440508836, -3.332043184787827], [0.7308393450069014, -0.5820622894204762, -0.005741270055037245, -0.9236900173213489, -3.6087858515024194], [1.3599779370373624, 0.24215082581373773, -0.5170887979660481, -1.3310401157749072, -3.3202517838266683], [1.7336669517460432, -0.4085279968028104, -1.023740519451993, -1.6640267015289332, -3.8774261401980676], [1.5764998714118865, -0.43840397672592235, -1.192404050522252, -1.7537597406697132, -3.7022006515270243], [1.5499938232031603, -0.495847133283, -1.2586626264374954, -1.9163528295238852, -3.7348422397885357], [1.2378898993243268, 0.09166854142650632, -0.12679625736007466, -0.8520514335752787, -3.3530174625619744], [0.8845181461802647, -0.26974844377320684, 0.4652603958531614, -0.5503375246732718, -3.6045220416011743], [1.4440579918102283, -0.6350691205445225, 0.05470833636801917, -1.382391770790214, -3.5320019560360976], [0.7966355973775865, -0.21734598273568975, -0.33962873193857457, -1.38581577842244, -3.508465737374555], [0.7131421008882602, 0.0433785285140719, 0.3187484263898746, -0.7639788386253672, -3.3960087916116577], [0.8869955124531215, 0.3449377378993176, 0.14343913257728114, -0.3865639571346835, -3.5545020439650687], [1.2059946701555297, 0.15649394486370427, -0.1705893577288896, -0.9917219940764612, -3.2592996531360874], [0.9856528151835088, -1.8277751868357195, 0.5582850671978543, -0.15049590782076325, -3.626576124607437], [1.0312604223937278, -1.8376217407698974, 0.3695996163720274, -0.06816846441468595, -3.421863844793949], [0.8813189672699951, -2.005003524936272, 0.3984188790876938, -0.13921870942333206, -3.5755080266302177], [0.7478350323717763, -1.6586941742138195, 0.24258408255450378, -0.4722530034792731, -3.579623197397872], [0.6427993145445448, -1.4381720328019656, 0.21943493482304421, -0.5787564461984884, -3.3775931983530003], [0.7014833280371513, -1.3690334101045287, 0.5000049573342263, 0.0709166190343418, -3.2977597056509693], [1.2317963822460596, -1.2542421730484572, 0.4694619754402971, -0.3035829137475635, -3.4932138018602417], [0.8490133799900004, -0.2224475354608515, -0.13741401588766572, -1.3356914509603068, -3.566243986028244], [1.4501316674641798, 0.23425768626410956, 0.2352785368331834, -0.6067531275624205, -3.676082763813975], [1.392293026910064, 0.40267505644247065, 0.4433534230544717, -0.6664825467857701, -3.409742138581139], [1.0432161856456137, -0.8181536196629451, 0.27990466466489683, -0.8560000507753158, -3.555999383613342], [1.1180202528663108, -0.38516455565787955, 0.16381147575189325, -0.4898286567928586, -3.5196223289510966], [1.2257627572259608, -0.2855830994459469, -0.11887215744003121, -1.2203579693418454, -3.495231736309735], [0.8891167206599669, 0.08460282790446286, -0.08571100724656713, -1.104667147431514, -3.4255020885733845], [0.44403088627830845, -0.9049961790511034, 0.08046478580701735, -1.4481558465554532, -3.53277393775494], [1.3082414372532996, -0.011526273668337028, 0.36070010941389147, 0.24814924410029737, -3.608240332060199], [1.7333809979692738, 0.5983567136126334, -0.05354671238060225, -1.439441063949731, -3.6240619820757822], [2.0510377821365977, 0.4288767210995448, -0.14886194369091593, -1.227579482627122, -3.4345353912978918], [0.9324909258791273, 0.0927764311033562, 0.3566425950422224, -0.3973452818040526, -3.467282372474965], [0.968861757703404, 0.31399273853036663, 0.30144991742534344, -0.26928723254150055, -3.209452490195994], [0.2246808927945769, -1.174897087627046, 0.40438312331506504, -0.5831694470280457, -3.54872451256601], [0.32537995335610304, -1.1842024629052015, 0.2300640023854758, -0.35775674122532, -3.4587874690645326], [0.03833152640009693, -0.8932045321739688, 0.6055296565605497, -0.4161748136747764, -3.485544427092464], [-0.46333066495710806, -1.6946616020662566, 0.4681045613658941, -0.08604728159807291, -3.491603740971317], [-0.06885361327988065, -2.1000155899066475, 0.4367912561114658, -0.30134394404032283, -3.2746696450146002], [0.5219596784429354, -0.6872605756052386, 0.466657226487061, 0.09914719546933487, -3.2729785869336805], [0.4639957340527419, -0.8285547824852652, 0.11429622717260945, -0.707639546340373, -3.733863286364163], [0.4306856235601947, -0.4332919429746314, -0.09477415115412346, -1.4272751221284374, -3.2332092580244876], [1.4902107575756316, -0.3642154383233579, -0.10753092020754894, -1.003471715782552, -3.7316252670234316], [0.5722543126376315, -0.40807604650495005, 0.03550230125250313, -0.9003670015432454, -3.2475741432800422], [0.28580308415009076, -0.38106046214784994, 1.1509315279555052, -0.46953114079772945, -3.416424293246158], [0.21533812401962726, -0.931536917353263, 1.4701352820220008, -0.22501403340556853, -3.505707657371161], [0.06624497293017403, -0.8538374752808836, 1.4340219711725573, -0.16528307560014682, -3.800513946119693], [0.15309711981887014, -0.7249484359205433, 1.5111471120453859, -0.4028047304351423, -3.45037903230048], [0.31868823002162744, -0.5541047855908364, 1.5712367344331737, -0.5468330801542873, -3.3856851437097717], [1.1362226710086547, -2.5895745471268268, 0.3070470312430652, -0.41353104398329416, -3.6582322397837426], [0.8290350177515577, -2.421650666225334, 0.34215068977999175, 0.20682161542043248, -3.327322307867285], [0.6890987947459201, -2.5155313102727597, 0.3781703847868556, 0.21373984090536224, -3.447762997918995], [0.23927985096045243, -1.0493107878133954, 0.19599328139733996, -0.18983499879720275, -3.3491255502962463], [0.9991774842484722, -0.23909195521286783, 0.09565221952727523, -0.6068448057049659, -3.6268116347322357], [1.0198582592195822, 0.018939020522288255, 0.23358497351593704, -0.862176589992014, -3.441053090183821], [-0.10923956444928166, -1.5040862543316962, 1.546946492674535, -0.17044596546387555, -3.6113367773704472], [0.4065744201295347, -0.29862551496147627, 0.6189230023337131, -0.0324100034970517, -3.4733507236943546], [0.7473087054712512, -0.27131789161572684, 0.12851115155732123, -1.0741915062435325, -3.4908137068117435], [1.135876729797674, -0.2675170606864274, 0.39625629438360743, -0.18850742199808396, -3.5813572258699997], [0.8038993952787826, 0.2989396680717249, 0.1426950662110099, -0.5598823818050125, -3.5514610334601633], [0.5033752463397294, 0.23299115812607213, 0.421616460570811, -0.9440365388786984, -3.312240545237801], [0.7067416582263455, 0.25364018028916785, -0.5844046433314793, -1.7850591992124332, -3.370210643758174], [0.9306717989132994, 0.37277607368920207, -0.305081306397005, -1.4040527334439286, -3.5726945843432687], [2.477645206678291, -0.028883052200982695, 0.42225607419097455, -0.42413711636836465, -3.356167207746052], [2.4822736119047732, -0.05437255834979429, 0.21822263176848292, -0.10072234429844909, -3.606217699482536], [2.4019467271219748, 0.5450175116262408, -0.01153397150332175, -1.1685114135466137, -3.5052297429657138], [1.973516350433564, 0.4986944980411614, -0.009781533835920347, -1.2295091346625826, -3.4465890416120013], [1.9663159224065458, 0.17233050949475323, -0.019578515877875083, -1.1586638054263938, -3.54551801634025], [0.10419229406400829, -0.6370084107914857, 0.8733665501498364, 0.39896713624836483, -3.3244736890216724], [-0.5304012565361889, -1.2050108374242094, 1.8788772728239127, -0.46736725122053124, -3.53372696158623], [-0.5303021095194996, -1.2649626303997612, 1.761413839539218, 0.06675256786017622, -3.978467504241761], [-0.664394516786746, -1.4129098767092438, 1.73117725939662, 0.02853836950948179, -3.7612692333547044], [-0.767179011480206, -1.4460466263205463, 1.082027003038128, -0.20544160548455032, -3.5265620185156092], [0.5420429471982237, -1.1187687454592687, 0.21344312203283983, -0.24144530936419037, -3.38816571495048], [0.0779032124104857, -1.1935208371409014, 0.8137569919318954, -0.3097100925237251, -3.435405478966411], [-0.9225652083822742, -1.4200490648062831, 1.6465763274822482, 0.048824310194915815, -3.5699003202549986], [-1.0532022542138668, -1.9081521867895934, 1.8273471299846735, -0.027436664987479945, -3.651180139618744], [-0.6404688819914557, -1.357932255905954, 1.6694531488455633, 0.6068413520343093, -3.5100806839623213], [-1.0364456818982266, -1.6566438037124875, 1.8433280548847173, 0.5963657302004369, -3.716209582950503], [0.4200953631783144, -0.8804235639414228, 0.7606660051821614, -0.4882267386097565, -3.479005395906797], [-0.08604484754983105, -0.9312820692155558, 1.5092660321575184, 0.38277321615309423, -3.573383874606271], [-0.1720288735458883, -1.404067725121096, 1.9477631732342908, 0.41617693901671926, -3.4686862245720533], [-0.11665335588180108, -1.321681138447851, 1.5568219460411807, 0.3688922085927936, -3.606099724414429], [0.12055361328293468, -0.7542935071840928, 1.1193078876703408, -0.15549502830300524, -3.58179454286742], [0.1024767826427855, -0.9144051812874623, 1.125282325696456, -0.19519194859543723, -3.392034562293442], [-0.05169780524408979, -0.9371954090888104, 0.6919320150161263, -0.4689695051134621, -3.570950839982619], [1.6582740179059123, 0.35362993943832965, 0.09412999979678566, -1.1479802814975157, -3.293005620699453], [1.1351357828683044, -0.4532856678414223, 0.017714448923074957, -1.240036380919039, -3.2292377040835523], [1.1985724439142516, 0.3477888145000858, -0.019187280686683794, -0.8003747496774728, -3.54421728270264], [0.9264588572492312, -1.0762271127847958, 0.291215661885581, -0.27848787555858645, -3.1812634170877057], [0.2578555103019503, -0.7988742630502752, 0.3485513604934571, -0.4728581937046711, -3.409963671008881], [-0.4819024151187826, -1.6453239618073208, 1.6161240559312193, -0.03573115002814156, -3.6376188866993373], [0.8621041540559553, -0.3771723074476785, 0.3345685847242619, -0.2296217930257461, -3.6230365499319315], [0.1684946685810923, -0.6188820220833287, 1.0247702726794914, -0.5553586152185157, -3.6215474047718414], [0.2834940901095003, -0.09096007269872375, 1.248597757151132, -0.05584601788947474, -3.2318957960281587], [0.31310785320144197, -0.12464911911124237, -1.102364507646658, -2.9010838528071616, -3.258077496260733], [0.4682174163864029, -0.33576660797985003, -0.6981656315970977, -2.1007754081469185, -3.7831598641625335], [0.28094049438464835, -0.3738399596381159, -1.2375358136436643, -2.3966349524658246, -3.3988515698427753], [0.1615850133662781, -0.16872525193677612, -1.1864114937660906, -1.9229132978231855, -4.020854438330005], [0.9593660351601226, -0.6915945610733506, -0.9587812303045761, -1.6027365541206908, -3.2629258228053333], [0.7017726740342398, -0.38864215803026336, -1.1762702652996904, -2.152176066101096, -3.7680598830671115], [0.8208440226381186, -0.10985393957256254, -0.8820554142119934, -1.4617042622808962, -3.5991124108392913], [-0.4226647178070605, -1.9934680653339611, 0.5149162034489878, -0.7481666475291895, -3.6176602912813154], [0.3126968304248365, -0.7113579929154895, 1.574971847685362, 0.32957834883496917, -3.130973174117913], [1.4589855973003998, 0.15879730495684125, 0.17953449049347509, -1.223207607159118, -3.2440057005384046], [2.195376999247752, 0.04649571736334152, 0.18869578647962265, -0.9458409631409359, -3.5257108367650076], [-0.27058643686483125, -1.0565674092993107, 0.5146178704627504, -0.1073798471232278, -3.135978355109299], [-0.23165090930520515, -0.6750583448332715, 1.7286924750611274, 0.05936867560591111, -3.5968218872092974], [-0.4438061830001717, -0.6199629970946643, 1.6014337375005894, -0.06272880512400592, -3.6387128012934222], [-0.0031900151268136473, -1.9317400657176802, 0.9205342218745832, -0.6834712022146119, -3.62848322277443], [-0.752162589248254, -0.9697073806546108, 1.0957478805533152, -0.24561496675123642, -3.500183931271221], [-0.19938118339130206, -1.354857935313765, 1.2384653913913903, -0.26594587969252925, -3.2935396385862084], [-0.16049184117875825, -0.8476229759449457, 0.5191973646604001, -0.22503633798137052, -3.7225047621418192], [1.4802620977675913, -0.3186053670739861, -0.2230513583743054, -0.9339993721384542, -3.6757220755055973], [1.0106753551404069, -0.1943726632906168, -0.23964969998394192, -1.087601685857381, -3.4880377374178213], [1.4673001639713474, 0.04027448398893595, -0.031852905484482524, -0.8970342541201578, -3.54695549574948], [1.6020087179689635, 0.033161268258384946, 0.08766634776774336, -0.5495092913341566, -3.3829304839110814], [1.3353671638988263, 0.1650603504304503, -0.026852623307691493, -1.2506815656341095, -3.847111129371734], [1.5555654122580198, 0.09371036182416523, -0.08646578638023387, -1.075376374122585, -3.471824293623712], [1.4741423427692302, 0.07318639586185254, -0.12892623273104944, -1.0555214662996066, -3.4558045103724657], [1.3880578407420379, -0.15521376478996213, -0.2225610914218012, -1.0927300500811676, -3.701346685303138], [1.7516937807820698, 0.29214627432498746, -0.10041842701201129, -1.028465420543216, -3.303657868094624], [-0.5429695809224289, -1.6649943282376267, 1.3072357862721062, 0.26533870010147664, -3.432234050761425], [-0.6718155287204235, -0.9152712473311554, 0.7442598421359543, 0.040278375311820463, -3.769958683090152], [-0.3275509898087956, -1.0087167496400067, 0.3349706662814066, -0.4359252246545266, -3.6679303433173422], [-0.37631275849110735, -0.9747951702473898, 0.3150473980983822, -0.44547755291141966, -3.592586871220731], [-0.5717677729987846, -0.9205181499540164, 0.3581881319255809, -0.1144185879773815, -3.6372075515090154], [-0.7444019677397824, -0.953854318824011, 0.3174169127586701, -0.19468902595580878, -3.7574155809575154], [0.41617993187165847, -1.0474380131821877, 1.482720194047162, -0.044453929569512, -3.260824270343482], [-0.13329397876323307, -1.0558353918844972, 1.5657889874076536, -0.08621657403445702, -3.4025110943553893], [-0.10067735867097792, -1.3933548506925528, 1.8401980468241295, 0.7734992106328625, -3.222879816721037], [0.4166203565103812, -0.5216971932940238, 1.134099099274056, -0.8555334631046332, -3.150903276353952], [0.2559736766490809, -0.7069469740871825, 1.6682031236539028, -0.4009586215895219, -3.8313214852907653], [0.3441271818739381, 0.1505603344822698, 1.0719767812902403, 0.3393011947434869, -3.6793591579427556], [-0.8376898426481021, -1.583446986254445, 0.9854710395441905, -0.15232504854598317, -3.473985850359208], [-1.1509616815694632, -1.6039444201574276, 0.895377737690525, -0.23798923288319002, -3.5789500555041185], [0.5940782128716977, -0.03700920893833169, 1.3877329323052596, 0.7100278023482051, -3.441077555536363], [0.24663185301521162, 0.21364412961814727, 0.9916502298722545, 0.8337809647339604, -3.2076117212506152], [0.9286938682502368, -0.2913925520259514, 0.2666467480487829, 0.2539449407879227, -3.5607645475356704], [1.046071420568191, -0.9430802904814518, 0.012478367795384915, -0.9417973567329676, -3.4330721604348167], [0.4376982050168184, 0.28630915720267514, 1.0761687778164977, -0.1899221568017918, -3.532296804149177], [0.32935448525762934, -0.15673431753869296, 0.5674692222499944, -0.2865361684452679, -3.4150135215853545], [0.7468337963938558, -0.4815526198649873, 0.13347723770727787, -1.0837006542172953, -3.4866316702373252], [0.666419381818816, -0.5903494684801837, 0.013291232561057437, -0.9476864202517398, -3.644186793793747], [1.5508200763747562, -0.003306801829800504, -0.9971337297844112, -1.7951035690571884, -3.3327059675436908], [0.3769274130641644, -0.33130026963184983, 0.5396764612211844, -2.0975612610017413, -3.2036037864968505], [0.5340304753365828, -0.3688343653225869, 0.9973564859792114, -0.3548379841955819, -3.1538374414547374], [0.21560639516044822, -0.6743336701826664, 0.6272035343082211, -1.0077495485906998, -3.856443494419387], [0.1407635032732092, -1.1181123403824909, 1.1566448977852901, -0.1488258721732208, -3.380282763707207], [0.13463127931735727, -1.1611433860723985, 0.9535108630731324, 0.18572325098950992, -3.490833693992199], [-0.9381801722355556, -1.4985334306704614, 1.7321603184331837, -0.2173257778172222, -3.7106812605857726], [-0.47086738022476826, -1.6240011154776246, 1.5293181926932442, 0.35894160479263637, -3.4367283277456018], [-1.1996242597861586, -1.505319867849695, 2.1640334522977858, 0.5791656633886305, -3.7224392028232125], [0.11487542229911321, -1.1226832134655789, 1.6008772688145056, 0.6845954500896565, -3.460964541780165], [-0.6192728202968026, -1.430324256918763, 1.10078802814952, -0.319522556226173, -3.5991545517218877], [0.1364875285006652, -0.7842965918508008, 0.490279233237935, -0.17020044234743867, -3.5031756636987774], [0.345769805355723, -0.37594846992596265, 1.047700494377131, -0.6670180236308224, -3.4483315454159307], [0.34959391655170685, -0.7413628595968592, 1.3431286956609467, -0.4317564478593216, -3.3307311851611523], [0.026248942049988327, -0.8509074139060729, 1.0065021658132538, -0.006866262606051027, -3.4309533012608795], [0.18806608670304947, -0.5195579047907545, 0.9304138819642772, -0.6201516162053087, -3.4491583260403114], [0.20073732198249158, -0.35503710816436757, 0.8522919830854057, -0.7933967606740331, -3.4490328071379546], [0.3661693192029055, -0.9694878020877341, 0.11332976515862847, -0.14237076527719034, -3.5587751513353774], [1.7935907153166897, -0.34000221467363023, -0.005308560422953051, -0.5703920025236143, -3.4235151068804837], [1.8474988072099219, -0.3044565762021232, 0.31042984990698386, -0.5156547332319247, -3.2738931956567083], [2.063869034444312, -1.8959509882095986, 0.363992939790551, -0.012219942869319742, -3.464663911860348], [1.9269120270765854, -1.9044123806738733, 0.3373803174811124, -0.10250040385257689, -3.4821927006877855], [1.5670862509538797, -1.3540367422158979, 0.23932759927301964, -0.4210885370660022, -3.4678478992894513], [1.9199972744360083, -1.6216508143493626, 0.19476259933168844, -0.646021801221047, -3.541495397416146], [-0.31417253223349745, -0.7213054669212099, 0.8194178634582876, 0.20011603514959478, -3.559130714175743], [0.3010340307583659, -0.7147044389993125, 0.9959607387329548, -0.06245914501344177, -3.33521864178615], [-0.1456566475874598, -0.7130655227740026, 0.813170392381512, -0.29713521273504184, -3.249281820414933], [0.30164311115024456, -0.8698970840555087, 1.1854671682632165, -0.504388484377851, -3.3886901265299136], [1.0379206050023377, -1.6908483207889409, 0.4563957492470172, -0.13972331204064442, -3.511675451028773], [0.9895257018471383, -1.8116648970180036, 0.2999165544466367, -0.3192172819221477, -3.4874585467857133], [0.3345381016024894, -1.747574482327609, 0.5820847733719626, 0.5678591704245664, -3.420143270503977], [1.002082876994136, -1.484079202926179, 0.4899079999428021, 0.08495991587178481, -3.372994584958286], [1.655647993098814, -0.33016209774250627, 0.56140749133449, -0.20123936747942092, -3.689487331729309], [0.7670990959282279, 0.08992379194275689, -1.0191106487531045, -1.301485636175482, -3.541007121813963], [0.7988355186839742, 0.033701193162029394, -0.9294300714694946, -1.3932974638131046, -3.662166180844415], [1.2182535339966585, -0.09547305004482744, -0.4419897681023093, -1.4282990672335216, -3.5594695762544615], [1.6534658229669863, 0.7012294120907542, -0.5441222813229849, -0.9072240983874311, -3.7521385067209834], [1.2827616448750976, -0.442254249893482, -0.4874308046526941, -2.0855917802457036, -3.372802768732287], [1.917474702170626, 0.09555084999137556, -0.1702761930926277, -0.7558517220181522, -3.614053020952767], [1.0364665031271896, -1.3399645400104518, 0.11934271767121096, -0.8519396642325203, -3.3502681385338495], [1.9481554083477204, -0.2801315121176584, 0.48176346887347987, 0.5535675854670589, -3.3313931944384576], [0.22239266696343987, -0.08850398394708944, 0.0711074260819064, -2.8952512138654307, -3.2444576547304926], [1.0475826052462116, 0.5290732025496799, 0.26541518570162603, 0.0232506653878235, -3.6077015724231796], [0.9755767009283244, 0.34698170889994395, 0.3056344871439439, -0.725314453918515, -3.356566070419477], [1.727581510561524, -0.49717887612705436, -0.4845389442219009, -1.51484313028456, -3.6377824405197634], [0.6694366430259611, 0.16446668923403246, -0.48705793907057565, -1.0653210881461537, -3.580842906689643], [0.6809295807821839, 0.06753948211136233, -0.5298793794947463, -1.048938894962253, -3.5893916498949827], [0.4763826704238776, 0.0887347090296676, -0.5879999475345818, -0.920656587507817, -3.49384367996055], [0.6206625972452312, -0.004130707159634622, -0.4149144990667646, -0.7879273720480755, -3.700518389663846], [1.5767764896121994, 0.30894009698718117, -0.8320152709056476, -1.1054634567025985, -3.621307770576446], [1.0871355293198477, 0.03105630196090778, -0.5609052266394161, -1.4321073100042756, -3.7319418462827927], [1.5772159921737496, -0.036461909458345064, -0.6206417352061161, -1.213479709435897, -3.592757968166511], [1.4709939612478267, 0.1632643617435743, -0.5275985912409645, -1.2281848706656506, -3.6947645060445016], [1.5539355464029025, 0.06338311877752367, -0.9466755037434695, -1.431894709408808, -3.5528315247889766], [1.5529074878043208, 0.022009367319135664, -0.7511539917136942, -1.4968082700672436, -3.454572996183088], [1.2415167754984382, 0.08433834854886163, -0.5534777219456014, -1.047363081632352, -3.4553263610899037], [1.1411955103265141, 0.2781268326505173, -0.5254912648762072, -1.0333240369949646, -3.672590294738926], [1.5532778871561965, 0.1936929051299699, -0.8547218155785462, -1.4529888394587918, -3.554001583322082], [1.7056416065348527, -0.23523095569979371, 0.32210765761086757, -1.0655568986471413, -3.3990203998916435], [0.8494947523390758, 0.012769169922327225, -0.16040362405022485, -0.8285079357877494, -3.447575904500717], [1.4191043140367083, -0.13110081237163765, 0.062040944843303136, -0.8364698954575615, -3.630362806316209], [1.5492954499753575, -0.19050097923325993, 0.23101363192206026, -0.905568576465805, -3.5856135349624245], [0.7422701019316407, -0.4504693294794936, -0.5933972497310459, -1.4861774717986689, -3.4596576410010247], [0.4972521078584897, 0.0978229524936519, -1.499502494607041, -2.088214985000255, -3.895169327486163], [0.5310204474314384, 0.06702474510441343, -0.7486587302959252, -1.7277167209670714, -3.30531829013336], [0.49570176671576854, 0.09880253915934813, -0.47291167549676344, -1.561222526450625, -3.8476290283363506], [1.0937310306564885, -0.9132351360052995, 0.17655886449515235, -0.3001786866278754, -3.900576037016555], [0.06071110039104041, -0.8548693066758901, 0.3782647724249337, -0.6329084485050193, -3.5751697754334075], [0.17629161369753643, -0.811182285673395, 0.33925735525484396, -0.5042443154251787, -3.511121639431963], [0.16631080857148894, -0.738187204355108, 0.6974229398109026, -0.25764401007431253, -3.556433220125444], [0.2810239924747695, -0.5401982549427095, 0.806313283882119, -0.19302910646804772, -3.1771081254851907], [0.41798098428508207, -0.24830937451414647, 1.0152318561597748, -0.4242276543575154, -3.8235444721676384], [0.4256146653031163, -0.19876404305353856, 1.1826546010114665, -0.41041271210620067, -3.724147520459984], [-0.05274539998843961, -1.5859409105228708, 0.941919429939426, 0.3477038058773182, -3.3344259975510826], [0.13224786329084362, -1.7112081334409666, 0.9708583211459093, 0.31818267128335775, -3.3788189492878424], [-0.5670127462026819, -1.0470807964213134, 0.7318152711906577, -0.29850409234989056, -3.552924178224132], [-0.6033333315743102, -0.9733080838006601, 0.675970098706298, -0.4443687775167164, -3.5353951662791423], [-0.5227324305649406, -1.7889765144192746, 1.2863559169169525, -0.6161124100325689, -3.585107946397233], [-0.3391614288036963, -1.2778184117923839, 1.0125601609971255, 0.1690792604921884, -3.513794737317324], [0.5566286751072499, -0.19265049943166146, 0.2775635651729606, -0.17816173524278575, -3.540705493656676], [-0.8100357609578482, -1.2501633226671098, 0.6755643817148933, 0.044471187391554326, -3.6561186820542484], [-0.6635204790441452, -1.5017727902334905, 1.0079733907569444, -0.22507843343491374, -3.2786329886131735], [-1.0175304693999858, -1.6865292197216595, 0.4557448404258187, -0.22957582274521277, -3.460352790159157], [-1.740642183661069, -2.055672341361779, 0.10950707966618531, -0.19400513603533853, -3.3956772039494427], [-1.5481791168596806, -2.1121452367272378, 0.8638771241287242, -0.028111065483344057, -4.088419902987848], [-1.9774034881240747, -2.097755223021554, 0.19206894797935892, 0.32008668996839024, -4.08452646109997], [-2.1132867833923954, -2.3986939126285534, 0.5340366682608609, 0.12178047621702046, -3.3132806930199927], [-2.312113674735397, -2.411789271895042, -0.006903258615586744, -0.6223521387508462, -4.054755775913904], [-1.7721721980585858, -1.8639867225010613, 0.5523536458258373, -0.3612946950832118, -3.38545234564346], [-1.7636389799738406, -2.646721233062093, 0.3367264490714968, 0.20880640760013539, -3.9411804491929496], [-2.783553733579248, -2.4702028074201, 0.16956342907463406, -0.46043607159837735, -3.885972043272352], [-2.7323041830158563, -2.3083150746498955, 0.39689708109224575, -0.1737673140723433, -3.7585909800251933], [-2.0252674048049464, -2.3021186950604298, 0.336461995742602, -0.2838679642323715, -3.7881036080308443], [-2.073817520899757, -2.1082933231242955, 0.28685002403474325, -0.5613671986209869, -3.8745158834336872], [-1.8778601919671534, -2.5262441237056006, 0.37552738118016343, 0.024030213554794372, -3.7508108735581014], [-1.8778601919671534, -2.5262441237056006, 0.37552738118016343, 0.024030213554794372, -3.7508108735581014], [-1.8770767797122596, -2.3725823267490536, 0.40233522289274837, -0.35913251513581956, -3.6129882562403877], [-0.34296295620412204, -1.5790485157030247, 0.19209186214777038, -0.3343289514997301, -3.606446226655055], [0.31108929682097747, -1.6007802611627537, 0.4798172395096197, -0.5504019107398922, -3.403810351142519], [0.2748872954868075, -1.5150833238465453, 0.5311621698696973, -0.4887328639024308, -3.116064666901363], [0.3665567976155356, -1.4950233776325998, 0.4441830818204282, -0.4447730702560989, -3.2488438603713767], [1.1498703706365792, -1.5612698927546234, 0.2881385866533163, -0.32933520102292413, -3.7256675664244767], [1.1838529977737173, -1.5312520590487269, 0.278725234333936, -0.2628316039736124, -3.5839761672476818]], NamedTuple[(n_steps = 1, is_accept = true, acceptance_rate = 2.15949761431682e-61, log_density = -21.294880943107827, hamiltonian_energy = 22.62878734627584, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 139.68781506395746, tree_depth = 1, numerical_error = false, step_size = 0.4, nom_step_size = 0.4, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -21.294880943107827, hamiltonian_energy = 21.723380678188498, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 1.4647601141787014e9, tree_depth = 0, numerical_error = true, step_size = 0.9340259163636535, nom_step_size = 0.9340259163636535, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9049291702510743, log_density = 6.253745186501661, hamiltonian_energy = 20.124629025890638, hamiltonian_energy_error = -2.3286803945369847, max_hamiltonian_energy_error = -2.4004085445869308, tree_depth = 3, numerical_error = false, step_size = 0.09209433883419865, nom_step_size = 0.09209433883419865, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.995541359016707, log_density = 6.457032703461462, hamiltonian_energy = -4.31945346222315, hamiltonian_energy_error = -0.042109566771291185, max_hamiltonian_energy_error = -0.19809228323031025, tree_depth = 3, numerical_error = false, step_size = 0.07445121235281273, nom_step_size = 0.07445121235281273, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9858430118299053, log_density = 7.216248737625798, hamiltonian_energy = -5.297856824842807, hamiltonian_energy_error = -0.05181395184190851, max_hamiltonian_energy_error = -0.11226461396484488, tree_depth = 2, numerical_error = false, step_size = 0.09762252884896593, nom_step_size = 0.09762252884896593, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9444951309886862, log_density = 7.20800406843553, hamiltonian_energy = -5.155288339700014, hamiltonian_energy_error = -0.031056646772908536, max_hamiltonian_energy_error = -0.3245431735918327, tree_depth = 3, numerical_error = false, step_size = 0.1445576133604965, nom_step_size = 0.1445576133604965, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.8677836942377364, log_density = 8.329687558513223, hamiltonian_energy = -6.810355479351391, hamiltonian_energy_error = -0.2794044598596743, max_hamiltonian_energy_error = 0.4640548686183017, tree_depth = 2, numerical_error = false, step_size = 0.2057206888641936, nom_step_size = 0.2057206888641936, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9286735894800628, log_density = 8.719912333269, hamiltonian_energy = -7.616283483380576, hamiltonian_energy_error = 0.0031823128374703913, max_hamiltonian_energy_error = -0.395352369167151, tree_depth = 3, numerical_error = false, step_size = 0.24184195395689953, nom_step_size = 0.24184195395689953, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 5.242416485784066e-7, log_density = 8.719912333269, hamiltonian_energy = -7.97000494757213, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 14.461313097518438, tree_depth = 1, numerical_error = false, step_size = 0.35268694711069676, nom_step_size = 0.35268694711069676, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9982786039530461, log_density = 8.655023590012895, hamiltonian_energy = -7.9361724499122985, hamiltonian_energy_error = 5.114968695707489e-5, max_hamiltonian_energy_error = 0.005816833444973746, tree_depth = 4, numerical_error = false, step_size = 0.027869216682566377, nom_step_size = 0.027869216682566377, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9711246124237192, log_density = 7.548082314898776, hamiltonian_energy = -6.357448697296605, hamiltonian_energy_error = 0.047027467591219896, max_hamiltonian_energy_error = 0.08210951900038044, tree_depth = 3, numerical_error = false, step_size = 0.0518130249372477, nom_step_size = 0.0518130249372477, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9999950250840629, log_density = 8.330843300055692, hamiltonian_energy = -6.991657801892578, hamiltonian_energy_error = -0.05256263258974059, max_hamiltonian_energy_error = -0.15451445438519062, tree_depth = 3, numerical_error = false, step_size = 0.08939832184901, nom_step_size = 0.08939832184901, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.5251236670387955, log_density = 5.099047746811672, hamiltonian_energy = -3.1392878739089873, hamiltonian_energy_error = 0.6366426966470184, max_hamiltonian_energy_error = 1.0885785235109013, tree_depth = 3, numerical_error = false, step_size = 0.16975614232599606, nom_step_size = 0.16975614232599606, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 4.971813465130549, hamiltonian_energy = -1.8903578392355622, hamiltonian_energy_error = -0.07512322375336566, max_hamiltonian_energy_error = -0.24857759289830694, tree_depth = 3, numerical_error = false, step_size = 0.07271308641300056, nom_step_size = 0.07271308641300056, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.8812393073701019, log_density = 6.825209198422598, hamiltonian_energy = -1.3581692135690737, hamiltonian_energy_error = -0.07527562431626889, max_hamiltonian_energy_error = 0.9004014266195421, tree_depth = 3, numerical_error = false, step_size = 0.13867516739105332, nom_step_size = 0.13867516739105332, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.5407827502676116, log_density = 4.492342936810811, hamiltonian_energy = -3.3402950697951685, hamiltonian_energy_error = 0.44916532516987084, max_hamiltonian_energy_error = 23.21087258790863, tree_depth = 4, numerical_error = false, step_size = 0.1821888772111502, nom_step_size = 0.1821888772111502, is_adapt = true), (n_steps = 27, is_accept = true, acceptance_rate = 0.9961229469021012, log_density = 6.918594384502317, hamiltonian_energy = -3.196279596434149, hamiltonian_energy_error = -0.14687051852008182, max_hamiltonian_energy_error = -0.3108976002433179, tree_depth = 4, numerical_error = false, step_size = 0.0838350361818113, nom_step_size = 0.0838350361818113, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.9987077306874349, log_density = 7.026202049540629, hamiltonian_energy = -6.436356242545875, hamiltonian_energy_error = -0.007981696417647122, max_hamiltonian_energy_error = -0.06357709080264318, tree_depth = 2, numerical_error = false, step_size = 0.15703123871305338, nom_step_size = 0.15703123871305338, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.8154441198981451, log_density = 7.8180477506659365, hamiltonian_energy = -6.346620088673985, hamiltonian_energy_error = 0.038446527657170826, max_hamiltonian_energy_error = 0.32005462413804686, tree_depth = 2, numerical_error = false, step_size = 0.2940465412322587, nom_step_size = 0.2940465412322587, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.2916393099174209, log_density = 7.8180477506659365, hamiltonian_energy = -5.445282397855711, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 1.8610656307643363, tree_depth = 2, numerical_error = false, step_size = 0.3145408074075477, nom_step_size = 0.3145408074075477, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9344132841197215, log_density = 6.099794027534408, hamiltonian_energy = -5.310244334871163, hamiltonian_energy_error = 0.10749835062443758, max_hamiltonian_energy_error = 0.12226091304831499, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9350108619935141, log_density = 4.807315248231442, hamiltonian_energy = -2.863870714073614, hamiltonian_energy_error = 0.12764375810280315, max_hamiltonian_energy_error = -0.26680337982556024, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.99205627426681, log_density = 6.939173638920748, hamiltonian_energy = -3.096021545452605, hamiltonian_energy_error = -0.009093489416498013, max_hamiltonian_energy_error = -0.17642306584967393, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9730879904584989, log_density = 7.517207432024348, hamiltonian_energy = -6.069073502692328, hamiltonian_energy_error = -0.12532273486478296, max_hamiltonian_energy_error = -0.22500127993370356, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9898267235542655, log_density = 6.836748136158594, hamiltonian_energy = -5.146370039566846, hamiltonian_energy_error = -0.03070131583681235, max_hamiltonian_energy_error = -0.11078875237583041, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9579897064525245, log_density = 5.966833219851022, hamiltonian_energy = -2.757235200541507, hamiltonian_energy_error = -0.095590404015645, max_hamiltonian_energy_error = 0.1834511382897821, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.726243606767382, log_density = 3.359525204589051, hamiltonian_energy = -0.18637999775557468, hamiltonian_energy_error = 0.5075729932940654, max_hamiltonian_energy_error = 0.5607472761660401, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.959423443111824, log_density = 8.247033080513448, hamiltonian_energy = -0.4802093765570108, hamiltonian_energy_error = -0.6500452406428492, max_hamiltonian_energy_error = -0.8031925195090599, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9858423380210232, log_density = 8.720701329346962, hamiltonian_energy = -7.849237249014974, hamiltonian_energy_error = -0.039239822613141406, max_hamiltonian_energy_error = -0.04286348041964505, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9826200011887983, log_density = 9.13766085747886, hamiltonian_energy = -7.383269929296652, hamiltonian_energy_error = -0.07267628354579436, max_hamiltonian_energy_error = -0.07267628354579436, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8773890637829027, log_density = 8.780698321937265, hamiltonian_energy = -7.655523674034655, hamiltonian_energy_error = 0.04627243910386447, max_hamiltonian_energy_error = 0.2789431547903565, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8064401476758343, log_density = 7.19068081947562, hamiltonian_energy = -6.1962237769918325, hamiltonian_energy_error = 0.32457279156017727, max_hamiltonian_energy_error = 0.42727256126754476, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9746845620249783, log_density = 8.441343444711718, hamiltonian_energy = -6.18214758023014, hamiltonian_energy_error = -0.5296294191041593, max_hamiltonian_energy_error = -0.5296294191041593, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.954424601537013, log_density = 8.822454293368091, hamiltonian_energy = -7.868654979677766, hamiltonian_energy_error = 0.03495665651911217, max_hamiltonian_energy_error = 0.14349914692153742, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9506023465540593, log_density = 8.359147595023309, hamiltonian_energy = -7.536106038759906, hamiltonian_energy_error = 0.07478902166315216, max_hamiltonian_energy_error = 0.1320387276277959, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8925496941628367, log_density = 8.520816643926432, hamiltonian_energy = -4.253956272319157, hamiltonian_energy_error = 0.03574287159041578, max_hamiltonian_energy_error = 0.2926571861256946, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.3040464267683835, log_density = 7.0588360976164495, hamiltonian_energy = -0.8427945048678875, hamiltonian_energy_error = 0.9535502412061172, max_hamiltonian_energy_error = 2.1194982911162525, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8902177389443575, log_density = 8.734098978422375, hamiltonian_energy = -6.902735586981487, hamiltonian_energy_error = -0.42029540382992003, max_hamiltonian_energy_error = 0.5140541484732983, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8875122122341428, log_density = 8.542308996969979, hamiltonian_energy = -4.803062636361034, hamiltonian_energy_error = -0.14981418743636432, max_hamiltonian_energy_error = 0.9915206681864506, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9997408482490155, log_density = 9.039563306636609, hamiltonian_energy = -7.763475890839036, hamiltonian_energy_error = -0.05893337799915788, max_hamiltonian_energy_error = -0.09710105708451078, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.39021960876215933, log_density = 9.039563306636609, hamiltonian_energy = -2.1418110946430433, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 1.7300326252540068, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8815203301098138, log_density = 6.178843744724331, hamiltonian_energy = -4.989362041207167, hamiltonian_energy_error = 0.3271778504041887, max_hamiltonian_energy_error = 0.3271778504041887, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.46969816402250447, log_density = 6.106403917197104, hamiltonian_energy = -0.5083588466835742, hamiltonian_energy_error = 0.5388310696638605, max_hamiltonian_energy_error = 1.9903677816838297, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9051001687915429, log_density = 7.03824178619395, hamiltonian_energy = -3.2987051939807177, hamiltonian_energy_error = 0.09576301564611, max_hamiltonian_energy_error = 0.27227392633925795, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9881451242851793, log_density = 6.446948528315062, hamiltonian_energy = -3.2212964833454416, hamiltonian_energy_error = -0.31376445469277847, max_hamiltonian_energy_error = -0.8975659651994059, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9938307999142727, log_density = 7.955933092066466, hamiltonian_energy = -4.732317538574675, hamiltonian_energy_error = -0.3683089452164232, max_hamiltonian_energy_error = -0.6464930365047863, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9973239233274713, log_density = 7.14490922775473, hamiltonian_energy = -5.590169229099654, hamiltonian_energy_error = -0.0665091444081245, max_hamiltonian_energy_error = -0.2725763536927799, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9119974778592947, log_density = 2.5229510330024194, hamiltonian_energy = -0.02330036434179794, hamiltonian_energy_error = 0.07898692558382026, max_hamiltonian_energy_error = 0.2535583075501435, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.882898165287446, log_density = 5.1944685900878085, hamiltonian_energy = 0.43799944847731087, hamiltonian_energy_error = 0.022225031311185806, max_hamiltonian_energy_error = 0.46775538391940463, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6434257804860567, log_density = 8.954663174935426, hamiltonian_energy = -2.8041099351084533, hamiltonian_energy_error = -0.06249745207573065, max_hamiltonian_energy_error = 1.695123574893445, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8639804189635599, log_density = 8.82433875452785, hamiltonian_energy = -4.902034278594376, hamiltonian_energy_error = -0.04581171459770417, max_hamiltonian_energy_error = 0.47950993081330573, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8562506192237582, log_density = 5.735552451613715, hamiltonian_energy = -4.203992364146873, hamiltonian_energy_error = 0.20305333644835333, max_hamiltonian_energy_error = 0.4231158740817009, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9335426582503561, log_density = 5.575063996533608, hamiltonian_energy = -3.709201325269814, hamiltonian_energy_error = -0.1542729561963898, max_hamiltonian_energy_error = -0.525715617435758, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.444128733671736, hamiltonian_energy = -5.360524385155092, hamiltonian_energy_error = -0.2368137441974243, max_hamiltonian_energy_error = -0.30224012766782504, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8716973007692169, log_density = 7.447583814319794, hamiltonian_energy = -5.293138750826114, hamiltonian_energy_error = 0.09959858612749795, max_hamiltonian_energy_error = 0.3247550457860999, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9967602162046, log_density = 6.922919738979388, hamiltonian_energy = -6.423548609586, hamiltonian_energy_error = 0.025340376434087375, max_hamiltonian_energy_error = -0.11831768638755769, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9269678079875047, log_density = 6.980131382269795, hamiltonian_energy = -5.268460985475646, hamiltonian_energy_error = -0.08537027754142112, max_hamiltonian_energy_error = 0.26922477557820823, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.734925773771994, log_density = 7.696791979836052, hamiltonian_energy = -4.99653841798075, hamiltonian_energy_error = 0.14890026994350336, max_hamiltonian_energy_error = 0.49615726715535224, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8941032907566054, log_density = 5.942825523646448, hamiltonian_energy = -0.9078655642719378, hamiltonian_energy_error = -0.33220404252249836, max_hamiltonian_energy_error = -0.41500274098702894, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8556421316903198, log_density = 7.290597273324459, hamiltonian_energy = -1.7963943481035036, hamiltonian_energy_error = 0.10314772853022713, max_hamiltonian_energy_error = 0.7373116623204448, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9234239853164478, log_density = 6.852771580071907, hamiltonian_energy = -5.485707304789674, hamiltonian_energy_error = 0.2292215873631358, max_hamiltonian_energy_error = -0.6783859100603973, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7352199557069952, log_density = 3.4340215014648816, hamiltonian_energy = -2.980899632783142, hamiltonian_energy_error = 1.234036535723369, max_hamiltonian_energy_error = 1.234036535723369, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 1.0, log_density = 7.304205943754505, hamiltonian_energy = -3.615237567213269, hamiltonian_energy_error = -1.4048618723242634, max_hamiltonian_energy_error = -1.7985014587774582, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9890139724779423, log_density = 8.56436040772379, hamiltonian_energy = -5.3715735660391, hamiltonian_energy_error = -0.08689674970285832, max_hamiltonian_energy_error = -0.2051163722300835, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.16350120394965126, log_density = 1.3694622076265057, hamiltonian_energy = -0.8649547902223206, hamiltonian_energy_error = 1.7707035032238574, max_hamiltonian_energy_error = 1.865313609914236, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8811531050028351, log_density = 7.356816256505459, hamiltonian_energy = -2.112344344599774, hamiltonian_energy_error = -1.3028671793201232, max_hamiltonian_energy_error = 4.3788097821743355, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9774946557692045, log_density = 7.351318917282137, hamiltonian_energy = -5.40003321522578, hamiltonian_energy_error = 0.08250458851612397, max_hamiltonian_energy_error = -0.2190441941692436, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9728709450493851, log_density = 8.742363487842264, hamiltonian_energy = -5.93096727909798, hamiltonian_energy_error = -0.25440841825561744, max_hamiltonian_energy_error = -0.27558336383060933, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8629751846092754, log_density = 6.629561383170115, hamiltonian_energy = -6.018040112140533, hamiltonian_energy_error = 0.23859947223973332, max_hamiltonian_energy_error = 0.23859947223973332, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7765673535029248, log_density = 7.0348230675230194, hamiltonian_energy = -4.340061421150395, hamiltonian_energy_error = 0.04752874232349846, max_hamiltonian_energy_error = 0.43618973055912846, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9467550321915461, log_density = 8.631858811740711, hamiltonian_energy = -5.818847490355033, hamiltonian_energy_error = -0.16881842063850883, max_hamiltonian_energy_error = -0.21081141757604982, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8903390642067016, log_density = 5.760124344289804, hamiltonian_energy = -4.425296489373565, hamiltonian_energy_error = 0.10794927154410772, max_hamiltonian_energy_error = 0.7218568346611045, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 6.46541901134734, hamiltonian_energy = -5.626304129190727, hamiltonian_energy_error = -0.6244171717411762, max_hamiltonian_energy_error = -0.6244171717411762, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.4995383558535995, log_density = 6.872551692766402, hamiltonian_energy = -4.16635467677138, hamiltonian_energy_error = 0.6534653084829412, max_hamiltonian_energy_error = 1.2807940713726165, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9765432989757824, log_density = 8.014196328891057, hamiltonian_energy = -5.44758948469784, hamiltonian_energy_error = 0.0886480258057647, max_hamiltonian_energy_error = -0.24488784001833874, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.31933526095953885, log_density = 4.625956409740839, hamiltonian_energy = -0.925734334942713, hamiltonian_energy_error = 0.49612739682895324, max_hamiltonian_energy_error = 7.350617609758439, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9584854770611011, log_density = 8.653920995563784, hamiltonian_energy = -3.2039903006502986, hamiltonian_energy_error = -2.0264960983139173, max_hamiltonian_energy_error = -2.0264960983139173, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8538214154772586, log_density = 7.35440574859836, hamiltonian_energy = -6.0573666632525365, hamiltonian_energy_error = 0.2594142126507535, max_hamiltonian_energy_error = 0.40525083709875265, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9251077437418945, log_density = 5.822190837453534, hamiltonian_energy = -3.2153856885352936, hamiltonian_energy_error = 0.06330874503259531, max_hamiltonian_energy_error = 0.4186945364238488, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9911432688968854, log_density = 7.6267918475017495, hamiltonian_energy = -4.89308616076306, hamiltonian_energy_error = -0.24389941873055765, max_hamiltonian_energy_error = -0.3233619724812682, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8949258872774755, log_density = 8.570172828258777, hamiltonian_energy = -3.1309889717691597, hamiltonian_energy_error = -0.03450703825801149, max_hamiltonian_energy_error = 0.39635348672267723, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9078364865213752, log_density = 7.537417631656794, hamiltonian_energy = -6.86709266350047, hamiltonian_energy_error = 0.21031018051344397, max_hamiltonian_energy_error = 0.2786875124022412, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9451876404016009, log_density = 7.146171750288783, hamiltonian_energy = -6.0538991258923485, hamiltonian_energy_error = 0.12934089386723358, max_hamiltonian_energy_error = -0.2420116552533358, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.915300589102281, log_density = 8.814794220281001, hamiltonian_energy = -5.644978512826439, hamiltonian_energy_error = -0.3955605106239686, max_hamiltonian_energy_error = -0.3955605106239686, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9346491625665958, log_density = 8.079595321387664, hamiltonian_energy = -5.819470519216237, hamiltonian_energy_error = -0.007855320167281299, max_hamiltonian_energy_error = 0.13537159099331575, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8597023594811137, log_density = 5.246673231657603, hamiltonian_energy = -1.7386221752469786, hamiltonian_energy_error = -0.06391458328017263, max_hamiltonian_energy_error = 0.36363832558907605, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9934978560963813, log_density = 8.611215896240607, hamiltonian_energy = -4.635928695815483, hamiltonian_energy_error = -0.03524612478077849, max_hamiltonian_energy_error = 0.03780526278536822, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9390422861536024, log_density = 7.604080251331691, hamiltonian_energy = -6.619798862195134, hamiltonian_energy_error = -0.00018667978607744828, max_hamiltonian_energy_error = 0.15003550543523048, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8520796333723314, log_density = 6.326262305807916, hamiltonian_energy = -4.5570618638856715, hamiltonian_energy_error = 0.270915967056645, max_hamiltonian_energy_error = 0.3598293059499236, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.2543092035216853, log_density = 8.95447498102872, hamiltonian_energy = -2.6071145144210908, hamiltonian_energy_error = 0.8323533062435255, max_hamiltonian_energy_error = 1.8387103774366484, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7034341512103321, log_density = 8.184668135158697, hamiltonian_energy = -6.349291378554348, hamiltonian_energy_error = 0.24295661822488235, max_hamiltonian_energy_error = 1.0924058972197397, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9138870532304496, log_density = 8.330242767211985, hamiltonian_energy = -5.417920622471959, hamiltonian_energy_error = 0.025456869896297363, max_hamiltonian_energy_error = -0.6337633989276394, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8584666928784807, log_density = 5.461056916800356, hamiltonian_energy = -2.317631591841958, hamiltonian_energy_error = 0.06708862167297358, max_hamiltonian_energy_error = 0.4084271070302763, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.95508847788837, log_density = 7.1270696686907336, hamiltonian_energy = -4.841708460321616, hamiltonian_energy_error = -0.04705373617948716, max_hamiltonian_energy_error = 0.17723958975315313, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9760569986326462, log_density = 6.7950290289695765, hamiltonian_energy = -4.177619876226084, hamiltonian_energy_error = -0.028373055986358864, max_hamiltonian_energy_error = 0.121646705973955, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8439523727647129, log_density = 5.6511034362147505, hamiltonian_energy = -3.343395920284094, hamiltonian_energy_error = 0.1954922231415437, max_hamiltonian_energy_error = 0.35647739205080464, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9672806422981933, log_density = 6.404171772320378, hamiltonian_energy = -1.182485724848406, hamiltonian_energy_error = -0.020911925463297898, max_hamiltonian_energy_error = 0.33650759488933124, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9830672121178966, log_density = 6.594737500040515, hamiltonian_energy = -5.107295472134463, hamiltonian_energy_error = -0.19245059716106194, max_hamiltonian_energy_error = -0.35593506259697705, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.114471982514875, hamiltonian_energy = -5.9256898944582055, hamiltonian_energy_error = -0.024933006981259, max_hamiltonian_energy_error = -0.3239811057943456, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9869741148574084, log_density = 6.806847848059255, hamiltonian_energy = -6.049144020595144, hamiltonian_energy_error = 0.10241681449722773, max_hamiltonian_energy_error = -0.48729043464986876, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.872943847450607, log_density = 8.73690836058627, hamiltonian_energy = -3.8373105122484947, hamiltonian_energy_error = -0.29104879096941527, max_hamiltonian_energy_error = 0.39255631195885377, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9729224597419588, log_density = 7.228861451174891, hamiltonian_energy = -6.201418883513504, hamiltonian_energy_error = 0.012020203719790068, max_hamiltonian_energy_error = -0.14598824723834802, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9749615905987083, log_density = 7.737917989719156, hamiltonian_energy = -6.391586249786237, hamiltonian_energy_error = -0.029004026481303846, max_hamiltonian_energy_error = -0.16753278821060302, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8111634345626603, log_density = 4.803438002202771, hamiltonian_energy = -3.4693842706831397, hamiltonian_energy_error = 0.21604223134370582, max_hamiltonian_energy_error = 0.28965296550765807, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8630342679703477, log_density = 6.088809776279918, hamiltonian_energy = -2.444123503979166, hamiltonian_energy_error = -0.10980994008796019, max_hamiltonian_energy_error = 0.48128793388754776, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8903563172172669, log_density = 4.805968077567062, hamiltonian_energy = -4.336771841410624, hamiltonian_energy_error = 0.29819900175943026, max_hamiltonian_energy_error = 0.29819900175943026, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9462459010979795, log_density = 2.885903620623587, hamiltonian_energy = -0.032641271083849066, hamiltonian_energy_error = 0.5877062409399163, max_hamiltonian_energy_error = -1.2797158605725736, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9630340707830628, log_density = 4.899988682763677, hamiltonian_energy = -1.4538099248165026, hamiltonian_energy_error = -0.062388970552679446, max_hamiltonian_energy_error = -1.624065554794035, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 1.0, log_density = 8.844243691285332, hamiltonian_energy = -4.4304046983130725, hamiltonian_energy_error = -0.8369699549115976, max_hamiltonian_energy_error = -0.8602872911237727, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9995563192535211, log_density = 8.966671211355784, hamiltonian_energy = -7.973315606713676, hamiltonian_energy_error = -0.06125072267902176, max_hamiltonian_energy_error = -0.09539870924305127, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7384888566007741, log_density = 8.01518741136994, hamiltonian_energy = -5.583594786415697, hamiltonian_energy_error = 0.3047746940495957, max_hamiltonian_energy_error = 0.47733606388133776, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9965371354189638, log_density = 5.946256867378661, hamiltonian_energy = -5.280795780041904, hamiltonian_energy_error = -0.0772746585314179, max_hamiltonian_energy_error = -0.1438367789004511, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7149048672225807, log_density = 4.051067274659552, hamiltonian_energy = -3.2247478957502356, hamiltonian_energy_error = 0.293028173120331, max_hamiltonian_energy_error = 0.4608683279387411, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9913472098178949, log_density = 5.866889909596807, hamiltonian_energy = -2.0102308858810205, hamiltonian_energy_error = -0.17363350115357123, max_hamiltonian_energy_error = -0.26115297295196704, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9296539009945497, log_density = 7.882278696331678, hamiltonian_energy = -4.847518409896399, hamiltonian_energy_error = -0.04300876969521372, max_hamiltonian_energy_error = 0.2492377227101228, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8709400499639314, log_density = 8.60010113730935, hamiltonian_energy = -6.2017843185204935, hamiltonian_energy_error = -0.29636535377260387, max_hamiltonian_energy_error = 0.44303325194889887, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6457617389771945, log_density = 5.919804935142722, hamiltonian_energy = -3.887438646875905, hamiltonian_energy_error = 0.675174149566621, max_hamiltonian_energy_error = 0.7612840185461094, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.5318175940984039, log_density = 4.991079345473669, hamiltonian_energy = 0.48916249564825254, hamiltonian_energy_error = 0.4589263040479974, max_hamiltonian_energy_error = 3.129443947417837, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9905472884934803, log_density = 8.693476251619536, hamiltonian_energy = -5.0749858996800965, hamiltonian_energy_error = -0.6614450285054447, max_hamiltonian_energy_error = -0.6614450285054447, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9431426817237847, log_density = 9.163003728414427, hamiltonian_energy = -7.184963904394721, hamiltonian_energy_error = -0.06555700437165868, max_hamiltonian_energy_error = 0.18512023773926156, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8278240597359527, log_density = 6.807720999566415, hamiltonian_energy = -6.434876861315455, hamiltonian_energy_error = 0.3697447650376411, max_hamiltonian_energy_error = 0.38135054961760684, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.96839409764324, log_density = 6.396956694695252, hamiltonian_energy = -5.77595488866677, hamiltonian_energy_error = 0.08393002903500069, max_hamiltonian_energy_error = -0.3667903251102542, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.870843011940442, log_density = 7.333638660150822, hamiltonian_energy = -3.7691144102940033, hamiltonian_energy_error = -0.09103306098091135, max_hamiltonian_energy_error = -0.5576498389492563, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9196252182753323, log_density = 8.603962648772741, hamiltonian_energy = -4.492761157639882, hamiltonian_energy_error = -0.40446798472255274, max_hamiltonian_energy_error = -0.5662028202907736, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8860143584798075, log_density = 7.465121310117883, hamiltonian_energy = -4.029154659137214, hamiltonian_energy_error = -0.1780129378864581, max_hamiltonian_energy_error = -0.7699691050064237, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8892860309636135, log_density = 6.806906699330977, hamiltonian_energy = -5.224758532138917, hamiltonian_energy_error = 0.3843604777793175, max_hamiltonian_energy_error = 0.3843604777793175, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9959160927901749, log_density = 2.524555537662139, hamiltonian_energy = -0.4515806745124804, hamiltonian_energy_error = 0.029003927196018964, max_hamiltonian_energy_error = -0.5279340855629266, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9751734349899045, log_density = 2.776689689242028, hamiltonian_energy = 0.04311402138566045, hamiltonian_energy_error = 0.02016451706308331, max_hamiltonian_energy_error = -0.5523184389350524, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8392059667193591, log_density = 7.481083231332205, hamiltonian_energy = -1.834824722932054, hamiltonian_energy_error = -0.4426174179853706, max_hamiltonian_energy_error = 0.9808355962471564, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.992972867934307, log_density = 7.078785610242786, hamiltonian_energy = -5.73066517226017, hamiltonian_energy_error = -0.012285919052727579, max_hamiltonian_energy_error = -0.10523285910697044, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7435056137893279, log_density = 5.783282854391292, hamiltonian_energy = -3.5180714582915895, hamiltonian_energy_error = 0.3178640564238484, max_hamiltonian_energy_error = 0.5161429701203999, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9644052828904011, log_density = 7.323176418584325, hamiltonian_energy = -4.846700469789131, hamiltonian_energy_error = -0.11883717946346906, max_hamiltonian_energy_error = -0.11883717946346906, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6015712159494827, log_density = 7.323176418584325, hamiltonian_energy = 1.4412488459354673, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 0.6874389407995318, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9929290643770897, log_density = 6.852123596752303, hamiltonian_energy = -6.284956392313843, hamiltonian_energy_error = -0.002281549185491727, max_hamiltonian_energy_error = -0.06417507087080487, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9841696912971404, log_density = 8.112990682183097, hamiltonian_energy = -6.385571699329039, hamiltonian_energy_error = -0.03171720076884643, max_hamiltonian_energy_error = 0.04779088167812251, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.6978287485856685, log_density = 7.482633443692432, hamiltonian_energy = -4.1852502433862515, hamiltonian_energy_error = 0.2189900025588738, max_hamiltonian_energy_error = 1.672646149197516, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9951462762341725, log_density = 8.26272666613429, hamiltonian_energy = -6.174744953466799, hamiltonian_energy_error = -0.6164376476065749, max_hamiltonian_energy_error = -0.6164376476065749, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.888980197729778, log_density = 8.31791928043109, hamiltonian_energy = -6.860645818551908, hamiltonian_energy_error = 0.06290897768891046, max_hamiltonian_energy_error = 0.332987505061066, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7539436791424471, log_density = 6.095105105617181, hamiltonian_energy = -4.332852759641565, hamiltonian_energy_error = 0.18636626275094503, max_hamiltonian_energy_error = 0.47216232800027935, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.974011648845798, log_density = 8.005695584459927, hamiltonian_energy = -5.232882544075196, hamiltonian_energy_error = -0.12010224042199269, max_hamiltonian_energy_error = 0.1314934476640417, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9470712342332066, log_density = 6.645836653308422, hamiltonian_energy = -4.93025216513137, hamiltonian_energy_error = 0.086493407625988, max_hamiltonian_energy_error = 0.11874815799003713, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7513749809201549, log_density = 5.264392329122241, hamiltonian_energy = -2.8094059892425656, hamiltonian_energy_error = 0.19213791341455488, max_hamiltonian_energy_error = 0.6898728357688935, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9136033819024645, log_density = 4.911694931989935, hamiltonian_energy = -3.998009504021258, hamiltonian_energy_error = 0.18219781817490244, max_hamiltonian_energy_error = -0.22341390566010233, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 5.69060122420613, hamiltonian_energy = -4.061764807381172, hamiltonian_energy_error = -0.20671205657854896, max_hamiltonian_energy_error = -0.569314538326934, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9024972664850358, log_density = 3.2422599531134706, hamiltonian_energy = -2.805093911343376, hamiltonian_energy_error = 0.1503596578563129, max_hamiltonian_energy_error = -0.1784797945214458, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9633031483708011, log_density = 6.178476733242046, hamiltonian_energy = -1.8642161136308841, hamiltonian_energy_error = -0.12553742508491572, max_hamiltonian_energy_error = -0.32129361267605683, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9686381659472005, log_density = 9.105914318543695, hamiltonian_energy = -3.5542293703388745, hamiltonian_energy_error = -0.30481492523818954, max_hamiltonian_energy_error = -0.30481492523818954, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9154413562941582, log_density = 7.851482978108317, hamiltonian_energy = -7.55678804133101, hamiltonian_energy_error = 0.16776758377762668, max_hamiltonian_energy_error = 0.25649303885627983, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.5866753918728042, log_density = 7.826453859310108, hamiltonian_energy = -4.884612483494536, hamiltonian_energy_error = -0.048511335549161316, max_hamiltonian_energy_error = 2.711050683497665, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.33161939465408, hamiltonian_energy = -7.722662356953903, hamiltonian_energy_error = -0.10380108716215108, max_hamiltonian_energy_error = -0.10380108716215108, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.4029761148884695, log_density = 5.1178757521744895, hamiltonian_energy = -1.826722980674787, hamiltonian_energy_error = 0.9662461996774026, max_hamiltonian_energy_error = 1.1394806555505652, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9519676681806418, log_density = 7.040829765484389, hamiltonian_energy = -3.130117492955403, hamiltonian_energy_error = 0.018582205561032517, max_hamiltonian_energy_error = -0.23168558811323248, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9711677242792355, log_density = 8.424018317656628, hamiltonian_energy = -6.277147746682648, hamiltonian_energy_error = -0.19175041860954334, max_hamiltonian_energy_error = -0.3992106724024058, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9282919120068247, log_density = 9.018298850435826, hamiltonian_energy = -6.892042689962249, hamiltonian_energy_error = -0.1182579229222096, max_hamiltonian_energy_error = 0.2824621122715625, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9818467644743799, log_density = 9.390417682286447, hamiltonian_energy = -7.9694229241840695, hamiltonian_energy_error = -0.011686385623127293, max_hamiltonian_energy_error = 0.05239120009164644, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.727873699851461, log_density = 9.386084187767558, hamiltonian_energy = -6.4074056225499465, hamiltonian_energy_error = -0.0456280039325927, max_hamiltonian_energy_error = 0.5327513346594337, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.7551388672211662, log_density = 6.977501539267964, hamiltonian_energy = -4.683913151290095, hamiltonian_energy_error = 0.13147417764750013, max_hamiltonian_energy_error = 0.5335501969519649, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9609030949227766, log_density = 6.6260586320486645, hamiltonian_energy = -6.023815288355454, hamiltonian_energy_error = 0.08820932761898526, max_hamiltonian_energy_error = 0.11861679286132887, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8127996190021012, log_density = 7.019997250162899, hamiltonian_energy = -1.792563869666524, hamiltonian_energy_error = 0.07021437212006543, max_hamiltonian_energy_error = -1.6550726545920451, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 6.229762319902555, hamiltonian_energy = -3.7660614205784753, hamiltonian_energy_error = -0.2942761513827392, max_hamiltonian_energy_error = -0.6227082016401417, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8735823275075961, log_density = 6.263123491673982, hamiltonian_energy = -3.1530173229865186, hamiltonian_energy_error = -0.014610654405649903, max_hamiltonian_energy_error = 0.4048374379580051, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6448271391778798, log_density = 8.85317934316166, hamiltonian_energy = -2.433688277837586, hamiltonian_energy_error = -0.448297033506325, max_hamiltonian_energy_error = 1.5348499922316177, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9823816532336709, log_density = 8.605213249788807, hamiltonian_energy = -8.143059646397573, hamiltonian_energy_error = 0.05502610128554508, max_hamiltonian_energy_error = 0.12327981995086112, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9746105403089068, log_density = 8.400523840501537, hamiltonian_energy = -7.420417900798885, hamiltonian_energy_error = -0.17881791247535883, max_hamiltonian_energy_error = -0.2079954795964527, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6398647782599849, log_density = 7.40798736382673, hamiltonian_energy = -5.21648319341307, hamiltonian_energy_error = 0.3969994932416707, max_hamiltonian_energy_error = 1.5775199936326896, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9979985016286314, log_density = 8.973242525445421, hamiltonian_energy = -5.011724993280529, hamiltonian_energy_error = -0.05470202985209127, max_hamiltonian_energy_error = -0.21266068445708264, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8727232087949829, log_density = 8.394935754448717, hamiltonian_energy = -7.1575048494288565, hamiltonian_energy_error = 0.11281760844986355, max_hamiltonian_energy_error = 0.24641720728740513, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9306407869490834, log_density = 7.830354049561448, hamiltonian_energy = -6.588030190261094, hamiltonian_energy_error = 0.12871875378269948, max_hamiltonian_energy_error = 0.16707830276065305, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9962392790994758, log_density = 8.239544866704254, hamiltonian_energy = -7.383313105697533, hamiltonian_energy_error = -0.1191288879407768, max_hamiltonian_energy_error = -0.2973002199259698, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.8980712477941003, log_density = 7.135938142909211, hamiltonian_energy = -4.848584131217484, hamiltonian_energy_error = 0.2382298474507092, max_hamiltonian_energy_error = 0.37320637796731226, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.8062098457403258, log_density = 8.33249664443829, hamiltonian_energy = -4.481644303946662, hamiltonian_energy_error = 0.2069172220009765, max_hamiltonian_energy_error = 0.7354357992792568, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6459439850947758, log_density = 8.553259087921004, hamiltonian_energy = -6.424163738391595, hamiltonian_energy_error = -0.11270871049042164, max_hamiltonian_energy_error = 0.9589585712145032, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9854094321075576, log_density = 8.801121532033456, hamiltonian_energy = -7.758979141582209, hamiltonian_energy_error = -0.041118831565976954, max_hamiltonian_energy_error = -0.0746661230594885, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7798058116179034, log_density = 8.47006769655864, hamiltonian_energy = -4.18098702862169, hamiltonian_energy_error = -0.03903437200000681, max_hamiltonian_energy_error = 0.6498293540236397, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8077235636478032, log_density = 5.061013267020151, hamiltonian_energy = -1.8302701031556277, hamiltonian_energy_error = 0.2940082824653656, max_hamiltonian_energy_error = 0.3540356178805424, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9803369622577834, log_density = 5.543634284004341, hamiltonian_energy = -2.2036802986844073, hamiltonian_energy_error = -0.7627868002286524, max_hamiltonian_energy_error = -0.7627868002286524, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.845904263213887, log_density = 4.586163222840563, hamiltonian_energy = -2.5227972738588145, hamiltonian_energy_error = 0.22174111393127793, max_hamiltonian_energy_error = 0.4064712868652145, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8768910389616991, log_density = 8.21383140641247, hamiltonian_energy = -0.6672016326856989, hamiltonian_energy_error = -1.0439868818901283, max_hamiltonian_energy_error = 3.0952629467615402, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.930967728323502, log_density = 8.768883851034253, hamiltonian_energy = -6.875584949004905, hamiltonian_energy_error = 0.08703780091708069, max_hamiltonian_energy_error = 0.21621551463640376, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9332970307469802, log_density = 9.235713130533972, hamiltonian_energy = -7.3410813097860945, hamiltonian_energy_error = -0.25245727911133997, max_hamiltonian_energy_error = -0.25245727911133997, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9997271936591445, log_density = 8.894410357262771, hamiltonian_energy = -8.642129738812013, hamiltonian_energy_error = -0.001171712968986327, max_hamiltonian_energy_error = -0.03405757544424404, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9963647202001269, log_density = 8.745293594459657, hamiltonian_energy = -7.9063749093745255, hamiltonian_energy_error = -0.004187023882439966, max_hamiltonian_energy_error = -0.043472165690620734, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9685410772849513, log_density = 8.245906457121382, hamiltonian_energy = -5.12926457077672, hamiltonian_energy_error = 0.042141722540113946, max_hamiltonian_energy_error = 0.06623540637016401, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8965131441062035, log_density = 7.483303805931755, hamiltonian_energy = -5.551068256668547, hamiltonian_energy_error = 0.1722892842339796, max_hamiltonian_energy_error = 0.5528354404463807, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9979818755639513, log_density = 6.514243566435278, hamiltonian_energy = -5.103439892893485, hamiltonian_energy_error = -0.32480657641209376, max_hamiltonian_energy_error = -0.39253529155952727, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9548690208683662, log_density = 6.921610194393933, hamiltonian_energy = -4.202175038816673, hamiltonian_energy_error = -0.02793018524454105, max_hamiltonian_energy_error = 0.14557902242463783, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9443835145214279, log_density = 8.834910620983889, hamiltonian_energy = -5.371959824019951, hamiltonian_energy_error = 0.016856726714186365, max_hamiltonian_energy_error = -0.503614735805666, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.859471105552817, log_density = 8.055618186885729, hamiltonian_energy = -5.826430024079471, hamiltonian_energy_error = 0.008031755893372683, max_hamiltonian_energy_error = 0.3152078447599136, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7399716138168482, log_density = 8.010775406481649, hamiltonian_energy = -5.494503007397713, hamiltonian_energy_error = -0.016737484337455477, max_hamiltonian_energy_error = 1.2015505225649026, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9863542841134756, log_density = 5.9380422539731, hamiltonian_energy = -4.920564983898547, hamiltonian_energy_error = 0.026543773626197975, max_hamiltonian_energy_error = -0.07121247831026523, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7592776502527298, log_density = 6.857478257445818, hamiltonian_energy = -1.496589215673871, hamiltonian_energy_error = 0.008401727158052985, max_hamiltonian_energy_error = 1.5737372866816406, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9702470508341369, log_density = 4.908897145325275, hamiltonian_energy = -3.851456139712094, hamiltonian_energy_error = 0.1224636139454729, max_hamiltonian_energy_error = 0.1224636139454729, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9771272877671225, log_density = 5.64830061790064, hamiltonian_energy = -3.805647059576458, hamiltonian_energy_error = -0.03572246195877771, max_hamiltonian_energy_error = -0.41540893198444895, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9798451839012038, log_density = 5.313615221488453, hamiltonian_energy = -3.4092393522851925, hamiltonian_energy_error = 0.1832685335971278, max_hamiltonian_energy_error = -1.2574060055597562, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8301651369519908, log_density = 4.067624739823881, hamiltonian_energy = -2.6782517508324277, hamiltonian_energy_error = -0.3781635272296553, max_hamiltonian_energy_error = -1.4082826324068476, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.709779213517561, log_density = 5.804083607598992, hamiltonian_energy = -2.003048008286114, hamiltonian_energy_error = -0.4437201111992639, max_hamiltonian_energy_error = 1.2989420638552227, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9656218188622913, log_density = 4.5913320979513035, hamiltonian_energy = -2.828406681150004, hamiltonian_energy_error = -0.026323583630754044, max_hamiltonian_energy_error = -0.5016578607475122, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7231462588441072, log_density = 7.251462845011158, hamiltonian_energy = 1.192841282029395, hamiltonian_energy_error = 0.2863739743981286, max_hamiltonian_energy_error = 0.8541586885652221, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9818220970669955, log_density = 7.547848316859543, hamiltonian_energy = -3.804910021613736, hamiltonian_energy_error = -0.06470126781533203, max_hamiltonian_energy_error = -0.23811748704302982, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9871749292230462, log_density = 7.525371471368691, hamiltonian_energy = -6.134645089863547, hamiltonian_energy_error = -0.11121506940288306, max_hamiltonian_energy_error = -0.2589106456674699, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9923602731354012, log_density = 8.43644839820737, hamiltonian_energy = -5.0757568401765925, hamiltonian_energy_error = -0.36811691749193365, max_hamiltonian_energy_error = -0.36811691749193365, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.4770132302709077, log_density = 8.64102735572298, hamiltonian_energy = -1.2076404775662946, hamiltonian_energy_error = 0.08687834021522267, max_hamiltonian_energy_error = 1.2577277792489463, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8931891894640368, log_density = 6.813789176320332, hamiltonian_energy = -3.555861929900212, hamiltonian_energy_error = 0.027216878468955485, max_hamiltonian_energy_error = 0.4717330649142695, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9817305497199238, log_density = 8.027582242983305, hamiltonian_energy = -6.165074909530604, hamiltonian_energy_error = -0.048160812557112465, max_hamiltonian_energy_error = -0.3870768614602298, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8710471077947826, log_density = 6.984548320137703, hamiltonian_energy = -5.363468032449132, hamiltonian_energy_error = 0.021010240466646124, max_hamiltonian_energy_error = 0.4005185095903272, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9596014737746725, log_density = 8.263385173448977, hamiltonian_energy = -5.846416299227118, hamiltonian_energy_error = -0.2837999297858529, max_hamiltonian_energy_error = -0.2837999297858529, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8820380368230983, log_density = 6.9774151240507205, hamiltonian_energy = -5.265561986901083, hamiltonian_energy_error = 0.09489819437841085, max_hamiltonian_energy_error = 0.2521693899262214, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.5454461544802421, log_density = 8.321061153056531, hamiltonian_energy = -1.5303858124403042, hamiltonian_energy_error = 0.022729718773923047, max_hamiltonian_energy_error = 1.6821403931251224, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9803188315792444, log_density = 9.257960257821017, hamiltonian_energy = -5.752614842250077, hamiltonian_energy_error = -0.14482705668658014, max_hamiltonian_energy_error = -0.18860747172516845, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9071970911468653, log_density = 7.368758580891194, hamiltonian_energy = -6.789730528128133, hamiltonian_energy_error = 0.1503484767048997, max_hamiltonian_energy_error = 0.18390826748560674, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7927876779203638, log_density = 6.646147816064016, hamiltonian_energy = -5.0037176361935645, hamiltonian_energy_error = 0.531985775927474, max_hamiltonian_energy_error = 0.531985775927474, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9279590451521673, log_density = 4.219710672970134, hamiltonian_energy = -2.36299225067941, hamiltonian_energy_error = -1.1329597049231221, max_hamiltonian_energy_error = -1.1329597049231221, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.984879704635442, log_density = 7.514440593226145, hamiltonian_energy = -1.6233875430936235, hamiltonian_energy_error = -0.34669875734109024, max_hamiltonian_energy_error = -0.4692446205805725, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9529720628582451, log_density = 8.255906634559611, hamiltonian_energy = -6.038196162296815, hamiltonian_energy_error = -0.03714552741854327, max_hamiltonian_energy_error = 0.15259622424398067, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8996378655291589, log_density = 7.693226695147633, hamiltonian_energy = -6.281594062659731, hamiltonian_energy_error = 0.02839896736547054, max_hamiltonian_energy_error = 0.19124714272901588, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7718624933575242, log_density = 8.124364561819705, hamiltonian_energy = -3.9374885950807066, hamiltonian_energy_error = 0.24581110949821383, max_hamiltonian_energy_error = 0.43495708417232537, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9753294957893069, log_density = 7.292073918949587, hamiltonian_energy = -5.859067857993614, hamiltonian_energy_error = 0.0004411810431381724, max_hamiltonian_energy_error = -0.21250795883842066, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9267698130693314, log_density = 8.497589306667843, hamiltonian_energy = -5.076053390403127, hamiltonian_energy_error = -0.18328427421726, max_hamiltonian_energy_error = -0.20174388837847168, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8398934607405076, log_density = 8.719479201279448, hamiltonian_energy = -7.723864130536388, hamiltonian_energy_error = 0.024614278328119354, max_hamiltonian_energy_error = 0.41621954900668534, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9032805964339471, log_density = 9.029336754979237, hamiltonian_energy = -7.435208166932417, hamiltonian_energy_error = 0.056106167767651094, max_hamiltonian_energy_error = 0.20892446194688308, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9408789715311229, log_density = 8.348878696171944, hamiltonian_energy = -7.243024437801137, hamiltonian_energy_error = 0.011010531173609728, max_hamiltonian_energy_error = 0.166385776294109, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8254467508732465, log_density = 8.844167930499346, hamiltonian_energy = -5.533077084584228, hamiltonian_energy_error = 0.21413485540564992, max_hamiltonian_energy_error = 0.5694262135676826, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9674740852991233, log_density = 9.05304095150031, hamiltonian_energy = -7.662288326188249, hamiltonian_energy_error = -0.04040150088172556, max_hamiltonian_energy_error = 0.11593377290441609, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9810579193494492, log_density = 8.98244494624187, hamiltonian_energy = -8.581136087247279, hamiltonian_energy_error = 0.00845877800927397, max_hamiltonian_energy_error = 0.05741562531453681, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9333415308683519, log_density = 8.252005584506016, hamiltonian_energy = -6.848140146898665, hamiltonian_energy_error = 0.09953411811348634, max_hamiltonian_energy_error = 0.14559466634743412, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9163658284126934, log_density = 8.940162714998257, hamiltonian_energy = -7.4437542978847775, hamiltonian_energy_error = -0.08714400052832527, max_hamiltonian_energy_error = 0.23930300442464247, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9020789397820405, log_density = 8.025880235515247, hamiltonian_energy = -4.779649880895543, hamiltonian_energy_error = -0.012854875467705362, max_hamiltonian_energy_error = 0.254189652383916, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.7924240248320716, log_density = 8.172126758900713, hamiltonian_energy = -4.55013977970411, hamiltonian_energy_error = 0.1364306131205213, max_hamiltonian_energy_error = 1.4931347084732511, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9202364669035309, log_density = 7.316318714113617, hamiltonian_energy = -6.279225471274014, hamiltonian_energy_error = 0.05876271680045164, max_hamiltonian_energy_error = 0.13054711934832852, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8498032845579486, log_density = 6.7479772679144965, hamiltonian_energy = -2.033006952728357, hamiltonian_energy_error = 0.10040004492359955, max_hamiltonian_energy_error = 0.29981373301790604, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7170029142334755, log_density = 6.477272532119701, hamiltonian_energy = -2.990805640694992, hamiltonian_energy_error = -3.1430477900987395, max_hamiltonian_energy_error = -3.1430477900987395, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9827753800872706, log_density = 7.061277822867416, hamiltonian_energy = -4.90693190699748, hamiltonian_energy_error = -0.23258844885470964, max_hamiltonian_energy_error = 0.6287376977548194, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9686700376558851, log_density = 5.1360890618819734, hamiltonian_energy = -3.8103504754636055, hamiltonian_energy_error = 0.05167559839043401, max_hamiltonian_energy_error = -0.7386727978562275, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9105304674650087, log_density = 3.3741460976232815, hamiltonian_energy = -2.4763606402700487, hamiltonian_energy_error = 0.3125331143182053, max_hamiltonian_energy_error = 0.3125331143182053, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 5.3427292381793094, hamiltonian_energy = -3.477877123819395, hamiltonian_energy_error = -0.6528139325674309, max_hamiltonian_energy_error = -0.6528139325674309, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8569505125174197, log_density = 7.047744450480796, hamiltonian_energy = -2.7023829872800533, hamiltonian_energy_error = 0.04892479843357567, max_hamiltonian_energy_error = 0.47607789903604036, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9835958618528211, log_density = 7.663018468725792, hamiltonian_energy = -5.99212151494017, hamiltonian_energy_error = -0.10229498597904385, max_hamiltonian_energy_error = -0.18075909994705963, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.991124190896284, log_density = 8.645398280303764, hamiltonian_energy = -6.825972101592229, hamiltonian_energy_error = -0.05304124825080514, max_hamiltonian_energy_error = -0.14724587837337122, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8372194562850436, log_density = 8.474898826531877, hamiltonian_energy = -4.350631596229507, hamiltonian_energy_error = 0.009554575461198311, max_hamiltonian_energy_error = 0.37487576861105154, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9758018138216396, log_density = 7.757891548764669, hamiltonian_energy = -7.206153051758017, hamiltonian_energy_error = 0.027783703785851266, max_hamiltonian_energy_error = 0.0777665283495308, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8061330165921308, log_density = 7.834156130081006, hamiltonian_energy = -3.842963228495265, hamiltonian_energy_error = 0.14305024169127245, max_hamiltonian_energy_error = 0.7409223949866197, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8029891538780773, log_density = 6.97903342898061, hamiltonian_energy = -4.85345931302156, hamiltonian_energy_error = 0.2642344454976646, max_hamiltonian_energy_error = 0.5048943397382724, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9764566254504258, log_density = 7.671489054206475, hamiltonian_energy = -5.636910877779682, hamiltonian_energy_error = -0.21830892453058315, max_hamiltonian_energy_error = -0.34219977174479155, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9471586169820801, log_density = 7.6054585515650555, hamiltonian_energy = -6.529703571620478, hamiltonian_energy_error = 0.029397108929847704, max_hamiltonian_energy_error = 0.19129346651568024, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6953005939461061, log_density = 8.257093699900985, hamiltonian_energy = -5.218261487559037, hamiltonian_energy_error = 0.21039609000218107, max_hamiltonian_energy_error = 1.249122822258692, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9176630707316477, log_density = 8.081937661734187, hamiltonian_energy = -5.988122134768801, hamiltonian_energy_error = 0.06352185935919241, max_hamiltonian_energy_error = 0.2123542159722671, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.7129938528338338, log_density = 4.3898086049972935, hamiltonian_energy = -4.161997217565028, hamiltonian_energy_error = 0.5485469693305403, max_hamiltonian_energy_error = 0.7459244711527582, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9212843059015067, log_density = 9.012912323638417, hamiltonian_energy = -3.297548060862372, hamiltonian_energy_error = -0.730527116047389, max_hamiltonian_energy_error = -1.0688898673965257, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8561562986908068, log_density = 7.588845071562951, hamiltonian_energy = -4.572025153931529, hamiltonian_energy_error = 0.31538192567909107, max_hamiltonian_energy_error = 0.31538192567909107, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.7379087796941941, log_density = 6.435536028901176, hamiltonian_energy = -1.2934708715537413, hamiltonian_energy_error = 0.11971067441947625, max_hamiltonian_energy_error = 0.8201051501044527, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9787652744633963, log_density = 7.012284014655865, hamiltonian_energy = -5.14357144488166, hamiltonian_energy_error = -0.199908652489313, max_hamiltonian_energy_error = -0.22192979322666861, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.7579712253860683, log_density = 7.013337813880867, hamiltonian_energy = -3.6793461638696208, hamiltonian_energy_error = 0.0690376680930056, max_hamiltonian_energy_error = 1.0330392052248962, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.7848236050523902, log_density = 8.46024577526503, hamiltonian_energy = -4.392899556306216, hamiltonian_energy_error = -0.39539076746846735, max_hamiltonian_energy_error = 1.199233827602829, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9627501148035067, log_density = 8.625999388065004, hamiltonian_energy = -7.142092082398392, hamiltonian_energy_error = -0.08263736636729302, max_hamiltonian_energy_error = -0.14755326756044163, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8847842096595491, log_density = 8.34012403519123, hamiltonian_energy = -5.637802754261187, hamiltonian_energy_error = 0.061173977474608066, max_hamiltonian_energy_error = 0.3756820229101132, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8993493342022495, log_density = 8.451279152489004, hamiltonian_energy = -4.857018978995929, hamiltonian_energy_error = -0.059012207496881075, max_hamiltonian_energy_error = 0.2560211476373153, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.7652581498402959, log_density = 6.699042593184572, hamiltonian_energy = -3.0205819122545576, hamiltonian_energy_error = 0.1921944074944073, max_hamiltonian_energy_error = 0.5224317633925288, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9974771920318444, log_density = 5.201407123290608, hamiltonian_energy = -4.574523740426105, hamiltonian_energy_error = 0.01781744796186402, max_hamiltonian_energy_error = -0.2476567031410717, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9744821899955268, log_density = 5.298631219214775, hamiltonian_energy = -3.5427149786737977, hamiltonian_energy_error = -0.10968953655045732, max_hamiltonian_energy_error = -0.10968953655045732, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9010726319934697, log_density = 3.393944721532165, hamiltonian_energy = -3.1685655512497526, hamiltonian_energy_error = 0.21241765752828812, max_hamiltonian_energy_error = 0.21241765752828812, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9971589248067827, log_density = 7.559213274638934, hamiltonian_energy = -2.026354130208949, hamiltonian_energy_error = 0.013836309755513199, max_hamiltonian_energy_error = -0.2554780860091572, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9717030449445119, log_density = 7.061047385760468, hamiltonian_energy = -5.55399011387602, hamiltonian_energy_error = 0.4084707005865944, max_hamiltonian_energy_error = -0.44865516371732284, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8733875706653164, log_density = 7.173358519663799, hamiltonian_energy = -4.9720227973430475, hamiltonian_energy_error = -0.05321225052266243, max_hamiltonian_energy_error = 0.44832828537326463, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9866767783881616, log_density = 7.9386537730304, hamiltonian_energy = -5.70403800254703, hamiltonian_energy_error = -0.09980861644996075, max_hamiltonian_energy_error = -0.2530750681009737, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9757511771066818, log_density = 8.199139803588732, hamiltonian_energy = -5.336447516825801, hamiltonian_energy_error = -0.6215853159106111, max_hamiltonian_energy_error = -0.7597460355285346, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9921737546930606, log_density = 7.685045458397944, hamiltonian_energy = -6.783712602355598, hamiltonian_energy_error = -0.008983543958978046, max_hamiltonian_energy_error = -0.14716651423273852, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7884828246240805, log_density = 6.894252410891739, hamiltonian_energy = -1.5884281524631616, hamiltonian_energy_error = 0.3411865653865336, max_hamiltonian_energy_error = 0.8125248104692675, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7720663471993714, log_density = 4.98341486369482, hamiltonian_energy = -2.0413605478483534, hamiltonian_energy_error = 0.509858313324731, max_hamiltonian_energy_error = 1.4666547159135086, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 7.083999295024029, hamiltonian_energy = -5.196714481318784, hamiltonian_energy_error = -0.8752416764501154, max_hamiltonian_energy_error = -0.8752416764501154, tree_depth = 1, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9966435407232017, log_density = 6.950567390529743, hamiltonian_energy = -6.517063763617087, hamiltonian_energy_error = 0.007087251077616763, max_hamiltonian_energy_error = -0.041276577796016234, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8898162389787931, log_density = 7.333244946751542, hamiltonian_energy = -4.888569321183896, hamiltonian_energy_error = 0.006199323263931689, max_hamiltonian_energy_error = 0.2273092486734285, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9739073222039977, log_density = 7.224746186171405, hamiltonian_energy = -6.381308374048396, hamiltonian_energy_error = 0.06563189342872189, max_hamiltonian_energy_error = 0.06563189342872189, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9563052700331924, log_density = 6.919587938597856, hamiltonian_energy = -6.038801449826426, hamiltonian_energy_error = 0.06879265386732936, max_hamiltonian_energy_error = 0.13006233823827174, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.757644448081993, log_density = 7.244172685315334, hamiltonian_energy = -3.6775481362615206, hamiltonian_energy_error = 0.17807459680553395, max_hamiltonian_energy_error = 0.6718849943487095, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9797779546867305, log_density = 8.592104277611204, hamiltonian_energy = -3.1881183133035647, hamiltonian_energy_error = -0.20697841026036912, max_hamiltonian_energy_error = -0.40837317502376846, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8933346341617491, log_density = 8.169474284913349, hamiltonian_energy = -5.968275395960751, hamiltonian_energy_error = 0.10488914113523506, max_hamiltonian_energy_error = 0.20553861787524497, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6372564337736702, log_density = 6.492570369033356, hamiltonian_energy = -3.973654564315191, hamiltonian_energy_error = 0.5750791746601545, max_hamiltonian_energy_error = 0.867662708341892, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.853761720678555, hamiltonian_energy = -5.340942145046105, hamiltonian_energy_error = -0.766424389249531, max_hamiltonian_energy_error = -0.8234599318649991, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9943274302273598, log_density = 9.159723250282536, hamiltonian_energy = -6.546359495054045, hamiltonian_energy_error = -0.15599985113829362, max_hamiltonian_energy_error = -0.16275858084316042, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9821929765795742, log_density = 8.980504317413306, hamiltonian_energy = -8.51934377768875, hamiltonian_energy_error = 0.0002195766661419185, max_hamiltonian_energy_error = 0.06417923711202711, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9679080939126082, log_density = 8.443526723551935, hamiltonian_energy = -8.063435998177829, hamiltonian_energy_error = 0.05245702318552503, max_hamiltonian_energy_error = 0.05689866354150652, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9596011778918162, log_density = 5.140152910669307, hamiltonian_energy = -3.4910402555343545, hamiltonian_energy_error = 0.08019223477435489, max_hamiltonian_energy_error = 0.14077584446515345, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9996231738903011, log_density = 6.7901513244233564, hamiltonian_energy = -4.98667988228713, hamiltonian_energy_error = -0.24496285764025671, max_hamiltonian_energy_error = -0.36982238553069013, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9979802628980754, log_density = 7.276452733779596, hamiltonian_energy = -4.867365810133192, hamiltonian_energy_error = -0.059242849001645226, max_hamiltonian_energy_error = -0.14090819977834101, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9940432567918732, log_density = 7.251998059565393, hamiltonian_energy = -6.071546547590201, hamiltonian_energy_error = -0.03141121290262028, max_hamiltonian_energy_error = -0.12463672045653862, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9946095906235546, log_density = 8.662530538447037, hamiltonian_energy = -5.972277574514884, hamiltonian_energy_error = -0.10644945723815269, max_hamiltonian_energy_error = -0.11818154222502741, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8468236273137446, log_density = 6.520201427728561, hamiltonian_energy = -6.241852332284535, hamiltonian_energy_error = 0.26443218617612807, max_hamiltonian_energy_error = 0.26443218617612807, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.970262853335664, log_density = 8.072097572545726, hamiltonian_energy = -6.120453245862075, hamiltonian_energy_error = -0.2317295732023732, max_hamiltonian_energy_error = 0.5474136892842063, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9738265952117605, log_density = 8.39816310051984, hamiltonian_energy = -7.644077252089328, hamiltonian_energy_error = -0.034431515019409, max_hamiltonian_energy_error = 0.08100263239745509, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9916844659380534, log_density = 8.962746554219649, hamiltonian_energy = -7.7524317200363075, hamiltonian_energy_error = -0.019221280395337992, max_hamiltonian_energy_error = 0.039271034497198265, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.793168104743028, log_density = 7.148040729167251, hamiltonian_energy = -5.285574404814522, hamiltonian_energy_error = 0.3124059073493779, max_hamiltonian_energy_error = 1.012524806047189, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8200022000745997, log_density = 6.144658795378652, hamiltonian_energy = -3.578026428281082, hamiltonian_energy_error = 0.13325277099077137, max_hamiltonian_energy_error = 0.39429597577657605, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9711758829040806, log_density = 7.414167632428868, hamiltonian_energy = -3.8853554923863785, hamiltonian_energy_error = 0.0363021585975849, max_hamiltonian_energy_error = 0.13890704389367503, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9234327319175148, log_density = 7.2451527541231, hamiltonian_energy = -4.489522274920519, hamiltonian_energy_error = 0.07408279944953833, max_hamiltonian_energy_error = 0.354392134608994, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9550713963844761, log_density = 6.653827492393534, hamiltonian_energy = -3.45237752178494, hamiltonian_energy_error = 0.10099184239327608, max_hamiltonian_energy_error = 0.20617623749955083, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9939292457669863, log_density = 7.21584201087323, hamiltonian_energy = -2.7418326970955667, hamiltonian_energy_error = 0.0030748976437102726, max_hamiltonian_energy_error = -0.33776004842123974, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9833718704692399, log_density = 7.61094430003987, hamiltonian_energy = -5.7498631090872685, hamiltonian_energy_error = -0.03573823295853096, max_hamiltonian_energy_error = -0.2641934251608822, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9902597364297087, log_density = 9.01626945793354, hamiltonian_energy = -7.1432830526495215, hamiltonian_energy_error = -0.2081960584899507, max_hamiltonian_energy_error = -0.24417348763097557, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9265781527275432, log_density = 8.946122733553782, hamiltonian_energy = -7.481863679619255, hamiltonian_energy_error = 0.05633227242172101, max_hamiltonian_energy_error = 0.14791905788892468, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7045209748184651, log_density = 7.276877359617899, hamiltonian_energy = -5.771842583102693, hamiltonian_energy_error = 0.21525388926964872, max_hamiltonian_energy_error = 0.5339793551721312, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.930386508462526, hamiltonian_energy = -6.783206799926852, hamiltonian_energy_error = -0.3742626978692112, max_hamiltonian_energy_error = -0.3807510907108185, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8270298385203406, log_density = 8.187570252710508, hamiltonian_energy = -6.74046676651243, hamiltonian_energy_error = 0.08574736044894049, max_hamiltonian_energy_error = 0.33227049867705816, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.2785394460999219, log_density = 4.636021809825536, hamiltonian_energy = -1.3160150421622139, hamiltonian_energy_error = 1.2975792697369894, max_hamiltonian_energy_error = 3.7542479899225096, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8109962950368651, log_density = 4.415791738992121, hamiltonian_energy = -2.9784896035403263, hamiltonian_energy_error = 0.24720333918438664, max_hamiltonian_energy_error = 0.4550379357170886, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9068325393633359, log_density = 5.074679875133839, hamiltonian_energy = -3.002890456132841, hamiltonian_energy_error = -0.210155501631212, max_hamiltonian_energy_error = -0.6095513554399457, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9814216776898538, log_density = 7.485573671138351, hamiltonian_energy = -3.66737770575001, hamiltonian_energy_error = -0.1418029866347239, max_hamiltonian_energy_error = 0.527215366420668, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 51, is_accept = true, acceptance_rate = 0.9957327335382943, log_density = 8.860405186678555, hamiltonian_energy = -7.229332647570097, hamiltonian_energy_error = -0.2818133382817445, max_hamiltonian_energy_error = -0.4045509988387259, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9159622522470825, log_density = 8.965345090003005, hamiltonian_energy = -7.5910982945328165, hamiltonian_energy_error = -0.013841178186347669, max_hamiltonian_energy_error = 0.2634545553344383, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9671518752559577, log_density = 8.042920944061699, hamiltonian_energy = -6.30481820197333, hamiltonian_energy_error = -0.036220566439000734, max_hamiltonian_energy_error = 0.1297186560536101, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9457952407065424, log_density = 8.576451875672596, hamiltonian_energy = -7.059145582913554, hamiltonian_energy_error = -0.05524880926164588, max_hamiltonian_energy_error = 0.18324166311356382, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9888884621556298, log_density = 9.042059074536578, hamiltonian_energy = -7.722130111289042, hamiltonian_energy_error = 0.004583304511085018, max_hamiltonian_energy_error = 0.04146866839165764, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9281500871081731, log_density = 8.599048733226173, hamiltonian_energy = -7.777157920327119, hamiltonian_energy_error = 0.014851171483447168, max_hamiltonian_energy_error = 0.15481868024182166, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9517482446455421, log_density = 8.132210012454946, hamiltonian_energy = -6.7948453513128255, hamiltonian_energy_error = 0.014446660972446068, max_hamiltonian_energy_error = 0.12148064773967082, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7383427278584876, log_density = 7.245599948211213, hamiltonian_energy = -5.108954122872326, hamiltonian_energy_error = 0.26003751650230367, max_hamiltonian_energy_error = 0.6277146902285304, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8604937226950528, log_density = 5.8031047507334925, hamiltonian_energy = -3.8300352000151987, hamiltonian_energy_error = 0.10820250343587201, max_hamiltonian_energy_error = 0.4052274640767979, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9766430036932804, log_density = 6.865934215424048, hamiltonian_energy = -4.338261574621685, hamiltonian_energy_error = -0.10330035370623936, max_hamiltonian_energy_error = -0.2061634443717537, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9262907621545655, log_density = 5.249608555890326, hamiltonian_energy = -3.517297021802184, hamiltonian_energy_error = 0.13775241528436988, max_hamiltonian_energy_error = 0.22795862726592508, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9912364060164894, log_density = 5.110050931721762, hamiltonian_energy = -4.384132703718896, hamiltonian_energy_error = -0.02217448228830854, max_hamiltonian_energy_error = -0.21851885820387018, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9439734099986261, log_density = 5.900509568981038, hamiltonian_energy = -2.308128016647751, hamiltonian_energy_error = -0.13490173435871888, max_hamiltonian_energy_error = 0.408267802186141, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9981958499951722, log_density = 7.804426897205365, hamiltonian_energy = -5.764508294260027, hamiltonian_energy_error = -0.06371660543735747, max_hamiltonian_energy_error = -0.06988661494793025, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8944909134974502, log_density = 7.915506941824798, hamiltonian_energy = -6.449042104529133, hamiltonian_energy_error = 0.018710712361506232, max_hamiltonian_energy_error = 0.17956035181872387, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.7845848821670115, log_density = 7.21516770940006, hamiltonian_energy = -1.8418742355198292, hamiltonian_energy_error = -0.19721433233263674, max_hamiltonian_energy_error = 0.48078980064335664, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.749532154728969, log_density = 5.370133649980886, hamiltonian_energy = -4.008536172649917, hamiltonian_energy_error = 0.3883996818192106, max_hamiltonian_energy_error = 0.470339506884939, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6939025338760352, log_density = 4.383549143352129, hamiltonian_energy = -0.3589991055251094, hamiltonian_energy_error = 0.5545018124693648, max_hamiltonian_energy_error = 0.5913481773456901, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 7.777744192452612, hamiltonian_energy = -4.328965919361712, hamiltonian_energy_error = -0.770252762420137, max_hamiltonian_energy_error = -0.770252762420137, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8203650857839839, log_density = 8.196797239383551, hamiltonian_energy = -5.509646671743672, hamiltonian_energy_error = 0.06725087709159716, max_hamiltonian_energy_error = 0.42762979221518105, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9466143734830924, log_density = 8.015753903104407, hamiltonian_energy = -6.106165351461444, hamiltonian_energy_error = 0.09225190179557785, max_hamiltonian_energy_error = 0.2066156917273645, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9258627526522273, log_density = 8.8594925805223, hamiltonian_energy = -6.219094289615058, hamiltonian_energy_error = -0.099805965826266, max_hamiltonian_energy_error = 0.26507289614680474, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6315153662683801, log_density = 7.75243107755154, hamiltonian_energy = -1.8856927152976493, hamiltonian_energy_error = 0.09992669679662392, max_hamiltonian_energy_error = 1.1496904501617822, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.739429799665686, log_density = 5.773186892239416, hamiltonian_energy = 0.016178848856600148, hamiltonian_energy_error = -0.2238440675917177, max_hamiltonian_energy_error = 0.5975956620126426, tree_depth = 1, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9432694903947514, log_density = 7.256653398088632, hamiltonian_energy = -2.988832109182658, hamiltonian_energy_error = -0.13798730811218052, max_hamiltonian_energy_error = 0.14188644324280153, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8882156609983952, log_density = 6.874316291219817, hamiltonian_energy = -3.620685644546771, hamiltonian_energy_error = -0.10863583474326122, max_hamiltonian_energy_error = 0.35574030453765415, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.855594733058777, log_density = 6.724325252045236, hamiltonian_energy = -4.2771995828396445, hamiltonian_energy_error = 0.47933776745133816, max_hamiltonian_energy_error = 0.47933776745133816, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.985789754817029, hamiltonian_energy = -5.263415754494081, hamiltonian_energy_error = -0.4064449868157327, max_hamiltonian_energy_error = -0.6002387440551189, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9958321656485253, log_density = 7.6602271431139535, hamiltonian_energy = -4.974992603639607, hamiltonian_energy_error = -0.17065311046685316, max_hamiltonian_energy_error = -0.17065311046685316, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9564687532400911, log_density = 8.166521036646524, hamiltonian_energy = -6.645740714608387, hamiltonian_energy_error = 0.03032405800025728, max_hamiltonian_energy_error = 0.08603234636069246, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8575842659597072, log_density = 9.383669476994385, hamiltonian_energy = -5.231586395502152, hamiltonian_energy_error = -0.08478233620631137, max_hamiltonian_energy_error = 0.39847169944196015, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9218768913121317, log_density = 9.307916147409594, hamiltonian_energy = -7.93246292869094, hamiltonian_energy_error = 0.03103381341651179, max_hamiltonian_energy_error = 0.17812403531500376, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8183853193348537, log_density = 8.501588944974383, hamiltonian_energy = -5.896324127508445, hamiltonian_energy_error = 0.027873088263055124, max_hamiltonian_energy_error = 0.5785192713779752, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8244970617447523, log_density = 7.8010002869182244, hamiltonian_energy = -5.027334755923974, hamiltonian_energy_error = 0.12582199612853273, max_hamiltonian_energy_error = 0.5646605891152259, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9668751228154807, log_density = 7.530291357405624, hamiltonian_energy = -6.558600939007212, hamiltonian_energy_error = 0.09647393112003222, max_hamiltonian_energy_error = -0.15049521786828457, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9083852002375036, log_density = 8.104670948958464, hamiltonian_energy = -5.592212490170389, hamiltonian_energy_error = -0.14361733577574842, max_hamiltonian_energy_error = 0.32055066070079885, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6737042000663431, log_density = 6.6148239852592345, hamiltonian_energy = -2.45458344796425, hamiltonian_energy_error = 0.3077488302250284, max_hamiltonian_energy_error = 0.7561031532480791, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9820335387885303, log_density = 8.852032378621486, hamiltonian_energy = -3.1675882608867614, hamiltonian_energy_error = -0.3634722482735375, max_hamiltonian_energy_error = -0.5978860652228759, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9103223246909652, log_density = 7.411767703187863, hamiltonian_energy = -4.606319047290016, hamiltonian_energy_error = 0.021123689486193697, max_hamiltonian_energy_error = 0.2962978263489884, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9871474828488176, log_density = 8.796371253075002, hamiltonian_energy = -2.672248441769873, hamiltonian_energy_error = -0.8456035568287401, max_hamiltonian_energy_error = -0.8471839982040485, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.9950461627072181, log_density = 9.012064665033037, hamiltonian_energy = -8.322744645190497, hamiltonian_energy_error = -0.00385609114936436, max_hamiltonian_energy_error = -0.06119838147381884, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8159701783373468, log_density = 6.702018483463827, hamiltonian_energy = -4.566870085598602, hamiltonian_energy_error = 0.2531028889258371, max_hamiltonian_energy_error = 0.5446228355679112, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9786483443990591, log_density = 3.3552335878224735, hamiltonian_energy = -0.42085022454513954, hamiltonian_energy_error = -0.007658808247044568, max_hamiltonian_energy_error = -0.35378971158139905, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9896075330680476, log_density = 5.858925225668969, hamiltonian_energy = -1.7230377617988548, hamiltonian_energy_error = -0.08388532246253777, max_hamiltonian_energy_error = -0.3484778211633546, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 5.572041572421719, hamiltonian_energy = -4.171715645429378, hamiltonian_energy_error = -0.0705999176918164, max_hamiltonian_energy_error = -0.24232023923370516, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8331522413395238, log_density = 3.7189330938034217, hamiltonian_energy = -0.8684156584182876, hamiltonian_energy_error = 0.31610693541336055, max_hamiltonian_energy_error = 0.5123733801000784, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8896891774334866, log_density = 3.7069983869794054, hamiltonian_energy = 1.9415151970309035, hamiltonian_energy_error = 0.18223768292299614, max_hamiltonian_energy_error = 0.29915734649777326, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9844781364347269, log_density = 5.382674302991566, hamiltonian_energy = 0.4660820320579049, hamiltonian_energy_error = -0.25601860368700624, max_hamiltonian_energy_error = -0.5118493469523635, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.898541907026656, hamiltonian_energy = -4.449119664643198, hamiltonian_energy_error = -0.22791919992048726, max_hamiltonian_energy_error = -0.542597532236802, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 55, is_accept = true, acceptance_rate = 0.780206300876647, log_density = 4.19204067624797, hamiltonian_energy = -3.3068545718700824, hamiltonian_energy_error = 0.4554581788353538, max_hamiltonian_energy_error = 0.5779828492679302, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.8723277759949247, log_density = 5.888591317276504, hamiltonian_energy = -0.8075750199168148, hamiltonian_energy_error = -0.10264385003645371, max_hamiltonian_energy_error = 1.706914352133754, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9607717893382468, log_density = 7.146823768737929, hamiltonian_energy = -0.5990466557190866, hamiltonian_energy_error = -0.1882598305701011, max_hamiltonian_energy_error = -0.536908005502994, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9024801570873474, log_density = 6.7229815035550935, hamiltonian_energy = -1.483235620933666, hamiltonian_energy_error = -0.12818243685741404, max_hamiltonian_energy_error = 0.3390487509544471, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7295649608320074, log_density = 4.3987783067287936, hamiltonian_energy = -1.5724793551508922, hamiltonian_energy_error = 0.4928276682935948, max_hamiltonian_energy_error = 0.6505822835555923, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 5.544149029669164, hamiltonian_energy = -2.049052771600877, hamiltonian_energy_error = -0.2169552610782497, max_hamiltonian_energy_error = -0.7230383889469087, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 5.0135731676954585, hamiltonian_energy = -2.7687652789784867, hamiltonian_energy_error = -0.4727764585814933, max_hamiltonian_energy_error = -1.3610417567752577, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8677074229217071, log_density = 2.4408906943091324, hamiltonian_energy = 0.627850229677636, hamiltonian_energy_error = 0.3416112129526785, max_hamiltonian_energy_error = 0.3416112129526785, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9709696363180944, log_density = 5.9925391123120155, hamiltonian_energy = -0.1621977279863458, hamiltonian_energy_error = -0.6057817353845865, max_hamiltonian_energy_error = -0.6057817353845865, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9710518946854011, log_density = 7.824445907139935, hamiltonian_energy = -4.772719911197186, hamiltonian_energy_error = -0.19761003476905614, max_hamiltonian_energy_error = -0.3250424119969191, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8786866000542318, log_density = 6.276683743903933, hamiltonian_energy = -1.1151475796079735, hamiltonian_energy_error = 0.20339509950033285, max_hamiltonian_energy_error = 0.7851623839392374, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9958707894788917, log_density = 6.845465143815176, hamiltonian_energy = -3.410067654202659, hamiltonian_energy_error = -0.16036220109910326, max_hamiltonian_energy_error = -0.7017548222702978, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9759009004182285, log_density = 8.149455912689234, hamiltonian_energy = -5.384050047696211, hamiltonian_energy_error = -0.1443250851607516, max_hamiltonian_energy_error = -0.28342783075491074, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9181654879048499, log_density = 8.818540600845903, hamiltonian_energy = -5.761786591593264, hamiltonian_energy_error = -0.07983605752035317, max_hamiltonian_energy_error = 0.29707604693256506, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8779028224695381, log_density = 7.988047385958984, hamiltonian_energy = -6.480278961351253, hamiltonian_energy_error = 0.08634492146076944, max_hamiltonian_energy_error = 0.7267073373028943, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8670899461301486, log_density = 6.099069587315935, hamiltonian_energy = -2.0350356370662315, hamiltonian_energy_error = 0.2960976915323794, max_hamiltonian_energy_error = 0.7092711639813549, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.802829662918914, hamiltonian_energy = -5.8418622585772475, hamiltonian_energy_error = -0.5058034667381275, max_hamiltonian_energy_error = -0.5113399940500312, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 5, is_accept = true, acceptance_rate = 0.9815590349125335, log_density = 8.592211291697843, hamiltonian_energy = -8.35870068648602, hamiltonian_energy_error = 0.03978139776835832, max_hamiltonian_energy_error = -0.0899146233514827, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9285601457389348, log_density = 7.459815799035368, hamiltonian_energy = -6.815262789526852, hamiltonian_energy_error = 0.16724787465680713, max_hamiltonian_energy_error = 0.1770176594820203, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.423076129156875, hamiltonian_energy = -6.009960970019448, hamiltonian_energy_error = -0.12496656116475702, max_hamiltonian_energy_error = -0.32244937767013937, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8817354348835112, log_density = 7.110088684356281, hamiltonian_energy = -1.257753837840542, hamiltonian_energy_error = -0.046865835862464955, max_hamiltonian_energy_error = 0.6709300543506109, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8718368702310387, log_density = 5.759357686887002, hamiltonian_energy = -0.3407818017923532, hamiltonian_energy_error = 0.024709539831614613, max_hamiltonian_energy_error = 0.33755243703283844, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7186427150924269, log_density = 5.815001459573332, hamiltonian_energy = -3.12386408233213, hamiltonian_energy_error = 0.5451548120200065, max_hamiltonian_energy_error = 0.9057407790474246, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9699620733074076, log_density = 5.850779786283781, hamiltonian_energy = -5.57991184940753, hamiltonian_energy_error = -0.06977888152827116, max_hamiltonian_energy_error = -0.34095392007097747, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9974029199620961, log_density = 5.672354334010899, hamiltonian_energy = -4.6328575102968585, hamiltonian_energy_error = -0.028138172266364947, max_hamiltonian_energy_error = -0.3244946964078874, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8165834859329006, log_density = 4.734421934654671, hamiltonian_energy = -3.765638813909443, hamiltonian_energy_error = 0.24272860706278188, max_hamiltonian_energy_error = 0.33972044949896274, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9552514513851909, log_density = 5.204836442247849, hamiltonian_energy = -3.410064378246352, hamiltonian_energy_error = -0.40599018658428765, max_hamiltonian_energy_error = -0.49251630304650273, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 8.341011972468007, hamiltonian_energy = -5.3706102401139235, hamiltonian_energy_error = -0.5994711880380263, max_hamiltonian_energy_error = -0.8808686698703232, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9539283446436116, log_density = 5.926978210674454, hamiltonian_energy = -5.444964997638017, hamiltonian_energy_error = 0.12095048688156496, max_hamiltonian_energy_error = 0.13387282592852934, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8075715536171828, log_density = 5.944273840806138, hamiltonian_energy = -1.2106069230378935, hamiltonian_energy_error = -0.09086835297983775, max_hamiltonian_energy_error = 0.8368912210373887, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.8371247800566293, log_density = 5.719463145609325, hamiltonian_energy = -3.872549228276651, hamiltonian_energy_error = 0.180705376615931, max_hamiltonian_energy_error = 0.5436815345749202, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9800460122654816, log_density = 6.44523148722366, hamiltonian_energy = -3.875265823618823, hamiltonian_energy_error = -0.34336764863559743, max_hamiltonian_energy_error = -0.5924719366730717, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9497110407432836, log_density = 7.802691652968907, hamiltonian_energy = -5.227882937530653, hamiltonian_energy_error = -0.21547543029095362, max_hamiltonian_energy_error = -0.3930334106035209, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7113618753152523, log_density = 6.769514214556532, hamiltonian_energy = -4.063946315977146, hamiltonian_energy_error = 0.10557719676317845, max_hamiltonian_energy_error = 2.700522930107876, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9554605581815797, log_density = 4.625739893411086, hamiltonian_energy = -3.4992342570758312, hamiltonian_energy_error = -0.1461064413341906, max_hamiltonian_energy_error = -0.5528939480065675, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.11219059445474744, log_density = 2.534820957005656, hamiltonian_energy = 3.0341539609918566, hamiltonian_energy_error = 2.011165485843428, max_hamiltonian_energy_error = 2.9502001507769435, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.3041849122845469, log_density = 6.576355655365408, hamiltonian_energy = 2.478167400036538, hamiltonian_energy_error = -0.3324772379549321, max_hamiltonian_energy_error = 6.027478107132629, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.431183866512402, hamiltonian_energy = -5.346726649348736, hamiltonian_energy_error = -0.5046711454887491, max_hamiltonian_energy_error = -0.7247692179882783, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9645675403482532, log_density = 7.4563853754269465, hamiltonian_energy = -6.322281429132931, hamiltonian_energy_error = 0.017802221163342402, max_hamiltonian_energy_error = 0.1827435997427207, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.979430657937333, log_density = 8.684756805084524, hamiltonian_energy = -6.95812517727093, hamiltonian_energy_error = 0.016145535547836154, max_hamiltonian_energy_error = 0.07410247268831238, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9996355883808762, log_density = 8.816766518233234, hamiltonian_energy = -8.112735377927779, hamiltonian_energy_error = -0.008438950162053871, max_hamiltonian_energy_error = -0.05774907228503423, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8964687763350848, log_density = 8.267377850856079, hamiltonian_energy = -6.927378531400218, hamiltonian_energy_error = 0.056177648597089735, max_hamiltonian_energy_error = 0.27981649148753984, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6980698111507948, log_density = 5.599185809469647, hamiltonian_energy = -2.796504410259782, hamiltonian_energy_error = 0.44142646997088564, max_hamiltonian_energy_error = 0.9686648471450394, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9727734798921351, log_density = 5.340221572894491, hamiltonian_energy = -2.722847748329234, hamiltonian_energy_error = 0.015071286715309107, max_hamiltonian_energy_error = -0.6254907864707455, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7842515098448504, log_density = 5.370262117974435, hamiltonian_energy = -1.759096319891312, hamiltonian_energy_error = 0.5040063163126338, max_hamiltonian_energy_error = 0.627557622981453, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9378000989100443, log_density = 5.388955794086531, hamiltonian_energy = -3.7069115054644355, hamiltonian_energy_error = -0.14663988264746086, max_hamiltonian_energy_error = -0.5107382600588335, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 8.870687566898651, hamiltonian_energy = -4.422270764067078, hamiltonian_energy_error = -0.4813365973837356, max_hamiltonian_energy_error = -0.5358458869277931, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9546566068296151, log_density = 8.2897742260976, hamiltonian_energy = -4.236518623134625, hamiltonian_energy_error = 0.009279657906674288, max_hamiltonian_energy_error = 0.14571364326987268, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9307367591902846, log_density = 7.363001324396889, hamiltonian_energy = -4.534608035240051, hamiltonian_energy_error = -0.13146533652303027, max_hamiltonian_energy_error = -0.2360250413079843, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8370038439437298, log_density = 7.186375931968225, hamiltonian_energy = -3.270210921133131, hamiltonian_energy_error = 0.25562908632033254, max_hamiltonian_energy_error = 0.33928527872828207, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9807320094786387, log_density = 4.889900150716754, hamiltonian_energy = -4.447915824929369, hamiltonian_energy_error = 0.05697319532690237, max_hamiltonian_energy_error = -0.11236854316345468, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.998455101737877, log_density = 7.726493360323847, hamiltonian_energy = -3.807054934176746, hamiltonian_energy_error = -0.06265511377165467, max_hamiltonian_energy_error = -0.14285124035398722, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9864530213358008, log_density = 8.230709875859155, hamiltonian_energy = -6.740426389925936, hamiltonian_energy_error = 0.0008411054695409703, max_hamiltonian_energy_error = 0.04682880444126525, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7884887582497727, log_density = 9.007846928287346, hamiltonian_energy = -5.3627268752555874, hamiltonian_energy_error = -0.14914042245229098, max_hamiltonian_energy_error = 0.5326467374001833, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9808269431365985, log_density = 8.951510574186441, hamiltonian_energy = -8.67054532395106, hamiltonian_energy_error = -0.00862451491396854, max_hamiltonian_energy_error = 0.07100802239710369, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8672922716490513, log_density = 7.927222002325326, hamiltonian_energy = -7.1605462736324075, hamiltonian_energy_error = 0.23399838910441595, max_hamiltonian_energy_error = 0.2908937858765368, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9793985825916666, log_density = 9.013003333642505, hamiltonian_energy = -7.434395159706842, hamiltonian_energy_error = -0.1456506871074117, max_hamiltonian_energy_error = -0.25246310022996, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.965915415897556, log_density = 9.117801341300158, hamiltonian_energy = -7.643948695179056, hamiltonian_energy_error = -0.05402493987728629, max_hamiltonian_energy_error = 0.15212795790376, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9404497850016301, log_density = 8.721290074735546, hamiltonian_energy = -8.138380238570406, hamiltonian_energy_error = 0.05255094634615176, max_hamiltonian_energy_error = 0.12913291250114156, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8852646545933913, log_density = 7.019934802430376, hamiltonian_energy = -4.699161312065678, hamiltonian_energy_error = 0.06685367567678568, max_hamiltonian_energy_error = 0.6446681226895272, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.816701576867823, log_density = 6.846962274251799, hamiltonian_energy = -4.493306428055774, hamiltonian_energy_error = 0.49203605662903627, max_hamiltonian_energy_error = 0.963007702016502, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9601639843109172, log_density = 7.076319435970857, hamiltonian_energy = -5.669686718713194, hamiltonian_energy_error = -0.19297977670459865, max_hamiltonian_energy_error = -0.5181884233196401, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9494416972620814, log_density = 5.3481582714229425, hamiltonian_energy = -3.126101617921487, hamiltonian_energy_error = -0.16185854404348676, max_hamiltonian_energy_error = 0.29229601483893397, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9984514022702281, log_density = 5.763060820569757, hamiltonian_energy = -4.821429000437027, hamiltonian_energy_error = -0.012299205342499953, max_hamiltonian_energy_error = -0.030042935541279014, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9803826091673421, log_density = 7.231298103849488, hamiltonian_energy = -5.206040152241139, hamiltonian_energy_error = 0.013857030662926206, max_hamiltonian_energy_error = 0.04435068431019307, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9273414672050907, log_density = 5.035652731833046, hamiltonian_energy = -4.412722555157984, hamiltonian_energy_error = 0.05963361866931827, max_hamiltonian_energy_error = 0.17773306936357347, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.967370821576752, log_density = 5.4498135216600785, hamiltonian_energy = -3.565292147640387, hamiltonian_energy_error = 0.15218699229456512, max_hamiltonian_energy_error = 0.15218699229456512, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9648770581286338, log_density = 8.508569793744297, hamiltonian_energy = -5.606370522314853, hamiltonian_energy_error = -0.9899475517039118, max_hamiltonian_energy_error = -0.9899475517039118, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6728472007542433, log_density = 6.0648071239374, hamiltonian_energy = -4.642181046510229, hamiltonian_energy_error = 0.6391070425276348, max_hamiltonian_energy_error = 0.9544553496912211, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7599912488995989, log_density = 8.28282286273537, hamiltonian_energy = 1.341957246922398, hamiltonian_energy_error = -1.4165377504737657, max_hamiltonian_energy_error = 2.9722096934273887, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6244598219710461, log_density = 7.220159420664999, hamiltonian_energy = -4.469215070105063, hamiltonian_energy_error = 0.5070397594673572, max_hamiltonian_energy_error = 1.3882175056149455, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9851345456262701, log_density = 7.348765915648613, hamiltonian_energy = -5.568189510203476, hamiltonian_energy_error = -0.09117356420345324, max_hamiltonian_energy_error = -0.09117356420345324, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8605408877117057, log_density = 5.405000295940672, hamiltonian_energy = -3.2984538413623237, hamiltonian_energy_error = 0.13268144118261294, max_hamiltonian_energy_error = 0.28877971431301397, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.27716858747286766, log_density = 7.012880583524838, hamiltonian_energy = -0.5957258985064424, hamiltonian_energy_error = 0.04475946894465732, max_hamiltonian_energy_error = 2.149410939022072, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.29431937338044223, log_density = 4.7025468706431575, hamiltonian_energy = -0.9124469433773483, hamiltonian_energy_error = 1.5762474128844324, max_hamiltonian_energy_error = 2.020557394605871, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8633415830941977, log_density = 5.627118151050338, hamiltonian_energy = -1.493386371820601, hamiltonian_energy_error = 0.047169722476350984, max_hamiltonian_energy_error = -1.5668943831640707, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 7.308303053513976, hamiltonian_energy = -5.66634014311675, hamiltonian_energy_error = -0.26002979380592617, max_hamiltonian_energy_error = -0.3163516832086106, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.101052942790494, hamiltonian_energy = -7.043715304632089, hamiltonian_energy_error = -0.051017181258962374, max_hamiltonian_energy_error = -0.10555892387172605, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9303260564641219, log_density = 5.351729942361128, hamiltonian_energy = -3.3219872350869486, hamiltonian_energy_error = -0.15405769569531946, max_hamiltonian_energy_error = 0.18576536586772718, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6599961868715357, log_density = 3.811834430330876, hamiltonian_energy = -0.11596709342263356, hamiltonian_energy_error = 0.3331567932607866, max_hamiltonian_energy_error = 0.7616656047382273, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9973090436633494, log_density = 5.863294287819462, hamiltonian_energy = -0.9614384508848142, hamiltonian_energy_error = 0.002069847411858561, max_hamiltonian_energy_error = -0.46891884627192315, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9793683663745876, log_density = 5.724476096848383, hamiltonian_energy = 0.9949676356592247, hamiltonian_energy_error = -0.4528264084086189, max_hamiltonian_energy_error = -0.8147552660431288, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9720529683026001, log_density = 4.373089702549997, hamiltonian_energy = -3.20248326915743, hamiltonian_energy_error = 0.0885113626861771, max_hamiltonian_energy_error = 0.1885465746174848, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9635905775518899, log_density = 3.1330521036687102, hamiltonian_energy = -3.0798269998664645, hamiltonian_energy_error = 0.1542206776103674, max_hamiltonian_energy_error = 0.5101310406182846, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8910565620102818, log_density = 6.426944399916018, hamiltonian_energy = 0.25141491429916485, hamiltonian_energy_error = -0.5072405524930237, max_hamiltonian_energy_error = 1.586306442571932, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8287887867419669, log_density = 7.6059960195751355, hamiltonian_energy = -5.172047393727373, hamiltonian_energy_error = -0.034269277281326005, max_hamiltonian_energy_error = 0.4987286845785226, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8456996263075989, log_density = 5.87350393657483, hamiltonian_energy = -2.221192188762239, hamiltonian_energy_error = 0.41188315076286486, max_hamiltonian_energy_error = 0.4310668198329841, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9959114240710669, log_density = 6.387383877111105, hamiltonian_energy = -4.9985424016607105, hamiltonian_energy_error = -0.09072839708601066, max_hamiltonian_energy_error = -0.15324710492217797, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 6.706437532878107, hamiltonian_energy = -6.194455071773841, hamiltonian_energy_error = -0.012050105627851693, max_hamiltonian_energy_error = -0.07068474545679582, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9303115890722616, log_density = 5.150882670155612, hamiltonian_energy = -4.036281761050154, hamiltonian_energy_error = 0.1341325531019235, max_hamiltonian_energy_error = 0.1541294883427522, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9995565601229741, log_density = 5.466728166051611, hamiltonian_energy = -4.479738439450394, hamiltonian_energy_error = -0.08186655408953492, max_hamiltonian_energy_error = -0.2090132596895753, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9111529120824351, log_density = 6.56517022976872, hamiltonian_energy = -1.9471846152656287, hamiltonian_energy_error = -0.1899138540647085, max_hamiltonian_energy_error = 0.9456738591224277, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.673338505469927, hamiltonian_energy = -5.3657191089695395, hamiltonian_energy_error = -0.022977801991389768, max_hamiltonian_energy_error = -0.22955529427224164, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9950562468564017, log_density = 8.06652830644257, hamiltonian_energy = -5.900336985322938, hamiltonian_energy_error = -0.14942351448922508, max_hamiltonian_energy_error = -0.14942351448922508, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9446826581611337, log_density = 7.694464047549761, hamiltonian_energy = -7.082525750925522, hamiltonian_energy_error = 0.06178515713061827, max_hamiltonian_energy_error = 0.09019347255949572, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9794912456067963, log_density = 7.63810411643594, hamiltonian_energy = -6.312482758776539, hamiltonian_energy_error = 0.04038571580197026, max_hamiltonian_energy_error = -0.0769015036086742, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.976559183160256, log_density = 7.927283233992675, hamiltonian_energy = -7.009007442061656, hamiltonian_energy_error = -0.04284714731533157, max_hamiltonian_energy_error = -0.1531260222388484, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9065645667914924, log_density = 7.026327091248014, hamiltonian_energy = -4.763879550980295, hamiltonian_energy_error = 0.07520367713072673, max_hamiltonian_energy_error = 0.2198552316026685, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9324377508273091, log_density = 6.8886267536389525, hamiltonian_energy = -4.7814054447017735, hamiltonian_energy_error = -0.08832711174468777, max_hamiltonian_energy_error = 0.14720326411256934, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9465513644953354, log_density = 8.016739061096422, hamiltonian_energy = -5.4096963931997575, hamiltonian_energy_error = -0.03547315270279405, max_hamiltonian_energy_error = 0.16416054464671515, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9353650049260995, log_density = 6.715747040426236, hamiltonian_energy = -4.700568566284671, hamiltonian_energy_error = 0.2046724326202245, max_hamiltonian_energy_error = 0.2046724326202245, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8463310673293798, log_density = 7.40299805407119, hamiltonian_energy = -3.5606951527714044, hamiltonian_energy_error = 0.22012067693907378, max_hamiltonian_energy_error = 0.34272391713375994, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9507339028924852, log_density = 8.938939576221397, hamiltonian_energy = -6.749944957619218, hamiltonian_energy_error = -0.3166806752161646, max_hamiltonian_energy_error = 0.34713123254513967, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9216569707925578, log_density = 8.561666073566796, hamiltonian_energy = -7.902498774309505, hamiltonian_energy_error = 0.05794354255989731, max_hamiltonian_energy_error = 0.17016722236102222, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8178193623023429, log_density = 7.361171062185295, hamiltonian_energy = -5.3468299477274925, hamiltonian_energy_error = 0.23026681733509236, max_hamiltonian_energy_error = 0.3548955321569949, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9944854226507, log_density = 5.629345839570124, hamiltonian_energy = -3.567642033696716, hamiltonian_energy_error = -0.05342186549447847, max_hamiltonian_energy_error = -0.12962772434185377, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8968807309688487, log_density = 5.747732958414826, hamiltonian_energy = -3.3364016460619834, hamiltonian_energy_error = 0.2103734484806563, max_hamiltonian_energy_error = 0.3060213205802178, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.952111009972263, log_density = 4.758575713400253, hamiltonian_energy = -4.251199413578987, hamiltonian_energy_error = 0.15509592486103063, max_hamiltonian_energy_error = -0.20061302874597597, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8586183774118209, log_density = 4.623757269751426, hamiltonian_energy = 0.3403939929959261, hamiltonian_energy_error = 0.06316226084741317, max_hamiltonian_energy_error = 0.6432593976762444, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8137145608768438, log_density = 8.284495195933411, hamiltonian_energy = -1.4746554748180145, hamiltonian_energy_error = -0.7815477112088027, max_hamiltonian_energy_error = -0.7815477112088027, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9988086498407581, log_density = 8.903973681250907, hamiltonian_energy = -8.18732308335434, hamiltonian_energy_error = -0.0634430682938163, max_hamiltonian_energy_error = -0.10150132084594432, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8031686140356978, log_density = 9.307480540125402, hamiltonian_energy = -6.662109145898787, hamiltonian_energy_error = -0.06731447860128448, max_hamiltonian_energy_error = 0.4559763544522699, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7575792329521932, log_density = 7.31259537498531, hamiltonian_energy = -5.5694231748050225, hamiltonian_energy_error = 0.3717630162701244, max_hamiltonian_energy_error = 0.4938789051687653, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9605110562756661, log_density = 6.15811068317452, hamiltonian_energy = -5.906527024746616, hamiltonian_energy_error = 0.3311335982410011, max_hamiltonian_energy_error = -0.3795467990814103, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.344773191475461, hamiltonian_energy = -5.335291974774062, hamiltonian_energy_error = -0.40310502702480644, max_hamiltonian_energy_error = -0.5214929157470598, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.46918996700551563, log_density = 6.235102378652523, hamiltonian_energy = -1.7845308130097246, hamiltonian_energy_error = 0.21744265195688062, max_hamiltonian_energy_error = 3.5581557498190426, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7852053898943835, log_density = 4.229745636375348, hamiltonian_energy = -3.800317415423655, hamiltonian_energy_error = 0.3375656818898092, max_hamiltonian_energy_error = 0.3375656818898092, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8270408495766315, log_density = 7.15572270075036, hamiltonian_energy = -2.0728587798057756, hamiltonian_energy_error = -0.18443081892789515, max_hamiltonian_energy_error = 0.6068826101841225, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.933217359114126, log_density = 6.444581364593086, hamiltonian_energy = -6.079947304281218, hamiltonian_energy_error = 0.06524329894144731, max_hamiltonian_energy_error = 0.13087142745339175, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9707347717414957, log_density = 5.68708230224815, hamiltonian_energy = -3.7331633615172475, hamiltonian_energy_error = 0.05116531974301841, max_hamiltonian_energy_error = -0.14398759951720663, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9684996789486207, log_density = 7.639527603924929, hamiltonian_energy = -4.131599704659099, hamiltonian_energy_error = -0.046252039496387454, max_hamiltonian_energy_error = 0.10210733645942849, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 35, is_accept = true, acceptance_rate = 0.7484383984657281, log_density = 8.651554460069047, hamiltonian_energy = -3.434724002999734, hamiltonian_energy_error = -0.6326516069228312, max_hamiltonian_energy_error = 1.1147837903222333, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.963045939945889, log_density = 6.968536680437936, hamiltonian_energy = -6.027794324944973, hamiltonian_energy_error = 0.0799437011679176, max_hamiltonian_energy_error = 0.2860618452943715, tree_depth = 5, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9060679734811483, log_density = 6.467600158870251, hamiltonian_energy = -5.387595082530575, hamiltonian_energy_error = 0.18344813970372442, max_hamiltonian_energy_error = 0.26216557900351756, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9972931841186419, log_density = 6.828918722271487, hamiltonian_energy = -5.496982499200159, hamiltonian_energy_error = -0.11459780914985096, max_hamiltonian_energy_error = -0.27668607095278563, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7105095277740224, log_density = 2.2293524324817042, hamiltonian_energy = 1.89617262521534, hamiltonian_energy_error = 0.23087025517459825, max_hamiltonian_energy_error = 0.7857504668042576, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9221652077999681, log_density = 0.38006759737770324, hamiltonian_energy = 2.3294159828372902, hamiltonian_energy_error = 0.31346018680061016, max_hamiltonian_energy_error = -0.6979501009557154, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9129887083102878, log_density = -0.4123189538427656, hamiltonian_energy = 6.4338859198472695, hamiltonian_energy_error = -0.16646083482455687, max_hamiltonian_energy_error = -0.8688916258911634, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9991727796344161, log_density = 1.9397870987933565, hamiltonian_energy = 1.9109145908168261, hamiltonian_energy_error = -0.9299396808559224, max_hamiltonian_energy_error = -0.9299396808559224, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8903778802345718, log_density = -1.3428481002328851, hamiltonian_energy = 2.036828750374935, hamiltonian_energy_error = 0.3884827119286465, max_hamiltonian_energy_error = 0.3884827119286465, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9905821426872473, log_density = 2.396251293414169, hamiltonian_energy = 5.060416508528143, hamiltonian_energy_error = 0.037393565797402495, max_hamiltonian_energy_error = -0.4405414560552874, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9884766369116219, log_density = 2.470721570188058, hamiltonian_energy = -0.25469136052983066, hamiltonian_energy_error = -0.0785651969769714, max_hamiltonian_energy_error = -0.5366368555574503, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9968603604892456, log_density = 0.886167174961404, hamiltonian_energy = 2.6425637149840644, hamiltonian_energy_error = -0.2968172312110471, max_hamiltonian_energy_error = -0.5335150767678138, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 2.4570897588092944, hamiltonian_energy = -0.6135202107820958, hamiltonian_energy_error = -0.15913035247941915, max_hamiltonian_energy_error = -0.15913035247941915, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.863545762233004, log_density = 5.041869458082379, hamiltonian_energy = -0.5744071731091482, hamiltonian_energy_error = -0.023357964109234963, max_hamiltonian_energy_error = 0.28610517244519285, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8698673345312652, log_density = 3.3183985275662256, hamiltonian_energy = -2.2850129485512394, hamiltonian_energy_error = 0.1284426844785851, max_hamiltonian_energy_error = 0.2456679625422482, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8848534810815342, log_density = 4.9598317095884, hamiltonian_energy = -1.4721716234205893, hamiltonian_energy_error = -0.05781242790003871, max_hamiltonian_energy_error = 0.2292304557819307, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.19899717638122516, log_density = 4.9598317095884, hamiltonian_energy = -0.05258893509867857, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 2.8402730679560797, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9662972753204954, log_density = 5.301292284637039, hamiltonian_energy = -4.213409978625291, hamiltonian_energy_error = -0.027655876953042835, max_hamiltonian_energy_error = 0.11485058881343235, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.5831067178226547, log_density = 6.257890072645789, hamiltonian_energy = 0.19704919976429558, hamiltonian_energy_error = 0.7128265336167585, max_hamiltonian_energy_error = 1.3830924074132636, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9430296513921245, log_density = 6.305334555936978, hamiltonian_energy = -3.490965131823034, hamiltonian_energy_error = -0.0004373336168179698, max_hamiltonian_energy_error = -0.38326348980867664, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7752608647577542, log_density = 4.447480279734699, hamiltonian_energy = -2.7990898011901346, hamiltonian_energy_error = 0.22682767087714373, max_hamiltonian_energy_error = 0.8018837383333124, tree_depth = 3, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 6.419614705153622, hamiltonian_energy = -4.23512602654333, hamiltonian_energy_error = -0.263015930431004, max_hamiltonian_energy_error = -0.6789813998335066, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 1.0, log_density = 6.567293106201708, hamiltonian_energy = -4.813972213126869, hamiltonian_energy_error = -0.2581560745636766, max_hamiltonian_energy_error = -0.4728116426670672, tree_depth = 4, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 7.527545350899654, hamiltonian_energy = -6.530615672267721, hamiltonian_energy_error = -0.1846897667159242, max_hamiltonian_energy_error = -0.1846897667159242, tree_depth = 2, numerical_error = false, step_size = 0.1343816678223394, nom_step_size = 0.1343816678223394, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other WrappedGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising WrappedGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#AbstractGP","page":"Internals","title":"AbstractGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP and CompositeGP implement the AbstractGPs.jl API. Please refer to the AbstractGPs.jl docs for more info on this.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#WrappedGP","page":"Internals","title":"WrappedGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a WrappedGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = wrap(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for WrappedGPs in terms of the AbstractGP that they wrap. So if you want a particular behaviour, just make sure that the AbstractGP that you wrap has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = wrap(GP(mf, kf), gpc)\ng = wrap(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = wrap(GP(mf, kf), GPC())\ng = wrap(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and GPs. We describe the implemented transformations below.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of WrappedGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = wrap(GP(SEKernel()), gpc)\nf2 = wrap(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"}]
}
