var documenterSearchIndex = {"docs":
[{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/gppp_and_pseudo_points/script.jl\"","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Pseudo-Points-in-Additive-Regression","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"using AbstractGPs, Plots, Random, Stheno\ngr();","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Define model.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"σ², ω, T = 1e0, 1.0, 25.0;\nf = @gppp let\n    f1 = periodic(GP(SEKernel()), ω)\n    f2 = GP(0.1 * SEKernel())\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Sample from marginal process to generate toy data.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"rng = MersenneTwister(123456);\nS = 25;\nx = GPPPInput(:f3, range(0.0, T; length=300));\nfx = f(x, σ²);\ny = rand(rng, fx);\n\nxp_ = range(-2.5, T + 2.5; length=500);","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plots for stuff.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"f₁′_plot, f₂′_plot, f₃′_plot = plot(), plot(), plot();\n\nposterior_plot = plot();\napprox_in_marginal_posterior_plot = plot();\napprox_in_latents_posterior_plot = plot();\n\n\n\n##################################### Exact Inference ######################################","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute the posterior processes, sample from them, and compute marginals.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"@show logpdf(fx, y)\nf′ = posterior(fx, y);\nxp_f1 = GPPPInput(:f1, xp_);\nxp_f2 = GPPPInput(:f2, xp_);\nxp_f3 = GPPPInput(:f3, xp_);\nxp = BlockData(xp_f1, xp_f2, xp_f3);\nf′xp = rand(f′(xp, 1e-9), S);\nf₁′xp, f₂′xp, f₃′xp = split(xp, f′xp);\n\nitems = [\n    (xp_f1, f₁′xp, :red, \"exact\", f₁′_plot),\n    (xp_f2, f₂′xp, :red, \"\", f₂′_plot),\n    (xp_f3, f₃′xp, :red, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"logpdf(fx, y) = -465.9934901401266\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot posterior marginals and samples.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, samples, colour, name, plt) in items\n    plot!(plt, xp_, f′(x); fillalpha=0.2, color=colour, label=name);\n    plot!(plt, xp_, samples; alpha=0.3, color=colour, label=\"\", linewidth=1);\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);\n\n\n\n##################### Approximate inference with pseudo-data in f3 #########################","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute approximate posterior process.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"M3 = 25;\nz = GPPPInput(:f3, collect(range(0, T; length=M3)));\nu = f(z, 1e-9);\nf′_approx = posterior(VFE(u), fx, y);\n\n@show elbo(VFE(u), fx, y);\n\nitems = [\n    (xp_f1, :green, \"Z in f3\", f₁′_plot),\n    (xp_f2, :green, \"\", f₂′_plot),\n    (xp_f3, :green, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"elbo(VFE(u), fx, y) = -478.2661616016306\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Posterior marginal variance.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, colour, name, plt) in items\n    plot!(plt, xp_, f′_approx(x); fillalpha=0.3, fillcolor=colour, label=name);\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations and pseudo-input locations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(approx_in_marginal_posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);\nscatter!(approx_in_marginal_posterior_plot, z.x, zeros(M3);\n    markercolor=:black,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z\",\n);\n\n\n\n############# Perform approximate inference by placing pseudo-data in f1 and f2 ############","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute approximate posterior process.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"M1, M2 = 15, 10;\nz1 = GPPPInput(:f1, collect(range(0.0; step=1 / ω, length=M1)));\nz2 = GPPPInput(:f2, collect(range(0.0; step=T, length=M2)));\nz12 = BlockData(z1, z2);\nu12 = f(z12, 1e-9);\nf′_approx_12 = posterior(VFE(u12), fx, y);\n\n@show elbo(VFE(u12), fx, y);\n\nitems = [\n    (xp_f1, :blue, \"Z in f1 and f2\", f₁′_plot),\n    (xp_f2, :blue, \"\", f₂′_plot),\n    (xp_f3, :blue, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"elbo(VFE(u12), fx, y) = -658.3746829261916\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot posterior marginals.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, colour, name, plt) in items\n    plot!(plt, xp_, f′_approx_12(x); fillalpha=0.3, fillcolor=colour, label=name)\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations and pseudo-input locations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(approx_in_latents_posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);\nscatter!(approx_in_latents_posterior_plot, z1.x, zeros(M1);\n    markercolor=:black,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z₁\",\n);\nscatter!(approx_in_latents_posterior_plot, z2.x, zeros(M2);\n    markercolor=:magenta,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z₂\",\n);","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"display(posteriorplot); display(approxinmarginalposteriorplot); display(approxinlatentsposterior_plot);","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"plot(f₁′_plot, f₂′_plot, f₃′_plot; layout=(3, 1))","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples_note/#Notes-on-Examples","page":"Notes on Examples","title":"Notes on Examples","text":"","category":"section"},{"location":"examples_note/","page":"Notes on Examples","title":"Notes on Examples","text":"The examples demonstrate some of the things that can be achieved with Stheno.jl. They tend only to comprise inference given fixed hyper/kernel parameters, because any hyper/kernel parameters in these examples can be learned / inferred in the standard ways discussed in the Getting Started docs.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/sensor_fusion/script.jl\"","category":"page"},{"location":"examples/sensor_fusion/#Sensor-Fusion","page":"Sensor Fusion","title":"Sensor Fusion","text":"","category":"section"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"(Image: )","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"using AbstractGPs\nusing Plots\nusing Random\nusing Stheno\n\n###########################  Define and inspect our model  ###########################\n\nrng = MersenneTwister(123456);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"In this example, f is an unknown real-valued function that we wish to infer. To achieve this, we have access to two sensors. The first returns noisy estimates of f, where we have been reliably informed by whoever designed the sensor that the mean of the noise is given by sin(x) - 5 + sqrt(abs(x)), and that it's variance is low (1e-2). How the designer estimated this function, and why a sensor might possibly have such a strange mean error, is beyond the scope of this example. The second returns biased measurements of f, where the bias is known to be 3.5. The model below specifies a model for this scenario.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"model = @gppp let\n\n    # Define a smooth latent process that we wish to infer.\n    f = GP(SEKernel())\n\n    # Define the two noise processes described.\n    noise1 = sqrt(1e-2) * GP(WhiteKernel()) + (x->sin.(x) .- 5.0 .+ sqrt.(abs.(x)))\n    noise2 = sqrt(1e-1) * GP(3.5, WhiteKernel())\n\n    # Define the processes that we get to observe.\n    y1 = f + noise1\n    y2 = f + noise2\nend;","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Generate some toy observations of y₁ and y₂.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"x1 = GPPPInput(:y1, sort(rand(rng, 3) * 10));\nx2 = GPPPInput(:y2, sort(rand(rng, 10) * 10));\nx = BlockData(x1, x2);\nŷ = rand(rng, model(x));\nŷ1, ŷ2 = split(x, ŷ);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Compute the posterior processes.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"model′ = posterior(model(x), ŷ);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Sample jointly from the posterior processes and compute posterior marginals.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"xp_ = range(-2.5, stop=12.5, length=500);\nxp_f = GPPPInput(:f, xp_);\nxp_y1 = GPPPInput(:y1, xp_);\nxp_y2 = GPPPInput(:y2, xp_);\nxp = BlockData(xp_f, xp_y1, xp_y2);\nmodel′_xp = rand(rng, model′(xp, 1e-9));\nf′xp, y1′xp, y2′xp = split(xp, model′_xp);\n\n\n\n###########################  Plot results  ###########################\n\ngr();\n\nposterior_plot = plot();","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over y1.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_y1); color=:red, label=\"y1\");\nplot!(posterior_plot, xp_, y1′xp; color=:red, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over y2.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_y2); color=:green, label=\"y2\");\nplot!(posterior_plot, xp_, y2′xp; color=:green, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over f.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_f); color=:blue, label=\"Latent Function\");\nplot!(posterior_plot, xp_, f′xp; color=:blue, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot samples on which we conditioned.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"scatter!(posterior_plot, x1.x, ŷ1;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Sensor 1\",\n);\nscatter!(posterior_plot, x2.x, ŷ2;\n    markercolor=:green,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Sensor 2\",\n);\n\nposterior_plot","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"(Image: )","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"This page was generated using Literate.jl.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other WrappedGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising WrappedGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#AbstractGP","page":"Internals","title":"AbstractGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP and CompositeGP implement the AbstractGPs.jl API. Please refer to the AbstractGPs.jl docs for more info on this.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#WrappedGP","page":"Internals","title":"WrappedGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a WrappedGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = wrap(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for WrappedGPs in terms of the AbstractGP that they wrap. So if you want a particular behaviour, just make sure that the AbstractGP that you wrap has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = wrap(GP(mf, kf), gpc)\ng = wrap(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = wrap(GP(mf, kf), GPC())\ng = wrap(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and GPs. We describe the implemented transformations below.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of WrappedGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = wrap(GP(SEKernel()), gpc)\nf2 = wrap(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"},{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx_local = randn(5)\n\nx = BlockData(GPPPInput(:f1, x_local), GPPPInput(:f2, x_local), GPPPInput(:f3, x_local))\n\ny = rand(f(x, 1e-12))\n\nf1, f2, f3 = split(x, y)\n\nisapprox(f1 + f2, f3; rtol=1e-4)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPINput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the GP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = wrap(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we make use of a variety of packages from the Julia ecosystem:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.02.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"20.74381266246612","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well.\n    s_noise = positive(0.1),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-0.9162907691270586, exp, 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-1.6094379869399091, exp, 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(1.6094379094538682, exp, 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-1.490116130486996e-8, exp, 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-2.3025852420056685, exp, 1.4901161193847656e-8))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     5.720037e+00     2.989942e+01\n * time: 0.03628396987915039\n     1    -1.350425e+01     1.764646e+01\n * time: 1.799875020980835\n     2    -1.576498e+01     1.335373e+01\n * time: 1.8290400505065918\n     3    -1.932485e+01     1.085096e+01\n * time: 1.8438420295715332\n     4    -2.132094e+01     1.047726e+01\n * time: 1.8639521598815918\n     5    -2.289741e+01     6.157064e+00\n * time: 1.8792071342468262\n     6    -2.413157e+01     2.171411e+00\n * time: 1.8938100337982178\n     7    -2.430766e+01     1.964678e+00\n * time: 1.9677610397338867\n     8    -2.439936e+01     8.888761e-01\n * time: 1.9819719791412354\n     9    -2.444508e+01     7.056847e-01\n * time: 2.003051996231079\n    10    -2.446315e+01     2.436969e-01\n * time: 2.0247719287872314\n    11    -2.447097e+01     2.714013e-01\n * time: 2.045933961868286\n    12    -2.447745e+01     2.487078e-01\n * time: 2.0677809715270996\n    13    -2.447917e+01     7.371594e-02\n * time: 2.090294122695923\n    14    -2.448009e+01     8.803344e-02\n * time: 2.1340999603271484\n    15    -2.448030e+01     2.513189e-02\n * time: 2.155898094177246\n    16    -2.448042e+01     3.008813e-02\n * time: 2.1855740547180176\n    17    -2.448044e+01     9.543923e-03\n * time: 2.207345962524414\n    18    -2.448046e+01     1.099367e-02\n * time: 2.2296409606933594\n    19    -2.448046e+01     3.547503e-03\n * time: 2.251328945159912\n    20    -2.448046e+01     4.111008e-03\n * time: 2.273582935333252\n    21    -2.448046e+01     1.291428e-03\n * time: 2.3103411197662354\n    22    -2.448046e+01     1.510949e-03\n * time: 2.332404136657715\n    23    -2.448046e+01     4.667916e-04\n * time: 2.3543050289154053\n    24    -2.448046e+01     5.532233e-04\n * time: 2.3768060207366943\n    25    -2.448046e+01     1.701875e-04\n * time: 2.3989760875701904\n    26    -2.448046e+01     2.012447e-04\n * time: 2.4217140674591064\n    27    -2.448046e+01     6.231434e-05\n * time: 2.4517171382904053\n    28    -2.448046e+01     7.365009e-05\n * time: 2.473992109298706\n    29    -2.448046e+01     2.285283e-05\n * time: 2.4958741664886475\n    30    -2.448046e+01     2.694179e-05\n * time: 2.518404960632324\n    31    -2.448046e+01     8.363768e-06\n * time: 2.5406150817871094\n    32    -2.448046e+01     9.873309e-06\n * time: 2.5631301403045654\n    33    -2.448046e+01     3.060319e-06\n * time: 2.585360050201416\n    34    -2.448046e+01     3.612028e-06\n * time: 2.6151089668273926\n    35    -2.448046e+01     1.119500e-06\n * time: 2.6371729373931885\n    36    -2.448046e+01     1.322213e-06\n * time: 2.6589479446411133\n    37    -2.448046e+01     4.097589e-07\n * time: 2.681746006011963\n    38    -2.448046e+01     4.837377e-07\n * time: 2.704582929611206\n    39    -2.448046e+01     1.499693e-07\n * time: 2.726902961730957\n    40    -2.448046e+01     1.770764e-07\n * time: 2.748540163040161\n    41    -2.448046e+01     5.489414e-08\n * time: 2.778771162033081\n    42    -2.448046e+01     6.480493e-08\n * time: 2.8010599613189697\n    43    -2.448046e+01     2.009025e-08\n * time: 2.823322057723999\n    44    -2.448046e+01     2.372031e-08\n * time: 2.845736026763916\n    45    -2.448046e+01     7.354022e-09\n * time: 2.868433952331543\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -1.062182055823672\n -1.488639448613364\n  1.9117564096580384\n -0.13429697368631258\n -2.27774775554672","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.4),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-0.8621775667301836, -0.8377035296899542, 1.824564073014093, -0.21822648811199194, -4.068316388360106], [-0.8621775667301836, -0.8377035296899542, 1.824564073014093, -0.21822648811199194, -4.068316388360106], [-0.8621775667301836, -0.8377035296899542, 1.824564073014093, -0.21822648811199194, -4.068316388360106], [-1.2246812559409823, -1.657391694186829, 1.1322680454722058, -1.3221427452985057, -3.8865065722592886], [-0.8092052175066614, -1.0443574910840865, 1.384753087663017, 0.5801560709391645, -3.7081593745841546], [-0.9746744007695717, -1.4306716097427874, 1.0758561471366173, 0.056842833080493614, -3.8671940175153687], [-1.0342746643993452, -1.3593224482327835, 1.516309918896587, -0.8425111960750945, -3.7635214220626114], [-1.144347330393728, -1.2727014466784867, 1.5441506033908987, 0.28076535401144526, -3.676964483265414], [-1.1730170114461198, -1.3742810713400355, 1.8087013305020703, 0.7012221333068064, -3.8154783935558774], [-1.5914422292108767, -1.5829305734164463, 1.6503816472669135, 0.6133920910409468, -4.075386831191351], [-0.7165109493018129, -1.4751494930602769, 1.9065465537033839, 0.3747689995702223, -3.682034489730531], [-1.0557487563348351, -1.542925571337035, 1.6191906213256029, -0.43584055638714786, -4.054706059505913], [-1.1876223213364097, -1.458052513985357, 2.2594071906918027, -0.6006688644832237, -3.549670941401046], [-0.8556379584323259, -1.3660409335835029, 2.613973006056791, -0.7296432267688234, -3.717892751897636], [-1.2779688816623953, -1.4290532103702926, 2.627987269771607, -0.4470046877219279, -3.922686463885126], [-1.0946658942922616, -1.227432543252623, 2.6320693842183887, -0.49554991707044865, -3.781100154017731], [-1.1726197952521522, -1.313910104112985, 1.4450254513316572, -1.2554259470879432, -3.68084536660443], [-1.2438545495962594, -1.499629142554448, 1.3827203147775635, -1.1779629150204451, -3.838777186016957], [-0.9035200189697006, -1.247036066925227, 1.6096562607172018, -0.9498226231911038, -3.6078131066050365], [-1.1441879676825426, -1.368953826474879, 2.2481359747167065, -1.0225705713885205, -3.8895945898645823], [-0.76501515107366, -1.078843113705066, 2.1396083657486353, -0.4483204468378681, -3.81595627492748], [-0.9604300085636058, -1.272619708978909, 2.161110321411401, -0.3895020786133239, -3.623444616256313], [-1.2315826292126508, -1.5877607086483725, 0.7600360525854497, -0.9989330729305392, -3.727286072110238], [-0.9732193865799843, -1.1929062493901141, 0.7340140013768836, -0.6280309086292857, -3.606819743567839], [3.2827231374011623, -0.7662128733605502, -1.0017537905681364, -1.467321245223901, -4.080951918696404], [2.112090659953825, -1.099745485949504, -0.891535795665795, -1.579863257502399, -3.6094326131462324], [2.026888226515995, -0.3447444135179706, -1.1268449779267558, -1.2050109345852484, -3.983156994547666], [2.0961094386813066, -0.9503774356890429, -1.0325030901054795, -1.333698473792436, -3.647509858446978], [1.060242958201282, 0.04532571450854127, -1.0631854281598567, -1.472645434235392, -3.6584264432097187], [1.1666793714122827, -0.0263338133240872, -1.0763364286944646, -1.4550994166937643, -4.017298719845307], [1.2691999327688728, 0.01418481418695115, -1.2698037162118556, -1.4818932201174073, -3.778865763429809], [1.8796817799325443, -0.1802200956449883, -0.8898652728161662, -1.0730949186989551, -3.654981797182277], [1.0638207366456478, -0.7367969630388246, -1.0085094877601604, -1.267201041799685, -3.8216439701403626], [1.0680716799422398, -0.7427249098100277, -0.9283040061807766, -1.4674351580838332, -3.7341045190675954], [1.6305298689762848, -0.9356945104017399, -1.2317770318896952, -1.3404129172439296, -4.07054268098403], [2.015319082480287, 0.34686064048702037, -0.8377190306270254, -1.6191242989556784, -3.620180187728315], [1.0083592195286992, 0.04392137386986067, -0.9479789886728128, -1.4760403602652026, -4.057064350978871], [1.6904786170945527, -0.6082632776180492, -0.7634858517940286, -1.054978915260024, -3.647867592033729], [1.882712690941472, -0.989664659085867, -1.1350251308281956, -1.5305041359423286, -3.8204914559199303], [1.8326113947467262, -1.0746648324856638, -1.1817161491047223, -1.2005002522465926, -3.609405930748645], [1.7478979114907056, -0.9823689406256698, -1.255489764431873, -1.2541460106886528, -3.741889553032328], [1.9779741097782124, -0.04974380990987992, -1.0065754874579749, -1.607502013056928, -3.9263229526990213], [0.9192898878564835, -0.3595082739650479, -0.9516255357787552, -1.2729075871024562, -3.7708591854991655], [1.0160075200460978, -0.3139170929060239, -0.8533663681002782, -1.08689712193883, -3.463143440400957], [0.8222000492562477, -0.7177435475317675, -0.8788390096887533, -1.3056731108956814, -4.197994427496045], [0.8828174279480386, -0.8229439824661047, -1.3774949607414195, -1.4468480801279298, -4.123287727669119], [0.9973044875612271, -0.751862862763667, -0.877014401012434, -1.4313609937202538, -3.497537509318002], [1.0520494806426437, -0.5818548480764046, -0.7534328183495639, -1.3584313725072135, -3.723816975842782], [1.3718689912796975, -0.7518137299106371, -1.3414341639327485, -1.4599905113445042, -3.9267850796646133], [1.3554062885960727, 0.211798095272529, -0.85230668864096, -1.452759395443562, -3.6461391118665833], [1.5622916503603306, 0.08288419985782333, -1.3785850101049744, -1.496900140474725, -4.1369602084232024], [1.672675948999336, 0.1002560696707819, -0.7723790012130325, -1.50515413581124, -3.600788231597854], [1.449595164245558, 0.11983762820393754, -1.3702687120259578, -1.3561022411427388, -4.123786526875411], [1.571573816712067, -0.08624049071791284, -0.7076942730503615, -1.3895053733591731, -3.538125832356272], [1.1408947743427387, -0.8545533151688803, -0.7292275222071166, -1.3027907830021943, -3.664267789556388], [0.810092080976135, -0.8766091825972882, -0.737917257538512, -1.108083398535342, -4.035226836854477], [1.1175743557260298, -0.8289804057189083, -1.3182457083345722, -1.6235095419395962, -3.5783061028743384], [0.6083262463344355, -1.0555587812594736, -0.9340068249138611, -1.0458738057097006, -3.8048805322326325], [1.0478703594106031, -0.770300169003145, -1.1635628415472425, -1.7099511753011025, -3.8531047120481503], [0.7812897538519677, -1.0493146752682396, -1.2128575613237071, -1.2766679039721627, -3.896651715847222], [0.7875532584286072, -0.9589686994242433, -0.9129600972212245, -1.7386116582988773, -3.9111274299077223], [1.13625035831484, -0.9587740728394696, -1.0912294599116614, -1.052434061172287, -3.8695233846215347], [1.1909818937941863, -0.9241950698433163, -0.7009550389760089, -1.1287848125409068, -3.647935002551058], [1.0475828072155489, -0.7719280174473527, -1.0248557171636783, -1.2765195219739813, -3.8545124167940528], [1.755742099800107, 0.13775370151249922, -1.3571101701188129, -1.4657316210492144, -3.8653335729792677], [2.005255136130336, 0.4602988113440497, -0.8258055780901543, -1.3968140703719636, -3.9939010081046913], [2.229749486962105, -0.2200691748774934, -1.0889978030604646, -1.1427314749160946, -3.6543219251741763], [2.4781623384197227, -0.670120469609047, -1.1880874784217093, -1.4015721871314155, -3.5645137674155465], [1.1059370118754488, -0.6643272001864422, -1.2104598027519045, -1.3583004238444443, -3.8506123341200826], [1.0783482679342258, -0.6457320123314338, -1.1732775423459934, -1.6027627433388756, -4.108778658489113], [1.218702161818176, -0.6695095311891259, -1.0352736788242158, -1.3148312789406704, -3.449594026170204], [1.2663996732208693, -1.1560224386981397, -1.2354102398439175, -1.236243598938139, -4.074770837946489], [1.029050182415157, -0.9589303960803237, -0.7793199736819921, -1.225437104856306, -3.512739285213681], [1.4570708624418471, -1.2706762280851263, -0.9760497241494838, -1.2906835553433689, -4.030269826295697], [1.395538933867089, -0.08318222089959301, -0.8908827741494365, -0.9786190684500076, -4.067160127287344], [1.4789348789169787, -0.35175043447461274, -0.9699367370016917, -1.3901882297033226, -4.130300281696509], [1.4467152587526815, -0.38585215741191575, -1.0893059835579275, -1.3497309632995211, -4.0295444719705005], [2.2155259180718767, -0.26939942048400795, -0.6340848346710769, -1.2686263135675944, -3.6235921401091784], [0.7629711134190121, -0.8087710627660987, -1.0852168118658814, -1.2884519180227714, -3.5871986734629213], [1.0012219465525114, -0.7636317550801929, -1.1664569656001074, -1.363087423560862, -4.048650320497159], [1.0902287066646024, -0.15425314531744255, -1.0214937529641699, -1.5997912085099095, -3.952164338720585], [0.9633783367022881, -0.24080951048911442, -0.8041319696881163, -0.9453578993337198, -3.692690194154278], [0.999213203345635, -0.39756451342889765, -0.9262195056829761, -1.450028102653341, -3.937352891225634], [1.8217726777501313, -0.29442684427962507, -0.9073467990032588, -1.360753062862616, -3.750552868334835], [2.196036111759676, -0.8829264394806982, -1.144882611394159, -1.5552002530281925, -3.55277303991027], [1.5806086614705277, -0.5877744351522791, -0.9578408462908683, -1.4184690353323732, -4.128953299957639], [2.7200151757166555, -0.37299987501335874, -1.0520119664134142, -1.3275204024883673, -3.6330676800204573], [1.502890962373769, -0.41407367748109536, -0.9241561924040902, -1.3655978025223374, -4.023442971047311], [2.492535348606935, -0.022449382959981827, -0.8127532014105756, -1.2567729346036336, -3.739792501074253], [2.0600310368794306, 0.8091092745488414, -1.0284667683843298, -1.589970004652146, -3.9490029108125], [1.9097380768252372, -1.0138981044590052, -0.9954174592640632, -1.6522321119524164, -3.9206079075453024], [1.5321320732053563, -0.629884833138842, -0.9086248288241987, -0.9113344617622039, -3.67695382637435], [1.2878394877606554, -1.100208116362311, -1.0979642374877698, -1.5721131843413725, -3.942410600834125], [2.125340983104485, -0.42059035395105776, -1.0016482892061058, -1.4105549858222586, -3.9429201195398083], [0.5077968965707744, -0.8413545387660112, -1.2038319188243518, -1.236138142877596, -4.040130347062861], [1.153648217113315, -0.9395159542565964, -1.0979128208970503, -1.7442851367275027, -3.6478774602096964], [0.9414318101946806, -1.0014722643278338, -1.4928967930992925, -1.801946559192017, -4.173045164766939], [1.3056127457798772, -0.32116717813241674, -1.5072697283541536, -1.5045979996162115, -3.7197696695546436], [1.5832184514836596, -0.5203551988765998, -1.3437401078790383, -1.3944083960629456, -3.886716018832606], [1.3093326710278406, -1.013373745401062, -0.8737218399489411, -1.3087999860283228, -3.742887363609975], [2.3364838632046063, -0.7014354577472899, -1.0178761956677693, -1.38529479279164, -3.8158803419593506], [1.3449589208891273, -0.6707609650404631, -0.9666768551702848, -1.5761660843537117, -3.6395542961469065], [0.9980796692998514, -1.2466433706612436, -1.1726983187481999, -1.420697637241515, -4.105903475586032], [0.9459609673403918, -1.3080672518367311, -1.266988601238778, -1.4301661495374212, -4.160709050738683], [1.1486405638766497, 0.06981540049668969, -0.9813953350833399, -1.482469879032782, -4.333408750954364], [1.099359987168035, -0.0185065537244799, -0.9516071848399068, -1.4649450738978889, -4.19487158639914], [1.09416342716156, -0.7636992821721291, -1.0063364309134681, -1.162989331476955, -3.478827082877232], [0.6272113468355137, -0.46258592928177494, -0.7710009610994952, -1.360639148679093, -3.736986691933468], [1.2087522271118556, -1.071220306563778, -0.874889215740394, -1.2563746767494999, -4.065227154771882], [0.9513442911632168, -0.26084045597009414, -1.1212444753500224, -1.360489287647189, -3.772455666246161], [2.3986663071763905, -0.018571057272101326, -1.0847584864611757, -1.3181046875756404, -3.6779918640406826], [1.4437754379584127, -1.1644513963985854, -1.048754205060218, -1.179083644905523, -3.9404999828173213], [1.4299615671806394, -0.4012440812904532, -0.9229213694593557, -1.5047216464173823, -3.582956706853063], [1.3526655059391226, -0.8841934071673607, -1.0229481694372875, -1.2971957585971543, -3.9212465331329547], [0.8851810288152636, -0.040254617885568195, -0.8964742009092213, -1.07897636530057, -3.7749907711190014], [0.8528812549633983, 0.18965393067227546, -0.8708204355362589, -1.1298111123734262, -3.630391164566358], [0.8095270954416237, 0.016571862237179213, -0.983991991005711, -1.1332371598738378, -3.815974498679992], [1.1139927736266682, -0.6132121597400557, -1.3872780351468386, -1.3882374423692714, -3.710037840509144], [1.282598113266389, -0.3819890743899258, -0.968737971938904, -1.1679128101470635, -3.9526830925207745], [1.9510712928231162, -0.5379719439449077, -1.0369129578932872, -1.4432472225180746, -3.779188537943617], [1.6543917143202171, -1.1156486144120041, -1.004510223381904, -1.1498920976434008, -3.7865184388750532], [0.7345230023438765, -0.42681923313073045, -1.062508725858947, -1.4033295707540137, -3.8338339785255204], [0.7544985381561787, -0.9278922231889316, -0.9077957381825768, -1.2614017525354944, -3.8706308451883844], [0.1624384162913422, -1.0196654952865485, -1.1241823614542263, -1.3519893418252276, -3.8350043207410907], [3.139302683512503, -0.20683426755698944, -1.0735185946232955, -1.3162101185610926, -3.7528596741634757], [3.296793959284163, -0.26888218910625483, -1.078502834010217, -1.4136771645361446, -3.787993288751888], [2.672834974763134, -0.8333040613534749, -0.8812869206969965, -1.1449939185037166, -3.833884611462458], [1.5668504910834582, -0.7160238501770448, -1.2006475665159682, -1.5679658913867744, -3.8633961015699545], [0.6731698035666693, -0.49283494611133777, -0.8728003990431885, -1.2004777295520692, -3.863829303206876], [0.9142982846800962, -1.0604997868185515, -1.123280991676312, -1.5653450917869574, -3.76248912498156], [0.8638816656853356, -0.9753083858547763, -1.2457689402681091, -1.4653693597612172, -3.9673271153120955], [1.0605161200210391, -0.9724932787149607, -0.8183071613922753, -1.4053503237719884, -3.5642724472910006], [1.4828752795356082, -0.7219800514216773, -0.9777173285199101, -1.1727065978694318, -3.6810363961935293], [1.3880210112996827, -0.8278940945715241, -1.016776621074894, -1.0754539867163513, -3.8722491537584807], [2.3001400900440196, -1.1806275151700119, -1.4292475535203755, -1.3768802008988328, -3.7068839223869596], [1.105167990217774, -0.1341462945637008, -1.4926207273206085, -1.4821054569539376, -3.698959109316092], [1.3151213160600022, -0.06360070058412509, -1.4786186311983975, -1.2958708901000642, -3.796595873498322], [1.7752243089719153, -0.22663367507354487, -0.9480112524290123, -1.330390867668775, -3.6403435591522153], [1.7752243089719153, -0.22663367507354487, -0.9480112524290123, -1.330390867668775, -3.6403435591522153], [1.4753193825683981, -0.5081366059288845, -1.1030281252698084, -1.2526885917435342, -3.7057907466459152], [1.6554574696147537, -0.17894644881676955, -1.0081964887652322, -1.2084850766179382, -3.7566525697083155], [2.505809981103685, -0.7073162328853575, -0.84187690664428, -1.1627026810413852, -3.8918093090569603], [2.4637922283522564, -0.6102711181874346, -0.8595108179409784, -1.3174079708726703, -3.9384599038851396], [2.706059664680732, -1.4344282958121544, -0.7708135630586338, -1.4000673316238654, -3.7629744446827793], [2.4891562158672063, -1.3451669476407422, -1.0984631023443987, -1.388642583981498, -3.9594590580244757], [2.2144813360240265, -0.9371877845533181, -1.1551896156682888, -1.6892780118302428, -3.614588749589352], [3.2520684416767334, 0.19577039710329175, -1.196373547536575, -1.6206903367429428, -3.9216705354255064], [0.5087780599723577, -0.6196750371024948, -0.9078900220064577, -1.3156070883954758, -3.5518359415665692], [1.9903162097232894, -1.093645624359296, -0.9878911860275613, -0.9457968162701115, -4.018767567818656], [1.7080839350313344, -0.512963172354987, -0.9570424858523653, -1.2646637686080555, -4.021644969774061], [1.2384917195294907, -1.4683609638910717, -0.7437809762747074, -1.0007329378171175, -3.6666707990608165], [0.5628604302118098, -1.1630996999396477, -1.0432466656355535, -1.2084135640909506, -3.807394379207875], [0.8714395866003241, -1.6296221060123286, -0.7026250279349175, -0.8005606503952849, -4.055554294260979], [0.7987207420942231, -1.6569766556778343, -0.8298437475563929, -0.8696275151634514, -3.8698293308465397], [1.0192709864617586, -1.4982993126895774, -0.8850166080971057, -1.0617305525895322, -3.8070605209621777], [1.3016625661258059, -0.6341385869178447, -0.8755889441737245, -1.0883531166487115, -3.8724703886310743], [1.1108774263893053, -0.5333686921076296, -0.9769081758674715, -1.2570180556927062, -3.7104004684114433], [1.4860074878240956, -0.24222743020013082, -1.2042604560600503, -1.4065629713904246, -4.047984181225855], [1.2343249680516228, 0.4419071858721693, -0.8431649772473112, -1.6405449229073419, -3.6804564838536007], [1.4194166416205334, 0.0948657546356258, -0.8777865848585724, -1.066673195727474, -4.006253467081344], [1.077156036084688, 0.6228330903029999, -1.1419815296817546, -1.504407400888481, -4.1866590945994755], [1.0584241042351132, 0.575227957039921, -0.8428431918333773, -1.101170774961434, -3.65639417792769], [1.4934899806349466, -0.8528600529903058, -1.066059925029553, -1.311583179873798, -3.899851268062555], [1.8593792372887081, -0.538983305203862, -0.8384247391648871, -0.8801032117910321, -3.6474134684951993], [2.5171724075291366, -0.8994499453719649, -0.8420023074586243, -1.022084626698683, -3.826572537714521], [2.0788927586714334, -0.9321336109200727, -1.1030129087691223, -1.4172702800741304, -3.9104820486762364], [1.2861435495423632, -0.3438683623356382, -0.892432510872072, -1.1521247416760736, -4.005274781096432], [1.357560240621426, -0.08564357587045487, -1.0373820577366164, -1.565255129021641, -3.7386569020904004], [1.3537496576039123, -0.39495861036486046, -1.0488878011528728, -1.1814932443655146, -3.802665758404043], [1.4936764660054072, -0.3245346760828825, -0.9112962051470762, -1.4377928344583226, -3.839902721439526], [2.0932310235518816, -1.146387901702796, -0.8690185288328013, -1.3429165942552779, -3.8387541621087395], [2.0891798488133886, -1.19005825359194, -0.9385619349420411, -1.3460759678576273, -3.914416685129806], [0.9598765355132873, -0.45382707532110356, -1.0571937821048731, -1.2626077077538236, -3.8899493129806557], [2.35864268158716, -0.36860655346874827, -1.0866418327021643, -1.2440314674011916, -3.7617905695370863], [2.124083726897123, -0.3910500026849546, -0.9331536702180685, -1.5225079869751776, -3.8868815365739593], [2.7127568878784536, -0.48632906499748896, -0.8033680721860822, -1.113404053482, -3.823088334400381], [3.107939472322853, -0.3407358846192572, -0.6541486012236846, -0.7839433581415408, -3.277833020563455], [3.35695002058689, -0.5311112176294858, -0.8482575115315908, -1.0398392361697, -3.4768971714318457], [1.9698406157169204, 0.5832082175619301, -0.5919856544938104, -0.9806385694952465, -3.672605104532602], [2.045402784746724, 0.668923848581213, -1.0412703285417557, -1.0731310306605544, -3.704312712497057], [2.07866902238868, 0.615355356342842, -1.0660082043738028, -1.011680698691939, -3.8113005564856093], [1.355449665114305, 0.021940242726154968, -1.198760769334441, -1.6365491682034177, -4.017431414823541], [1.893861451770781, -0.33415295029122916, -0.9044477201027682, -1.2626418541902122, -3.361949501433814], [1.642153126522248, -0.609375610778953, -0.8119385109760429, -1.017692086368369, -3.9403164610165424], [0.9431462288499679, -0.9156639398623438, -1.0992388138050457, -1.6947095670494017, -3.819909001344102], [1.7517815651453232, -0.508908424015209, -0.9020118652480366, -1.3001323069841395, -3.904810964896508], [1.6624599668801183, -1.1258525199047684, -1.1121501507082119, -1.1653513059150546, -3.995282718776603], [1.7948501154866063, -0.9831475956639244, -0.967964036322458, -1.5884915539797069, -4.001010583355677], [1.6025720768027463, -1.0410162685446664, -1.132755038723832, -1.357825746323068, -3.546882113211134], [1.7325244103149335, -0.22327288255238298, -1.17418630305046, -1.1874743792597984, -3.789184343843525], [0.3089587723198626, -1.1772814278913082, -1.2600249521713127, -1.3363426763270971, -3.7636431012716014], [0.6673513006240661, -0.9938495792692659, -1.1615735949336246, -1.8456478387260729, -3.852709832828483], [0.8260281918417134, -1.2794269999802002, -1.1383900013499986, -1.7244099849238546, -3.9678425234521195], [1.8214772499561205, 0.5001871373192518, -0.9803992178078826, -1.2503598201154034, -3.92867578727558], [2.7629757021410906, -0.9235173477291032, -0.8792336144083206, -1.0771174401357093, -4.042807025148096], [2.72403268667116, -1.00267550209497, -0.9895859850842424, -1.034577181096557, -3.9262816014620476], [3.1224226197037135, -1.175314057869813, -1.1164023871228355, -1.2160831550186026, -3.7077485408777933], [3.168471293083936, -1.291273643330693, -0.6032282277753565, -1.1491085584560286, -3.610444031979331], [3.3758441470127756, -1.0990175127719761, -1.3848155217729874, -1.493582137179267, -4.020949812597941], [3.7411953808598817, -1.131037647486225, -0.7695769883406494, -1.4023453850818886, -3.636671560551692], [3.6231613928252844, -0.45778239775530016, -0.8836674990592257, -1.4225784463479787, -3.9193800722589587], [3.329837826125132, -0.3835943897678928, -1.233278163028164, -1.3885207977195935, -4.075475487516458], [2.9134131475259224, -0.4471159778332273, -0.9224041856184004, -1.5079132813201654, -3.6923479258077934], [2.325983878113098, 0.28738158617178944, -0.8200511026001693, -1.391244485079449, -3.789035983297704], [0.30001068153558286, -1.2570911237397606, -0.7370547978286659, -0.7842711810780354, -3.8276705995801343], [1.9710905639708094, -0.06312813768090264, -1.0015258750496472, -1.3844912965319573, -3.8635721598143906], [1.5300187794145923, -0.9826341242596519, -0.805748885599115, -1.4160200658446418, -3.8390423820678166], [1.5389852747131294, -0.8945828622674483, -0.7742802243148154, -1.4229033440724534, -3.8229702431767625], [1.6121673958213247, -0.6086558494682184, -1.4330557121315852, -1.4749578473572704, -3.93592691272933], [1.6425972743946056, -0.7336176662237308, -1.1812320972544852, -1.8644772264794909, -3.4886811141696774], [0.6629487864754249, -0.7989330334424327, -0.7612489876346216, -0.9391823064159859, -4.198108076541006], [0.5737350939217399, -0.8095918400020794, -0.8320013766768385, -0.8635131950624589, -4.128878485283371], [1.9204438673853899, -0.03330868166561704, -1.2428389853769293, -1.347787775842249, -4.042071269840703], [2.0228438828931146, 0.2711664010939448, -0.9370065850411602, -1.2016154142120117, -4.081411747884282], [1.9446611049934601, -1.4424154303583792, -1.194095759619721, -1.5066996642719825, -4.20932709545816], [2.1507969297514995, -1.101420174895782, -0.918729846569008, -1.395185300778112, -3.4512907418955527], [1.2502052313980638, -0.12408155277032688, -1.0603642913442015, -1.1586552880079604, -3.7815166863854808], [1.1771690563164667, -0.514000745434648, -1.1954606082087162, -1.648874918407853, -3.8717047741807433], [1.3822123487645621, -0.900268848521637, -1.0909588176669047, -1.464657394875213, -3.8425176874842357], [0.9901255627025642, -0.5204195296399561, -1.251300091765981, -1.587021382685747, -3.8078359874285277], [1.0578994325344255, -0.77575663103164, -0.9402453252206302, -1.2267586301869262, -3.813185874910988], [0.8958650700367558, -0.2774936124031976, -1.0396110738460607, -1.2732201147742463, -4.032854059886369], [0.8972798309877934, -1.2521664344874703, -0.8735984627642225, -1.268367570392017, -3.2961310554712004], [1.3118692815444442, -0.8909101831076699, -0.9257215883783623, -1.1997912773119441, -4.462075811802413], [1.2401287251802695, -0.686612778614897, -0.8488129975961556, -0.8332177517444768, -3.2156032405771438], [1.133613121098366, -0.8346155626430727, -0.767838726844674, -1.1025573567204683, -3.5165491534818676], [1.119948690051726, -0.8874617763535809, -0.6942306409380641, -1.2131817762052717, -3.9017843968287482], [1.3768035560504055, -1.0418595516486941, -0.8442408124323432, -1.471095515916522, -3.7723098474504644], [0.7573366913702065, -0.6367499782711886, -0.8820926344707732, -1.3404467768766282, -3.7626469202723967], [1.6544226301781357, -0.3894421124388384, -1.062262589331099, -1.2377980341859733, -3.915254533796507], [1.9269386710989473, -0.12258167377509267, -0.9192315916955621, -1.4493371237844737, -3.864919724696916], [1.1947427983943213, -0.5631644375671906, -0.9517389764346931, -1.3675260373537104, -3.9129982246450505], [1.5567507320982237, -0.7650973926388749, -0.9174241345755153, -1.3049160083680702, -3.8236979241168236], [1.3909104274336095, -0.8480700664786689, -1.1663878422342102, -1.5081392349056761, -3.8290701463079073], [1.3903901167083608, -1.3227491695870868, -1.0929439210608003, -1.2535577064973444, -3.7821959586450604], [1.2639615822207317, -0.397363475938428, -1.1724273298618164, -1.557177313239646, -3.8721444946382975], [1.4827730689631071, -0.2370383278385466, -0.7195656929435608, -1.121047759179097, -3.3990270002421052], [1.6840986800766562, -0.8701527696334843, -1.35056253975361, -1.6175528265502979, -4.347641749999367], [1.7501352783591206, -0.6749854530271475, -1.227687794114214, -1.3970863234467013, -4.011295538596421], [1.7674676027389369, -1.490955139283749, -0.8439377265033188, -1.1682444380976542, -3.685978607101977], [2.3535796865153333, -0.29793957345019645, -1.0041243571844083, -1.4225755345617508, -4.019513505452453], [2.4860295625269546, -0.4746166049078488, -1.5509629424920772, -1.191673587566522, -3.93903826562049], [0.8617269390273875, -0.8911863404325496, -1.0868164906709752, -1.3812589121211147, -3.6836523157530596], [0.7440870220575985, -0.7882451198831525, -1.0556275329989961, -1.366962231453221, -4.11949756373253], [1.2565105310169238, -0.4974914966891876, -0.8677331246702847, -1.2245266544729885, -3.2853136681636523], [0.9390925276029668, -0.4921026355224322, -0.8493542407363429, -1.0761680758061427, -3.7366811328569196], [2.169018878343123, 0.3195747316027423, -1.1366336942782271, -1.432293880507418, -3.8748285399696583], [1.574450902643815, -0.432562357305731, -0.8132160102014736, -1.2188061194896238, -3.777882793952906], [1.7433911051388438, -0.7134832788429507, -0.8710719030757128, -1.0166164346689386, -3.920457430275924], [-0.018341258839150623, -0.6672409591913002, -1.0030895158341917, -1.6950796006136828, -3.755395035391786], [0.09824928872387505, -0.7347603585150377, -1.1273897677131404, -1.6793705909497074, -3.5122396499667325], [0.7338870930955983, -0.9338502471531107, -0.7056834282514826, -0.44336086440612016, -4.030144523402189], [1.1136245740465014, -0.8336796067942779, -0.8375938592817289, -0.9004917423306855, -3.786398305017799], [1.2645717023734895, -0.9383087649076564, -0.9754746251414828, -1.0789518656054997, -3.9564225600086083], [2.3040724031139965, -0.165322678557814, -1.2798438609258687, -1.5157484038039934, -3.802865709055082], [1.184227007672492, -0.18670340496083432, -1.1767091656282844, -1.5707436096839786, -3.8360187756109045], [0.9383143304710337, -1.0064937544004686, -0.8321838555170471, -0.9688813118922577, -3.657748936718635], [0.15371500184530196, -0.7655405965518166, -1.074260737423458, -1.519714065033932, -3.9703965116308497], [0.37433833799358723, -0.7785338171163205, -0.6137407917980815, -1.0082256649828716, -3.6161654603722004], [0.5779255157211869, -0.7302597390285669, -0.8347544844462078, -1.1945798360176938, -3.66237194626497], [0.15989501624577923, -0.7926014572200772, -0.8836004722252463, -1.1685823722902777, -3.4012463639812824], [-0.3859614747476069, -0.42743292109220193, -0.8495373452697433, -1.3450312986260509, -3.40966289856069], [-0.24453374339108389, -1.1379620941442952, -0.9322482706522495, -1.122522919429969, -4.17684735737227], [-0.21062269808947048, -1.1752324322723073, -1.0408721740376667, -1.1018226099328121, -4.198112673134144], [0.8351433009919986, -0.17410005229321157, -1.1069656854228294, -1.3421599440684262, -3.4178048121856963], [1.1099384178199516, -0.34329992417162425, -0.9510657354080413, -1.6598016789219392, -3.3765556945409365], [1.2878767090337322, -0.2576308099182765, -0.8289531330481951, -1.0711883561918436, -3.5615136478206657], [1.2003289930730168, -0.5158319091080181, -1.3183358514373185, -1.8122538556588061, -4.121026866124462], [2.342372467479284, 0.8141875037347294, -0.7988450809556417, -0.7228453175869168, -3.9526517184075365], [2.7646268900869893, -0.08198796096933225, -1.2668805432369628, -1.7078056763899594, -3.6342125668101657], [2.6324848500963576, -0.01859973711807221, -1.0861029104808344, -1.402009737403025, -3.5435589694496676], [2.6038465033960754, 0.07492417721591593, -1.2266136779247956, -1.3416128120405506, -3.523450558870196], [2.340631798051905, -0.9591619850787398, -0.8544035586451135, -1.4390295707421803, -3.716393793244644], [2.5995306550753092, -1.0478510807152195, -1.059221933953045, -1.0801071578416312, -3.862461319731273], [2.331845377947895, -0.9337873912485499, -0.8280065216193903, -1.332252123686364, -3.9595263407617582], [1.2016190555333306, -0.5497461368544275, -0.8356525972886811, -1.4931211169635379, -3.54891048021803], [1.6381663740922283, -0.7003060862962522, -0.9709008285661243, -1.1343898216428532, -3.8669321877796894], [1.4824572356109056, -0.6455630472181915, -1.1206078728564033, -1.8308567753597984, -3.8042029948305687], [0.6177226151473456, -0.8336929111890173, -0.7107966675920357, -1.0601742863007526, -4.071611463235568], [0.7465009719953216, -1.08553808368156, -0.7544847175267396, -0.9450939957051239, -3.694917972626173], [0.8750820369909079, -0.6678568395525013, -1.193416511249232, -1.6442626333928312, -4.0333303499358895], [2.6854208519786553, -1.2451495923933977, -0.868295498220494, -0.9263278458543501, -3.947419540797342], [2.553971512748331, -0.8888440011094222, -0.8214438118585224, -0.7598245457804126, -3.7953553248136997], [0.7458517242464408, -0.979226550655464, -1.1990701375804254, -1.6678364540864135, -3.8723306867642644], [1.1192543756557072, -0.5990195416704591, -0.9842242770791442, -1.2667756719539964, -3.750250006974224], [2.0626566040135965, -0.6585247127287329, -1.0631452644672437, -1.3903943671468861, -3.7466224903770606], [1.334112249878894, -1.353143145913851, -0.8847499130790313, -1.2260290616252658, -3.9642899860723837], [2.5986977993777405, -0.7030831801719665, -0.9587255453163072, -1.222564181534853, -3.9739705066547124], [2.6976097368003464, -0.7035768945303507, -0.9803685633236648, -1.310545417123625, -3.8800474200464534], [0.967793146251642, -0.5916455002606288, -1.049467814084296, -1.2507275225200798, -3.796587439981601], [0.7452419685398997, -0.661889627833526, -0.8763835496177201, -1.3498616180645266, -3.817880076578653], [1.692756863947813, -0.37867030571556776, -1.0295142952857024, -1.247411807734301, -3.9856422814668524], [1.6059815059365, -0.3574637395164924, -1.014567717681389, -1.5625708580587911, -3.74763189117596], [1.7775777852222046, -0.1342132254572257, -0.9349449097408631, -1.4432765393402107, -3.73646096735075], [0.4118200689321892, -0.58516238542636, -0.9327205763838563, -1.3219798040414785, -4.0029751542911205], [0.9195859722247447, -1.3645137655015225, -1.0099894628832535, -1.4555151178854822, -3.683383115917399], [1.095938280448444, -1.658750532190066, -0.9409420993529084, -1.0628723006656275, -4.266342140514846], [1.1119887134284598, -1.6484197309361903, -0.8566657279183644, -1.192432778235605, -3.981666624801341], [0.7777543532073817, -1.6494767853917198, -0.7736307836058638, -0.8196762935942639, -3.676804724645939], [1.0918561859324996, -1.3346540272491876, -0.7585447456222529, -0.7394587962593921, -3.8736713113138044], [1.162834383355309, -0.9959678919038102, -1.1075029858004306, -1.277964142669159, -3.9145983795919044], [1.2139096635371063, -1.0959024568392883, -0.8527835835638282, -1.417642644526689, -3.533196164800468], [1.7550110690379646, -0.6373112830549531, -1.047541553490295, -1.3510246281535423, -4.049623535925835], [2.2758651599804947, -0.4653948010257645, -1.2281685484939289, -1.573702767244914, -3.8040146341619225], [3.152124638833622, -1.285970228417776, -0.935148710051671, -1.4599856265354123, -3.7503739424213918], [3.6694177153135104, -0.6729231333096215, -1.1016063930132118, -1.3679380888975714, -3.8747498297284335], [3.1965823005646006, -0.8205967107527559, -1.206802320215424, -1.5678601389540303, -3.890294700962577], [1.3133776983432666, -0.16195147878798877, -0.9563658127556707, -1.3345618555645336, -3.978625766736325], [2.2022107823834456, -0.4352398950316947, -1.1387859674264729, -1.3250723766841377, -3.738997936718776], [1.249377901179077, -0.49823418648405193, -0.798239519799366, -0.6600491219738936, -3.7889551827939703], [1.2401589223915057, -0.43235020219323583, -0.9814898787925345, -1.6202046941398052, -3.872589024153772], [1.1843041525606954, -0.6547327586369858, -0.8637505769488196, -1.1983267560404671, -3.760111336943658], [1.4133677138722582, -0.3764179812228804, -1.0302670488056855, -1.2167885024300116, -4.032516241488243], [1.762818190122183, -1.3026823627889428, -0.9465645900571631, -1.4314565395779817, -3.6400093179871957], [1.559476248807025, -1.3556227628466364, -1.1180150350769071, -1.4060359565622051, -3.2463478632058145], [1.651379406677913, -1.1701801146416688, -0.8376353727971485, -1.4669285476287641, -3.4116263428118017], [1.9796488280660653, -0.04144063224289632, -1.1559157818760377, -1.4440470886036918, -3.8552920866628244], [1.6434174604251535, -0.06273247350359665, -0.8466364195834742, -0.8765540565862422, -3.758516250411103], [0.9602289368781766, -1.0874705291598394, -1.1418075467378728, -1.586012595816212, -3.6544554080416516], [1.3742187459956563, -0.83350651152884, -1.0899627101002132, -1.6751209674432628, -3.9016601001608753], [1.6357363890774512, -0.870547301252005, -0.79708906021656, -0.883836374353925, -3.764331493624282], [1.5234693811242188, -1.0448259264061979, -0.8452530056501243, -0.985680095070318, -3.6334302818696953], [1.5576996513037293, -1.0909418903149204, -0.6589810503546877, -1.0106277475957977, -3.681253440842023], [1.5826851594651596, -0.9480662612383606, -0.9363607383230851, -1.1614424913468246, -3.8599470874642234], [1.5756648484025901, -0.50337881677989, -1.164732036735023, -1.6278628512080804, -3.7556509553553528], [1.8025004036231065, -1.439372164485298, -0.860052269250123, -0.9346985508727782, -3.795838959518943], [0.7866547399243743, -0.28664991162747266, -1.2053079047165047, -1.473954063697054, -4.069023029700031], [0.6972201879513951, -0.2775695319975744, -0.9142156345962155, -1.4091429780877118, -3.659215532031149], [1.3699887076101103, -1.039472921717911, -0.983528416965519, -1.4541072491324907, -4.056770003609016], [2.452776216512081, -0.11720310597023542, -1.0172197698028078, -0.9459836501339199, -3.958326372148189], [2.3312332020052047, -0.06168516720917566, -0.7142393766964255, -1.167923825776331, -3.694676737681307], [2.2459996025667923, -0.4166125595654309, -0.9270001997717139, -0.8368647261687492, -3.743809644881722], [2.4045919307783037, -0.2251603724216643, -0.6572306026226844, -0.8222942559663687, -3.7100117594838493], [2.215805176878214, -0.12234701172513356, -0.9199256751863936, -0.9519891267871321, -3.7838187765077214], [1.423671600230798, -1.4461799534657727, -1.1768327463795376, -1.5154894416964844, -3.736985499010794], [2.0535750587395603, 0.09723631779423925, -0.919119520570225, -1.4556369171795835, -4.0065389367638895], [2.178585416893607, -0.9251135978641805, -0.9089850283902803, -1.3073433996833383, -3.9974302307275527], [2.261262388543838, -1.0992829725629603, -0.800890808428083, -1.142241443673616, -3.898830021871435], [2.7519715731055956, -1.2508384284667586, -1.4819417605947252, -1.7182678632583221, -3.8476598493312344], [2.7626194263678046, -0.6680218805218127, -0.6786859132536099, -1.172752336025565, -3.7602387044341197], [1.3196753671136807, 0.2601191936391508, -0.6817126996373105, -1.2397794945444929, -3.8350043623505403], [1.3353163374095418, -0.27228599812251764, -1.3220910862856243, -1.4445592176393018, -3.7775444705155117], [1.6968492553016312, -0.8241644585830434, -1.082430164920605, -1.1053893831185693, -3.7427610167569374], [1.1562486554393987, -1.0124749829092623, -1.2489570505489165, -1.5544189074897647, -4.118850621718232], [0.9173703231219175, -0.6547942199943491, -0.8918665782699263, -1.5259094609603479, -3.5728609195809145], [0.972086628058191, -0.6339483450485798, -0.86086545303131, -1.5297210274949182, -3.491272481778014], [0.9546445857130749, -0.5887501265470401, -1.159678324977645, -1.3878394241531726, -3.989291047386774], [1.2069522738280836, -0.8869858632444857, -0.9958856912865477, -1.31847085029974, -4.011081816691045], [1.3517507106890334, -0.7038023029762193, -0.9219478519366221, -1.168142583693839, -3.9918728355365913], [1.6035893521802698, -0.6100414540222088, -0.9639676338484101, -1.239086083675626, -3.816897825214726], [0.6465909962148085, -0.5351375339321397, -1.049095206434476, -1.4576780744695321, -3.827062979597455], [0.6221955785177921, -1.1576992250463976, -1.1755759017789889, -1.61348318295976, -3.8741103797498653], [0.716876354158356, -1.1199286535188944, -1.0316570192735157, -1.5605662936256648, -3.6949865009319596], [0.9933652406617854, 0.39971576569450135, -0.7381597011900338, -1.2608831513632341, -4.033185481257404], [0.8607528366707873, -0.38067878764691365, -0.9883974538839352, -1.7694317941537094, -3.705911934771801], [0.8534747896610204, -0.4096104066282682, -1.126294467408746, -1.4968333617114027, -3.762756103699208], [0.9256992685410192, -1.1401455469928086, -1.0844278323798981, -1.4248716185225208, -3.70119795278492], [1.4910183250836093, -0.9740029863313874, -0.8712417870081256, -1.3298052236050177, -3.9935199977020934], [1.4943504705967776, -0.8492932801297653, -1.0204922528532965, -1.2134852924329185, -3.8029445050403563], [1.001971561061439, -0.36377376587914956, -1.0815523606669908, -1.336334816744225, -3.7309907092244416], [1.6137836156042729, -1.341656413405047, -1.0231427067765946, -1.2068314072796749, -3.9511467565285283], [1.4788042398103693, -0.5470885290415609, -1.052231730093604, -1.1775420206395977, -3.7614835588380107], [1.2609474621750982, -0.9305897197026577, -1.044946494041655, -1.6934031111674521, -3.8095715177405767], [1.1836781425487666, -0.9494422910267314, -0.9574564565373496, -1.1041382602494896, -3.7057136825460173], [2.4674305281023035, -0.43276657306494026, -0.841723299916242, -1.3192957820796158, -3.753957606151161], [2.9222945796509774, -0.07026443542345708, -1.1056290329031144, -1.3409558916414686, -3.88985373363555], [2.696323679056909, 0.27722748938877184, -0.8531525685011715, -1.54490285129248, -3.9975604760044865], [2.7314610526758707, 0.40045491497146984, -0.9918389376995219, -1.4142632676650828, -4.015913089762961], [2.7301423512250698, 0.36035415824477013, -0.9175381059221067, -0.9453507373054924, -3.8001215117237677], [3.004857354675189, -0.29825430982197454, -0.9904647942955871, -1.5399435262080843, -3.6649380431161567], [2.270126366211201, -0.31406861762519656, -0.8567511337682235, -1.2411776355550528, -3.516838876745641], [2.49149098297204, -0.539121690063851, -1.159923340974855, -1.2862730049053166, -4.11071712587589], [2.168734342049266, -0.855991531346761, -1.032513811234377, -1.201167699244355, -3.468622123770908], [2.3586383242341493, -0.8732994421060377, -0.8130191213535648, -1.5014622319822697, -3.8327129463129563], [1.927373190657726, -0.9396936786518021, -1.0433776307314298, -0.9095871828326303, -3.5810065963250044], [1.9621400574345647, -0.8917694390680978, -0.8378878186815882, -1.3488724875946423, -3.731452666419173], [1.8389928437610323, -0.64876547136169, -1.1439990600466485, -1.2447566674654518, -3.935857735243675], [2.0602869657325282, -0.48276621996862684, -0.8504751978694185, -1.4345989046305119, -3.656911195772021], [2.1605424911439637, -0.4970686421584884, -0.9775480067338785, -1.2685199852288107, -3.469310698509455], [2.020649434214559, -0.6405770993821887, -1.223684800586327, -1.4178068534250898, -4.005645156001856], [1.8917748850146858, -0.08579968475683797, -1.116231080424283, -1.3946135661258803, -3.9309260361110914], [2.1647060757467984, -0.6503386108541174, -0.9987326455815518, -1.1724015806771855, -3.6663268757155647], [2.1299146394117594, -1.0850993240255549, -0.8606098539127445, -1.3077249554326644, -3.555180059502862], [2.5682758234924865, -0.9697552787210956, -1.023206631651051, -1.184593626983779, -3.865735680094435], [2.5717643101570857, 0.056562909670199446, -1.1139837967447455, -1.4277281670482258, -3.7598629672460757], [2.733828619925853, -1.6896181808742174, -0.8298587143003471, -1.0305845558131292, -3.7624169433411576], [2.3181589745143985, -1.3408174558867845, -0.8823654217384713, -1.0392538735935997, -3.7827927458745743], [2.465445483957433, -1.5945202550500488, -0.8201703628585035, -1.0622562668456306, -4.060723578124321], [2.2114789841453684, -0.8834237532459368, -1.0188903734402417, -1.6241313015529406, -3.7409404359572225], [2.3576683723465313, -1.1957853637376425, -0.9723577751279346, -1.2411953642192404, -3.7307083350797017], [2.40717938445475, -1.1720601899850487, -0.86279438986529, -1.327217091029507, -3.6274554286828287], [2.622321472028893, -0.6378265599829814, -1.1448569055162596, -1.390827496332839, -4.030716711833918], [2.1484895372048713, -1.097710932378973, -0.74878170283342, -1.434392379509115, -3.841819758149911], [1.161280930581742, -0.5961726091221213, -1.1058882484145047, -1.311436944240644, -3.857706977735134], [1.5704098461487142, 0.026310632069238976, -0.9900623199015692, -1.3553674369333633, -3.959286857878328], [2.871516434828304, 0.1212758689624718, -0.9106479918698982, -1.1654234868905502, -3.8499040340556205], [0.7015432466174285, -0.7657979227890597, -1.102379410100946, -1.6128781457015458, -3.7103928999610782], [0.893041635977495, -0.8509907486203192, -0.9872958478713391, -1.1922239009622504, -3.764062547091794], [1.3835173322726457, -0.8027970291304861, -0.8333552063566501, -1.2087973835807149, -3.8286595844272457], [1.1224218237022046, -1.080067204803987, -1.090859638775119, -1.2810286657921248, -4.006917375826414], [0.39820106355466206, -0.7357227224613849, -1.0395033301948886, -1.2155219520309763, -3.6341031737977016], [-0.2083426686434633, -0.8198145709662836, -1.0627783643610063, -1.4469585450621048, -3.8796260629573758], [-1.272163531002538, -1.7503954501792927, 1.7613254561427487, -0.4839184211235552, -3.7530800252849974], [-0.1952841733001198, -1.289319425600472, -0.8349831477440629, -1.2186097170804469, -4.004579484839226], [0.4005640809168083, -0.6584179667545121, -0.7509210991221599, -1.2838799151082887, -3.603576056512605], [1.3168091764475929, -1.0179594778327532, -0.9908180366810994, -1.0356225002448407, -4.004015387309135], [1.3774178865267852, -1.027211474293515, -0.9784985155744349, -1.197079236307925, -3.976275232264048], [0.9777727231743719, -1.199985385186239, -0.9181523462148713, -1.3389640644498086, -3.631001727859052], [0.7813000101792689, -0.3283387262656592, -0.9929056829590307, -1.3648429636755388, -3.834287025689947], [0.8304766677103915, -0.4421530734239867, -1.077903463161937, -1.6643833345831025, -3.8293043311385357], [0.10816600627807184, -0.419101728975776, -1.1590671819085063, -1.3007846090945299, -3.8861539751732304], [-0.3619405533009151, -0.9378120288199824, -0.8854810398987969, -1.5840890433167996, -3.887850342707087], [-0.03057972343610535, -0.6990571604848204, -1.0231300467334208, -1.2203423400263278, -3.714333489704466], [0.3901718959461793, -0.5676935197026048, -0.8358515849280846, -1.2521988082775537, -3.8369887340827717], [0.7265199992269546, -0.7303157631461221, -1.2475884558766959, -1.516565807302292, -4.142235781747544], [1.3147465355215966, -1.002448243051284, -0.6240080731011285, -1.1011143800830845, -4.011446466630903], [1.69678698819653, -1.3417364417187685, -1.3728347543726898, -1.3656879337184389, -3.798351059417091], [1.7765824824791223, -1.4630000879292457, -0.7863906410300852, -1.2034817204935369, -3.746251658026359], [2.626625406759059, -0.8104343301419072, -0.9148453372585605, -1.4718105392483312, -3.8603144189118392], [2.153154401506399, -0.4389678965625716, -1.2380036297842956, -1.4935254962295914, -3.6465203730425912], [1.4906785035921302, -0.0010805351169829117, -0.8271820046780297, -1.2689610157521658, -3.811936925182673], [1.5200104292332166, -0.1453135441443381, -1.215254403690942, -1.2279555232349721, -3.9590596200686505], [0.9715172382461932, -1.2600363224071391, -1.1872433688371276, -1.184382883122508, -3.6847738499562768], [1.3504472030684418, -0.8413792451950495, -1.0181509045614603, -1.532343642608936, -3.9341783201217027], [1.1905863013421158, -1.1104637530049133, -1.0768567583788493, -1.198621171772877, -4.04719849824531], [1.6957114317839201, -0.16753044747848456, -0.9994246223503107, -1.2468583406817253, -3.577987355281632], [1.7836633785118536, -0.028805545192692784, -0.8732786561958746, -1.3354408411828527, -3.8519443412102756], [1.7350050482645627, -0.20989217180121927, -1.0412744951508865, -1.4132499474892342, -4.02311095714985], [0.7416554670981543, -0.39315940865796895, -0.9650863945001736, -1.2215721549939662, -3.6334632234304496], [0.49433045936261444, -1.0328683833478733, -1.4384128770675129, -1.960090865308956, -3.676867561513588], [0.38539785590246045, -0.8818312915257271, -0.839940478943155, -0.6081009703834259, -3.9198835987130023], [0.5055713533435828, -0.7663796971730092, -0.7776113637054807, -1.2219725521803548, -3.653447910977066], [0.47198196902060047, -0.5844355805018254, -1.2872947911885269, -1.409641358156418, -3.4463732923257555], [0.059110498217468485, -0.9052553393581929, -0.8697290720805672, -1.597095455986983, -3.9890499481266706], [0.7730288083342761, -0.43263355252439617, -0.9337007117222336, -1.4283391503748786, -3.7184306256154014], [2.2679791936136153, -1.0870388758905787, -0.8789745571787531, -1.010915584453251, -3.6584549633457835], [2.1118522665543717, -0.23371198648740626, -0.8702715090975612, -1.1684486247289128, -3.8279108050461232], [2.1403854876682122, -0.695455099762476, -1.0523842923500937, -1.454724935697881, -3.964376239339864], [1.3624748906781896, -0.05645668989749975, -1.0389124853462646, -1.0411873202766, -3.960437597748589], [1.0664884849704688, -0.5749748851146048, -1.0851048063826518, -1.4390656155827393, -3.577349718833103], [0.9525156119707912, -0.46583885457511787, -1.134042638160918, -1.6754615626434815, -3.594145411049695], [1.138335290906605, -1.029651359254663, -0.8531388796106234, -0.874680481420976, -4.090375760833309], [0.8025464451861799, -1.3971714173606602, -0.8089650585762064, -1.6018506809037318, -3.591129041018187], [2.3049016679526146, 0.2594186140574425, -0.8935429431248274, -1.6513433921236, -3.854617862262477], [2.454948479102956, 0.40116403021815283, -1.0100703936284237, -1.3537283284192678, -3.7953876613432636], [2.585403833641784, 0.4781012581505861, -0.9218315995956616, -1.2238374382758885, -3.969255036905671], [1.253292724837785, 0.3956141081928217, -1.0062753423832824, -1.2977279966156308, -3.6363808433837357], [1.2038141531527553, 0.1342820963320994, -0.543098869516452, -1.3178133054880137, -3.477845013397177], [1.4815462370011325, -0.6252793989120085, -0.9019540268507229, -1.062340033014092, -3.586802358678407], [0.7510025551690752, -1.3105885725381208, -1.0906989472758961, -1.387289170098548, -4.192545773954914], [0.5942485376448091, -1.102196526376839, -0.9902968045952603, -1.2946716877380846, -3.889741778277249], [0.5680699711885538, -1.1194456592111197, -0.8121483817962092, -1.2654869711717691, -3.8318846322121702], [1.352256055520186, -0.9084866880240329, -0.9960369828288139, -1.348000332069162, -3.933987649536991], [1.1388590601435864, -0.05080042062765269, -0.9096730340658419, -1.1061891655471758, -3.7307924144863716], [1.5439181710057603, -0.4424201165334888, -1.0473320981106033, -1.5041035733561519, -3.741225683319598], [1.493547655723361, -0.28656742632127885, -0.9786368802850262, -1.4285015057310981, -3.9219227146529514], [1.650837146068623, -0.6500486825514924, -1.022458508517665, -1.309903425643056, -3.833957368772153], [1.0863832875958064, -0.9561446052229491, -1.0039347369574214, -1.380613544615472, -3.8013964726088765], [1.4836050350036174, -0.9170232270164644, -0.9666412114363244, -1.2436699452930284, -3.91720514586381], [1.5762529908923124, -0.9165846622119576, -0.8016893116120929, -1.1003906300854809, -3.8647538465225155], [1.6242059835026585, -0.9735358006652026, -0.6940893030994789, -1.0495722196192936, -3.8768689295648726], [0.8267777674646005, -0.32186259833961844, -0.7523930357752127, -1.0536889238555287, -3.812074453931894], [0.7688961557863825, -0.27359742515935376, -0.7780441294423797, -0.9794591424942434, -3.7437145514606236], [1.0145154816983675, -0.09998065480074178, -1.0695482934942946, -1.3210136061065787, -3.928366728164061], [1.821670036247733, 0.16834993793707106, -0.991717539025238, -1.4151272910806794, -3.698902148867583], [1.6404062271437576, -0.6140375694259299, -0.8408603674000561, -1.1880130965107027, -3.6770252233656926], [2.638369836851953, -0.41650074060163167, -1.0530330268333947, -1.4599485220813437, -3.9852199466559632], [2.5231706403527574, -1.1537109281845082, -0.9786066710861316, -1.216435562875576, -4.01136232343228], [2.996156499234095, 0.7940729732460293, -0.8726480987822346, -1.2552116814598502, -3.6657102012392655], [2.455513531492351, 0.835194373092349, -1.1181479078749066, -1.2991196141831671, -3.9970748521257726], [2.398777556182843, 0.10736259767537598, -0.7629156858286503, -1.1076896073527724, -3.777536439910506], [2.3599037380869774, -0.9657440992550901, -1.185763378618421, -1.523358096904059, -3.7554549495097653], [2.7269309993111195, -0.9652583508417776, -0.716414602901924, -1.2307553231165027, -3.707081104485537], [2.6009242054067214, -0.7594712252455408, -1.022343903745639, -1.1542609044885137, -3.5258483731867623], [2.5656746305261753, -0.7384167285598311, -1.0283231650038434, -1.35633642371097, -3.4739290103160974], [2.322226242024812, -0.8007359629713485, -0.8742405024297866, -1.1191493484586656, -3.930926431413507], [2.4413825822940503, -0.42246034595105053, -1.1366142593781647, -1.7351903422849044, -3.688509225932555], [1.9703467001838026, -0.5412135732494303, -1.09248156515136, -1.3614518514181575, -4.024057367846062], [1.1077237577089842, -0.48356240029457087, -0.926620210882784, -1.3159766573258513, -3.589337768977767], [1.2350142188644737, -0.0027215624948044997, -0.892961743091816, -1.0925250470490644, -4.045156820150158], [1.6676523750796313, -0.3007479657979103, -0.9879133377533011, -1.3482140707428336, -3.6192169174215922], [1.2144111844221, 0.2605512930602145, -0.9843404906127685, -1.450934540606764, -4.07954668908728], [0.9492892871707749, -1.1153930761348843, -0.9190496822456445, -1.3863087898662114, -3.717631943286176], [0.47069071184619016, -0.3445777502546448, -1.0167731494872394, -1.4504938194796373, -3.701179145604215], [0.9997010990213258, -0.4007724460011394, -1.1270793792104792, -1.3226472870573551, -3.872910919502471], [1.9422618629999393, -0.7681276472008118, -1.026364439289217, -1.158389203774911, -3.713077732929312], [2.128509589985794, -0.6871532778187565, -0.8973510858230277, -1.406274305959674, -3.6758070047665203], [1.7114003268007947, -1.2447777592516864, -0.9696851328591438, -1.5763635158939775, -3.4125599091848775], [2.084837985115777, -1.1680455751983725, -0.8791039685981333, -1.4081218770551494, -3.3875006931570826], [1.8725690313658123, -0.4236345328865869, -1.0020763821328535, -1.274051722723793, -3.867003464397747], [2.0715252864002185, 0.06466511932448088, -0.9559339707770296, -1.4485239313377019, -3.7373028047363417], [0.8364719348246483, -0.3866779026248678, -1.7291972043107446, -1.4838853374331613, -3.6108365631055817], [0.5504838019461706, -0.07767098171479786, -1.403076898091135, -1.5995485204670816, -3.976034047242288], [0.5127938271919427, -0.0035647867895634393, -1.3123074196615145, -1.6895245456853962, -3.8717024632951476], [0.7123877534794936, -0.1876665846671456, -1.0219505618642768, -1.458330208241264, -3.9071428930234497], [0.37284396170911066, -0.8553431269250561, -0.7209654493295405, -1.132773348782482, -3.606593593562981], [0.7905247916106857, -0.30323597970223826, -1.0456499306652878, -1.8035906726946032, -3.817296857638385], [0.82152809172839, -0.1374326796714948, -1.1467668514630665, -1.2553646461833923, -3.9341351789572556], [1.5392217601304898, -1.4151788946470416, -0.9632152990879734, -1.4627624129142573, -3.8830693150965296], [1.410102060202942, -1.0328253590192322, -0.7197794456113858, -1.0344482951147052, -3.8258645629733716]], NamedTuple[(n_steps = 3, is_accept = true, acceptance_rate = 0.3333333333333333, log_density = 8.778117366276877, hamiltonian_energy = -4.035779870495875, hamiltonian_energy_error = -23.5245904319298, max_hamiltonian_energy_error = 4556.555750041441, tree_depth = 1, numerical_error = true, step_size = 0.4, nom_step_size = 0.4, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = 8.778117366276877, hamiltonian_energy = -7.19092388368069, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 1527.4799720011283, tree_depth = 0, numerical_error = true, step_size = 1.7122520847327034, nom_step_size = 1.7122520847327034, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.005381080593033141, log_density = 8.778117366276877, hamiltonian_energy = -4.757305141521058, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 54.27059234396914, tree_depth = 3, numerical_error = false, step_size = 0.20204444038133998, nom_step_size = 0.20204444038133998, is_adapt = true), (n_steps = 127, is_accept = true, acceptance_rate = 0.9999388504869603, log_density = 9.270091983943267, hamiltonian_energy = -7.067023773546532, hamiltonian_energy_error = -0.0020553777276823837, max_hamiltonian_energy_error = -0.00460433448205233, tree_depth = 6, numerical_error = false, step_size = 0.016466948223376767, nom_step_size = 0.016466948223376767, is_adapt = true), (n_steps = 63, is_accept = true, acceptance_rate = 0.9997275892358868, log_density = 8.36614736569812, hamiltonian_energy = -5.956438773247051, hamiltonian_energy_error = 0.0012917182031522145, max_hamiltonian_energy_error = -0.0018227510188841833, tree_depth = 6, numerical_error = false, step_size = 0.019607577719376355, nom_step_size = 0.019607577719376355, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9976329925392995, log_density = 10.762210612751506, hamiltonian_energy = -7.005563528060116, hamiltonian_energy_error = -0.002594424604626333, max_hamiltonian_energy_error = 0.007080512792345672, tree_depth = 5, numerical_error = false, step_size = 0.028220777238511484, nom_step_size = 0.028220777238511484, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9994021117063445, log_density = 12.078249807385664, hamiltonian_energy = -9.18601032457963, hamiltonian_energy_error = -0.003788588999125153, max_hamiltonian_energy_error = -0.008836283495122998, tree_depth = 4, numerical_error = false, step_size = 0.04521938225741299, nom_step_size = 0.04521938225741299, is_adapt = true), (n_steps = 19, is_accept = true, acceptance_rate = 0.91586439456798, log_density = 9.261333198997377, hamiltonian_energy = -8.985506367495232, hamiltonian_energy_error = 0.14454226580055085, max_hamiltonian_energy_error = 0.17073238218083198, tree_depth = 4, numerical_error = false, step_size = 0.07808858522525995, nom_step_size = 0.07808858522525995, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9985519844085752, log_density = 8.62964342783788, hamiltonian_energy = -7.273336664492238, hamiltonian_energy_error = -0.12164815207150337, max_hamiltonian_energy_error = -0.2520203882918972, tree_depth = 3, numerical_error = false, step_size = 0.10819899452583806, nom_step_size = 0.10819899452583806, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.433191995696526, log_density = 5.474295449554134, hamiltonian_energy = -3.0099952587805836, hamiltonian_energy_error = 0.21097251159416075, max_hamiltonian_energy_error = 4.845952915936748, tree_depth = 3, numerical_error = false, step_size = 0.19904285983520312, nom_step_size = 0.19904285983520312, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9930855719742582, log_density = 7.005123972044016, hamiltonian_energy = -4.5294510097483744, hamiltonian_energy_error = 0.04494350376440437, max_hamiltonian_energy_error = -0.16604125620937804, tree_depth = 4, numerical_error = false, step_size = 0.06214105663949317, nom_step_size = 0.06214105663949317, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9648752998464319, log_density = 10.656079840777403, hamiltonian_energy = -6.2881587619090595, hamiltonian_energy_error = -0.6394867553833201, max_hamiltonian_energy_error = -0.7786520788366209, tree_depth = 3, numerical_error = false, step_size = 0.11489617835599171, nom_step_size = 0.11489617835599171, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.7034767394044937, log_density = 9.409630878052454, hamiltonian_energy = -7.278447384633087, hamiltonian_energy_error = 0.47975602963424535, max_hamiltonian_energy_error = 1.1216519649113428, tree_depth = 2, numerical_error = false, step_size = 0.19518274513892347, nom_step_size = 0.19518274513892347, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9396188271775993, log_density = 10.322885394470605, hamiltonian_energy = -4.773484168310633, hamiltonian_energy_error = -0.6369979328365076, max_hamiltonian_energy_error = -1.646064495764679, tree_depth = 3, numerical_error = false, step_size = 0.14615406505598363, nom_step_size = 0.14615406505598363, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.2768555536422472, log_density = 9.379474171719316, hamiltonian_energy = -8.919780773067107, hamiltonian_energy_error = 0.07518335769518814, max_hamiltonian_energy_error = 22.428352399316857, tree_depth = 4, numerical_error = false, step_size = 0.23002078688815283, nom_step_size = 0.23002078688815283, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.98906095505426, log_density = 10.195370802833303, hamiltonian_energy = -7.935376002919387, hamiltonian_energy_error = 0.0006974195876150446, max_hamiltonian_energy_error = -0.05186072537898223, tree_depth = 3, numerical_error = false, step_size = 0.04630611014581516, nom_step_size = 0.04630611014581516, is_adapt = true), (n_steps = 23, is_accept = true, acceptance_rate = 0.9163259807065679, log_density = 9.826512180005418, hamiltonian_energy = -6.2549160536701525, hamiltonian_energy_error = 0.11982702651178911, max_hamiltonian_energy_error = 0.2514015154738196, tree_depth = 4, numerical_error = false, step_size = 0.08544624149023203, nom_step_size = 0.08544624149023203, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9346282358283885, log_density = 10.347426139618937, hamiltonian_energy = -8.63429236092745, hamiltonian_energy_error = -0.16220993125060446, max_hamiltonian_energy_error = -0.5436332387523777, tree_depth = 3, numerical_error = false, step_size = 0.1254149953260497, nom_step_size = 0.1254149953260497, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.39288073614152735, log_density = 11.163546549029107, hamiltonian_energy = -9.29174167470773, hamiltonian_energy_error = -0.49451963066492866, max_hamiltonian_energy_error = 2.392916671313741, tree_depth = 2, numerical_error = false, step_size = 0.19373194472494043, nom_step_size = 0.19373194472494043, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9243861848821228, log_density = 10.860570542430896, hamiltonian_energy = -7.176732648177971, hamiltonian_energy_error = 0.05068020403834694, max_hamiltonian_energy_error = 0.17864359311605327, tree_depth = 4, numerical_error = false, step_size = 0.05837667450428323, nom_step_size = 0.05837667450428323, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9787741471081157, log_density = 10.409401821655006, hamiltonian_energy = -8.993908566767557, hamiltonian_energy_error = 0.04746596893306965, max_hamiltonian_energy_error = -0.09588673652884694, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8569328259215887, log_density = 10.89999323233905, hamiltonian_energy = -5.554380900102046, hamiltonian_energy_error = 0.04792385584472658, max_hamiltonian_energy_error = 0.4266781424844268, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9574115413992602, log_density = 10.426885325567502, hamiltonian_energy = -6.590203221967185, hamiltonian_energy_error = 0.008675736050283156, max_hamiltonian_energy_error = 0.11921912629354114, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8970366512937736, log_density = 10.813455566592193, hamiltonian_energy = -7.463054186308065, hamiltonian_energy_error = -0.012116626927770824, max_hamiltonian_energy_error = 0.23411944038531285, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 63, is_accept = true, acceptance_rate = 0.9193468576158698, log_density = 8.085174256365828, hamiltonian_energy = -3.8928514711330617, hamiltonian_energy_error = 0.07753398260696542, max_hamiltonian_energy_error = 0.30101625864993187, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7365824640125465, log_density = 9.319119533055304, hamiltonian_energy = -3.7570398260513036, hamiltonian_energy_error = 0.19767431924806367, max_hamiltonian_energy_error = 0.45728639777064295, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9952051237662131, log_density = 10.260929958378892, hamiltonian_energy = -7.787470258073709, hamiltonian_energy_error = -0.021496399188562165, max_hamiltonian_energy_error = -0.2737095961200744, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9989858672089124, log_density = 11.052459166624985, hamiltonian_energy = -9.52187391873515, hamiltonian_energy_error = -0.11537445154156778, max_hamiltonian_energy_error = -0.2052080573025279, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.976887703560653, log_density = 10.244236526487063, hamiltonian_energy = -9.43146403971783, hamiltonian_energy_error = -0.005256695326908201, max_hamiltonian_energy_error = -0.1067128997235205, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.742610925537871, hamiltonian_energy = -9.702103666928007, hamiltonian_energy_error = -0.01476689429955158, max_hamiltonian_energy_error = -0.05851034826270762, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9134383814859989, log_density = 10.114340278143512, hamiltonian_energy = -9.294797782732292, hamiltonian_energy_error = 0.11453404649264876, max_hamiltonian_energy_error = 0.12983080958765392, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9885949822699628, log_density = 10.48627067305441, hamiltonian_energy = -8.970505059097816, hamiltonian_energy_error = -0.08652513346577706, max_hamiltonian_energy_error = -0.1547770643780524, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9911058808237042, log_density = 12.312111603904775, hamiltonian_energy = -9.329895134855597, hamiltonian_energy_error = -0.10166583404122598, max_hamiltonian_energy_error = -0.1305523712637946, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9195275747475607, log_density = 11.834297832879423, hamiltonian_energy = -11.376673669358173, hamiltonian_energy_error = 0.07138093424768321, max_hamiltonian_energy_error = 0.1531489551300247, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9315504601290314, log_density = 9.853396043197563, hamiltonian_energy = -8.026782046607527, hamiltonian_energy_error = 0.16532577943115, max_hamiltonian_energy_error = 0.278325208780009, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9257529786152332, log_density = 7.339905059284266, hamiltonian_energy = -3.6943536313184873, hamiltonian_energy_error = 0.08048716688147683, max_hamiltonian_energy_error = -0.3264453364228954, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9961439765606797, log_density = 9.232535838274481, hamiltonian_energy = -6.043818487536702, hamiltonian_energy_error = -0.18824426924824866, max_hamiltonian_energy_error = -0.4243971812516456, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9991616957997664, log_density = 10.503677511971244, hamiltonian_energy = -7.404760284133264, hamiltonian_energy_error = -0.08754235618245687, max_hamiltonian_energy_error = -0.1844875411804665, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9951722621873976, log_density = 11.094657011626007, hamiltonian_energy = -9.113520453295955, hamiltonian_energy_error = -0.08319004694435073, max_hamiltonian_energy_error = -0.10788772751183195, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7988842472638525, log_density = 8.918751403425357, hamiltonian_energy = -7.819257625572184, hamiltonian_energy_error = 0.3537121117971589, max_hamiltonian_energy_error = 0.37207333455647085, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9584756064454272, log_density = 9.407802858721416, hamiltonian_energy = -7.194541034658741, hamiltonian_energy_error = -0.04391130429541512, max_hamiltonian_energy_error = -0.42667930073609384, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9943434990253912, log_density = 9.776398485986439, hamiltonian_energy = -7.3918440667948975, hamiltonian_energy_error = -0.09714017310617251, max_hamiltonian_energy_error = -0.4368558099012567, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9967597543197041, log_density = 11.75554595223823, hamiltonian_energy = -7.983113706157974, hamiltonian_energy_error = -0.20364301287396191, max_hamiltonian_energy_error = -0.24219258565945534, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.896121941810611, log_density = 9.20555487003422, hamiltonian_energy = -8.525388713051791, hamiltonian_energy_error = 0.17603468703538994, max_hamiltonian_energy_error = 0.17603468703538994, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8972979311723414, log_density = 8.942217556963666, hamiltonian_energy = -6.853653404019218, hamiltonian_energy_error = 0.10238852905521512, max_hamiltonian_energy_error = 0.24189996297682725, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 8.935346510216892, hamiltonian_energy = -7.6332972104384815, hamiltonian_energy_error = -0.06893216557045267, max_hamiltonian_energy_error = -0.3986170724065117, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.259852253868848, hamiltonian_energy = -8.560162529590407, hamiltonian_energy_error = -0.07974450158383384, max_hamiltonian_energy_error = -0.2053356533433881, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8594283038300657, log_density = 10.32438686863021, hamiltonian_energy = -5.550826681713668, hamiltonian_energy_error = 0.08977457275990286, max_hamiltonian_energy_error = 0.3695357299119193, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.325178433811583, hamiltonian_energy = -9.781241654285706, hamiltonian_energy_error = -0.0730561272329755, max_hamiltonian_energy_error = -0.331982208953022, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9306971096303178, log_density = 9.454599183639004, hamiltonian_energy = -5.078031725404238, hamiltonian_energy_error = -0.13855567785305478, max_hamiltonian_energy_error = -0.4489723093090925, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9641798980555549, log_density = 7.992106020017772, hamiltonian_energy = -7.200859635846534, hamiltonian_energy_error = 0.0806189669034012, max_hamiltonian_energy_error = -0.1321390158658602, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9685380714159787, log_density = 8.34982209980898, hamiltonian_energy = -6.728195540562131, hamiltonian_energy_error = 0.0529218892354244, max_hamiltonian_energy_error = -0.3276795733188438, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9967703425580507, log_density = 7.525816446532275, hamiltonian_energy = -7.005431849782183, hamiltonian_energy_error = 0.02286707204991867, max_hamiltonian_energy_error = -0.35361424218888615, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.354661989152577, hamiltonian_energy = -6.6058839317459235, hamiltonian_energy_error = -0.09667485930500419, max_hamiltonian_energy_error = -0.5287734279553336, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6948366303228622, log_density = 10.132556312157014, hamiltonian_energy = -3.569925699174769, hamiltonian_energy_error = 0.38727265755057516, max_hamiltonian_energy_error = 0.6232695439995206, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9656914173136298, log_density = 9.169335781519194, hamiltonian_energy = -7.988613461308583, hamiltonian_energy_error = 0.15013213205018872, max_hamiltonian_energy_error = -0.21223893482691736, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.530912501699296, hamiltonian_energy = -8.15023969479081, hamiltonian_energy_error = -0.15668343489971104, max_hamiltonian_energy_error = -0.5120108434702084, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9179889032217716, log_density = 10.731794522284412, hamiltonian_energy = -5.369986808187954, hamiltonian_energy_error = -0.09885149768951873, max_hamiltonian_energy_error = -0.42552291709613765, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9483198881687979, log_density = 10.940441099265941, hamiltonian_energy = -8.41009839951916, hamiltonian_energy_error = -0.014214937077190015, max_hamiltonian_energy_error = 0.18123355947758313, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9369332638125789, log_density = 10.096454587072403, hamiltonian_energy = -8.52629414869718, hamiltonian_energy_error = 0.1516467135491073, max_hamiltonian_energy_error = 0.23295168388083987, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8466010868235303, log_density = 8.268542963321849, hamiltonian_energy = -7.080774107485901, hamiltonian_energy_error = 0.2123350690368353, max_hamiltonian_energy_error = -0.32443259977906447, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.6031099002288869, log_density = 10.040702762969236, hamiltonian_energy = -3.085392657668274, hamiltonian_energy_error = 0.1595802388956873, max_hamiltonian_energy_error = 0.9496825814104697, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9774802210776963, log_density = 9.948150312107595, hamiltonian_energy = -8.709677861971441, hamiltonian_energy_error = -0.041279946699274817, max_hamiltonian_energy_error = -0.3394086525714588, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.280518853860245, hamiltonian_energy = -8.903828794434862, hamiltonian_energy_error = -0.21458705872413475, max_hamiltonian_energy_error = -0.21458705872413475, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6987267718810128, log_density = 8.844221600687167, hamiltonian_energy = -6.812453876404851, hamiltonian_energy_error = 0.39405382461544836, max_hamiltonian_energy_error = 0.6180858992018186, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9651445505351659, log_density = 7.8933650055700575, hamiltonian_energy = -3.9372713279052647, hamiltonian_energy_error = -0.16452368025744413, max_hamiltonian_energy_error = -0.5937726279605142, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 9.42627356714313, hamiltonian_energy = -6.793325330571642, hamiltonian_energy_error = -0.12708201178408363, max_hamiltonian_energy_error = -0.4138340277985977, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9448883213995759, log_density = 9.191373248405315, hamiltonian_energy = -4.079528952984248, hamiltonian_energy_error = -0.08584887635898486, max_hamiltonian_energy_error = -0.48967799224854414, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9974443978183664, log_density = 11.354334217436174, hamiltonian_energy = -8.80572714882122, hamiltonian_energy_error = -0.08496785015374009, max_hamiltonian_energy_error = -0.2815004623316941, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7919266219289283, log_density = 10.370140255418352, hamiltonian_energy = -5.5883928973429775, hamiltonian_energy_error = -0.10929075388384657, max_hamiltonian_energy_error = 0.4713461763674385, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 5, is_accept = true, acceptance_rate = 0.8794244971826455, log_density = 9.929252797925898, hamiltonian_energy = -7.9841622289432586, hamiltonian_energy_error = 0.1346011003362939, max_hamiltonian_energy_error = 0.27698396895363686, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.953214195053864, log_density = 8.801838807679445, hamiltonian_energy = -7.3066318510582615, hamiltonian_energy_error = 0.11983887026954854, max_hamiltonian_energy_error = -0.30052819759779137, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.885036216565005, hamiltonian_energy = -8.11686553101021, hamiltonian_energy_error = -0.15382580162897241, max_hamiltonian_energy_error = -0.47779033155473805, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9454888163261433, log_density = 10.715536324253339, hamiltonian_energy = -7.506402950918163, hamiltonian_energy_error = -0.20548880116063195, max_hamiltonian_energy_error = 0.22952160543427258, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9733897241549869, log_density = 9.638318183222243, hamiltonian_energy = -8.770966225628616, hamiltonian_energy_error = 0.05878524222497461, max_hamiltonian_energy_error = 0.07097279716515459, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8487430552188371, log_density = 10.368219463554063, hamiltonian_energy = -6.447611944134232, hamiltonian_energy_error = 0.18771379238109454, max_hamiltonian_energy_error = 0.32273211731286366, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9500426001609262, log_density = 11.3800525606351, hamiltonian_energy = -9.813388283104857, hamiltonian_energy_error = -0.0700561109729918, max_hamiltonian_energy_error = 0.16236858729057957, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7658365116485577, log_density = 7.887956509711831, hamiltonian_energy = -5.833126527268808, hamiltonian_energy_error = 0.41514255226536356, max_hamiltonian_energy_error = 0.42356194375441625, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9973059509575084, log_density = 10.514379914032414, hamiltonian_energy = -6.715029380513499, hamiltonian_energy_error = -0.15943481890130418, max_hamiltonian_energy_error = -0.4447053193454549, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9937940113435965, log_density = 11.051417499720705, hamiltonian_energy = -9.882918323748548, hamiltonian_energy_error = -0.04538499642404048, max_hamiltonian_energy_error = -0.18934351198188004, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9722914924340819, log_density = 10.521059019048785, hamiltonian_energy = -7.670505623987187, hamiltonian_energy_error = 0.01925215393744395, max_hamiltonian_energy_error = 0.10488717054417673, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8513865609775366, log_density = 10.08858473910144, hamiltonian_energy = -7.826653722831444, hamiltonian_energy_error = -0.13433755469891295, max_hamiltonian_energy_error = 0.321324146578883, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9332264316919309, log_density = 11.314862515381108, hamiltonian_energy = -9.219494938646482, hamiltonian_energy_error = 0.07533167561636134, max_hamiltonian_energy_error = 0.12708316909414563, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.999483504997764, log_density = 11.460155924581361, hamiltonian_energy = -10.401159858250196, hamiltonian_energy_error = -0.08649073336094304, max_hamiltonian_energy_error = -0.12993178779801973, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9397470996187588, log_density = 9.530132197739686, hamiltonian_energy = -6.7363763015472635, hamiltonian_energy_error = 0.11207932332831838, max_hamiltonian_energy_error = 0.13197938375480955, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9162007798950638, log_density = 10.272658362394171, hamiltonian_energy = -7.213806189205579, hamiltonian_energy_error = -0.17935980357400094, max_hamiltonian_energy_error = -0.4290296815889194, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9968407789059661, log_density = 9.951276665106263, hamiltonian_energy = -5.229852293736868, hamiltonian_energy_error = -0.11616792622268513, max_hamiltonian_energy_error = -0.2690563067106142, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.991586486721115, log_density = 11.222052194063195, hamiltonian_energy = -7.3858290183171045, hamiltonian_energy_error = 0.02284471437394231, max_hamiltonian_energy_error = -0.11261543804503749, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9977973654679008, log_density = 9.88024576701893, hamiltonian_energy = -8.398327187415571, hamiltonian_energy_error = 0.0023921588462378907, max_hamiltonian_energy_error = -0.131293323856017, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.947426399820735, log_density = 7.688641469982912, hamiltonian_energy = -6.445953589335067, hamiltonian_energy_error = 0.07197143376241755, max_hamiltonian_energy_error = 0.14975354244765882, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.7382861729036098, log_density = 9.714160637748016, hamiltonian_energy = -3.8133387677592916, hamiltonian_energy_error = 0.26745318801322604, max_hamiltonian_energy_error = 0.6189755603028964, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9899710503828608, log_density = 10.089929564640608, hamiltonian_energy = -8.056115962993285, hamiltonian_energy_error = 0.004336811408411023, max_hamiltonian_energy_error = -0.36907955043120566, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9909269393734054, log_density = 10.980773751165835, hamiltonian_energy = -8.252230993328423, hamiltonian_energy_error = -0.11090927648942817, max_hamiltonian_energy_error = -0.16947773503497388, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9978065849560794, log_density = 11.416547161455647, hamiltonian_energy = -9.89786042168879, hamiltonian_energy_error = -0.05067529702307283, max_hamiltonian_energy_error = -0.07568222691293336, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8225544150914041, log_density = 9.150259768686778, hamiltonian_energy = -7.769752864811843, hamiltonian_energy_error = 0.3122143930952559, max_hamiltonian_energy_error = 0.38410402461999826, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9999696687657897, log_density = 9.97578228355361, hamiltonian_energy = -6.372277009604824, hamiltonian_energy_error = -0.15372073476532933, max_hamiltonian_energy_error = -0.23808137830997644, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8279361708887202, log_density = 6.185203974378284, hamiltonian_energy = -2.82809141655199, hamiltonian_energy_error = 0.1420746276574265, max_hamiltonian_energy_error = 0.43433848103933315, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9705799652548076, log_density = 8.375004492864905, hamiltonian_energy = -1.76507041408117, hamiltonian_energy_error = -0.09117415401174345, max_hamiltonian_energy_error = -0.7062382449627194, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9679684457410527, log_density = 9.845487632402069, hamiltonian_energy = -6.157213746034835, hamiltonian_energy_error = -0.001526369438149544, max_hamiltonian_energy_error = -0.6616233487670549, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9919327173950208, log_density = 11.63073097071416, hamiltonian_energy = -9.427818801571808, hamiltonian_energy_error = -0.27819023455014147, max_hamiltonian_energy_error = -0.3589038676248979, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9676750154933728, log_density = 11.557664162779798, hamiltonian_energy = -7.995908933733281, hamiltonian_energy_error = -0.05966114020303337, max_hamiltonian_energy_error = 0.10029594975699396, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8474870433366791, log_density = 11.062114820152395, hamiltonian_energy = -9.007001954935049, hamiltonian_energy_error = 0.17428336381122023, max_hamiltonian_energy_error = 0.2865071296544919, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9572189327844078, log_density = 9.493385590534654, hamiltonian_energy = -7.983993708849649, hamiltonian_energy_error = 0.06972893116284773, max_hamiltonian_energy_error = 0.13142084918229013, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9541036634255359, log_density = 7.920054377844846, hamiltonian_energy = -7.568511793978381, hamiltonian_energy_error = 0.09508523471558572, max_hamiltonian_energy_error = -0.198052479267381, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9357184880750914, log_density = 5.520783157864326, hamiltonian_energy = -2.4574185196070046, hamiltonian_energy_error = 0.2995898596108737, max_hamiltonian_energy_error = 0.2995898596108737, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.110794339491523, hamiltonian_energy = -4.982216757993965, hamiltonian_energy_error = -0.29792311109851166, max_hamiltonian_energy_error = -0.6326787233260234, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 9.719259885555754, hamiltonian_energy = -6.808855925699282, hamiltonian_energy_error = -0.1374174646069264, max_hamiltonian_energy_error = -0.3952708347632683, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.975067402247853, log_density = 9.600865188247193, hamiltonian_energy = -6.990440749761614, hamiltonian_energy_error = 0.03894992490714344, max_hamiltonian_energy_error = -0.25065746606193073, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8625171259989747, log_density = 10.537177142960847, hamiltonian_energy = -2.077719446832937, hamiltonian_energy_error = -1.7092876237367474, max_hamiltonian_energy_error = -1.7092876237367474, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9469207567519341, log_density = 11.16005813437947, hamiltonian_energy = -7.639881200620632, hamiltonian_energy_error = -0.06595894834985039, max_hamiltonian_energy_error = -0.18392170367342597, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8732255400023132, log_density = 10.058776961607869, hamiltonian_energy = -6.131089167883575, hamiltonian_energy_error = 0.054900869831360666, max_hamiltonian_energy_error = 0.39848967977253835, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9503829847577122, log_density = 10.938188548149723, hamiltonian_energy = -8.518954277516332, hamiltonian_energy_error = -0.023134832701517283, max_hamiltonian_energy_error = -0.15803843651948135, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 35, is_accept = true, acceptance_rate = 0.9774786778149933, log_density = 10.719099988366253, hamiltonian_energy = -7.9331377701849775, hamiltonian_energy_error = 0.012582099546817105, max_hamiltonian_energy_error = -0.15426513215723325, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9876333412315231, log_density = 12.11893638091208, hamiltonian_energy = -9.230468156043791, hamiltonian_energy_error = -0.15233387759172956, max_hamiltonian_energy_error = -0.15233387759172956, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9430956197711282, log_density = 10.279648031094727, hamiltonian_energy = -8.959330937839905, hamiltonian_energy_error = 0.03426952620096557, max_hamiltonian_energy_error = 0.09919362754194694, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9226625255753872, log_density = 8.748643714181517, hamiltonian_energy = -8.115178291994527, hamiltonian_energy_error = 0.058838197261868785, max_hamiltonian_energy_error = 0.12196903755413935, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9853736623534205, log_density = 9.89062753242455, hamiltonian_energy = -8.159261818126254, hamiltonian_energy_error = -0.00731148385475322, max_hamiltonian_energy_error = -0.0676236001983277, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6707148728404542, log_density = 9.271852411668515, hamiltonian_energy = -6.116286042864049, hamiltonian_energy_error = 0.5016529730100956, max_hamiltonian_energy_error = 0.7563251140424692, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9360509620806181, log_density = 11.700135291752794, hamiltonian_energy = -6.06909702145398, hamiltonian_energy_error = -0.5592324000056292, max_hamiltonian_energy_error = -0.6475407085209053, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9946986421812192, log_density = 11.71329971473017, hamiltonian_energy = -9.91987878021667, hamiltonian_energy_error = -0.01715612026591451, max_hamiltonian_energy_error = 0.02948541059416243, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.942547283810429, log_density = 11.193910311832191, hamiltonian_energy = -9.81305654929911, hamiltonian_energy_error = 0.06405522036292943, max_hamiltonian_energy_error = 0.1375493917287809, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9978814536623533, log_density = 11.494493593840446, hamiltonian_energy = -8.783744045432915, hamiltonian_energy_error = -0.08056423695652803, max_hamiltonian_energy_error = -0.0892992702869897, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9846969627427694, log_density = 11.772602389946396, hamiltonian_energy = -10.077661468251065, hamiltonian_energy_error = -0.007733522815358995, max_hamiltonian_energy_error = 0.03496504013197743, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.904774554311845, log_density = 9.798319863393878, hamiltonian_energy = -5.688064584410357, hamiltonian_energy_error = 0.13384209696667781, max_hamiltonian_energy_error = 0.14622447908025915, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9894209939936168, log_density = 9.337637995075411, hamiltonian_energy = -8.161394627022993, hamiltonian_energy_error = 0.004344229899702512, max_hamiltonian_energy_error = -0.09201931530256502, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9969765965010542, log_density = 9.179150900606064, hamiltonian_energy = -7.325321841554046, hamiltonian_energy_error = -0.043899855107571106, max_hamiltonian_energy_error = -0.07913894889883455, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9931276880391057, log_density = 10.488490227480213, hamiltonian_energy = -7.213180323146711, hamiltonian_energy_error = -0.01796345055622517, max_hamiltonian_energy_error = -0.03134325509961666, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9672809733571048, log_density = 11.157370709859135, hamiltonian_energy = -7.433203643584065, hamiltonian_energy_error = 0.051096737838100204, max_hamiltonian_energy_error = 0.08863309197150748, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9748376462279993, log_density = 11.304099678478469, hamiltonian_energy = -5.892601437076882, hamiltonian_energy_error = -0.026161057070266835, max_hamiltonian_energy_error = 0.07548718230366891, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9597252182874824, log_density = 11.199599458790388, hamiltonian_energy = -9.97787454081065, hamiltonian_energy_error = 0.03012195440619614, max_hamiltonian_energy_error = 0.09767279409536833, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9626332496708745, log_density = 10.734155220789138, hamiltonian_energy = -10.03258072355964, hamiltonian_energy_error = 0.05580799638546985, max_hamiltonian_energy_error = 0.07825411549774586, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9788195891234365, log_density = 10.218469290013232, hamiltonian_energy = -9.547191946345649, hamiltonian_energy_error = 0.06997128764333915, max_hamiltonian_energy_error = 0.06997128764333915, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9992683856007134, log_density = 11.539848012780023, hamiltonian_energy = -8.641398032168901, hamiltonian_energy_error = -0.12272955406963248, max_hamiltonian_energy_error = -0.17830473469656383, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9151919769132363, log_density = 11.171759475243256, hamiltonian_energy = -8.176470765440344, hamiltonian_energy_error = 0.06487271094801983, max_hamiltonian_energy_error = 0.2297820967406068, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.5703278366991099, log_density = 7.089992189334062, hamiltonian_energy = -3.8668493262898247, hamiltonian_energy_error = 0.6136228490451741, max_hamiltonian_energy_error = 0.9312139133851272, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9080028739437427, log_density = 7.733950798931559, hamiltonian_energy = -4.002493605136102, hamiltonian_energy_error = 0.04557733244351425, max_hamiltonian_energy_error = -0.627333600913464, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8965121182443215, log_density = 6.9340412334743355, hamiltonian_energy = -4.9363681365387535, hamiltonian_energy_error = 0.1373562562137387, max_hamiltonian_energy_error = -0.7432210720943431, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9488478755210161, log_density = 11.115668320994224, hamiltonian_energy = -5.595997449874448, hamiltonian_energy_error = -0.6729839839420375, max_hamiltonian_energy_error = -1.0961468605771554, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7699411061252535, log_density = 11.115668320994224, hamiltonian_energy = -8.417805340979926, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 0.46084205858909666, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9390470663278249, log_density = 11.187079245742353, hamiltonian_energy = -8.391644426686868, hamiltonian_energy_error = 0.11668868974121516, max_hamiltonian_energy_error = 0.15234043047441226, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9424169450517498, log_density = 11.308118623419723, hamiltonian_energy = -8.42816103939511, hamiltonian_energy_error = -0.09278206445248927, max_hamiltonian_energy_error = -0.3122862281301604, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9578915710249042, log_density = 10.627912924900208, hamiltonian_energy = -8.082638111992502, hamiltonian_energy_error = -0.03801377125969907, max_hamiltonian_energy_error = 0.17273644790560194, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7891755935698503, log_density = 10.531815324034794, hamiltonian_energy = -8.807622921336995, hamiltonian_energy_error = 0.11061415108563288, max_hamiltonian_energy_error = 0.5120881441918428, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.6878903210940815, log_density = 7.446050053101125, hamiltonian_energy = -4.87271846980124, hamiltonian_energy_error = 0.4233947507109921, max_hamiltonian_energy_error = 0.7011504095133505, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.768407115516819, hamiltonian_energy = -6.655412223096759, hamiltonian_energy_error = -0.30238185150516017, max_hamiltonian_energy_error = -0.3717536450989787, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9489304179544452, log_density = 8.949225197988907, hamiltonian_energy = -6.675434602317068, hamiltonian_energy_error = 0.12146480840482621, max_hamiltonian_energy_error = 0.12146480840482621, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 1.0, log_density = 7.313326707961718, hamiltonian_energy = -5.550008519478528, hamiltonian_energy_error = -0.07115576762245368, max_hamiltonian_energy_error = -0.22156647967798104, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.964159940831779, log_density = 10.052187052355201, hamiltonian_energy = -4.940204490542672, hamiltonian_energy_error = 0.02430507453134556, max_hamiltonian_energy_error = -0.14877433235343673, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8917811031675374, log_density = 9.087515430354536, hamiltonian_energy = -4.290911399704421, hamiltonian_energy_error = 0.07806122487227629, max_hamiltonian_energy_error = 0.29076658478167694, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.888753987540192, log_density = 11.495031822985117, hamiltonian_energy = -4.663128795318194, hamiltonian_energy_error = -0.31584848150483325, max_hamiltonian_energy_error = 0.4584374174127581, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9391246929595013, log_density = 8.910495421605985, hamiltonian_energy = -7.133515475151157, hamiltonian_energy_error = 0.09731976308852541, max_hamiltonian_energy_error = 0.10515579351022453, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9912471460615342, log_density = 10.468846426659713, hamiltonian_energy = -6.72579217307493, hamiltonian_energy_error = -0.02625548666974975, max_hamiltonian_energy_error = -0.11867419524369449, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.942238281146485, log_density = 6.484414727065184, hamiltonian_energy = -4.710748433846859, hamiltonian_energy_error = 0.22812435238478823, max_hamiltonian_energy_error = 0.22812435238478823, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9403311943708496, log_density = 8.238963836700348, hamiltonian_energy = -5.935401070489928, hamiltonian_energy_error = -0.2607168277183156, max_hamiltonian_energy_error = -0.2607168277183156, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9992804292500861, log_density = 9.735026668870155, hamiltonian_energy = -7.560072390730118, hamiltonian_energy_error = -0.009071905625355647, max_hamiltonian_energy_error = -0.04570550603146817, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8878811102123209, log_density = 11.807726576580679, hamiltonian_energy = -7.235465348495416, hamiltonian_energy_error = -0.041187265068061585, max_hamiltonian_energy_error = 0.17997410043983741, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9519203103152374, log_density = 12.003052372422268, hamiltonian_energy = -10.570055028788452, hamiltonian_energy_error = 0.026301637459173577, max_hamiltonian_energy_error = 0.07503314100966918, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8328600938619232, log_density = 10.458718270731703, hamiltonian_energy = -8.56959404873329, hamiltonian_energy_error = 0.1807150646960327, max_hamiltonian_energy_error = 0.3558146548453376, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9293200922080317, log_density = 6.941040224622281, hamiltonian_energy = -5.319887500921826, hamiltonian_energy_error = 0.165527056996444, max_hamiltonian_energy_error = -0.38686068675712004, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.058268690341379, hamiltonian_energy = -6.1232502056415825, hamiltonian_energy_error = -0.5779259507242411, max_hamiltonian_energy_error = -0.5779259507242411, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8472212843221071, log_density = 5.7423455212651895, hamiltonian_energy = -1.9387455915860352, hamiltonian_energy_error = 0.15518939326580306, max_hamiltonian_energy_error = 0.35411813946521775, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.611552193722957, hamiltonian_energy = -4.181375612353705, hamiltonian_energy_error = -0.13633489694535506, max_hamiltonian_energy_error = -0.21626256871809701, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8647871632773547, log_density = 11.978538583875274, hamiltonian_energy = -3.953412280960574, hamiltonian_energy_error = 0.07053897943832066, max_hamiltonian_energy_error = 0.3179471124864257, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9420853144458424, log_density = 9.724395322906053, hamiltonian_energy = -8.72782558595683, hamiltonian_energy_error = 0.06307600660930213, max_hamiltonian_energy_error = 0.11172316716426955, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9893299991847084, log_density = 10.144591055818136, hamiltonian_energy = -6.98712996500306, hamiltonian_energy_error = -0.10215461706390272, max_hamiltonian_energy_error = -0.289435499803008, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9759575759127396, log_density = 11.402860489636709, hamiltonian_energy = -9.399685710925715, hamiltonian_energy_error = -0.0008493674540037688, max_hamiltonian_energy_error = 0.057854669336363074, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9795932011217288, log_density = 11.278355805913634, hamiltonian_energy = -10.391945374569685, hamiltonian_energy_error = 0.037014891886657963, max_hamiltonian_energy_error = 0.052188872518430074, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.126416325230338, hamiltonian_energy = -10.676259228781763, hamiltonian_energy_error = -0.022591004299950868, max_hamiltonian_energy_error = -0.05343277531316026, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9714421057114566, log_density = 11.482646150893956, hamiltonian_energy = -10.291772184872542, hamiltonian_energy_error = 0.05872930144414035, max_hamiltonian_energy_error = 0.10624714806799851, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9991858018087039, log_density = 11.532758860478179, hamiltonian_energy = -11.275193796946516, hamiltonian_energy_error = -0.020142127834102297, max_hamiltonian_energy_error = -0.1287589587962259, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9837628430171579, log_density = 10.882716344950618, hamiltonian_energy = -9.086423382054532, hamiltonian_energy_error = -0.0030563832162027182, max_hamiltonian_energy_error = -0.12128797628446542, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9506869862389391, log_density = 11.092623077990963, hamiltonian_energy = -10.233809451409904, hamiltonian_energy_error = -0.08171326038608484, max_hamiltonian_energy_error = 0.16009720692255058, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9917884830619009, log_density = 11.771125531533754, hamiltonian_energy = -9.475090251438163, hamiltonian_energy_error = 0.00718737414988091, max_hamiltonian_energy_error = -0.054648583837476394, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9454681416850982, log_density = 10.654053124464346, hamiltonian_energy = -7.794394669128106, hamiltonian_energy_error = 0.08383814227470587, max_hamiltonian_energy_error = 0.15237430775984784, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9920044839188251, log_density = 10.587928997629525, hamiltonian_energy = -10.199243187096073, hamiltonian_energy_error = 0.03585344593758144, max_hamiltonian_energy_error = -0.16623584779012823, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.99219428072685, log_density = 9.915669430163595, hamiltonian_energy = -8.889021396177943, hamiltonian_energy_error = -0.10756391157997669, max_hamiltonian_energy_error = -0.18722413498548285, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6377487289333319, log_density = 2.485931454332931, hamiltonian_energy = 0.12430329443178145, hamiltonian_energy_error = 0.4233037053012776, max_hamiltonian_energy_error = 0.6556730590027948, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.949111902521772, log_density = 6.29485754239564, hamiltonian_energy = 0.02271318992876381, hamiltonian_energy_error = -0.15682511241310193, max_hamiltonian_energy_error = -0.42316193269374436, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9402516855733133, log_density = 5.851170172672578, hamiltonian_energy = -2.1006342829688505, hamiltonian_energy_error = 0.14452765356053465, max_hamiltonian_energy_error = -0.7760784804859049, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.647268862752657, hamiltonian_energy = -5.00186318694026, hamiltonian_energy_error = -0.11803291985942632, max_hamiltonian_energy_error = -0.40175892183027084, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9517261135885813, log_density = 7.278325449026468, hamiltonian_energy = -6.233483271870716, hamiltonian_energy_error = 0.097500076597969, max_hamiltonian_energy_error = -0.20877715281768516, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9871521197093103, log_density = 9.924368238971052, hamiltonian_energy = -4.582123890981861, hamiltonian_energy_error = -0.11897603358631681, max_hamiltonian_energy_error = -0.42397118631111486, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8106536350346758, log_density = 8.437424610081168, hamiltonian_energy = -4.583243509472995, hamiltonian_energy_error = 0.23007359066444089, max_hamiltonian_energy_error = 0.3655704991081752, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9798171221218829, log_density = 10.946366281565185, hamiltonian_energy = -7.083860250758804, hamiltonian_energy_error = -0.19095824307009224, max_hamiltonian_energy_error = -0.19095824307009224, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8333021737551984, log_density = 10.833320194107063, hamiltonian_energy = -9.095362041687462, hamiltonian_energy_error = 0.13923502208404237, max_hamiltonian_energy_error = 0.40996143488655257, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7952896253542403, log_density = 11.776206704368649, hamiltonian_energy = -7.030720166223705, hamiltonian_energy_error = -0.3971625926959401, max_hamiltonian_energy_error = 0.6313478867897375, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7800092408469863, log_density = 10.100636774350633, hamiltonian_energy = -6.795800905719986, hamiltonian_energy_error = 0.21188674992350975, max_hamiltonian_energy_error = 0.386773605473409, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9899662777660964, log_density = 9.875521680931985, hamiltonian_energy = -8.476855004662056, hamiltonian_energy_error = 0.0355613890565305, max_hamiltonian_energy_error = -0.22801890960405125, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9980522948264225, log_density = 9.896973878625921, hamiltonian_energy = -8.757996536707624, hamiltonian_energy_error = -0.041993211736272684, max_hamiltonian_energy_error = -0.28050992486152104, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9305925443180122, log_density = 9.788626367862795, hamiltonian_energy = -7.40214923612254, hamiltonian_energy_error = 0.06428489027273443, max_hamiltonian_energy_error = -0.458565047918297, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9980392220269031, log_density = 8.070280960047214, hamiltonian_energy = -6.660013547726633, hamiltonian_energy_error = -0.026039298269126654, max_hamiltonian_energy_error = -0.40238491148055644, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9755787059043711, log_density = 8.41775938578532, hamiltonian_energy = -5.490832689172013, hamiltonian_energy_error = -0.04853797348392774, max_hamiltonian_energy_error = -0.44739707050687905, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9638493626320052, log_density = 8.605705760148922, hamiltonian_energy = -5.763246243185605, hamiltonian_energy_error = -0.035924728843693465, max_hamiltonian_energy_error = -0.2094846064229241, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9993427313564838, log_density = 9.822221226467866, hamiltonian_energy = -7.414622348941231, hamiltonian_energy_error = -0.17824900745237393, max_hamiltonian_energy_error = -0.17824900745237393, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8356345085956085, log_density = 9.156156284987222, hamiltonian_energy = -4.058238326668266, hamiltonian_energy_error = -0.10614871548720295, max_hamiltonian_energy_error = 0.5633312814463043, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9379518364858287, log_density = 9.156629175036086, hamiltonian_energy = -8.302329058444826, hamiltonian_energy_error = 0.10060805255685601, max_hamiltonian_energy_error = 0.13377319286301237, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9389341588444171, log_density = 7.807101797806805, hamiltonian_energy = -5.277270656225117, hamiltonian_energy_error = 0.05166952452167628, max_hamiltonian_energy_error = 0.39606900425948766, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9491250187601334, log_density = 4.726385272965803, hamiltonian_energy = -4.641491794474443, hamiltonian_energy_error = 0.1263217381674293, max_hamiltonian_energy_error = -0.24081821039748164, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9965938064037909, log_density = 5.8929851519664105, hamiltonian_energy = -1.7195195096671876, hamiltonian_energy_error = -0.11830456419944113, max_hamiltonian_energy_error = -0.43571257707229094, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9941598862415798, log_density = 5.213492696944494, hamiltonian_energy = -3.946532866635261, hamiltonian_energy_error = 0.030079886474695172, max_hamiltonian_energy_error = -0.14671814263867677, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9863145750241188, log_density = 7.528180142808097, hamiltonian_energy = -2.9423173349771137, hamiltonian_energy_error = -0.10325215922212116, max_hamiltonian_energy_error = -0.3083273889023488, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9570547787137388, log_density = 7.3320676293905045, hamiltonian_energy = -4.922015788341301, hamiltonian_energy_error = 0.08106007985242591, max_hamiltonian_energy_error = 0.13511263165002418, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9978204737883468, log_density = 9.448167781037817, hamiltonian_energy = -7.095633209936771, hamiltonian_energy_error = -0.07104669412757048, max_hamiltonian_energy_error = -0.22717079078508817, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8509376253540256, log_density = 9.056718210690665, hamiltonian_energy = -5.924711086217366, hamiltonian_energy_error = 0.051768508911094635, max_hamiltonian_energy_error = -0.4111269990767399, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9691824313761124, log_density = 8.621807824057232, hamiltonian_energy = -4.780201463874922, hamiltonian_energy_error = -0.5329594683512502, max_hamiltonian_energy_error = -0.5329594683512502, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9752108843799433, log_density = 11.266733787610637, hamiltonian_energy = -7.566117329905492, hamiltonian_energy_error = -0.11987046194154072, max_hamiltonian_energy_error = -0.15789529264357682, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.8191472347177282, log_density = 10.363241126014806, hamiltonian_energy = -9.312788635893316, hamiltonian_energy_error = 0.33510073013804664, max_hamiltonian_energy_error = 0.33626518822645224, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9813677763332377, log_density = 9.964003587419558, hamiltonian_energy = -9.278405691760014, hamiltonian_energy_error = 0.08157411383261959, max_hamiltonian_energy_error = -0.3622801629582888, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.15699470105222, hamiltonian_energy = -8.066052992244678, hamiltonian_energy_error = -0.07459755767331355, max_hamiltonian_energy_error = -0.38001518678579327, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8733842102913618, log_density = 6.72174328099204, hamiltonian_energy = -4.744973183568561, hamiltonian_energy_error = 0.20907486284538646, max_hamiltonian_energy_error = 0.21995539321247204, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9854766089854022, log_density = 7.491857304183668, hamiltonian_energy = -4.5432298220279, hamiltonian_energy_error = 0.10721082320172481, max_hamiltonian_energy_error = -0.35992552665287203, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 8.696125404396012, hamiltonian_energy = -7.108734634240104, hamiltonian_energy_error = -0.41563901262956016, max_hamiltonian_energy_error = -0.4999535818105123, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9093581925295731, log_density = 9.180867398175243, hamiltonian_energy = -6.135630722378826, hamiltonian_energy_error = 0.09493294372978944, max_hamiltonian_energy_error = 0.26908979303549607, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9489142465937828, log_density = 9.35620342082504, hamiltonian_energy = -6.315531941077416, hamiltonian_energy_error = -0.25782840500054505, max_hamiltonian_energy_error = -0.25782840500054505, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9171784772659318, log_density = 7.082187496814047, hamiltonian_energy = -5.713059093709532, hamiltonian_energy_error = 0.15696851781144172, max_hamiltonian_energy_error = 0.24293675339472198, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.122107147181442, hamiltonian_energy = -5.65923246334428, hamiltonian_energy_error = -0.13976905560067898, max_hamiltonian_energy_error = -0.13976905560067898, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9761502071322719, log_density = 10.693787151012545, hamiltonian_energy = -7.747182943198011, hamiltonian_energy_error = -0.04717948855564913, max_hamiltonian_energy_error = 0.21100908846219468, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9885325006955915, log_density = 11.305414383294028, hamiltonian_energy = -9.437581144537988, hamiltonian_energy_error = -0.12735400082912207, max_hamiltonian_energy_error = -0.3342082502573742, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9948640711434047, log_density = 11.981423643075562, hamiltonian_energy = -9.884548609552745, hamiltonian_energy_error = -0.02240307337831915, max_hamiltonian_energy_error = -0.05919561769891857, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9431349974493369, log_density = 11.084293190986127, hamiltonian_energy = -10.804323553762082, hamiltonian_energy_error = 0.07437779772226705, max_hamiltonian_energy_error = 0.1374385110966987, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9917915788137104, log_density = 12.278566030816199, hamiltonian_energy = -9.501677012144139, hamiltonian_energy_error = -0.09179548720345387, max_hamiltonian_energy_error = -0.09179548720345387, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9167551423478634, log_density = 10.831790719073108, hamiltonian_energy = -9.547930546218279, hamiltonian_energy_error = 0.0784612751810787, max_hamiltonian_energy_error = 0.1459623742041103, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6462488675734828, log_density = 6.883941651839933, hamiltonian_energy = -3.2987633398009693, hamiltonian_energy_error = 0.4546336619989799, max_hamiltonian_energy_error = 0.7766839952935864, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9100021826568437, log_density = 3.9763280547078566, hamiltonian_energy = -0.6751677007108063, hamiltonian_energy_error = 0.00748536023192381, max_hamiltonian_energy_error = 0.26223820843647294, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6247709921390704, log_density = 4.530215504989224, hamiltonian_energy = 2.8182798957720436, hamiltonian_energy_error = 0.36529396021455973, max_hamiltonian_energy_error = 1.510020015035591, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9214070572365242, log_density = 9.908149590186298, hamiltonian_energy = 1.7361873518368505, hamiltonian_energy_error = -0.515646563128362, max_hamiltonian_energy_error = -1.8001044882593504, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7723666177250558, log_density = 9.222508469545696, hamiltonian_energy = -6.685196319612517, hamiltonian_energy_error = 0.4724434948269849, max_hamiltonian_energy_error = 0.4724434948269849, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 10.589907169404793, hamiltonian_energy = -8.302924288064803, hamiltonian_energy_error = -0.2500841323123044, max_hamiltonian_energy_error = -0.5926468564491518, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9761526233646004, log_density = 11.553545080378365, hamiltonian_energy = -9.407984447713782, hamiltonian_energy_error = -0.19591411894499622, max_hamiltonian_energy_error = -0.2839440233343673, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9607151607350514, log_density = 11.514537739841117, hamiltonian_energy = -9.426387801306024, hamiltonian_energy_error = 0.02959279509182089, max_hamiltonian_energy_error = 0.1093860231791286, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.7706915910454403, log_density = 10.817732062264193, hamiltonian_energy = -7.44342073529843, hamiltonian_energy_error = -0.1318480431078024, max_hamiltonian_energy_error = 0.6158730482298882, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9657401850728405, log_density = 12.23310938321412, hamiltonian_energy = -9.83037130087034, hamiltonian_energy_error = -0.1392454539725314, max_hamiltonian_energy_error = -0.1392454539725314, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9805801498908948, log_density = 12.143307274689738, hamiltonian_energy = -11.25877395028484, hamiltonian_energy_error = -0.008999457053972648, max_hamiltonian_energy_error = 0.06265695072291777, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.982119307846833, log_density = 11.641246562023454, hamiltonian_energy = -11.36631835746516, hamiltonian_energy_error = 0.03222918487239568, max_hamiltonian_energy_error = 0.04099735288513351, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9115227059844508, log_density = 10.43322383067326, hamiltonian_energy = -8.274867879206724, hamiltonian_energy_error = 0.07669058389630301, max_hamiltonian_energy_error = 0.30088996520018974, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9648145179815504, log_density = 11.657295665206197, hamiltonian_energy = -7.835942006265373, hamiltonian_energy_error = -0.11606611594736371, max_hamiltonian_energy_error = -0.1563279998292577, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7925104251951137, log_density = 8.072269234473866, hamiltonian_energy = -6.45523150441055, hamiltonian_energy_error = 0.24326549006701992, max_hamiltonian_energy_error = 0.28677750025335147, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9464275770439473, log_density = 5.1436391471975895, hamiltonian_energy = -2.618194956832908, hamiltonian_energy_error = 0.0793656336812143, max_hamiltonian_energy_error = -0.313496250636657, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 10.512685835667643, hamiltonian_energy = -4.8189177275199135, hamiltonian_energy_error = -0.373716931211443, max_hamiltonian_energy_error = -0.373716931211443, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9881977153101319, log_density = 9.712292421998779, hamiltonian_energy = -7.978486643798185, hamiltonian_energy_error = -0.16211430948825445, max_hamiltonian_energy_error = -0.20312769481299142, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9872200408619125, log_density = 10.59471485969658, hamiltonian_energy = -6.577916067298198, hamiltonian_energy_error = 0.009589614610215236, max_hamiltonian_energy_error = 0.07372739924888005, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.3489391019577926, log_density = 4.479198153289893, hamiltonian_energy = -3.261980028814714, hamiltonian_energy_error = 1.1418076362220542, max_hamiltonian_energy_error = 1.553227619645761, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9151007813572947, log_density = 11.51401045832095, hamiltonian_energy = -1.6675109804321142, hamiltonian_energy_error = -0.7920750229645659, max_hamiltonian_energy_error = -1.1005460337693078, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9558339384681107, log_density = 10.60353072563046, hamiltonian_energy = -9.713560715276646, hamiltonian_energy_error = 0.011914596310431236, max_hamiltonian_energy_error = 0.1359241033500478, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7935838784882951, log_density = 7.756903190167985, hamiltonian_energy = -5.770110031976206, hamiltonian_energy_error = 0.3202351516914499, max_hamiltonian_energy_error = 0.4429613943288473, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9956016503141627, log_density = 11.336067184728885, hamiltonian_energy = -6.769743930389086, hamiltonian_energy_error = -0.2809543796770173, max_hamiltonian_energy_error = -0.30617065199059823, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9890659990292282, log_density = 9.778445958007826, hamiltonian_energy = -7.876853168777618, hamiltonian_energy_error = -0.017957586428146044, max_hamiltonian_energy_error = 0.056477850075458136, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9867131444917431, log_density = 11.339598538977803, hamiltonian_energy = -7.372517508277619, hamiltonian_energy_error = 0.03569273775914894, max_hamiltonian_energy_error = -0.0897601598021982, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7636403899493275, log_density = 11.21580446441618, hamiltonian_energy = -5.025443561298977, hamiltonian_energy_error = -0.4116669075290895, max_hamiltonian_energy_error = 0.7123172607787147, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.756504605888245, log_density = 9.123233124519684, hamiltonian_energy = -7.354881535213051, hamiltonian_energy_error = 0.24957897340794233, max_hamiltonian_energy_error = 0.46348080509065603, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.970673623971118, log_density = 8.335547205584001, hamiltonian_energy = -7.592825728252502, hamiltonian_energy_error = 0.0441548600244932, max_hamiltonian_energy_error = 0.07192662640200709, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9500814201913674, log_density = 6.351893467032532, hamiltonian_energy = -3.8954952966288885, hamiltonian_energy_error = -0.3233280677969508, max_hamiltonian_energy_error = -0.7420753465126726, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9920247769293403, log_density = 10.776118769631633, hamiltonian_energy = -5.4790349529954385, hamiltonian_energy_error = -0.09346673391147142, max_hamiltonian_energy_error = -0.1975202656748225, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9263674513064838, log_density = 11.249702590697153, hamiltonian_energy = -9.29469227847785, hamiltonian_energy_error = 0.05365319409867908, max_hamiltonian_energy_error = 0.2304144128403145, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8604146037368668, log_density = 9.476035822942592, hamiltonian_energy = -8.211990286465312, hamiltonian_energy_error = 0.1847903095214889, max_hamiltonian_energy_error = 0.3158594969430695, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9797945751310995, log_density = 11.192692654790994, hamiltonian_energy = -7.637055222043935, hamiltonian_energy_error = -0.08019933390562795, max_hamiltonian_energy_error = -0.22680549608564338, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9640818840458393, log_density = 10.43350872678231, hamiltonian_energy = -9.00721749743867, hamiltonian_energy_error = 0.024964482033844604, max_hamiltonian_energy_error = 0.09135576040151783, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9854291735247785, log_density = 10.136752707062922, hamiltonian_energy = -7.611920260806077, hamiltonian_energy_error = -0.052306452368060974, max_hamiltonian_energy_error = -0.1481850892408092, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8026632573518059, log_density = 7.888861033124153, hamiltonian_energy = -6.52187115768605, hamiltonian_energy_error = 0.2681452664022066, max_hamiltonian_energy_error = 0.41890330208006343, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9930967681252886, log_density = 10.793838766344194, hamiltonian_energy = -7.195017846987868, hamiltonian_energy_error = -0.27772881483265976, max_hamiltonian_energy_error = -0.27772881483265976, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9186136109011365, log_density = 7.629631113843124, hamiltonian_energy = -6.580969542761224, hamiltonian_energy_error = 0.14202562709310573, max_hamiltonian_energy_error = 0.18295842475299384, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9777337932678862, log_density = 4.222136052350628, hamiltonian_energy = 0.3177678370800825, hamiltonian_energy_error = 0.07238973500491941, max_hamiltonian_energy_error = -0.27583883168051404, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9950534226878237, log_density = 6.383843030213033, hamiltonian_energy = -3.087497486974489, hamiltonian_energy_error = -0.09550825830147902, max_hamiltonian_energy_error = -0.2591485027402931, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8961104252381121, log_density = 5.473376851913196, hamiltonian_energy = -5.012939447397755, hamiltonian_energy_error = 0.19801373028673286, max_hamiltonian_energy_error = 0.19801373028673286, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9923261008746508, log_density = 7.877696436687703, hamiltonian_energy = -2.110210571581244, hamiltonian_energy_error = 0.051461684306215005, max_hamiltonian_energy_error = -0.3068354428792981, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9493183132383838, log_density = 8.028301397497714, hamiltonian_energy = -4.7391694067959484, hamiltonian_energy_error = -0.0327022977271314, max_hamiltonian_energy_error = 0.4381512376710228, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9640711550123655, log_density = 10.098274702143517, hamiltonian_energy = -5.580475370967349, hamiltonian_energy_error = -0.12064501372536718, max_hamiltonian_energy_error = -0.21898412630675512, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9601664346706211, log_density = 7.989832943270407, hamiltonian_energy = -6.738055428671779, hamiltonian_energy_error = 0.12468916282655851, max_hamiltonian_energy_error = -0.1599040767147084, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9876746319652565, log_density = 5.810247242278647, hamiltonian_energy = -2.3706586085412367, hamiltonian_energy_error = -0.3644336350700268, max_hamiltonian_energy_error = -0.3644336350700268, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8206072026877348, log_density = 7.1061700153447, hamiltonian_energy = -3.938889348507973, hamiltonian_energy_error = 0.23883981256461206, max_hamiltonian_energy_error = 0.4940018198559599, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9893103359058423, log_density = 8.876572440089364, hamiltonian_energy = -5.808531531738625, hamiltonian_energy_error = -0.04113108204754923, max_hamiltonian_energy_error = -0.1631194265825533, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9027205651278332, log_density = 7.258543324234324, hamiltonian_energy = -6.327041630408781, hamiltonian_energy_error = 0.1875576302296551, max_hamiltonian_energy_error = 0.25835894798620096, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9070298523170017, log_density = 10.286790582957094, hamiltonian_energy = -2.975605497033195, hamiltonian_energy_error = -0.40749654783190614, max_hamiltonian_energy_error = -1.1231256512587349, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8817644568631512, log_density = 9.21324945263019, hamiltonian_energy = -5.9594377056219985, hamiltonian_energy_error = 0.06526566728982086, max_hamiltonian_energy_error = 0.25924441224332995, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9711667307454263, log_density = 10.005625216890817, hamiltonian_energy = -7.810191469957216, hamiltonian_energy_error = -0.002413511300463078, max_hamiltonian_energy_error = -0.23331182624401503, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.99104549725158, log_density = 10.133961891740393, hamiltonian_energy = -7.34937267991935, hamiltonian_energy_error = -0.06391470581278469, max_hamiltonian_energy_error = -0.3245783542044913, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9592190180411999, log_density = 11.783628763253848, hamiltonian_energy = -8.06040059425939, hamiltonian_energy_error = -0.2804858888543986, max_hamiltonian_energy_error = -0.283416053616639, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9374445003674473, log_density = 9.110769143606525, hamiltonian_energy = -7.954677331313708, hamiltonian_energy_error = 0.16130233418641726, max_hamiltonian_energy_error = 0.16130233418641726, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9641481098686782, log_density = 8.049484917730345, hamiltonian_energy = -6.592452513076125, hamiltonian_energy_error = 0.2812701355209599, max_hamiltonian_energy_error = 0.2812701355209599, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.887510116497614, log_density = 9.933542393382634, hamiltonian_energy = -4.778096601605462, hamiltonian_energy_error = -0.586395950603591, max_hamiltonian_energy_error = -0.586395950603591, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9864513120324244, log_density = 10.443856055405446, hamiltonian_energy = -8.766463712102658, hamiltonian_energy_error = 0.031677408470063284, max_hamiltonian_energy_error = -0.10677289537301249, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.993650535508069, log_density = 8.354989193699229, hamiltonian_energy = -6.619318659836979, hamiltonian_energy_error = 5.463587318654817e-5, max_hamiltonian_energy_error = -0.07845337109144346, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9312891405946021, log_density = 8.103171282164634, hamiltonian_energy = -5.251704567961963, hamiltonian_energy_error = 0.054017002376842704, max_hamiltonian_energy_error = 0.1975109984608654, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9947850204639745, log_density = 10.426777551207628, hamiltonian_energy = -4.518268840695544, hamiltonian_energy_error = -0.12435319650210808, max_hamiltonian_energy_error = -0.14331590243306103, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9612093701001542, log_density = 12.216202911186766, hamiltonian_energy = -9.18416588542419, hamiltonian_energy_error = -0.06895093779328398, max_hamiltonian_energy_error = 0.07636464442525615, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9542679286365904, log_density = 11.605472683559283, hamiltonian_energy = -10.69769830919266, hamiltonian_energy_error = 0.014674588391198284, max_hamiltonian_energy_error = 0.10547429271513664, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9679429413247952, log_density = 10.478048763685354, hamiltonian_energy = -9.538103729828123, hamiltonian_energy_error = 0.01676172569321821, max_hamiltonian_energy_error = 0.10081236543484451, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9938809065759658, log_density = 10.730083812459258, hamiltonian_energy = -7.2734706688766675, hamiltonian_energy_error = -0.03446538959795209, max_hamiltonian_energy_error = -0.046885344792799266, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9979901535975794, log_density = 10.950736353242506, hamiltonian_energy = -10.468281778280998, hamiltonian_energy_error = -0.030131724105290303, max_hamiltonian_energy_error = -0.030131724105290303, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9574352464141649, log_density = 11.913504703615207, hamiltonian_energy = -10.051639454787532, hamiltonian_energy_error = 0.05739299709284218, max_hamiltonian_energy_error = 0.0939010000504723, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9869760370723022, log_density = 11.50668524663207, hamiltonian_energy = -10.823247168986297, hamiltonian_energy_error = 0.023607373883505645, max_hamiltonian_energy_error = -0.0785591128019476, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9040173466039885, log_density = 11.453319836589236, hamiltonian_energy = -9.508638540511573, hamiltonian_energy_error = -0.026694678436831154, max_hamiltonian_energy_error = 0.2576154716953081, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.930597865969001, log_density = 11.266152904822862, hamiltonian_energy = -10.409321940642727, hamiltonian_energy_error = 0.03495549520992647, max_hamiltonian_energy_error = 0.14854625124898568, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.983540612183538, log_density = 11.067085605391913, hamiltonian_energy = -9.611675832024247, hamiltonian_energy_error = -1.2736717666328445e-5, max_hamiltonian_energy_error = -0.060953085551803454, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9999451866745038, log_density = 10.45066670311553, hamiltonian_energy = -8.459165659233195, hamiltonian_energy_error = 0.00010331469142776939, max_hamiltonian_energy_error = -0.09996061237906062, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9979054389135882, log_density = 10.00250515763284, hamiltonian_energy = -8.346328848900173, hamiltonian_energy_error = -0.01867250236196938, max_hamiltonian_energy_error = -0.08586426103317102, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8913741426522961, log_density = 5.407028822064554, hamiltonian_energy = -4.111087861080454, hamiltonian_energy_error = 0.26941012348000104, max_hamiltonian_energy_error = 0.26941012348000104, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9636361614090024, log_density = 8.442189960857256, hamiltonian_energy = -4.8148828227304605, hamiltonian_energy_error = -0.22067680541938106, max_hamiltonian_energy_error = -0.22067680541938106, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9893621438714213, log_density = 7.704511621175374, hamiltonian_energy = -6.302424183974516, hamiltonian_energy_error = -0.08979087491222693, max_hamiltonian_energy_error = -0.16079710188161123, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9992871730081069, log_density = 8.780114331334445, hamiltonian_energy = -6.564740171370206, hamiltonian_energy_error = 0.000987390075678718, max_hamiltonian_energy_error = -0.1192363089321482, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8240207065734211, log_density = 11.492376859677794, hamiltonian_energy = -7.114583930058558, hamiltonian_energy_error = 0.1504878617148222, max_hamiltonian_energy_error = 0.3446284690408703, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9620574591909085, log_density = 9.963920264571296, hamiltonian_energy = -9.738028074138446, hamiltonian_energy_error = 0.09284563869205265, max_hamiltonian_energy_error = 0.10433330036935651, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9940783263994156, log_density = 11.30558783158786, hamiltonian_energy = -9.099106032357987, hamiltonian_energy_error = -0.15011038510667163, max_hamiltonian_energy_error = -0.17684124073970153, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9010536162476398, log_density = 10.097541493156154, hamiltonian_energy = -7.963207382368003, hamiltonian_energy_error = 0.10130954171257578, max_hamiltonian_energy_error = 0.25437599116486176, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9634620838921938, log_density = 8.326146952572646, hamiltonian_energy = -5.618422707827747, hamiltonian_energy_error = -0.05403608669649085, max_hamiltonian_energy_error = 0.11253978360341765, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9975685886977481, log_density = 8.010786721156322, hamiltonian_energy = -6.038907919222796, hamiltonian_energy_error = -0.03200563110256205, max_hamiltonian_energy_error = -0.07148886820741307, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8987522557291917, log_density = 8.53410069001161, hamiltonian_energy = -4.551302941934137, hamiltonian_energy_error = 0.053328638240588866, max_hamiltonian_energy_error = 0.20012786048548747, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9207850216213435, log_density = 11.464819188540602, hamiltonian_energy = -6.200261020883695, hamiltonian_energy_error = -0.23556846034753143, max_hamiltonian_energy_error = -0.23556846034753143, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.8632461126047204, log_density = 10.746919608901482, hamiltonian_energy = -7.650629533098991, hamiltonian_energy_error = 0.17221026014318497, max_hamiltonian_energy_error = 0.27424371107289147, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9305092987440368, log_density = 8.824865646985625, hamiltonian_energy = -6.876837710551746, hamiltonian_energy_error = 0.017977814242390977, max_hamiltonian_energy_error = -0.4043176344658317, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7963530157402174, log_density = 11.104643706810204, hamiltonian_energy = -7.096874983834795, hamiltonian_energy_error = 0.04445952065835179, max_hamiltonian_energy_error = 0.4736625584221521, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9574141970271565, log_density = 11.968044732959397, hamiltonian_energy = -10.222482637766795, hamiltonian_energy_error = -0.18323847349492262, max_hamiltonian_energy_error = -0.18323847349492262, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9664434158549575, log_density = 11.226078049567974, hamiltonian_energy = -10.460217080584632, hamiltonian_energy_error = 0.06058883805607884, max_hamiltonian_energy_error = 0.08003204802811048, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9832287003959251, log_density = 10.334874549661153, hamiltonian_energy = -9.293879504537811, hamiltonian_energy_error = -0.00026153420368224545, max_hamiltonian_energy_error = -0.07562636717817384, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7751341480657089, log_density = 5.2828666181805115, hamiltonian_energy = -4.538489573297554, hamiltonian_energy_error = 0.41462088143924625, max_hamiltonian_energy_error = 0.41462088143924625, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.279086727947334, hamiltonian_energy = -4.4673580464309035, hamiltonian_energy_error = -0.2435396834595629, max_hamiltonian_energy_error = -0.5698523716862685, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9321108837862417, log_density = 10.627464530107122, hamiltonian_energy = -2.1785855215924865, hamiltonian_energy_error = -0.2890257101544158, max_hamiltonian_energy_error = -0.29294235197693297, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8840706495575709, log_density = 9.715199392532346, hamiltonian_energy = -8.030310670512486, hamiltonian_energy_error = -0.03646879986073692, max_hamiltonian_energy_error = 0.26409564455897083, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9700051730221004, log_density = 10.573532076489371, hamiltonian_energy = -8.09085797875146, hamiltonian_energy_error = 0.01598450853305522, max_hamiltonian_energy_error = 0.13193977277529978, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9584392487327785, log_density = 10.811383080077066, hamiltonian_energy = -6.98399008226027, hamiltonian_energy_error = 0.042735656354405904, max_hamiltonian_energy_error = 0.13823580172315797, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9543211284007017, log_density = 10.392199693153106, hamiltonian_energy = -9.515939138632897, hamiltonian_energy_error = -0.10428373280870318, max_hamiltonian_energy_error = -0.12703378189070058, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9890908550223255, log_density = 10.310262167978777, hamiltonian_energy = -9.207561600749461, hamiltonian_energy_error = 0.03314880651741703, max_hamiltonian_energy_error = -0.053174305090832874, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7237481783215216, log_density = 9.077003016155473, hamiltonian_energy = -8.088091371335139, hamiltonian_energy_error = 0.24006410433445602, max_hamiltonian_energy_error = 0.4120798113495612, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9540457576115233, log_density = 11.867438427014557, hamiltonian_energy = -8.119177171400509, hamiltonian_energy_error = -0.3687404629925011, max_hamiltonian_energy_error = -0.3687404629925011, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9158721696090075, log_density = 10.919252285475505, hamiltonian_energy = -9.664749922054028, hamiltonian_energy_error = 0.0893730299853992, max_hamiltonian_energy_error = 0.17217966745670488, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9991148554461622, log_density = 9.442486041966689, hamiltonian_energy = -9.008211064475827, hamiltonian_energy_error = -0.01794002523312699, max_hamiltonian_energy_error = -0.06628927645892091, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9666064338732044, log_density = 9.731147126093012, hamiltonian_energy = -7.317854731049692, hamiltonian_energy_error = 0.07255055973149638, max_hamiltonian_energy_error = 0.1122124322075786, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.277244586271587, hamiltonian_energy = -9.043197139705104, hamiltonian_energy_error = -0.04359928440528371, max_hamiltonian_energy_error = -0.10224874311549748, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9651604293345026, log_density = 10.786218881641943, hamiltonian_energy = -8.842836388691527, hamiltonian_energy_error = 0.0864479228870465, max_hamiltonian_energy_error = 0.14796742268879193, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9413992677193878, log_density = 8.354059419150204, hamiltonian_energy = -7.822232755496998, hamiltonian_energy_error = 0.15543779177780337, max_hamiltonian_energy_error = -0.22256471991141957, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9922025409449696, log_density = 8.997262361375357, hamiltonian_energy = -7.512223213915112, hamiltonian_energy_error = -0.07699428398755526, max_hamiltonian_energy_error = -0.4281318503022655, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9966273973420445, log_density = 8.716043339283434, hamiltonian_energy = -6.863833463151995, hamiltonian_energy_error = 0.006838150517107344, max_hamiltonian_energy_error = -0.280221383201428, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.997518444059323, log_density = 7.756945822282514, hamiltonian_energy = -6.725165091303806, hamiltonian_energy_error = -0.06202470270312155, max_hamiltonian_energy_error = -0.33292044747568816, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9500968117533631, log_density = 9.749053774824471, hamiltonian_energy = -6.809014587282145, hamiltonian_energy_error = -0.06229020910687666, max_hamiltonian_energy_error = 0.1621772993187287, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9840044410340252, log_density = 9.26167718751833, hamiltonian_energy = -5.73435853075563, hamiltonian_energy_error = -0.04058281944024511, max_hamiltonian_energy_error = -0.12790587619830163, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8761773739448631, log_density = 9.554648832949688, hamiltonian_energy = -4.850079041776486, hamiltonian_energy_error = -0.30803649495089935, max_hamiltonian_energy_error = 0.4972670841125124, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.99687791181508, log_density = 10.969006140796228, hamiltonian_energy = -8.5757209286899, hamiltonian_energy_error = -0.1762069716452661, max_hamiltonian_energy_error = -0.19644458677493049, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.743317073566266, log_density = 10.192539515649482, hamiltonian_energy = -8.143395933095174, hamiltonian_energy_error = 0.07167432731348988, max_hamiltonian_energy_error = 0.5596462911320055, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.45483163238932756, log_density = 5.420217767245184, hamiltonian_energy = -3.694974346972966, hamiltonian_energy_error = 0.7555109196659657, max_hamiltonian_energy_error = 1.031154967841172, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9834193095975826, log_density = 8.085934897594383, hamiltonian_energy = -4.059423781866135, hamiltonian_energy_error = -0.04624933200183001, max_hamiltonian_energy_error = -0.6186893835450533, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9830338576105802, log_density = 7.550756035601397, hamiltonian_energy = -5.385039719164389, hamiltonian_energy_error = 0.1415468179361703, max_hamiltonian_energy_error = -0.4852343830129833, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.185181127302407, hamiltonian_energy = -7.086727433439531, hamiltonian_energy_error = -0.23475238496581863, max_hamiltonian_energy_error = -0.6463713892572924, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9794309300741836, log_density = 10.40814969622842, hamiltonian_energy = -9.582126385254046, hamiltonian_energy_error = 0.022151831683498102, max_hamiltonian_energy_error = -0.2579294451492018, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9455508865670008, log_density = 9.733723838312235, hamiltonian_energy = -7.273302212130916, hamiltonian_energy_error = -0.02368120011260455, max_hamiltonian_energy_error = -0.30764743661401095, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9621610607193735, log_density = 10.408501186386951, hamiltonian_energy = -7.35007762667472, hamiltonian_energy_error = -0.016488949190092583, max_hamiltonian_energy_error = -0.1996414311872936, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9883763219021873, log_density = 9.633909918034579, hamiltonian_energy = -9.310161270974229, hamiltonian_energy_error = 0.0354935433533754, max_hamiltonian_energy_error = -0.16005057903901054, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9837699878661114, log_density = 11.409062858665088, hamiltonian_energy = -8.360343233531857, hamiltonian_energy_error = -0.17526279183057625, max_hamiltonian_energy_error = -0.30702844684015673, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9965612768017652, log_density = 11.834637761471523, hamiltonian_energy = -11.11875354610589, hamiltonian_energy_error = -0.07475834353819089, max_hamiltonian_energy_error = -0.10580162005813776, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9893492856596667, log_density = 11.730854766494712, hamiltonian_energy = -10.570661386721143, hamiltonian_energy_error = 0.0032884963529724587, max_hamiltonian_energy_error = 0.042646605814271155, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.965821135357723, log_density = 12.159437933271981, hamiltonian_energy = -10.984640208480645, hamiltonian_energy_error = -0.01830177722277604, max_hamiltonian_energy_error = 0.08899439387685959, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9935393374678667, log_density = 11.432865119763779, hamiltonian_energy = -10.552001808932445, hamiltonian_energy_error = 0.0011293455341601089, max_hamiltonian_energy_error = 0.022644358118702357, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8936472773829662, log_density = 9.92018347276359, hamiltonian_energy = -8.391795195140173, hamiltonian_energy_error = 0.1033674094670829, max_hamiltonian_energy_error = 0.14208782036197043, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9984139064330447, log_density = 10.49876627662103, hamiltonian_energy = -9.24970768592542, hamiltonian_energy_error = -0.005531777487362888, max_hamiltonian_energy_error = -0.03777848485815838, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7497902141881545, log_density = 5.7128993944605675, hamiltonian_energy = -2.4952172208170214, hamiltonian_energy_error = 0.6755584706310054, max_hamiltonian_energy_error = 0.6755584706310054, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8082695503609817, log_density = 8.972895829964461, hamiltonian_energy = -1.5654855767392348, hamiltonian_energy_error = -0.02511644796620871, max_hamiltonian_energy_error = 0.8074808481161972, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 11.335620832523329, hamiltonian_energy = -9.090187044723457, hamiltonian_energy_error = -0.24408681055125214, max_hamiltonian_energy_error = -0.24408681055125214, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9896163250532515, log_density = 11.118880577839978, hamiltonian_energy = -9.317141792563579, hamiltonian_energy_error = 0.006163277194859873, max_hamiltonian_energy_error = -0.05142803421350628, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8830746169401286, log_density = 10.991749199126117, hamiltonian_energy = -7.164493051968618, hamiltonian_energy_error = 0.07418944711656916, max_hamiltonian_energy_error = 0.2950673952724374, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 11.890188757180116, hamiltonian_energy = -10.817271222107859, hamiltonian_energy_error = -0.12959871424467018, max_hamiltonian_energy_error = -0.20356468616718537, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9663909463749256, log_density = 11.542526678145077, hamiltonian_energy = -10.058433722605471, hamiltonian_energy_error = 0.010391829186097823, max_hamiltonian_energy_error = 0.0917648757585674, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9412617072908752, log_density = 10.605033175657294, hamiltonian_energy = -8.721239746798595, hamiltonian_energy_error = -0.05545866681891276, max_hamiltonian_energy_error = 0.172746083010745, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8787082315031381, log_density = 11.410769741846652, hamiltonian_energy = -7.751085919043909, hamiltonian_energy_error = 0.096524214898702, max_hamiltonian_energy_error = 0.29846730936036714, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9921461075244938, log_density = 10.649734547995829, hamiltonian_energy = -9.259400146087842, hamiltonian_energy_error = -0.0021247591605533245, max_hamiltonian_energy_error = -0.14938586867800652, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9957379178896647, log_density = 11.308068787539963, hamiltonian_energy = -9.47176027595125, hamiltonian_energy_error = -0.003206688256204515, max_hamiltonian_energy_error = -0.08393498271606958, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9832211197066654, log_density = 10.590270182211967, hamiltonian_energy = -9.171136142318314, hamiltonian_energy_error = 0.012138558408828715, max_hamiltonian_energy_error = -0.11629474454337974, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 1.0, log_density = 9.682826555049623, hamiltonian_energy = -8.86154690065198, hamiltonian_energy_error = -0.04248869594997018, max_hamiltonian_energy_error = -0.11967405715375534, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8557916402928748, log_density = 6.8382689313681055, hamiltonian_energy = -4.758209711793246, hamiltonian_energy_error = 0.4558837580729911, max_hamiltonian_energy_error = 0.4558837580729911, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8629109817558943, log_density = 8.814897030964794, hamiltonian_energy = -5.046368182631793, hamiltonian_energy_error = -0.5437214078694259, max_hamiltonian_energy_error = -0.5437214078694259, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8670609967317442, log_density = 8.081078386010462, hamiltonian_energy = -6.287032788418713, hamiltonian_energy_error = 0.0775750667442372, max_hamiltonian_energy_error = 0.3971963515657242, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9647220098793913, log_density = 9.135250719302292, hamiltonian_energy = -5.528489146761274, hamiltonian_energy_error = -0.03453024627811452, max_hamiltonian_energy_error = -0.14242680397111407, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9655607290426066, log_density = 9.684435855205566, hamiltonian_energy = -7.408586415520195, hamiltonian_energy_error = 0.04279105287525198, max_hamiltonian_energy_error = 0.12721195579428457, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8530219270303067, log_density = 9.170188744455693, hamiltonian_energy = -5.249620242603973, hamiltonian_energy_error = 0.019879686635357885, max_hamiltonian_energy_error = 0.3447274696258109, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9968599791161724, log_density = 9.014086249528244, hamiltonian_energy = -8.218272183199879, hamiltonian_energy_error = 0.02222530873086903, max_hamiltonian_energy_error = -0.2171327509284975, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9651264108130724, log_density = 9.285479873895248, hamiltonian_energy = -7.583155441683602, hamiltonian_energy_error = 0.11016153598809453, max_hamiltonian_energy_error = -0.3223545982904179, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9511248671727646, log_density = 7.492365789944314, hamiltonian_energy = -5.756542942839692, hamiltonian_energy_error = 0.22430517420111507, max_hamiltonian_energy_error = -0.3488005126160205, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 11.05250642049263, hamiltonian_energy = -7.134053149008916, hamiltonian_energy_error = -0.47524075947363453, max_hamiltonian_energy_error = -0.47524075947363453, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9424661825212298, log_density = 10.87658301959308, hamiltonian_energy = -10.017991276976193, hamiltonian_energy_error = 0.08374817749232832, max_hamiltonian_energy_error = 0.24431334928099346, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9963455017945075, log_density = 10.498011521186315, hamiltonian_energy = -9.810085606077868, hamiltonian_energy_error = 0.002704920283621348, max_hamiltonian_energy_error = -0.196700611654677, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9802676100222902, log_density = 9.571574531140591, hamiltonian_energy = -8.94028339263655, hamiltonian_energy_error = 0.03465855647435134, max_hamiltonian_energy_error = -0.16062778627772012, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9352983563408748, log_density = 10.398060704261173, hamiltonian_energy = -7.742433927111931, hamiltonian_energy_error = -0.025109928554098992, max_hamiltonian_energy_error = -0.17565242580669072, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9830022516661259, log_density = 10.916305790705483, hamiltonian_energy = -7.70913808882189, hamiltonian_energy_error = -0.1065273936234501, max_hamiltonian_energy_error = -0.1852657499128787, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9774478520871211, log_density = 10.849578194952965, hamiltonian_energy = -9.929744678659096, hamiltonian_energy_error = 0.055563641526999774, max_hamiltonian_energy_error = 0.0700620013407054, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9693683596312177, log_density = 10.038867258223277, hamiltonian_energy = -8.291268541314253, hamiltonian_energy_error = -0.007098144741348733, max_hamiltonian_energy_error = -0.1388587943809334, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.99115329655064, log_density = 10.500011622770494, hamiltonian_energy = -8.255251783822274, hamiltonian_energy_error = -0.050670874465534865, max_hamiltonian_energy_error = -0.12017355395905938, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9905105975970906, log_density = 9.998716519931643, hamiltonian_energy = -8.191968580011313, hamiltonian_energy_error = -0.035709628647095926, max_hamiltonian_energy_error = -0.12797431715647534, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9748948905973691, log_density = 7.097855480158813, hamiltonian_energy = -5.903021018272647, hamiltonian_energy_error = 0.04230440476188324, max_hamiltonian_energy_error = 0.07377486610254991, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9936591928472442, log_density = 9.680502856567042, hamiltonian_energy = -6.268403338490634, hamiltonian_energy_error = -0.026601823318237905, max_hamiltonian_energy_error = -0.09102485897561241, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9122679377981944, log_density = 7.238529222157556, hamiltonian_energy = -6.265987093103961, hamiltonian_energy_error = 0.1585899161102109, max_hamiltonian_energy_error = 0.1585899161102109, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.26081321977258, hamiltonian_energy = -6.673912207330279, hamiltonian_energy_error = -0.05041075685757779, max_hamiltonian_energy_error = -0.15699653390885882, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9803306115712521, log_density = 10.639385128871425, hamiltonian_energy = -7.526678361475074, hamiltonian_energy_error = -0.050523411340650526, max_hamiltonian_energy_error = 0.08762186332932931, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9028660516435375, log_density = 9.90653655199441, hamiltonian_energy = -8.835707359648483, hamiltonian_energy_error = 0.09469668989766866, max_hamiltonian_energy_error = 0.17631143991592602, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9858875636801672, log_density = 10.035101719078124, hamiltonian_energy = -9.017788352312898, hamiltonian_energy_error = 0.011028110834931937, max_hamiltonian_energy_error = -0.1491721997858395, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.868276730526203, log_density = 8.62603376997016, hamiltonian_energy = -6.784878207399783, hamiltonian_energy_error = 0.3347529837486043, max_hamiltonian_energy_error = 0.4365670445460257, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9958742169972783, log_density = 11.991701640442503, hamiltonian_energy = -8.203818235186375, hamiltonian_energy_error = -0.40935544664805423, max_hamiltonian_energy_error = -0.6299843142111774, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9650153205833675, log_density = 11.158147836235704, hamiltonian_energy = -8.891086226302718, hamiltonian_energy_error = -0.07011635283317297, max_hamiltonian_energy_error = 0.1057143529485014, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9794498744629301, log_density = 9.597870958232578, hamiltonian_energy = -7.194203921233, hamiltonian_energy_error = -0.012748249292147129, max_hamiltonian_energy_error = 0.0941095385645836, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9356999541118204, log_density = 10.88639066255919, hamiltonian_energy = -6.4032277117346, hamiltonian_energy_error = 0.03611178300210671, max_hamiltonian_energy_error = 0.14463152691526737, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.973166608794004, log_density = 11.82890497256669, hamiltonian_energy = -9.429794340475937, hamiltonian_energy_error = -0.02431636367051304, max_hamiltonian_energy_error = 0.08557438371070525, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8957296036582808, log_density = 11.726000847445235, hamiltonian_energy = -9.382735799339205, hamiltonian_energy_error = -0.01180286053119417, max_hamiltonian_energy_error = 0.26292382740893494, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9387166128622364, log_density = 11.0837022435781, hamiltonian_energy = -9.723860288825138, hamiltonian_energy_error = 0.07848120222451094, max_hamiltonian_energy_error = 0.14124203540058566, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9926908993398779, log_density = 10.060968114994598, hamiltonian_energy = -9.353623153333663, hamiltonian_energy_error = 0.033449047386687525, max_hamiltonian_energy_error = -0.11728191929179843, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9300263879113359, log_density = 9.300682602726127, hamiltonian_energy = -6.564755789204876, hamiltonian_energy_error = -0.12871818169154103, max_hamiltonian_energy_error = 0.26500216246330677, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9264444705628766, log_density = 8.957141938802309, hamiltonian_energy = -2.8404409078119652, hamiltonian_energy_error = 0.19309030004075467, max_hamiltonian_energy_error = -0.2739064968918319, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9830451957874387, log_density = 6.8618265278221084, hamiltonian_energy = -4.054887694125485, hamiltonian_energy_error = 0.010088623233411198, max_hamiltonian_energy_error = -0.18274271514124596, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9877265981406125, log_density = 9.105593753339948, hamiltonian_energy = -5.526849942232397, hamiltonian_energy_error = 0.049343062454540565, max_hamiltonian_energy_error = -0.2699240796918776, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9943115956972809, log_density = 10.490669592116696, hamiltonian_energy = -6.999216739129107, hamiltonian_energy_error = -0.12158459055953941, max_hamiltonian_energy_error = -0.1750347192647137, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.564868226273747, hamiltonian_energy = -9.636656235445713, hamiltonian_energy_error = -0.15331401574013448, max_hamiltonian_energy_error = -0.15331401574013448, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9756003881045289, log_density = 10.72362251367273, hamiltonian_energy = -9.920896184886114, hamiltonian_energy_error = 0.04423890504151373, max_hamiltonian_energy_error = 0.06763289069791512, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9678035028310613, log_density = 11.468924452607343, hamiltonian_energy = -8.545409805166287, hamiltonian_energy_error = -0.07410976704388972, max_hamiltonian_energy_error = 0.09370627133568377, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8790005232299379, log_density = 10.652688273629316, hamiltonian_energy = -5.823198467453411, hamiltonian_energy_error = 0.013095639189231179, max_hamiltonian_energy_error = 0.20158342039598587, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8889887110572295, log_density = 8.979620452390847, hamiltonian_energy = -4.803403077405388, hamiltonian_energy_error = 0.059186905915362686, max_hamiltonian_energy_error = 0.23072568559811124, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9095579736337192, log_density = 6.663529822978152, hamiltonian_energy = -4.249399298263333, hamiltonian_energy_error = 0.056985352668092126, max_hamiltonian_energy_error = -0.22505959732091618, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9968688442812085, log_density = 9.486720936227963, hamiltonian_energy = -4.504027697282149, hamiltonian_energy_error = -0.2414112565178117, max_hamiltonian_energy_error = -0.26048154959627734, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9916901132970272, log_density = 10.3958120448214, hamiltonian_energy = -8.484609056850067, hamiltonian_energy_error = 0.03331914001207714, max_hamiltonian_energy_error = -0.11550123450073535, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8461217443433215, log_density = 9.454351935398174, hamiltonian_energy = -6.331267323163351, hamiltonian_energy_error = 0.20002290116128485, max_hamiltonian_energy_error = 0.298265099441954, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7844282543768804, log_density = 6.597976639416116, hamiltonian_energy = -3.3622314871825547, hamiltonian_energy_error = 0.5106197216987449, max_hamiltonian_energy_error = 0.6187613612850802, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.9427917045546454, hamiltonian_energy = -4.68797984863378, hamiltonian_energy_error = -0.30499646638114, max_hamiltonian_energy_error = -0.9377077131352554, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9882461800895549, log_density = 9.535867282306405, hamiltonian_energy = -5.0839460371244325, hamiltonian_energy_error = -0.5830365579122816, max_hamiltonian_energy_error = -0.5830365579122816, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9969723887591277, log_density = 10.30606965291897, hamiltonian_energy = -7.1926742892294016, hamiltonian_energy_error = -0.03951341624350668, max_hamiltonian_energy_error = -0.18593962680103004, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9561708128493884, log_density = 9.722504976410807, hamiltonian_energy = -7.445711352987734, hamiltonian_energy_error = 0.038219443890199045, max_hamiltonian_energy_error = -0.15355332576221237, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9530405730447844, log_density = 10.719256239614232, hamiltonian_energy = -6.845720599088357, hamiltonian_energy_error = -0.14481958543327256, max_hamiltonian_energy_error = -0.5754897947827855, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8536175409412665, log_density = 9.592249610912862, hamiltonian_energy = -8.347491760851211, hamiltonian_energy_error = 0.27819549396923016, max_hamiltonian_energy_error = 0.30271595866436485, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9854671954256432, log_density = 8.65514996554084, hamiltonian_energy = -7.616733430369791, hamiltonian_energy_error = 0.05245217018834758, max_hamiltonian_energy_error = -0.38649973443993346, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.991781013163594, log_density = 11.640491419363638, hamiltonian_energy = -7.085055208083017, hamiltonian_energy_error = -0.43910253319964365, max_hamiltonian_energy_error = -0.43910253319964365, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.955004939567674, log_density = 10.458238008874451, hamiltonian_energy = -9.367413727202702, hamiltonian_energy_error = 0.10099914292463019, max_hamiltonian_energy_error = 0.10099914292463019, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9950681632111982, log_density = 10.417523085329295, hamiltonian_energy = -9.625623223747771, hamiltonian_energy_error = -0.015878603664811308, max_hamiltonian_energy_error = -0.16032063971974075, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9955303345195973, log_density = 10.881801910748397, hamiltonian_energy = -9.935014253599691, hamiltonian_energy_error = -0.027488487778745352, max_hamiltonian_energy_error = -0.12685056399717176, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9247288348774073, log_density = 11.045995053114368, hamiltonian_energy = -8.809016123437681, hamiltonian_energy_error = -0.05401091940930236, max_hamiltonian_energy_error = 0.15161620836452627, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9578191607374371, log_density = 10.734017081803145, hamiltonian_energy = -8.996813369304009, hamiltonian_energy_error = 0.029572487017572868, max_hamiltonian_energy_error = 0.10555350262862007, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7891874152803974, log_density = 5.083540740634199, hamiltonian_energy = -2.309894444404148, hamiltonian_energy_error = 0.2953364874490303, max_hamiltonian_energy_error = 0.3299467036028467, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9983106593072788, log_density = 7.681983408240157, hamiltonian_energy = -2.885203171415399, hamiltonian_energy_error = -0.10905670584900529, max_hamiltonian_energy_error = -0.3184833639537339, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9768489771812828, log_density = 10.106233928131347, hamiltonian_energy = -6.380033192601401, hamiltonian_energy_error = -0.05523310428231909, max_hamiltonian_energy_error = -0.28238553297166646, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6493282149301477, log_density = 6.917407504864634, hamiltonian_energy = -4.234265198991153, hamiltonian_energy_error = 0.5699517492275978, max_hamiltonian_energy_error = 0.676943697594699, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9941971095266439, log_density = 7.393146861982778, hamiltonian_energy = -5.47499689640324, hamiltonian_energy_error = 0.041468279685751064, max_hamiltonian_energy_error = -0.4303320926630674, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9801206927746177, log_density = 11.197766613670153, hamiltonian_energy = -5.6196115042229975, hamiltonian_energy_error = -0.4754547637277122, max_hamiltonian_energy_error = -0.4754547637277122, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8600035778700632, log_density = 9.764597987761633, hamiltonian_energy = -6.141534679255488, hamiltonian_energy_error = 0.07313739725861801, max_hamiltonian_energy_error = 0.2736441433918744, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.990282674150414, log_density = 11.175548534736913, hamiltonian_energy = -5.79841767282332, hamiltonian_energy_error = -0.06809117028304446, max_hamiltonian_energy_error = -0.06809117028304446, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9702317832793093, log_density = 11.33118273570464, hamiltonian_energy = -10.420934082253865, hamiltonian_energy_error = 0.012374343420983536, max_hamiltonian_energy_error = 0.07425781390847952, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.7826867387313553, log_density = 9.715595629255255, hamiltonian_energy = -7.39506320893314, hamiltonian_energy_error = 0.21720294034936316, max_hamiltonian_energy_error = 0.4844573606651785, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9968287332304038, log_density = 11.118148953216956, hamiltonian_energy = -8.576421078722957, hamiltonian_energy_error = -0.06731880997189599, max_hamiltonian_energy_error = -0.3033660368566906, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9791775380977691, log_density = 10.098735980573663, hamiltonian_energy = -9.015622865433079, hamiltonian_energy_error = 0.016739204634466986, max_hamiltonian_energy_error = -0.11821908188281327, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9544007639802689, log_density = 9.30996229074493, hamiltonian_energy = -7.9338800498826965, hamiltonian_energy_error = -0.18595428019182147, max_hamiltonian_energy_error = -0.18595428019182147, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6022358196432192, log_density = 6.8761658656514495, hamiltonian_energy = -5.068689592462296, hamiltonian_energy_error = 0.5825415542965002, max_hamiltonian_energy_error = 0.8494385512912697, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9487391030311045, log_density = 7.541422470113737, hamiltonian_energy = -3.80101267223231, hamiltonian_energy_error = 0.06452753494971963, max_hamiltonian_energy_error = -0.8228304303774236, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9951306818611022, log_density = 9.84853625954779, hamiltonian_energy = -6.923005096486007, hamiltonian_energy_error = -0.4313730367609345, max_hamiltonian_energy_error = -0.4431132123011414, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9161834775594471, log_density = 9.13630714799326, hamiltonian_energy = -5.928107428782908, hamiltonian_energy_error = 0.01251033499684251, max_hamiltonian_energy_error = 0.15051855149493587, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8584187063190233, log_density = 9.300048362915849, hamiltonian_energy = -5.647300125069322, hamiltonian_energy_error = 0.15285994313283258, max_hamiltonian_energy_error = 0.26321097383428516, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6805561680713282, log_density = 5.3804267747506085, hamiltonian_energy = -3.3087224909880386, hamiltonian_energy_error = 0.5440327102035529, max_hamiltonian_energy_error = 0.5440327102035529, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9909195066947251, log_density = 10.601765114986598, hamiltonian_energy = -3.518160229112242, hamiltonian_energy_error = -0.7046799833613866, max_hamiltonian_energy_error = -0.7046799833613866, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9369324287061528, log_density = 8.174195982953561, hamiltonian_energy = -5.634338220165277, hamiltonian_energy_error = 0.039323221437764566, max_hamiltonian_energy_error = -0.17796632519651379, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.183309702232533, hamiltonian_energy = -7.553930432557048, hamiltonian_energy_error = -0.23643963921793176, max_hamiltonian_energy_error = -0.23643963921793176, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8537558409247382, log_density = 10.228587033050559, hamiltonian_energy = -9.170191451017372, hamiltonian_energy_error = 0.1770127494110909, max_hamiltonian_energy_error = 0.22382041156943622, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9997030987294425, log_density = 12.111254795561118, hamiltonian_energy = -8.919006488602179, hamiltonian_energy_error = -0.15024171426738953, max_hamiltonian_energy_error = -0.19212513837947753, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9694991792462043, log_density = 10.738223549913803, hamiltonian_energy = -9.786199780523434, hamiltonian_energy_error = 0.04571687422932058, max_hamiltonian_energy_error = 0.052061028000517595, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9513506196131873, log_density = 11.72911150002908, hamiltonian_energy = -8.93937024046214, hamiltonian_energy_error = -0.02071784277172206, max_hamiltonian_energy_error = 0.1712404006182311, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8583659571398193, log_density = 11.746067291185613, hamiltonian_energy = -9.906964391998722, hamiltonian_energy_error = -0.06352789826932081, max_hamiltonian_energy_error = 0.3210166146812785, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.855050154293777, log_density = 12.157381946620392, hamiltonian_energy = -10.039615470398257, hamiltonian_energy_error = -0.010495280412385455, max_hamiltonian_energy_error = 0.29999398807498956, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9858669800256213, log_density = 12.209137915232812, hamiltonian_energy = -10.777909097610076, hamiltonian_energy_error = -0.015372188612372994, max_hamiltonian_energy_error = 0.035922380582507074, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.9722698223354269, log_density = 12.03592218902445, hamiltonian_energy = -11.112092464182568, hamiltonian_energy_error = 0.0046892197133949765, max_hamiltonian_energy_error = 0.06380013074439361, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9374222415057277, log_density = 11.19692592178439, hamiltonian_energy = -10.734157898151466, hamiltonian_energy_error = 0.08733500993722032, max_hamiltonian_energy_error = 0.09210538916309297, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8747789915669498, log_density = 9.524613900167106, hamiltonian_energy = -9.125989978082911, hamiltonian_energy_error = 0.33929828750362745, max_hamiltonian_energy_error = 0.33929828750362745, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 1.0, log_density = 10.197364862886051, hamiltonian_energy = -8.199227643881676, hamiltonian_energy_error = -0.1096944898849248, max_hamiltonian_energy_error = -0.4221145964735129, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.952488975741574, log_density = 10.047346929318325, hamiltonian_energy = -9.198207384081357, hamiltonian_energy_error = -0.11308574324933218, max_hamiltonian_energy_error = 0.13786408698885388, tree_depth = 2, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9522969239090245, log_density = 11.035911914857937, hamiltonian_energy = -8.8367838074409, hamiltonian_energy_error = 0.005443069269265521, max_hamiltonian_energy_error = 0.13532209041223453, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9912364272046966, log_density = 10.533329765845679, hamiltonian_energy = -9.243976025325036, hamiltonian_energy_error = -0.009255148297281579, max_hamiltonian_energy_error = -0.058560024449164416, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9442200896963233, log_density = 11.39485739083005, hamiltonian_energy = -8.138642521482724, hamiltonian_energy_error = 0.021669962516565278, max_hamiltonian_energy_error = 0.14623514654237724, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9991037668291266, log_density = 10.41411077586939, hamiltonian_energy = -9.559767343253936, hamiltonian_energy_error = -0.014340779621683453, max_hamiltonian_energy_error = -0.05422528856909459, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9072199977270178, log_density = 10.095066095781833, hamiltonian_energy = -5.842720116423238, hamiltonian_energy_error = -0.01055603289337892, max_hamiltonian_energy_error = 0.2309816863278149, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7441005640179232, log_density = 7.398650972049483, hamiltonian_energy = -4.027230366545447, hamiltonian_energy_error = 0.1115860283685004, max_hamiltonian_energy_error = 0.4969615751507712, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9714574802723249, log_density = 7.651032878125317, hamiltonian_energy = -6.257774679905712, hamiltonian_energy_error = 0.06838137401380706, max_hamiltonian_energy_error = 0.07595549125992385, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9978949567219463, log_density = 9.338106376380225, hamiltonian_energy = -4.732904228519227, hamiltonian_energy_error = 0.0036042993765805775, max_hamiltonian_energy_error = -0.207366394352416, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9734843127619944, log_density = 10.311747333786531, hamiltonian_energy = -8.25520763392788, hamiltonian_energy_error = -0.042378455393457415, max_hamiltonian_energy_error = -0.22124751103850038, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9287358894720182, log_density = 8.487507202463629, hamiltonian_energy = -6.831238558696454, hamiltonian_energy_error = 0.13518795477440104, max_hamiltonian_energy_error = 0.21762978150778167, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9907828426510216, log_density = 8.748526545966278, hamiltonian_energy = -6.076036405877121, hamiltonian_energy_error = -0.0742343783665822, max_hamiltonian_energy_error = -0.2556584382920013, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9780596485727866, log_density = 9.077564461124584, hamiltonian_energy = -6.743697839580581, hamiltonian_energy_error = -0.09058266835428785, max_hamiltonian_energy_error = -0.2984728458554029, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9849452653157644, log_density = 10.907625086450352, hamiltonian_energy = -8.103044243009712, hamiltonian_energy_error = -0.20618332013209972, max_hamiltonian_energy_error = -0.20618332013209972, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8726375549720454, log_density = 8.59561358680104, hamiltonian_energy = -6.460351852134284, hamiltonian_energy_error = 0.14077306272862788, max_hamiltonian_energy_error = 0.23573147078349344, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.999270855880621, log_density = 11.128543541434478, hamiltonian_energy = -7.019717895419921, hamiltonian_energy_error = -0.11810436963982518, max_hamiltonian_energy_error = -0.1520419372201367, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9920007365407838, log_density = 11.30472485443362, hamiltonian_energy = -9.885772060666735, hamiltonian_energy_error = 0.0006799546117584043, max_hamiltonian_energy_error = -0.06532740204070464, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9897495808339274, log_density = 10.089246429978857, hamiltonian_energy = -9.489853402246666, hamiltonian_energy_error = 0.018421781551358762, max_hamiltonian_energy_error = -0.040407573282998044, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9991196806920174, log_density = 11.158200113498019, hamiltonian_energy = -9.375758126472128, hamiltonian_energy_error = -0.025144867908554858, max_hamiltonian_energy_error = -0.07811570403841017, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9396690185882998, log_density = 9.150824321597643, hamiltonian_energy = -7.34209397274995, hamiltonian_energy_error = 0.06543762700893563, max_hamiltonian_energy_error = 0.14172426450232312, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9917189467507, log_density = 11.314314836141492, hamiltonian_energy = -7.563308656819757, hamiltonian_energy_error = -0.155841119389299, max_hamiltonian_energy_error = -0.2131716045424481, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9182304715630885, log_density = 10.102515608193926, hamiltonian_energy = -8.32846611002458, hamiltonian_energy_error = 0.02094035834828567, max_hamiltonian_energy_error = 0.28462450706103937, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9508705566690511, log_density = 11.52196003741701, hamiltonian_energy = -8.708611018296004, hamiltonian_energy_error = 0.01791059468201439, max_hamiltonian_energy_error = 0.13200449754744703, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9867187342671059, log_density = 11.058058841807721, hamiltonian_energy = -9.500101581057041, hamiltonian_energy_error = 0.044649674224096714, max_hamiltonian_energy_error = 0.0872786911979162, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9890718471230172, log_density = 11.078479483235137, hamiltonian_energy = -10.17396855517465, hamiltonian_energy_error = -0.06012679726877579, max_hamiltonian_energy_error = -0.14166938918176797, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.779620924579843, log_density = 7.938272279529384, hamiltonian_energy = -4.18938203521305, hamiltonian_energy_error = 0.21955848125125588, max_hamiltonian_energy_error = 0.5138339074043339, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9880081059865325, log_density = 8.189945459726596, hamiltonian_energy = -5.0145645455050065, hamiltonian_energy_error = -0.022324931323550068, max_hamiltonian_energy_error = -0.27796326775845337, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9766708239757527, log_density = 11.870979277840863, hamiltonian_energy = -6.259630182577517, hamiltonian_energy_error = -0.3331626190919774, max_hamiltonian_energy_error = -0.3331626190919774, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9377727576927809, log_density = 10.527865164046721, hamiltonian_energy = -9.767349928794085, hamiltonian_energy_error = 0.05056973816092558, max_hamiltonian_energy_error = 0.13474052422476568, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.3866575323304199, log_density = 4.30599032702461, hamiltonian_energy = -0.04093538077415726, hamiltonian_energy_error = 1.2796619371188216, max_hamiltonian_energy_error = 1.620379091274274, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9457935856011779, log_density = 7.071036475647439, hamiltonian_energy = -1.8114803879285013, hamiltonian_energy_error = -0.2835817515310741, max_hamiltonian_energy_error = -0.6923473638221957, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.145194441288462, hamiltonian_energy = -6.322783849570561, hamiltonian_energy_error = -0.023720210654301965, max_hamiltonian_energy_error = -0.2917656287637591, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9997995805092812, log_density = 10.521559842299462, hamiltonian_energy = -6.1745088116404805, hamiltonian_energy_error = -0.16632073398398894, max_hamiltonian_energy_error = -0.16632073398398894, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8652134931558361, log_density = 9.110081251654368, hamiltonian_energy = -7.03314154675161, hamiltonian_energy_error = 0.20169200358220252, max_hamiltonian_energy_error = 0.26352813398754726, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.8624855698404438, log_density = 8.500939425797478, hamiltonian_energy = -5.512001662539504, hamiltonian_energy_error = 0.21689789414096516, max_hamiltonian_energy_error = 0.46228830099394713, tree_depth = 5, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8900477427516295, log_density = 9.806906298459843, hamiltonian_energy = -5.475359732492961, hamiltonian_energy_error = -0.05466364026170911, max_hamiltonian_energy_error = -0.45137511674417574, tree_depth = 3, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9054940904432449, log_density = 10.17781590953787, hamiltonian_energy = -6.225979422695983, hamiltonian_energy_error = -0.20403311150174197, max_hamiltonian_energy_error = 0.32766524782612816, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9489875093070634, log_density = 10.121191390342906, hamiltonian_energy = -8.764942009695439, hamiltonian_energy_error = 0.14346233828582555, max_hamiltonian_energy_error = 0.14764187146822394, tree_depth = 4, numerical_error = false, step_size = 0.0991827036526169, nom_step_size = 0.0991827036526169, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/process_decomposition/script.jl\"","category":"page"},{"location":"examples/process_decomposition/#Process-Decomposition","page":"Process Decomposition","title":"Process Decomposition","text":"","category":"section"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"using AbstractGPs\nusing Plots\nusing Random\nusing Stheno","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Define our model. Define a distribution over f₁, f₂, and f₃, where f₃(x) = f₁(x) + f₂(x).","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f = @gppp let\n    f1 = GP(randn(), SEKernel())\n    f2 = GP(SEKernel())\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Randomly sample N₁ and N₃ locations at which to observe f₁ and f₃ respectively.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"rng, N1, N3 = MersenneTwister(123546), 10, 11;\nx1 = GPPPInput(:f1, sort(rand(rng, N1) * 10));\nx3 = GPPPInput(:f3, sort(rand(rng, N3) * 10));\nx = BlockData(x1, x3);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Generate some toy of f1 and f3, y1 and y3 respectively.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"fx = f(x);\ny = rand(rng, f(x));\ny1, y3 = split(x, y);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Compute the posterior processes.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f_post = posterior(fx, y);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Define some plotting stuff.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Np, S = 500, 25;\nxp_ = range(-2.5, stop=12.5, length=Np);\nxp = BlockData(GPPPInput(:f1, xp_), GPPPInput(:f2, xp_), GPPPInput(:f3, xp_));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Sample jointly from the posterior over each process.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f_samples = rand(rng, f_post(xp, 1e-9), S);\nf′1_xp, f′2_xp, f′3_xp = split(xp, f_samples);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Compute posterior marginals.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"ms = marginals(f_post(xp, 1e-9));\nf′1_m, f′2_m, f′3_m = split(xp, mean.(ms));\nf′1_s, f′2_s, f′3_s = split(xp, std.(ms));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot results","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"posterior_plot = plot(ylims=(-5.0, 5.0));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f1.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′1_m; ribbon=3f′1_s, color=:red, label=\"f1\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′1_xp; color=:red, label=\"\", alpha=0.2, linewidth=1);\nscatter!(posterior_plot, x1.x, y1;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f2.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′2_m; ribbon=3f′2_s, color=:green, label=\"f2\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′2_xp; color=:green, label=\"\", alpha=0.2, linewidth=1)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f3","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′3_m; ribbon=3f′3_s, color=:blue, label=\"f3\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′3_xp; color=:blue, label=\"\", alpha=0.2, linewidth=1);\nscatter!(posterior_plot, x3.x, y3;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/time_varying_blr/script.jl\"","category":"page"},{"location":"examples/time_varying_blr/#Time-Varying-Bayesian-Linear-Regression","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"","category":"section"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"(Image: )","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"using AbstractGPs\nusing ColorTypes\nusing FixedPointNumbers\nusing Plots\nusing Random\nusing Stheno\n\n\n\n###########################  Define and inspect our model  ###########################","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"g1 and g2 are time-varying basis functions. In a real application, these might be specified by data.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"w1 and w2 are the time-varying basis functions for these bases, specified by slowly varying GPs.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f is the prediction of the regressor.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"y is the addition of f and rough temporally-correlated \"noise\".","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f = @gppp let\n    g1 = x->x / 4\n    g2 = cos\n    w1 = stretch(GP(SEKernel()), 0.2)\n    w2 = stretch(GP(SEKernel()), 1)\n    f = g1 * w1 + g2 * w2\n    y = f + 0.3 * GP(Matern12Kernel())\nend;","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Sample from the prior from plotting and for conditioning.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"rng, N, Nplot, S = MersenneTwister(123456), 250, 500, 100;\nx = GPPPInput(:y, sort(rand(rng, N) * 10));\nŷ = rand(rng, f(x));","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Compute the posterior.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f′ = posterior(f(x), ŷ);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Sample from the posterior and write to file.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"xp_ = range(-2.5, stop=12.5, length=Nplot);\nxp_w1 = GPPPInput(:w1, xp_);\nxp_w2 = GPPPInput(:w2, xp_);\nxp_y = GPPPInput(:y, xp_);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Generate joint posterior samples.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"xp = BlockData(xp_w1, xp_w2, xp_y);\nf′_xp = rand(rng, f′(xp, 1e-9), S);\nw1′s, w2′s, y′s = split(xp, f′_xp);\n\n\n\n###########################  Plot results ###########################\n\ngr();\nposterior_plot = plot(\n    legend=:topleft,\n    legendfont=Plots.Font(\n        \"sans-serif\",\n        10,\n        :hcenter,\n        :vcenter,\n        0.0,\n        RGB{Normed{UInt8, 8}}(0.0,0.0,0.0)\n    ),\n    background_color_legend=RGBA(1, 1, 1, 0),\n    foreground_color_legend=RGBA(1, 1, 1, 0),\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over w1.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_w1); color=:green, label=\"w1\");\nplot!(posterior_plot, xp_, w1′s; color=:green, label=\"\", linewidth=1, alpha=0.2);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over w2.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_w2); color=:magenta, label=\"w2\");\nplot!(posterior_plot, xp_, w2′s; color=:magenta, label=\"\", linewidth=1, alpha=0.2);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot x1 and x2","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, (x->x / 4).(xp_);\n    linecolor=:black,\n    linewidth=1.0,\n    label=\"x / 4\",\n);\nplot!(posterior_plot, xp_, cos.(xp_);\n    linecolor=:black,\n    linewidth=1.0,\n    linestyle=:dash,\n    label=\"cos\",\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot samples against which we're regressing.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"scatter!(posterior_plot, x.x, ŷ;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over y.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_y); color=:blue, label=\"y\");\nplot!(posterior_plot, xp_, y′s; color=:blue, label=\"\", linewidth=1, alpha=0.2);\n\nposterior_plot","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"(Image: )","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"}]
}
