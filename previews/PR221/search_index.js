var documenterSearchIndex = {"docs":
[{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/gppp_and_pseudo_points/script.jl\"","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Pseudo-Points-in-Additive-Regression","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"using AbstractGPs, Plots, Random, Stheno\ngr();","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Define model.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"σ², ω, T = 1e0, 1.0, 25.0;\nf = @gppp let\n    f1 = periodic(GP(SEKernel()), ω)\n    f2 = GP(0.1 * SEKernel())\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Sample from marginal process to generate toy data.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"rng = MersenneTwister(123456);\nS = 25;\nx = GPPPInput(:f3, range(0.0, T; length=300));\nfx = f(x, σ²);\ny = rand(rng, fx);\n\nxp_ = range(-2.5, T + 2.5; length=500);","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plots for stuff.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"f₁′_plot, f₂′_plot, f₃′_plot = plot(), plot(), plot();\n\nposterior_plot = plot();\napprox_in_marginal_posterior_plot = plot();\napprox_in_latents_posterior_plot = plot();","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Exact-Inference","page":"Pseudo-Points in Additive Regression","title":"Exact Inference","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute the posterior processes, sample from them, and compute marginals.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"@show logpdf(fx, y)\nf′ = posterior(fx, y);\nxp_f1 = GPPPInput(:f1, xp_);\nxp_f2 = GPPPInput(:f2, xp_);\nxp_f3 = GPPPInput(:f3, xp_);\nxp = BlockData(xp_f1, xp_f2, xp_f3);\nf′xp = rand(f′(xp, 1e-9), S);\nf₁′xp, f₂′xp, f₃′xp = split(xp, f′xp);\n\nitems = [\n    (xp_f1, f₁′xp, :red, \"exact\", f₁′_plot),\n    (xp_f2, f₂′xp, :red, \"\", f₂′_plot),\n    (xp_f3, f₃′xp, :red, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"logpdf(fx, y) = -465.99349014012654\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot posterior marginals and samples.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, samples, colour, name, plt) in items\n    plot!(plt, xp_, f′(x); fillalpha=0.2, color=colour, label=name);\n    plot!(plt, xp_, samples; alpha=0.3, color=colour, label=\"\", linewidth=1);\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n)","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Approximate-inference-with-pseudo-data-in-f3","page":"Pseudo-Points in Additive Regression","title":"Approximate inference with pseudo-data in f3","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute approximate posterior process.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"M3 = 25;\nz = GPPPInput(:f3, collect(range(0, T; length=M3)));\nu = f(z, 1e-9);\nf′_approx = posterior(VFE(u), fx, y);\n\n@show elbo(VFE(u), fx, y);\n\nitems = [\n    (xp_f1, :green, \"Z in f3\", f₁′_plot),\n    (xp_f2, :green, \"\", f₂′_plot),\n    (xp_f3, :green, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"elbo(VFE(u), fx, y) = -478.26616160163064\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Posterior marginal variance.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, colour, name, plt) in items\n    plot!(plt, xp_, f′_approx(x); fillalpha=0.3, fillcolor=colour, label=name);\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations and pseudo-input locations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(approx_in_marginal_posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);\nscatter!(approx_in_marginal_posterior_plot, z.x, zeros(M3);\n    markercolor=:black,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z\",\n)","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Perform-approximate-inference-by-placing-pseudo-data-in-f1-and-f2","page":"Pseudo-Points in Additive Regression","title":"Perform approximate inference by placing pseudo-data in f1 and f2","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute approximate posterior process.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"M1, M2 = 15, 10;\nz1 = GPPPInput(:f1, collect(range(0.0, T; length=M1)));\nz2 = GPPPInput(:f2, collect(range(0.0, T; length=M2)));\nz12 = BlockData(z1, z2);\nu12 = f(z12, 1e-9);\nf′_approx_12 = posterior(VFE(u12), fx, y);\n\n@show elbo(VFE(u12), fx, y);\n\nitems = [\n    (xp_f1, :blue, \"Z in f1 and f2\", f₁′_plot),\n    (xp_f2, :blue, \"\", f₂′_plot),\n    (xp_f3, :blue, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"elbo(VFE(u12), fx, y) = -477.4916323879492\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot posterior marginals.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, colour, name, plt) in items\n    plot!(plt, xp_, f′_approx_12(x); fillalpha=0.3, fillcolor=colour, label=name)\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations and pseudo-input locations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(approx_in_latents_posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);\nscatter!(approx_in_latents_posterior_plot, z1.x, zeros(M1);\n    markercolor=:black,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z₁\",\n);\nscatter!(approx_in_latents_posterior_plot, z2.x, zeros(M2);\n    markercolor=:magenta,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z₂\",\n)","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/#The-end-result","page":"Pseudo-Points in Additive Regression","title":"The end result","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"plot(f₁′_plot, f₂′_plot, f₃′_plot; layout=(3, 1))","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples_note/#Notes-on-Examples","page":"Notes on Examples","title":"Notes on Examples","text":"","category":"section"},{"location":"examples_note/","page":"Notes on Examples","title":"Notes on Examples","text":"The examples demonstrate some of the things that can be achieved with Stheno.jl. They tend only to comprise inference given fixed hyper/kernel parameters, because any hyper/kernel parameters in these examples can be learned / inferred in the standard ways discussed in the Getting Started docs.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/sensor_fusion/script.jl\"","category":"page"},{"location":"examples/sensor_fusion/#Sensor-Fusion","page":"Sensor Fusion","title":"Sensor Fusion","text":"","category":"section"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"(Image: )","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"using AbstractGPs\nusing Plots\nusing Random\nusing Stheno","category":"page"},{"location":"examples/sensor_fusion/#Define-and-inspect-our-model","page":"Sensor Fusion","title":"Define and inspect our model","text":"","category":"section"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"rng = MersenneTwister(123456);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"In this example, f is an unknown real-valued function that we wish to infer. To achieve this, we have access to two sensors. The first returns noisy estimates of f, where we have been reliably informed by whoever designed the sensor that the mean of the noise is given by sin(x) - 5 + sqrt(abs(x)), and that it's variance is low (1e-2). How the designer estimated this function, and why a sensor might possibly have such a strange mean error, is beyond the scope of this example. The second returns biased measurements of f, where the bias is known to be 3.5. The model below specifies a model for this scenario.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"model = @gppp let\n\n    # Define a smooth latent process that we wish to infer.\n    f = GP(SEKernel())\n\n    # Define the two noise processes described.\n    noise1 = sqrt(1e-2) * GP(WhiteKernel()) + (x->sin.(x) .- 5.0 .+ sqrt.(abs.(x)))\n    noise2 = sqrt(1e-1) * GP(3.5, WhiteKernel())\n\n    # Define the processes that we get to observe.\n    y1 = f + noise1\n    y2 = f + noise2\nend;","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Generate some toy observations of y₁ and y₂.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"x1 = GPPPInput(:y1, sort(rand(rng, 3) * 10));\nx2 = GPPPInput(:y2, sort(rand(rng, 10) * 10));\nx = BlockData(x1, x2);\nŷ = rand(rng, model(x));\nŷ1, ŷ2 = split(x, ŷ);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Compute the posterior processes.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"model′ = posterior(model(x), ŷ);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Sample jointly from the posterior processes and compute posterior marginals.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"xp_ = range(-2.5, stop=12.5, length=500);\nxp_f = GPPPInput(:f, xp_);\nxp_y1 = GPPPInput(:y1, xp_);\nxp_y2 = GPPPInput(:y2, xp_);\nxp = BlockData(xp_f, xp_y1, xp_y2);\nmodel′_xp = rand(rng, model′(xp, 1e-9));\nf′xp, y1′xp, y2′xp = split(xp, model′_xp);","category":"page"},{"location":"examples/sensor_fusion/#Plot-results","page":"Sensor Fusion","title":"Plot results","text":"","category":"section"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"gr();\n\nposterior_plot = plot();","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over y1.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_y1); color=:red, label=\"y1\");\nplot!(posterior_plot, xp_, y1′xp; color=:red, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over y2.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_y2); color=:green, label=\"y2\");\nplot!(posterior_plot, xp_, y2′xp; color=:green, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over f.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_f); color=:blue, label=\"Latent Function\");\nplot!(posterior_plot, xp_, f′xp; color=:blue, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot samples on which we conditioned.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"scatter!(posterior_plot, x1.x, ŷ1;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Sensor 1\",\n);\nscatter!(posterior_plot, x2.x, ŷ2;\n    markercolor=:green,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Sensor 2\",\n);\n\nposterior_plot","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"(Image: )","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"This page was generated using Literate.jl.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other WrappedGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising WrappedGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#AbstractGP","page":"Internals","title":"AbstractGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP and CompositeGP implement the AbstractGPs.jl API. Please refer to the AbstractGPs.jl docs for more info on this.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#WrappedGP","page":"Internals","title":"WrappedGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a WrappedGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = wrap(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for WrappedGPs in terms of the AbstractGP that they wrap. So if you want a particular behaviour, just make sure that the AbstractGP that you wrap has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = wrap(GP(mf, kf), gpc)\ng = wrap(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = wrap(GP(mf, kf), GPC())\ng = wrap(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and GPs. We describe the implemented transformations below.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of WrappedGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = wrap(GP(SEKernel()), gpc)\nf2 = wrap(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"},{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx_local = randn(5)\n\nx = BlockData(GPPPInput(:f1, x_local), GPPPInput(:f2, x_local), GPPPInput(:f3, x_local))\n\ny = rand(f(x, 1e-12))\n\nf1, f2, f3 = split(x, y)\n\nisapprox(f1 + f2, f3; rtol=1e-4)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPINput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the GP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = wrap(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we make use of a variety of packages from the Julia ecosystem:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.02.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"10.167581557651388","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well.\n    s_noise = positive(0.1),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-0.9162907691270586, exp, 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-1.6094379869399091, exp, 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(1.6094379094538682, exp, 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-1.490116130486996e-8, exp, 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-2.3025852420056685, exp, 1.4901161193847656e-8))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     2.107872e+01     3.216813e+01\n * time: 0.025490999221801758\n     1     1.248030e+00     2.187825e+01\n * time: 1.5771641731262207\n     2    -3.453375e+00     2.022259e+01\n * time: 1.5921900272369385\n     3    -1.018907e+01     1.117416e+01\n * time: 1.6019861698150635\n     4    -1.148695e+01     8.830144e+00\n * time: 1.6115481853485107\n     5    -1.217684e+01     4.764247e+00\n * time: 1.6213440895080566\n     6    -1.260141e+01     2.601049e+00\n * time: 1.6549570560455322\n     7    -1.277287e+01     3.997587e-01\n * time: 1.6647930145263672\n     8    -1.278600e+01     1.445930e-01\n * time: 1.6744351387023926\n     9    -1.278717e+01     2.112929e-02\n * time: 1.6842610836029053\n    10    -1.278720e+01     1.850885e-03\n * time: 1.693756103515625\n    11    -1.278720e+01     3.352180e-04\n * time: 1.7031731605529785\n    12    -1.278720e+01     9.548833e-06\n * time: 1.7126171588897705\n    13    -1.278720e+01     2.930042e-08\n * time: 1.722196102142334\n    14    -1.278720e+01     6.428582e-11\n * time: 1.7318670749664307\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -0.9969592857123146\n -1.5738480160737527\n  1.61309405411554\n  0.02927008937697061\n -2.2400855003231186","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.4),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-0.9969592857123146, -1.5738480160737527, 1.61309405411554, 0.02927008937697061, -2.2400855003231186], [-0.9969592857123146, -1.5738480160737527, 1.61309405411554, 0.02927008937697061, -2.2400855003231186], [-0.7752523474460425, -1.4127455892024279, 1.416150570491678, 0.2005602447396711, -2.854391523284738], [-0.8142973288177057, -1.36423346193873, 1.4243563553531664, 0.20783756832739264, -2.7831699510122934], [-0.8680891875560386, -1.3212205371896562, 1.2346276515685044, 0.15597807195342772, -3.6905094081642473], [-0.9915591029177329, -1.0997497421572149, 1.433074579254707, 0.48247277309298375, -3.626977822093748], [-0.9915591029177329, -1.0997497421572149, 1.433074579254707, 0.48247277309298375, -3.626977822093748], [-0.9318373017877216, -1.2742678794304299, 2.157762837336444, 0.2816674754595408, -3.331987858406588], [-0.9730749074754761, -1.3518921358050875, 2.1467722855361573, 0.16281673979567207, -3.3920944832573365], [-0.564292693301135, -1.4663151126463028, 1.4595158456118065, 0.6921272763635097, -3.1919271760756396], [-0.7573143174764335, -1.4546445842896691, 1.5609068055333286, 0.7591061380413475, -3.2282599206464453], [-1.131687086550209, -1.3263721637804993, 1.5247143325195467, 1.1701094232226552, -3.840658827203231], [-0.6849016993301429, -1.5092208917604983, 1.5665982008300152, 0.8975150596827519, -3.2085898874271797], [-0.8390537660454388, -0.9046799167587299, 1.739698270950635, 0.2685764213268497, -3.7640192027087256], [-0.8390537660454388, -0.9046799167587299, 1.739698270950635, 0.2685764213268497, -3.7640192027087256], [-0.3120391404923153, -0.6301743383022762, 1.5151114954784197, 0.23420423032665022, -3.132944809143736], [-1.413972473597585, -1.4879647766537523, 1.1475432283897313, 0.30474082385104223, -3.718414507981522], [-0.665516749179556, -1.6973302308335867, 1.0127965863427726, -0.14415088393512684, -3.3805367023601427], [-0.6257217897888094, -1.4111987479411598, 2.0067002603008164, -0.10550636046493342, -3.5601636519747886], [-0.9279360979681311, -1.5654912957545113, 1.5278832796047055, 0.19683179696378728, -3.5327654105026682], [-1.0351542938927143, -1.3744344558863049, 1.9818916992849944, 0.37875500644332205, -3.7599021388296063], [-0.6298630286248801, -1.275175328874394, 2.1238484894846517, 0.02969011036856485, -3.428470194170317], [-1.0566926050912828, -1.203254520975581, 2.082075225726516, 0.3865659818928078, -3.294924241877802], [-0.9625606415925433, -1.2804063198249722, 2.2702077367311815, 0.23912977263929797, -3.473111972802508], [-1.0257394254257988, -1.517318855007038, 2.155956980733595, -0.6026511462612486, -3.7445213095714927], [-1.095603036239738, -1.208743064473014, 2.2808209738368355, 0.16196634637053264, -3.3546039417096147], [-1.0654154111603864, -1.4639825059353508, 2.2060594425658335, 0.26582864405486184, -3.531802978790227], [-0.9453891012532821, -1.3941596733702337, 1.8953085184075233, -0.3182979512510239, -3.6800198116173473], [-0.652006868488153, -1.075954733291183, 1.4552955222246264, -0.3964946543872627, -3.166055991718562], [-1.0437326723322309, -1.220794634619801, 1.5946014505134172, -0.26317145572450257, -3.599617324043353], [-1.1991114860517367, -1.3323448767758852, 1.6089072336739236, -0.2716127714380723, -3.746598240870382], [-0.9581531807957381, -1.4598626951051465, 2.445863046572156, 0.3171884287887037, -3.2719939673210465], [-1.1557231130555687, -1.3182384477800695, 1.8288766722172565, 0.12377632484086852, -3.6467055347674204], [-0.9645793864759804, -1.1227891169077726, 2.2392558745813327, 0.04017189436719207, -3.656078221902153], [-0.7891254021698055, -1.2003615622705794, 1.7834052513823788, -0.19657052882439158, -3.890064714135462], [-0.6449117110106196, -1.2951251348124633, 1.535832712762269, -0.400658056706734, -3.813028781480289], [-0.6963896502141705, -1.740608453301437, 1.624645348633641, 0.10709031317066259, -3.590018026652853], [-1.0764054761160404, -1.0647647000577711, 0.8547029809207215, -0.5655876868738554, -3.6638764674137154], [-0.6279877786130137, -1.3682221805318067, 1.4381578459689983, 0.05381932486637575, -3.559763056806357], [-0.736773800372804, -1.588123049883705, 1.4384226869750887, 0.0848564669647423, -3.373417355011364], [-0.7097126064169886, -1.66414514843103, 1.3418888033914385, 0.1761428713111512, -3.3516168020467303], [-0.7917097868251585, -1.3731909163346083, 2.0164147832282673, -0.38054064058657394, -3.6918866825144256], [-1.0999212629336115, -1.3692772927982564, 1.5279225609669576, 0.2754173182277072, -3.4570405552288914], [-0.8829005202355756, -1.504913581488717, 1.8392404711680064, -0.07682433585976961, -3.4245735174150287], [-1.1760850806600667, -1.3402839899349266, 1.9600357595703457, -0.15703541184987513, -3.211979236880854], [-0.9802168994494588, -1.777083562368455, 2.1091846466628446, -0.4068223823239613, -3.6532569357827547], [-0.9789930362617889, -0.9922068986619274, 2.038785731361313, -0.17168648724033403, -3.4210543923535366], [-0.8824193245641968, -1.3746111253870616, 2.221105815662736, 0.030165535442603503, -3.8161696171168837], [-0.7968040073663816, -1.5834740560196388, 1.9035437137600244, 0.009163413984076687, -3.5705319370401964], [-1.3572140719077144, -1.4341337524900455, 1.440009238230113, -0.5812176540109224, -3.569752306261081], [-0.6158927254827498, -1.1032078251711281, 1.5924295531537516, 0.046999591727231366, -3.4798617191536363], [-0.608452576045708, -1.241749705118832, 1.5332443301492524, -0.059620400999926895, -3.3327584263902903], [-1.2041331578240304, -1.5849170238997679, 2.4917847134182116, 0.5259871233307539, -3.5864750931159217], [-0.7408896021283883, -1.1539540668919672, 1.9761386265769425, -0.24517639901677526, -3.475097080003384], [-0.7543783868286031, -1.1632454471570415, 2.212249346592021, 0.5784241427022343, -3.3408174248201274], [-0.6884630546673044, -1.1514385839618393, 2.1821015831152915, 0.5908321347635346, -3.3156698286786517], [-0.9027475546493781, -1.356646348496843, 2.115725168847607, 0.4968947099332347, -3.771635670821999], [-1.037876298059564, -1.6970688503535105, 2.0745575348132776, -0.028315811813343972, -3.573253198524633], [-1.269768387567358, -1.4205667290910524, 2.315516722162422, 0.3436848307845683, -3.6689334173341113], [-0.8337886427761232, -1.256833772535182, 1.840226788570903, 1.0668463003117192, -3.6935235701866076], [-1.234140928094854, -1.578741484853943, 1.8485090177926746, 1.0822984375414544, -3.4723284192007102], [-1.1109487244480054, -1.4617613487248409, 1.5538526124217702, 0.9763216310898658, -3.7939491225330664], [-0.5328953748627708, -1.150983919209001, 1.5374307819050492, -0.20227816797961368, -3.1780784301339002], [-0.6501346388419663, -0.9285693373495705, 1.6548549935140273, -0.29242678188440485, -3.1314395177145196], [-0.5011482112503157, -0.7142527946131614, 2.65358502647247, 0.421170038718672, -3.8710207866756323], [-1.2523812316719707, -1.9275268065476705, 1.5802613558194376, -0.27493337084395886, -3.56281193317374], [-0.8089004470993979, -1.121766593201412, 2.563839961801076, 0.7341363626596549, -3.2799250824684174], [-0.7596243879749913, -1.0701401301398357, 2.118577189772275, 0.3226256134021418, -3.731748378760764], [-0.567024797589404, -1.4876567086465564, 1.775737772530567, -0.2957772761780091, -2.9253262695355033], [-1.14092740954979, -2.073563227747808, 0.6692786571507651, 0.08653139599934143, -3.169874470381901], [-0.573345377268815, -0.9244873765414189, 2.0629709874321955, -0.2641344143312474, -3.3074981163836443], [-0.6074075354884289, -0.8234212562472764, 2.012570633601591, -0.6319113599512322, -3.6038416820931576], [-1.101594866072968, -1.77426345932895, 2.1206835597792693, 0.7701854647904672, -3.3899113679557735], [-0.68368327344474, -1.2821930425814307, 1.4074310936249312, 0.7259828388101368, -3.32952776243433], [-0.8973349656602834, -1.2395540593307273, 1.081888162396448, -0.04704524795896192, -3.7959257959538957], [-1.2178987514037534, -1.264466124773048, 0.8554011209873764, 0.06606163163279224, -3.5568612608027266], [-0.6625860388416357, -1.3591448114110123, 1.2741325615195596, -0.38143911827442345, -3.6003237753530812], [-1.069581643700044, -1.2828509181828944, 1.56632087439037, -0.37242354391036125, -3.7239597508327438], [-0.8908921830934368, -1.4258731070582773, 1.6411319721280584, -0.21834649044848367, -3.6062346318141025], [-1.005736896010665, -1.5499028860575512, 1.6749883480320058, 0.16483655699836625, -3.4717718225679186], [-0.9766081863566838, -1.2600199802995073, 2.8111158152389404, -0.010787862991251847, -3.5982195175457425], [-1.0612852596196447, -1.279863639583975, 1.6800519758492274, 0.18766827415868365, -3.6897017853294956], [-1.0612149062436063, -1.341629121288539, 2.0300736679149756, -0.33588209813821296, -3.5202737396509023], [-0.7218129989904544, -1.2559174917194054, 1.9130231541955656, -0.340066538007523, -3.673488525572091], [-0.9942144971997403, -1.749651107241493, 1.3193676908164058, 0.2915113137275771, -3.5957352856319846], [-0.916287474449349, -0.994091029667785, 0.7844088310153015, -0.27199231818724945, -3.460720121570644], [-1.2050625218836115, -1.620356518429594, 2.270117751830741, 0.29223266237192935, -3.797975484358122], [-1.0289467994856205, -1.3089989662352746, 2.4572145790786206, 0.864921427466574, -3.386631592653882], [-0.875957385366362, -1.4446737811266632, 2.4534536923797026, 0.6751364127524805, -3.5283331950020713], [-1.0290825487998452, -1.3361252825862906, 1.9439626159525, 0.1345249354623442, -3.7332298802385493], [-1.178644194373836, -1.1852865685615497, 2.1746664444743176, 0.3784718011166387, -3.7302516888718493], [-1.1138879748801938, -1.3108675423254086, 2.220781889968283, 0.3620719477309604, -3.661256425069603], [-0.9417532971910577, -1.5210987337439954, 2.4715847568344755, -0.2574079690494912, -3.5967358967827145], [-1.0724696631500723, -1.2701159483609874, 2.0927905164523084, -0.718353434515982, -3.6819889046721985], [-1.2312149418679397, -1.568490300616344, 2.320813193983575, -0.7822169558749464, -3.4097111975799317], [-0.8866937403074474, -0.8257004534672503, 1.943112046030446, 1.3442772341785068, -3.6324050855110666], [-0.8351522370162645, -1.3543541173749158, 1.6745301455893626, 0.01813994342253883, -3.1553987145287707], [-1.130306201638824, -1.544789429838697, 1.7471556735759164, -0.17997315642566278, -3.376667736752029], [-1.014809867089983, -1.7523436100507666, 1.660866173264032, -0.07607373005887651, -3.592218175106402], [-1.1281083994147254, -1.2441040785606365, 1.4443602549679164, -0.16266691603863656, -3.658197780041954], [-0.5996410018220836, -1.2257089548806126, 1.813949401277499, -0.18670287782752745, -3.382449555254981], [-0.9662353606476344, -1.244776391124605, 1.976802016607245, -0.06681069729477873, -3.5632399838522355], [-0.933160386093164, -1.5412197957998433, 2.4572529581514733, 0.6279504545841446, -3.609736143019539], [-0.7816766424121299, -1.2206453058138147, 1.647614245723234, -0.12623480972303278, -3.440436987390097], [-0.9495237287323092, -1.071424575859172, 1.5506885091346438, 0.19781551364771766, -3.4851497813829733], [-0.9913346660715555, -1.4469249531977826, 1.6013736614736453, 0.16245186074893514, -3.638800055707876], [-0.9566248046624724, -1.2595997290885352, 1.9094502613636288, -0.40047504923074423, -3.6809580684328167], [-1.1976622122540876, -1.5595628861115498, 2.345454258852586, 0.5365822224454366, -3.560008469995222], [-1.1033970264823723, -1.4678348163409498, 2.7610421925025848, 0.46038986015251177, -3.6834107149814646], [-0.8099792826076837, -0.8252392922256188, 1.4574005873062938, 0.5978770759019468, -3.664058137884439], [-0.4017284001767134, -0.47605736689381206, 1.2366608059747164, 0.46136952362445466, -3.1116262769688836], [-0.5572732906333191, -0.1535437970454889, 1.2483536919138105, 0.06296297335268847, -3.5843590655159514], [-0.38253362157091614, -0.7613480871459882, 0.9747762619331017, 0.34985788684081726, -3.463710835277665], [-0.44833702187255875, -0.5819037351531611, 1.0210879659548733, 0.5146439326845704, -3.2799527716108408], [-1.2305018189249923, -1.549713276226851, 2.117680144154495, 0.20256658850981837, -3.622197444401172], [-0.7549106027517469, -0.8833559553487157, 1.718437677727026, -0.46978973842244043, -3.4574866095412777], [-1.2467655270242555, -1.6971120678438345, 1.6358993662100332, 0.12110185240601007, -3.561537500166565], [-1.1587017958085912, -1.5444104379290682, 1.7627234938548448, 0.0179966086111231, -3.6149272617698482], [-0.9764141912826954, -1.8360091081166898, 1.6280141691841072, -0.11739802823159676, -3.7124528739178126], [-0.9441201567023819, -0.7576208848140842, 1.510283511073471, -0.24151303989607528, -3.500809637334701], [-1.3538476758320601, -1.520313845475042, 2.877102742471919, 0.4180796405185906, -3.50249940109227], [-0.7383369723507359, -1.3312073007947443, 1.7196240212705716, -0.14421622684928295, -3.5939296161749255], [-1.0119001662513831, -1.5846525447874946, 3.0847942219925346, 0.7014652040991354, -3.6430857581814826], [-0.6052813814942835, -1.2708126657684224, 3.2227289165994546, 0.8469114077558715, -3.5088310863770182], [-0.8029411479147983, -1.3068824149092289, 3.280955594748293, 0.8302574195617735, -3.582893383612944], [-0.9346398490312604, -1.5177614646638224, 2.5694030743470195, 1.048632070728221, -3.2101049715122563], [-0.8549992519020642, -1.414067511506566, 2.5335595274881655, 0.8273540891723972, -3.2495650836444634], [-0.978631598485999, -1.8394287300884697, 2.7767225537869997, 0.8220818544487157, -3.644249434156997], [-0.8212859883284992, -0.9209134292888569, 2.433702957901785, 0.6128053512391971, -3.3508366894211767], [-0.775663648282606, -1.2534425110569165, 1.3475373283760783, 0.02558504280054509, -3.6050119880402427], [-1.3901832924278539, -1.529147780946261, 2.2259680455047977, 0.23795922902883013, -3.485399508322178], [-0.965213334998344, -1.1507884990112707, 1.5079590655000803, -0.18399641399725625, -3.477324958384789], [-0.5601749479968495, -0.9886284979102737, 1.865568971015746, 0.14293730294633944, -3.592146990219846], [-0.8062839943865099, -1.161901815696632, 1.8842536151701699, 0.170533041082989, -3.432626372194413], [-0.7883095778090753, -1.2184648332320411, 1.7057119698263412, 0.31589686071656553, -3.7451966188720722], [-0.9219974375116762, -1.525091394682468, 1.3727352075765917, -0.15224834121013084, -3.281304144560169], [-1.0016983333501572, -1.8451760051871315, 2.2582469973056187, 0.764321249513445, -3.4430436982038937], [-0.8935030312540109, -0.9026779689377706, 1.5568443258149274, 0.7548559468845383, -3.686922083051558], [-0.7265129458385631, -1.2254769439242272, 1.7770403237046384, 0.5609086449978506, -3.425340996618275], [-0.35837773181740384, -1.3175819605656522, 2.0714436016945164, 0.2506563163683404, -3.4027463159684466], [-0.9889358358691068, -1.3193430815140406, 1.343579123423448, 0.1670230732121019, -3.246891976260596], [-0.8546236387277887, -1.2651218532171846, 2.363052641616081, 0.6642877572783457, -3.79158998625052], [-0.7198298693804182, -1.1523494652221038, 2.4524794631013935, 0.7480690692676825, -3.60156967142899], [-1.2309131779790186, -1.3661420847861492, 3.1065564518179953, 0.8990289139058469, -3.7922653218698876], [-0.677824484177423, -1.6702936413657763, 2.6937418223335547, 0.7778097224591617, -3.3283477684870513], [-0.7699697734142623, -0.8148001355460505, 2.1442240832027553, 0.0750354029721092, -3.654987604479413], [-1.07684763863477, -1.4403606399162978, 2.634671322530398, -0.0917847483180981, -3.4082542889984], [-0.9698261647879356, -1.161842913202495, 1.2843026582951995, -0.5914021578860117, -3.5203539710711933], [-1.0280596173332128, -1.5755152912594006, 0.7940282301684654, 0.36563390232372994, -3.560436861068776], [-0.7869704403764672, -1.0730051186456833, 0.9141880095365685, -0.3514384490332524, -3.679163919631279], [-0.7253454641635483, -1.1877898891720569, 1.4396423269946848, -0.2185339831884716, -3.3982261727841063], [-1.4331875287675762, -1.6462553263639133, 2.0279116909972057, 0.7758297725252838, -3.829041939783677], [-0.7692614024465039, -1.226673512170866, 1.3527292664341655, -0.27259233755326184, -3.36614642896849], [-1.0446164100034787, -1.7199902672806648, 1.9503762010312387, 0.15108306482902265, -3.5530988802522696], [-1.1726673679128914, -1.19566711057552, 1.485390531141569, -0.03587216766341349, -3.4741705359262673], [-0.6903732063191904, -1.3512195159026814, 1.8121208160034177, 0.5592256045701092, -3.6872032182381984], [-1.0252683106828016, -1.4110843032394973, 1.3158030581777733, -0.4714294555996059, -3.903352798457484], [-0.6492903762266449, -1.3470151008077003, 1.9886136703758164, -0.0761390187256197, -3.344731820459036], [-0.7507742899430063, -1.098455653861043, 1.684216148393229, 0.16302246704807588, -3.4965672630745264], [-0.7526013392771482, -0.7411435944066227, 1.9606905165208146, -0.5226407828445262, -3.4241168872788963], [-0.6107386661545207, -1.0625727905820197, 2.6177847467004227, -0.4664341360254775, -3.7177687185149293], [-0.7542263977152268, -0.8873577903875804, 2.5141946241098405, -0.6096596798327053, -3.684767579653866], [-0.7899580041220038, -1.3953642368339796, 2.3347603027774233, 0.43111165749746105, -3.2286388785452282], [-0.9673833260594844, -1.2127174706855497, 1.6568002070659573, 0.25202713771423363, -3.5733179206672556], [-0.6397546519713909, -1.33395720249568, 1.2027780017442227, -0.7270945592476671, -3.538258850729888], [-0.6713001961396265, -1.2981855928011843, 1.263947580982502, -0.6055784879874847, -3.447551942799855], [-0.9495615518497932, -1.4000935240500496, 2.701636623900985, 0.16442830430172012, -3.689502724686271], [-0.9278680160694767, -1.1867192670319187, 2.9522315495541944, 0.1362136816178583, -3.442967221421083], [-1.068623121165393, -1.6651187824264526, 1.4352008044668914, -0.0895507069530205, -3.3775515254325357], [-0.8132343032467384, -1.093518515293248, 1.8515140024248335, 0.0057291846141080405, -3.307590461728035], [-1.3878749110013429, -1.5571543813456916, 1.6792675230271854, -0.3630114688183154, -3.402105636060544], [-1.2990072599834384, -1.7282330623234485, 1.5955327724991513, 0.010525246616406941, -3.270240956761538], [-1.2123479244419573, -1.7646621767550517, 1.480110841094728, -0.07546288096886195, -3.5152003271298957], [-0.8535196921912006, -1.1529450815059523, 1.420352249668021, -0.35258898122178467, -3.5407737569069395], [-1.164923742441289, -1.382531603981081, 1.691878865246733, 0.05787892276834196, -3.52028560012291], [-1.1789853787222389, -1.5084967522915396, 1.6924904736103037, 0.02231762895123625, -3.6530477936511248], [-0.726234253787351, -1.3545645959663957, 2.0609402125123184, -0.43763867296500475, -3.6364397637083323], [-0.9940452414309304, -1.5426230391176727, 1.7295690870850422, -0.026524801696034134, -3.432975646046283], [-0.9268711582726841, -1.2956765684067941, 1.8172014515910808, -0.06407359047458605, -3.4246473677442406], [-0.7976166394712242, -1.4246468492517543, 1.7214104688326188, -0.06931917653453622, -3.421654014756612], [-1.092794222842521, -1.258402816363803, 0.8154674157026587, -0.3087334114347589, -3.649593243681537], [-1.054261266962049, -1.1342660771855797, 1.4967929173989165, 0.30496608124182734, -3.635534513663817], [-0.7726337714307885, -1.5672481663992899, 1.917436644226495, 0.278679249515912, -3.510762187830876], [-1.258756079612692, -1.2095303551685945, 1.9079786645024264, 0.30031562038173715, -3.5875410937697843], [-1.1115421061653534, -1.2523892249067758, 1.8077822585750227, 0.465968841792967, -3.456639922479006], [-0.6876738304287138, -1.5903505566217946, 1.5335719895799307, -0.004938717351498478, -3.3651339555612263], [-0.6908364843116839, -1.4874390719275667, 1.9846861692158444, 0.533026539999433, -3.3264891238013043], [-0.8643493564892949, -1.483653150585663, 1.7096482743387074, 0.6589440399900864, -3.29073428367553], [-0.8961528806961723, -1.07153112703148, 1.943927908053713, 0.01231049756178329, -3.8208548825860027], [-0.7800917167987848, -1.0674680723842285, 1.8530423483165452, 0.1719814784253983, -3.7853526271200737], [-0.7627338474329883, -0.890965698434449, 2.323613999346745, 0.3612186211099517, -3.6529375714898404], [-0.8538484564281389, -1.6640833364754428, 1.7383920561136343, -0.44027371232638013, -3.2625902246638567], [-0.9690130727461511, -1.8777261509107817, 1.659236067263319, -0.44734722754079137, -3.300344285228908], [-1.2029648217093325, -1.1037629720847644, 1.5455329229329744, 0.4032802372547147, -3.867850761886166], [-1.067354911456234, -1.3880877405638785, 1.6141955523262088, 0.3222737881746668, -3.6817670800470133], [-0.9365157581118602, -1.2937513175585422, 1.9882953507806609, -0.4731846618233469, -3.348623006577541], [-0.9122086377489723, -1.4126616563632006, 1.4269913123591629, -0.43166931626302485, -3.6357481053697462], [-0.8482930885174925, -1.2665894348240718, 1.6504594978426832, -0.11535351608119307, -3.311653367382853], [-0.9470255098886943, -1.4218649400992263, 1.6128594239046443, -0.16614756977074996, -3.4075340957133933], [-0.8495352822478635, -1.3927955837948027, 1.5641133375506606, -0.19153036952994584, -3.7638111513070918], [-1.0521834098218243, -1.207767582881527, 1.746427801778053, -0.5915830935808601, -3.4284351396793986], [-1.0917207920332483, -1.147824360427748, 1.672041856038492, -0.39074260127117044, -3.328796257024499], [-1.0895185490339938, -1.491914382239282, 1.5224895193479584, 0.16761653866023113, -3.008377219460298], [-0.8756679436078443, -1.5243071806928312, 1.9100345992714105, 0.36560897191795333, -3.3630067998229833], [-0.8982176103116, -1.7459371366818164, 2.015581007097755, 0.26253461283825125, -3.5295334142613286], [-0.9720979244878196, -1.1787370240016302, 2.627175371322142, 1.175384194379695, -3.6656797488600263], [-0.9908725887631691, -1.3477787188358792, 1.3500959427660755, -0.37346496621617753, -3.7589699790240294], [-0.8118587918049402, -1.3449484764558661, 1.3707050227441286, -0.3338418656567889, -3.630664375491951], [-0.9066993917288374, -1.182698366280039, 1.6905467518662645, -0.1428346314994794, -3.4605865854540863], [-1.0796386805766693, -1.3200098103767504, 2.035137805484048, 0.5065395082451811, -3.4289080606115734], [-1.0731197600054105, -1.3090605352647362, 1.7958019011571096, -0.2869044812351379, -3.4863830784087453], [-0.8095223745138086, -1.4922149409041703, 2.3021715759526487, 1.0128596860446022, -3.6783329019728463], [-0.6477696937608239, -1.4492568665458114, 2.025608972629873, 1.119936701410131, -3.449227275248716], [-0.6050266593176946, -1.3758094446284286, 2.292122499154354, 1.1985448467317947, -3.3349306004185872], [-0.5417875574400353, -1.8441215285436328, 2.611699010434214, 1.1875722080581617, -3.159158154739029], [-1.4299390710532538, -1.3523929465036455, 2.0015801900373806, 0.5404161895398151, -3.7356183079607015], [-0.4022255113044767, -1.0770684769707797, 2.2201372874736123, -0.27162197410911715, -3.0216355755890514], [-0.38870498420409316, -1.3685167768258015, 2.2349059322022504, -0.27019441289502194, -3.4106448214830802], [-1.0452824876788862, -1.3100892198749683, 1.8113487827022405, 1.0046541781127472, -3.2294730449990534], [-1.0314804558333643, -1.5290306658412238, 2.023639747729177, 0.9862490718571117, -3.9376565425018852], [-1.2396655587608376, -1.3564885921356764, 1.5126493064839313, -0.7704642363328943, -3.3592571343325015], [-1.0795588111838557, -1.7065321662614423, 1.6809681984281755, -0.33773226974236537, -3.738267181316812], [-0.8430587099994801, -1.1648064900694874, 2.703554752770863, 0.27670204172457863, -3.507231352264737], [-0.934999594524855, -1.197078060023689, 1.4220018246020945, 0.6340289582532074, -3.3495057634837173], [-0.7081144917336922, -1.177129354809857, 1.372230063227786, 0.8645269843469113, -3.6868847834958363], [-0.38135461020701106, -0.8231014318237968, 0.9536307766215973, 0.022778679222879794, -3.549228883024265], [-0.9029089616430384, -1.7326867091670444, 0.7480330382139067, -0.03278343021510485, -3.533019174506837], [-1.4515703591173297, -1.470543374170082, 0.6848048509332856, 0.421032589218305, -3.4612550859722626], [-1.0163444754824558, -1.0900617412538252, 1.298410706469244, -0.026774121757282388, -3.2425987928958806], [-0.4836955372594013, -1.1558237035148826, 1.0941487742252027, 0.2084272903857006, -3.6574601377056792], [-0.7792020873348627, -1.0302757308305797, 1.3883044866570942, -0.050714936943080616, -3.3515723453039743], [-0.9288581038838591, -1.504501626146152, 1.3378641789142809, -0.1127468643396999, -3.864542135562151], [-1.3503939309474324, -1.4723203678212304, 2.151209081729755, 0.20882532375687796, -3.555428692323181], [-1.0581331774370952, -1.5304919384202542, 1.7257295535369335, 0.04726906701403326, -3.449729134373508], [-1.1185208367090265, -0.9987454068703158, 1.830292496453883, 0.2894371245802229, -3.3329179181433983], [-1.1231245098568547, -0.8932623915330796, 1.8415019014968936, 0.2225898722636786, -3.1841775764154385], [-0.9057375812422417, -1.273012717704757, 1.6349317964018588, 0.43984388407500535, -3.43571523663518], [-0.8260781222978386, -0.8279265571811464, 1.3666162421987433, 0.48509552205556705, -3.8812027170287715], [-0.7979295434428111, -1.2524733965619654, 1.2958535003395857, 0.3030597015600834, -3.3562947057835255], [-0.5159112293889458, -1.2818088778326382, 1.3029873975751964, 0.419677905684967, -3.375627907231099], [-0.9882689561038878, -1.0782501159006694, 1.9972615252404704, 0.33294262147882314, -3.432514983845469], [-0.5549329633062692, -1.6072973707164278, 2.0873856207492976, -0.12750267509548427, -3.3751869391886085], [-0.7686941010555611, -1.4008574859398435, 1.9774937943041846, -0.29033743673616014, -3.2947224055110786], [-1.002792055021145, -1.1505826473106093, 2.706589763385461, 0.24257004909795435, -3.806346547918657], [-0.7606965547285706, -0.9938878083829669, 2.489154582390239, 0.6138286093251125, -3.493350136576996], [-0.7429180399625896, -0.9409627473415343, 2.0023879908536633, 0.3952641346604044, -3.3954675512994164], [-0.6672777103025336, -0.8598752144609729, 1.431523950414545, 0.0044759902671353685, -3.555087594131061], [-0.7837338973501677, -1.3000419830968413, 2.3423920447949214, 0.5800042019071415, -3.4821254185942405], [-0.9817916300581935, -0.9966765550602162, 2.1837304281065872, 0.5453777793100512, -3.641091529295221], [-1.0624035168919137, -1.7170296168386607, 1.7868607866355881, 0.5022519372773129, -3.532225125212015], [-1.0055494857623175, -1.281676224824973, 2.224112232341647, -0.0070910291852647744, -3.70254080322284], [-1.1980536289028363, -1.3443476288813876, 1.9265426456802601, 0.17702735084860813, -3.6766743793695027], [-0.9523196894977606, -1.44137767790328, 1.4768499684778686, -0.0806032339718511, -3.4994884145712537], [-1.0430903184874256, -1.3805235645244234, 1.394858800437255, 0.04966908649425212, -3.7044819339294563], [-1.092564567993901, -1.2146835786332195, 1.1997006525775662, 0.16004105293083945, -3.226898135655908], [-1.103099269144677, -1.303410394534219, 2.2808832048863596, -0.22277480985464526, -3.2260668583467695], [-1.039687592472243, -1.5500371848236245, 2.3870880531596854, 0.3377165870880096, -3.7978356544763345], [-0.803527114445121, -1.3660563419050344, 1.9921857944313617, -0.40980561033679913, -3.551742787278653], [-1.1741915697770613, -1.581168855173299, 1.6482480196002662, -0.3039691363011622, -3.737547245105056], [-0.7479825947155719, -1.2715289074304605, 2.230343739652298, 0.07668457083070379, -3.33823324766184], [-1.2341794426716395, -1.3725415467022357, 1.7549662885417026, 0.8607284660456366, -3.63957034966598], [-0.6632784606962849, -1.3744306446435508, 1.9488837745902476, 0.7886541959379947, -3.532470963436065], [-0.8901863211508463, -1.7502245368980553, 1.9109302302243216, -0.7391561132155837, -3.449864276936371], [-1.0381132131319932, -1.4545717542701002, 1.8310424514506922, -0.2625055541557904, -3.536559245083893], [-0.9541754935016022, -1.427444908776645, 1.993650427363768, -0.32830453914105856, -3.71943947165558], [-0.8518218351236363, -1.3411154364164741, 1.5131573811621282, 0.6959115614610429, -3.770806091303262], [-1.1407585990879783, -0.971534820029048, 1.6335454991336746, 1.057450958686274, -3.56004966529015], [-1.0301918829417034, -1.0615955816623956, 1.4731394136310483, 1.0804676806415168, -3.692639596124831], [-0.7528424325453431, -1.548669250337023, 1.2299735722861675, 1.1143421014250274, -3.459954712590737], [-0.600808494967653, -0.8437315029098349, 2.5184235154723167, -0.2718895083128299, -3.380124312784779], [-1.2300987155530514, -1.6702399749513723, 2.1869634376896174, -0.19261833001926007, -3.6370076892334002], [-0.7183449866231236, -1.0437343305607043, 1.4737595602414169, -0.03910197117623307, -3.6548641802090414], [-1.101903177089387, -1.569316271040515, 2.0762631379224534, 0.16596469271021835, -3.46184671954806], [-0.8054321646761345, -1.146700643726423, 2.0764730857777116, -0.018663870443238945, -3.611303045649625], [-0.8866504806547455, -1.351183189966647, 0.893947395416503, -0.15717594342243313, -3.590713409561754], [-0.702418485465105, -1.1484436429354183, 2.513250615848095, -0.09230759824824439, -3.6202067771454214], [-0.6665262570072406, -1.1421718401425065, 2.6556981177932575, 0.27540651363954105, -3.5388031053798525], [-0.9147247575351365, -1.259883788226316, 2.218550397065902, 0.1757041501915152, -3.583511867209485], [-1.0205893732859723, -1.301603719021959, 2.1269786398476875, 0.19328329493643864, -3.4071185516487064], [-1.0494045365996205, -1.3343078305914218, 1.6187000781014191, -0.40089748626457594, -3.5385316671892446], [-0.8854416753994161, -1.2031685375455787, 2.540185137744638, -0.007890035793193056, -3.7044072917556155], [-0.7888726433568413, -1.3726786681842373, 2.5385994687611086, 0.4326441981976953, -3.363676491104068], [-0.6285659087291278, -0.9880561956886085, 1.628252259045902, 0.26603296976581287, -3.3121979696085724], [-1.4717236051148324, -1.6070484756158199, 1.8600631913287469, -0.5699610816402226, -3.5732053790784], [-0.9234932288522902, -1.4679226154589202, 1.719451650420834, -0.5915774455572139, -3.653075260234415], [-0.584881972253652, -1.1070003074374835, 1.7965352192150685, 0.5486199941488593, -3.4623113381936528], [-0.8751761985601969, -1.3613604831988642, 1.8110767808118766, -0.05716229459380312, -3.4396167806707996], [-1.1316845055719433, -1.6171719660868111, 2.3209420484088703, -0.4442154954899644, -3.4391232585987135], [-0.5935308653276395, -1.041759697428647, 1.85672985989852, 0.276526838528357, -3.719507727555151], [-1.0729887423148061, -1.7420872371245621, 1.8671107710783592, -0.587479573549713, -3.7533196441822896], [-1.2892588459096166, -1.456122938356829, 1.9360798479794765, -0.6224629147005885, -3.443412875278154], [-0.5988703639502883, -1.4775492229185248, 1.3291456064010136, -0.0645274944717312, -3.5273136142829484], [-0.7460194585042946, -1.026283518173916, 1.6846827092654109, -0.13692230571583225, -2.940976916511155], [-0.26116693742517844, -0.6272931143388834, 1.8243139573844402, 0.00141524675935302, -3.328835202465979], [-1.0769382558840457, -1.7063311327030304, 2.051096763385089, -0.3528959668717093, -3.662180997642705], [-1.1581345201662, -1.5407527936263263, 1.4065507837061957, -0.11687276989359419, -3.7745160558563353], [-1.2840411251991022, -1.642438826480368, 1.641064735261373, 0.08858164991166556, -3.712410068805028], [-0.9185289249614772, -1.1670133725769154, 2.3352966477204316, 0.11947028612377844, -3.4585342811718225], [-1.33591179728754, -1.485747296493306, 1.2361502654859906, -0.10074485888174323, -3.4414594146877575], [-0.5415704144176141, -1.262722808972077, 1.7131702708425292, 0.23301631302047104, -3.7375514595011143], [-0.8641993690245213, -0.8813170403954883, 2.3365336497435885, 1.0996911230489819, -3.20648977126229], [-1.1700028848159145, -1.53025482581294, 1.6174775716918492, 0.18216055120952324, -3.374827113467564], [-1.4651770285169314, -1.7819467884147189, 1.719240605862077, 0.5243878571205736, -3.454778742362387], [-0.6064100077225972, -0.6622086772481024, 1.8416676703171555, -0.48538665720320395, -3.4126050287380347], [-1.225707754121386, -1.6965368614523992, 0.8372591754146994, 0.37122611891123836, -3.3810832189486124], [-0.8049571882196502, -1.2678731551424849, 1.0291273617566115, 0.06848300319222436, -3.38015818397167], [-1.165628582694223, -1.46142893913794, 2.430097518017164, -0.22507239525960052, -3.626854123032519], [-0.5939182493900097, -1.1146574251415087, 1.1946398302322032, 0.6406068491765002, -3.399472928433052], [-0.9121164194935889, -1.0183693739785937, 0.9330046227644537, -0.2858959808542695, -3.587324191224796], [-0.9548647554727161, -1.5479640090556834, 2.1193126651577927, -0.18455152661999275, -3.468226724171258], [-0.9386868692025221, -1.1156840527755925, 2.1365857315965155, -0.5390620472261765, -3.625873684845915], [-1.147026051292236, -1.5344561504998782, 1.9109717899631922, 0.6206718519668432, -3.5232415410891122], [-0.7244710913207123, -1.342975667443521, 2.457286002228825, 1.1662352975779318, -3.6483430589606214], [-0.8127177406536042, -1.4057028996286398, 2.361662184038888, 1.2218869459130492, -3.5238145459752848], [-1.1011622402774375, -1.1627617042188483, 2.3562221931067673, -0.045040521372971376, -3.4128473911896386], [-0.7398019866863874, -0.9093789241117721, 2.1669391619811615, 0.05061398024709956, -3.598794408325871], [-0.5925153673820731, -0.9498731730387177, 2.155644593940779, 0.14086077064316752, -3.747914187769458], [-1.2977860394732086, -1.8776511704451824, 2.0127986045905586, 0.3296541591082518, -3.310291709203121], [-1.3922282547094706, -1.9384835880288263, 1.848086291526378, 0.2511365007629577, -3.343837106889284], [-0.5597713682306625, -1.296111466907559, 2.2009835860065565, 0.14328613028983028, -3.4759217468101795], [-0.81617650772559, -0.8323956755147067, 2.2451481016292267, 0.24667944776468245, -3.4467054467712677], [-0.9746499452020735, -1.7957230116861953, 2.917623063651655, 1.0252293088954998, -3.5159453560256524], [-1.0150306697278222, -1.177546499422345, 3.157263099444717, 0.05216465774871193, -3.4829699999292307], [-1.1576888943832144, -1.40754252494979, 1.475002009143541, 0.840239195305808, -3.6666838535195616], [-0.5153224198495442, -1.2968543265368837, 1.6846419073704273, -0.22377090882690737, -3.4991231930717426], [-0.8718970380346178, -0.9929179874783496, 1.6704259008263462, 0.1380907440674273, -3.4534659631012765], [-0.8079973768557371, -1.239142535525341, 1.2182191677644907, 0.30521247885189007, -3.516192105022365], [-1.0452935015767395, -1.3220479789352062, 2.5106927350411232, 0.21400765616272854, -3.7515926254060963], [-0.7977261456212743, -1.382839863185573, 2.5969524666968202, 0.2599671701506589, -3.59400910257671], [-1.1343429827228124, -1.5396455203847121, 2.0713755124196855, 0.5426171600893138, -3.485107385512001], [-1.0469918901195892, -1.57025901231343, 2.7161354835303007, 0.04931529921148825, -3.5191079315384064], [-0.8922806858779748, -1.0638106122716375, 2.778600205292708, 0.27313158509076707, -3.4777026490876857], [-1.2397457184017482, -1.4545219422520443, 2.1420475691839855, 1.0796416522287278, -3.526715742602289], [-0.6227072538820624, -1.1852627614924156, 2.3632556416354245, 1.4695400963033955, -3.64965493704172], [-1.217572420831377, -1.573656873471918, 1.8848892569842868, -0.49661720126943043, -3.563318687154684], [-0.723066842575459, -1.4112635961419404, 1.715278715976604, 0.13304885431436278, -3.433737511985622], [-0.9198577173503104, -1.2421948428920913, 2.034909792751438, -0.2629629647538757, -3.5670280862518755], [-1.4598738273122944, -1.7142326027793233, 2.4085014038252544, 0.11601469305149528, -3.680875939601031], [-0.6176385852328616, -1.3934098064190614, 2.330095008936716, -0.16917045482050477, -3.4117770909708414], [-1.3215922381507577, -1.4895969246147316, 1.6190390768246077, -0.12174885081208357, -3.698202685401354], [-0.8915681042398804, -1.5197361680707178, 2.140406119344436, -0.2933361913966841, -3.5072906336531675], [-0.8513690427563827, -1.6348410653438656, 2.2063490445703153, -0.25767025474523136, -3.6889311763059642], [-0.7216773656093641, -1.20866930309371, 1.6642655082528992, 0.3959490083946767, -3.6271645996217425], [-1.0467174043122198, -1.3744003514804504, 2.0352864292145876, -0.3689615319068831, -3.655952159433175], [-1.120183832876201, -1.260902309024653, 1.3242287230667047, 0.32481745920283106, -3.5571045042539033], [-0.5715796788856417, -1.217355154400017, 1.818516933857473, -0.8471041934105316, -3.4790536318257725], [-1.088838967634041, -1.279371956940709, 2.609581532193441, 0.47623023269675907, -3.749452965757691], [-0.979388881644272, -1.5834211336930326, 2.0256563943110755, 0.5300064264386113, -3.5066627758350872], [-1.3733109544442423, -1.5165561127087235, 1.7106819655716416, 0.24454105031707168, -3.6358347320392186], [-0.8329747576626418, -1.3214014765305737, 1.289331620477206, 0.21158943053728113, -3.749638889746486], [-1.1689294284655614, -1.3589288091993452, 1.5931609148634187, 0.06557414919433847, -3.2250147071566877], [-0.9115516625180186, -1.3319668180716302, 1.773343624166484, 0.434853028303064, -3.703137367319586], [-0.7368898730989675, -1.2657336042079885, 1.5718460656330089, 0.33585524970499603, -3.2539868015905595], [-0.906528525824237, -1.2372526219398179, 1.1997665082596087, 0.19610110746417642, -3.5356117033802796], [-1.033111568885667, -1.1040485480612137, 1.5144696033072864, -0.10748838698172641, -3.8714600254817495], [-1.0693354273076046, -1.321318806503865, 1.4790219310154173, -0.13807956989791081, -3.709180976869306], [-0.6130389106723301, -1.0588809941883794, 1.5842731878174046, 0.015186093593620761, -3.50338231935759], [-0.94835231692847, -1.4692042685807003, 1.4639964637583325, -0.39571186598190017, -3.5317605450059015], [-0.8865592758416636, -1.1757752971588937, 1.3758367383695238, -0.3177905494342085, -3.645863752620808], [-1.0560533301669848, -1.2827402894777529, 2.030223681542414, 0.12039655189705621, -3.661918144981416], [-1.228410479660706, -1.624152098824651, 1.2907037359044027, -0.2301313297291191, -3.5287764064957394], [-0.6448853120170251, -1.0715428196609396, 1.8394867912414432, 0.1971371524714367, -3.3717030174794917], [-1.3860332467541632, -1.602372207768376, 2.0054536332301773, -0.28980408464170415, -3.742607877265467], [-0.6461840234052133, -1.0549917971013167, 1.6285190508924896, -0.07827204010104492, -3.2872363918745147], [-0.907485628577976, -1.2826736257515472, 1.6142994633236896, -0.05367918535832185, -3.298903034088161], [-0.7032035513633952, -1.308079038863997, 2.1488601613352643, 0.47118427925731715, -3.557755440719328], [-1.267412255862769, -1.5426066965044212, 1.81428885575609, -0.6108540829904795, -3.6033225555031136], [-0.7854852168946838, -1.0882993253579032, 1.7043015310234526, 0.5034406035589111, -3.4059279006249246], [-1.184550385802815, -1.5064560527688473, 1.5976086259158335, -0.15299239237836132, -3.3563499619906505], [-0.8616061793909896, -1.3267887200929873, 1.6981459267592167, 0.04991588556744111, -3.2237495553420445], [-0.7438195685880432, -1.2710399370551966, 1.6135102243172375, 0.005427953167859746, -3.4379058494254844], [-0.8036991474602515, -1.5301329371002557, 1.894141448554402, -0.2912553706714336, -3.721128946472143], [-1.2080583921253045, -1.34097642005191, 2.596001266784252, 0.9518402550660993, -3.6890386513521363], [-1.1388326971268146, -1.7374598904360452, 2.5750183059072587, 0.9111534470866448, -3.5993672938756887], [-0.5388960617649332, -0.981831802693707, 3.199289484874721, 1.0172243144897521, -3.396176224455636], [-1.2901815238959944, -1.7389713602496937, 2.3256328069232475, 0.21381450073838384, -3.6117156445819187], [-0.9528880479641554, -1.3909686873561418, 2.215253713090279, 0.15507165245196605, -3.6192529563112816], [-1.1162752045421152, -1.1261258423550455, 2.198717597459662, 0.07873981728265944, -3.7934000096110836], [-1.119268317903919, -1.2032505253128543, 2.119932697138609, 0.020991697967160695, -3.8134536416651916], [-0.7664098256797536, -1.5164427869344173, 2.0770763827468035, 0.39531956339638097, -3.35572887350318], [-1.154250411999502, -1.3165879045209172, 1.9528070291325554, -0.5088301429019568, -3.7325670520744447], [-1.2862732770820535, -1.6694774901022877, 1.6171329354717294, -0.3353160021116924, -3.5669271265758344], [-1.4904618610215057, -1.5609866455138923, 1.6708310476219947, -0.5738103688309255, -3.528244380115452], [-0.6996085793352562, -1.3696167440228524, 2.6288567552717894, -0.16536566969666583, -3.681614951141748], [-1.0941041378212295, -1.344916832614481, 1.818977633869945, 0.768118139358767, -3.638168915454604], [-1.119713722649497, -1.1871215583445511, 1.7384660555965818, 0.8541048480507292, -3.625680792349807], [-0.818320495501016, -1.744313616389991, 2.4484700763812977, 0.6133203828010692, -3.350792359543679], [-0.9331982626285564, -1.3690025956833056, 2.1247489520407576, 0.7391115136461878, -3.6475267982755195], [-0.9185150856711709, -1.2761988718108859, 1.1533533819499993, 0.32422782271292727, -3.6147976803958795], [-0.760482907660348, -1.1716045444184922, 1.065614469005273, -0.07613241819197654, -3.3611037624468505], [-1.1241118774478192, -1.1932945606973784, 1.0774745822267697, -0.029209185531484876, -3.5431652308031283], [-1.0169700222807612, -1.2236580122654237, 1.7950833955408139, -0.34678862497179197, -3.4694162184705446], [-0.5954623984464095, -1.4061741346974754, 1.7234406812865277, 0.21103235664425155, -3.4806615358925184], [-1.0721261647389833, -1.590518583613753, 2.5667191188475385, -0.3782463011342282, -3.674819273605124], [-0.8684421471213379, -1.1395626221371637, 2.497171913778173, 0.4070395955415981, -3.457666910444376], [-0.6709362294292049, -1.2414692652662094, 2.3642219366950106, 0.7495790936202159, -3.6149198246645793], [-0.6359679003021487, -0.9836139378671868, 3.1550172494612467, 0.9209295039196691, -3.391329874731294], [-1.318894255733463, -1.8167584033016206, 2.6103569857504962, 0.8159565323198973, -3.55271614610566], [-0.5313942786186399, -1.0330319598678515, 2.340818428917842, 0.8347992589388497, -3.6638886429225415], [-0.709045419581362, -0.9381249042684643, 2.4481914662953748, 0.07415150548674693, -3.6569365903600675], [-0.7249565947852235, -1.31728943508256, 2.455626408545639, 0.05717267317068572, -3.314281708124783], [-1.2022869201011093, -1.5045506898102845, 1.4018349987264318, 0.2538929445192305, -3.6264944132848798], [-1.6851853268999324, -1.536326089051891, 1.3392634007983044, 0.4172535432390369, -3.6295744457647174], [-1.1595704394543982, -1.6349265755640279, 2.025333277218948, 0.44043377037944903, -3.839711107455703], [-1.0508763461455486, -1.327879708652832, 2.3638074915237395, -0.17251687539959024, -3.3772645207438585], [-1.2101422488798137, -1.7878913960091019, 2.460269640299128, -0.060733127473424256, -3.480732681421992], [-1.0860555382216757, -1.5808560675096264, 2.420731537827505, -0.08952343421789502, -3.5126508235105813], [-0.9460878562372955, -1.4283540794639715, 2.5520022313701665, -0.12047543036841359, -3.5497171976239943], [-0.7193469147612293, -1.3846852102993896, 2.665649101289917, -0.12959185274003227, -3.416836679452703], [-1.4025535138325227, -1.5359786457788194, 2.294626358179699, 0.14330739660494637, -3.823616453305616], [-0.7132042972095858, -1.304640073240402, 2.0931273654717795, 0.1021937421698168, -3.7198103720602615], [-0.9500860995020565, -1.4868479380489867, 2.893465191482294, 0.5273237381147459, -3.9022994080932913], [-0.8332190630476893, -1.4247214183295216, 1.798031722878797, -0.07995252848742154, -3.7521605994550353], [-0.876734297864538, -1.112735318632192, 2.0830506050942126, -0.08001193501617433, -3.598716556419588], [-1.3287981117790555, -1.6972901082476097, 2.036599885538015, 0.22341661260976842, -3.6223954628139268], [-0.6260143028181875, -0.6650359831387265, 2.5099114547651733, 0.6054220377558468, -3.368519203366778], [-1.11408564520913, -1.6556961056707125, 2.2232044905466286, 0.029037989145607096, -3.3744070707535663], [-0.7887438910781736, -1.4708626702371834, 1.2872254417821662, 0.2822308487740831, -3.425330777209128], [-1.1316446126230326, -1.160145061006676, 1.112421714823954, -0.5384442277601709, -3.675093192645164], [-0.6688765995778522, -1.0641269567084766, 3.030375374283224, 1.0378718136656855, -3.667122372807532], [-1.1397261038658597, -1.6379097527692097, 2.2934040127338693, 0.1418370795644144, -3.5171439026051923], [-0.6860908544657944, -1.400120586822237, 1.9663785697687182, -0.06412425938310652, -3.515697975753741], [-1.1997832582388581, -1.362628828922076, 1.6828105837570724, 0.14350635345847518, -3.5110555517522473], [-0.8538539099871871, -1.3859845058150377, 1.8575091450683656, 0.2269376460355404, -3.6514912901332006], [-0.9412105481858657, -1.3546187158208818, 1.9846831863323908, 0.18681264807770392, -3.5100584762440334], [-0.973755462941041, -1.5553015004948534, 2.409250556457327, 0.676956123662308, -3.6211500923178295], [-1.1974035106779948, -1.2980631789250663, 2.6162778580396817, -0.14495027963562238, -3.511294787684239], [-1.1498310981201048, -1.0568602805187435, 1.3773120448718705, 0.3313773077090016, -3.531916481619018], [-0.8375299057468153, -1.4748109751317375, 2.2400773368622713, 0.4564327574181559, -3.3093861679330856], [-1.0645885580373227, -0.9811960832795534, 2.1245408067038687, -0.1268494133677321, -3.309294476954142], [-0.899458650901496, -1.5244778705083888, 2.004605801445923, 0.0794661892642555, -3.914612530354724], [-1.3124207906394676, -1.3532031442495978, 1.9479921871586674, 0.1306969061487876, -3.8270999248293514], [-0.7527519430826416, -1.3027952088869794, 1.9380126392927715, -0.2764519471145598, -3.332863273137787], [-0.9037918429728796, -1.6373027533102082, 2.373564055705485, 0.8269389285465808, -3.53046583491344], [-0.9115942474570415, -1.1868331829178764, 2.43036241140894, 0.5745292702283646, -3.711727860020859], [-0.775022497552447, -1.4427938246033511, 2.312627938715327, 0.37690804954194224, -3.3772796542193353], [-0.7792578599798857, -1.4023301089269802, 2.5638718294847167, 0.3889087055956758, -3.4169206529281957], [-1.1403874697563077, -1.4315853543331338, 2.783635788835332, -0.0032764437502453246, -3.6117560961150845], [-0.7138402254786393, -1.1626821042863322, 1.8217641304667083, 0.8358167686647344, -3.389157173099806], [-0.9874909337987823, -1.7330214207062509, 1.6655031192560825, 0.18075407418087625, -3.5744781311082736], [-0.6633020838441835, -1.2353818818048241, 2.2995363192759655, -0.3181899980367976, -3.6946982671725666], [-0.7175942439635034, -0.9734514676138568, 2.1803142706467935, -0.3736122419008178, -3.692959471127264], [-0.8762104963093407, -1.2767000720697412, 1.9182340775350348, -0.2913999868679441, -3.4940796676846166], [-0.8461053033702532, -1.313658279009793, 2.10054511770731, 0.5879248601357745, -3.425055741594187], [-1.0098650723756246, -1.4250455148450452, 1.682626524993087, -0.1672941786936203, -3.6947764645248937], [-0.9254438538755672, -1.3064742488597298, 1.9056420192948365, 0.1624361387537448, -3.3536980001312484], [-0.6971252937849266, -0.9078025669116645, 2.026433706183689, 0.0695071420457786, -3.2232332568652318], [-0.7527930727439457, -1.4699250082570081, 2.7766601199785415, -0.1714548659842212, -3.764051502282337], [-1.0971248624557144, -1.463439690625984, 1.8015297706263695, 0.6061060694313009, -3.3642334496979283], [-0.921720386581603, -1.488893794694697, 1.764121314794095, 0.3073151607261742, -3.437334622355029], [-1.132867620049094, -1.6686669596892205, 1.7003307607476466, -0.09160925470300468, -3.691136052331186], [-0.9745590711876275, -1.1429993130050446, 2.38792951894568, 0.057016980976486734, -3.4797284806242654], [-0.9582936754113527, -1.131811175502804, 1.1368008786199164, -0.22594128287804693, -3.5786317965361527], [-0.8722541112620528, -1.4309648455577566, 1.8562695033157006, -0.18531060797253127, -3.530594614701285], [-1.0254444079595486, -1.456160148704716, 2.2458867857218565, 0.11520708294417992, -3.5879754653569775], [-0.8693590935234654, -1.2450630979107093, 1.3559233500705583, 0.051742703485728764, -3.4834473255644953], [-0.8763890639097046, -1.388215722521857, 1.4114405173208346, -0.03841631284318388, -3.4020027170270346], [-0.8073026474788102, -1.4309184373704893, 1.4458781309768454, -0.03386154597031886, -3.3876603750125227], [-1.1678658675097036, -1.2559494774307816, 1.6247459792620567, -0.1886341951760172, -3.717111108164614], [-0.9211330466676736, -1.3468223705838398, 2.271261466253755, -0.41597602273044326, -3.1699205748594936], [-0.8706565342531226, -1.4399533271686342, 2.2361519962280014, -0.3854968522287707, -3.3613711798821444], [-0.8623686139563834, -1.3507348337468126, 1.8671458975290425, -0.06278371136109279, -3.581181308604351], [-1.0083552599592516, -1.2112090441254806, 1.3001716245502302, -0.6975861060499265, -3.4622292713867804], [-1.184019919140603, -1.5436827130604955, 1.3582431514654743, 0.21801533112158933, -3.75457720003599], [-0.7473797549382528, -1.1497729217982553, 2.38819986389295, 0.4070001243943241, -3.4785861035776735], [-1.2717903180469166, -1.5183869163259682, 0.4714652334422092, -0.2712832005077733, -3.6332707698572952], [-1.3944461285026157, -1.6529698402087896, 0.4830603295172673, -0.2103916933586415, -3.452406464456755], [-1.385030076182838, -1.779729202501035, 0.36189948190069415, -0.003633574208039697, -3.4691177677021887], [-1.6390538904694854, -2.1065211448369383, 0.7349590242218091, -0.11776609655695804, -3.451907387389229], [-1.914281329617311, -1.949256091797912, 0.7389001808884009, 0.2279690634452265, -3.752854995973015], [-0.04483095899654827, -0.6664686655795141, 2.3506475415403614, 0.3437718540289317, -3.113943475755679], [-1.3208225927894168, -1.151442849293427, 1.1848904737189967, -0.6507881416071429, -4.041310622417855], [-1.1078869877914872, -1.228071199638382, 1.2774577059716392, -0.559878650763618, -3.9333011605607338], [-1.2309592264785285, -1.6797351511751808, 1.668548895823086, -0.029023911712383776, -3.4218778935589533], [-0.6170805633291994, -1.245327878491469, 1.5760230184471975, -0.28423822851597297, -3.5029402078282166], [-1.0542396823411375, -1.8853680654011553, 0.6267128629506422, 0.4475346871733941, -3.5873519932501883], [-1.095544444083628, -1.6386099236270963, 0.7698788661969994, -0.1695009223562807, -3.8295216436501485], [-0.5954315106283707, -0.8941664128161836, 2.2240664164835406, -0.47675629013235754, -3.3101245286921217], [-0.8216117039882485, -1.6073698027217285, 2.21052608324413, 0.35208699748495637, -3.6056207239834603], [-0.6933991723497033, -0.8114358540792949, 1.7201116122547149, -0.48338432606084275, -3.4289270050709884], [-0.8329336733825136, -1.1533850879320202, 1.4490544967627086, -0.035410517020832366, -3.464073104767645], [-1.173785218048806, -1.578709722851018, 0.766102549036081, -0.03832470941126613, -3.761800924059597], [-1.0331931766946638, -1.510536443916904, 0.5200731109938715, 0.07180332561199668, -3.497378612630344], [-1.1045941225113174, -1.0764669292387659, 0.5520850450845601, 0.27489173156305435, -3.698812204892366], [-0.49765383036580824, -1.1303650659697047, 1.862701919276394, -0.3351582459716961, -3.3822215845846393], [-0.8600035524202753, -1.2658728904846233, 2.054953643664755, -0.08558234560932701, -3.486553229742471], [-0.89438658241525, -1.2533449510407506, 2.0516685718553545, -0.23734483416055677, -3.3114408137884888], [-1.0892725305095459, -1.0366392203274242, 1.9138408736924213, -0.016670700984438402, -3.7914271653014677], [-0.9066999475390192, -1.52501861144476, 2.181911329109014, 0.5226893671571801, -3.3660996187570196], [-0.8858164425123922, -1.0178908399708915, 1.944709055267622, -0.14636050146359522, -3.5903117413182217], [-1.2002910435197998, -1.4991794365657711, 1.8557368244634325, 0.787701451325696, -3.3955870541104867], [-0.9131584719512362, -1.1122640504322514, 1.6642071899853097, -0.44470692688437163, -3.2190227098312967], [-0.6605141510448655, -1.427208778055901, 2.115547779444563, 0.9148111892193194, -3.463723282183663], [-0.8982816524223094, -1.168216746548356, 1.8151616943757931, 0.3406040013690548, -3.406307045943696], [-0.9305881403219484, -1.4478720667986482, 1.4233263191193248, -0.5334576993264285, -3.62390882877589], [-0.7067739463685605, -1.375182608827948, 1.3170481752729797, -0.12623353713826038, -3.2551018807667758], [-0.8305315515882398, -1.4729372740094138, 1.220929240543648, 0.07970074066830274, -3.2028750905182513], [-0.9600650977206524, -1.193284577443959, 1.9861902852318005, -0.1648545911908331, -3.8251589712698086], [-0.7305135898109842, -1.211672428355639, 1.9116848681810377, -0.3425829480153133, -3.822574687091538], [-1.2408722119480418, -1.569103124823009, 2.049643665457846, -0.1574061186252383, -3.549755021765987]], NamedTuple[(n_steps = 3, is_accept = true, acceptance_rate = 0.07027203937625076, log_density = -20.157031039698737, hamiltonian_energy = 22.179052378779094, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 1221.2556652765861, tree_depth = 1, numerical_error = true, step_size = 0.4, nom_step_size = 0.4, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -20.157031039698737, hamiltonian_energy = 23.74070470836275, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 2.3226402937633353e11, tree_depth = 0, numerical_error = true, step_size = 1.061323008288048, nom_step_size = 1.061323008288048, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -5.594676997113449, hamiltonian_energy = 20.810091008801894, hamiltonian_energy_error = -0.8584466273155655, max_hamiltonian_energy_error = -0.8584466273155655, tree_depth = 2, numerical_error = false, step_size = 0.10868418148382622, nom_step_size = 0.10868418148382622, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.8879100109482697, log_density = -7.013642861190624, hamiltonian_energy = 7.268518184157042, hamiltonian_energy_error = 0.11888488014733145, max_hamiltonian_energy_error = 0.11888488014733145, tree_depth = 1, numerical_error = false, step_size = 0.11566893708145082, nom_step_size = 0.11566893708145082, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 0.6043823349907793, hamiltonian_energy = 6.873936840352368, hamiltonian_energy_error = -0.9196330220090463, max_hamiltonian_energy_error = -0.9196330220090463, tree_depth = 2, numerical_error = false, step_size = 0.11512268149097836, nom_step_size = 0.11512268149097836, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.906348807348308, log_density = -0.0799434012203335, hamiltonian_energy = 1.1308753965742075, hamiltonian_energy_error = 0.0926551323963658, max_hamiltonian_energy_error = 0.20396204903453463, tree_depth = 3, numerical_error = false, step_size = 0.17910077433997332, nom_step_size = 0.17910077433997332, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.03217975987990667, log_density = -0.0799434012203335, hamiltonian_energy = 7.425068559569877, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 4.8513617854131565, tree_depth = 2, numerical_error = false, step_size = 0.22809724566030642, nom_step_size = 0.22809724566030642, is_adapt = true), (n_steps = 63, is_accept = true, acceptance_rate = 0.9984594277279919, log_density = 0.7605243872260239, hamiltonian_energy = 2.2919170612018545, hamiltonian_energy_error = 0.0017593904244090908, max_hamiltonian_energy_error = 0.00535897063223878, tree_depth = 6, numerical_error = false, step_size = 0.019931638155369153, nom_step_size = 0.019931638155369153, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9998858731690544, log_density = 1.4236543856204218, hamiltonian_energy = -0.4184309394144463, hamiltonian_energy_error = -0.005479822260008205, max_hamiltonian_energy_error = -0.013437589088587942, tree_depth = 4, numerical_error = false, step_size = 0.03533328186973052, nom_step_size = 0.03533328186973052, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9560254574587085, log_density = -3.0183518709173356, hamiltonian_energy = 5.87496727707766, hamiltonian_energy_error = 0.05806032242740322, max_hamiltonian_energy_error = 0.08985389202697647, tree_depth = 4, numerical_error = false, step_size = 0.06492115886187828, nom_step_size = 0.06492115886187828, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9978354325932942, log_density = -1.8796539476626588, hamiltonian_energy = 3.676998520425414, hamiltonian_energy_error = -0.036967486273291605, max_hamiltonian_energy_error = -0.2051737020920168, tree_depth = 3, numerical_error = false, step_size = 0.1057259048436195, nom_step_size = 0.1057259048436195, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.7775088564759335, log_density = -3.144830159846112, hamiltonian_energy = 5.010174839381331, hamiltonian_energy_error = -0.6009331072696797, max_hamiltonian_energy_error = 1.2822105982175867, tree_depth = 2, numerical_error = false, step_size = 0.19831812057380743, nom_step_size = 0.19831812057380743, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.7953031719572997, log_density = -3.0176679738111005, hamiltonian_energy = 5.166856242635876, hamiltonian_energy_error = 0.4119125524830922, max_hamiltonian_energy_error = 0.47009283644543043, tree_depth = 2, numerical_error = false, step_size = 0.18643555245055835, nom_step_size = 0.18643555245055835, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9812141679822483, log_density = -0.6641323713148743, hamiltonian_energy = 4.242987859889911, hamiltonian_energy_error = -0.20195371657711725, max_hamiltonian_energy_error = -0.6223134131960402, tree_depth = 2, numerical_error = false, step_size = 0.18621711124001236, nom_step_size = 0.18621711124001236, is_adapt = true), (n_steps = 6, is_accept = true, acceptance_rate = 0.0004768266334444196, log_density = -0.6641323713148743, hamiltonian_energy = 4.59333037642122, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 29321.38976650916, tree_depth = 2, numerical_error = true, step_size = 0.33321496169342396, nom_step_size = 0.33321496169342396, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9975769754380162, log_density = -3.81879914926515, hamiltonian_energy = 5.316661298297451, hamiltonian_energy_error = 0.004349674416685545, max_hamiltonian_energy_error = -0.01669647349005743, tree_depth = 5, numerical_error = false, step_size = 0.028423802702651477, nom_step_size = 0.028423802702651477, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9921222309162737, log_density = -2.009076940686997, hamiltonian_energy = 5.906460556319951, hamiltonian_energy_error = 0.003937193953930773, max_hamiltonian_energy_error = 0.038607127265325225, tree_depth = 5, numerical_error = false, step_size = 0.054023785987807, nom_step_size = 0.054023785987807, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.8744679122238506, log_density = -2.6184019263305442, hamiltonian_energy = 6.219262126152207, hamiltonian_energy_error = 0.13524117354572152, max_hamiltonian_energy_error = 0.30843517500964523, tree_depth = 3, numerical_error = false, step_size = 0.10028853240311844, nom_step_size = 0.10028853240311844, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9160110641773987, log_density = 0.4219088907634241, hamiltonian_energy = 4.35040430896392, hamiltonian_energy_error = 0.07245893549477778, max_hamiltonian_energy_error = -0.44238392381627634, tree_depth = 3, numerical_error = false, step_size = 0.12932386877046684, nom_step_size = 0.12932386877046684, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 1.0223039808474361, hamiltonian_energy = 0.049851957569294836, hamiltonian_energy_error = -0.5151971205482955, max_hamiltonian_energy_error = -0.6682563764451941, tree_depth = 3, numerical_error = false, step_size = 0.1884072452742068, nom_step_size = 0.1884072452742068, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9713451962259131, log_density = 1.3231405967278338, hamiltonian_energy = 0.4921377594469263, hamiltonian_energy_error = -0.04637592771383936, max_hamiltonian_energy_error = 0.10210445793457623, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9808131673817346, log_density = 0.8918871119221166, hamiltonian_energy = -0.2778728848525315, hamiltonian_energy_error = 0.028436417372491696, max_hamiltonian_energy_error = 0.06887471684885416, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8258427388715435, log_density = -0.522625062572347, hamiltonian_energy = 2.3312618770706823, hamiltonian_energy_error = 0.3296023024988264, max_hamiltonian_energy_error = 0.4148519254289962, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9833901176847542, log_density = 1.4479914402309664, hamiltonian_energy = 0.9710303935301932, hamiltonian_energy_error = -0.3036921112869191, max_hamiltonian_energy_error = -0.3748872713912883, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9714601647346102, log_density = -0.41100235507192373, hamiltonian_energy = 1.342884763440337, hamiltonian_energy_error = 0.10127760256134222, max_hamiltonian_energy_error = 0.10127760256134222, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7689106493690762, log_density = -0.1656789008888957, hamiltonian_energy = 7.092234002771433, hamiltonian_energy_error = 0.3152107791172014, max_hamiltonian_energy_error = 0.5570756706345561, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9443919718998703, log_density = 1.783058866981042, hamiltonian_energy = 1.9948425485118761, hamiltonian_energy_error = -0.36304054307087874, max_hamiltonian_energy_error = -0.36304054307087874, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9888567923172485, log_density = 1.6874297380727796, hamiltonian_energy = -1.1927895943409184, hamiltonian_energy_error = 0.027420963335415438, max_hamiltonian_energy_error = 0.027420963335415438, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8181291160279525, log_density = -1.597509495533207, hamiltonian_energy = 2.686910083031447, hamiltonian_energy_error = 0.28921001319662887, max_hamiltonian_energy_error = 0.2971694303032395, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9795714099496323, log_density = 1.4355199945054604, hamiltonian_energy = 3.1222312814829962, hamiltonian_energy_error = -0.2420412825666194, max_hamiltonian_energy_error = -0.2420412825666194, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9425368318995211, log_density = 0.9782148667444783, hamiltonian_energy = 0.48579988791546436, hamiltonian_energy_error = 0.030279677532287108, max_hamiltonian_energy_error = 0.1167287431857611, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.962117742616383, log_density = -0.02711069687923562, hamiltonian_energy = 1.2440350511542617, hamiltonian_energy_error = 0.09958239309345562, max_hamiltonian_energy_error = 0.12856512537995024, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9985335426802904, log_density = 1.6246591602261198, hamiltonian_energy = 0.13878907154258036, hamiltonian_energy_error = -0.1219561873025275, max_hamiltonian_energy_error = -0.17572930882473764, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9787250806774622, log_density = 0.9867253135506822, hamiltonian_energy = -0.43027063602074644, hamiltonian_energy_error = 0.036776799694463236, max_hamiltonian_energy_error = 0.08794940377420918, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8452256403268266, log_density = -0.7658273970510265, hamiltonian_energy = 2.403770030371595, hamiltonian_energy_error = 0.3521173705133904, max_hamiltonian_energy_error = 0.46747804978868235, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8899110983383568, log_density = -1.9496200265681267, hamiltonian_energy = 6.0843960360739615, hamiltonian_energy_error = 0.26741970938441284, max_hamiltonian_energy_error = 0.49632018170533065, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -1.8531877557337424, hamiltonian_energy = 3.283017518689091, hamiltonian_energy_error = -0.10482878353994352, max_hamiltonian_energy_error = -0.5997365307579452, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9964564205664332, log_density = -2.9333443999603936, hamiltonian_energy = 5.773228860779203, hamiltonian_energy_error = -0.42062522162679095, max_hamiltonian_energy_error = -0.4235027487266807, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8919320021746426, log_density = 0.1905802872665081, hamiltonian_energy = 5.057923312206309, hamiltonian_energy_error = 0.11579767201998958, max_hamiltonian_energy_error = 0.4345851709630013, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9616225929791159, log_density = -0.18454417604488782, hamiltonian_energy = 1.4784813999899458, hamiltonian_energy_error = -0.040140146730902826, max_hamiltonian_energy_error = -0.26455493686659537, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.970442497316338, log_density = -1.3817753324001103, hamiltonian_energy = 1.7643893057286237, hamiltonian_energy_error = 0.07929429582948866, max_hamiltonian_energy_error = -0.16599527648635282, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9996812657992155, log_density = 0.6777839918643451, hamiltonian_energy = 2.0217436828262194, hamiltonian_energy_error = -0.16850609055431365, max_hamiltonian_energy_error = -0.32685037664215644, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9942720983774547, log_density = 0.9111851055690146, hamiltonian_energy = 0.00799117346327427, hamiltonian_energy_error = -0.04535044026392643, max_hamiltonian_energy_error = -0.16288123840376167, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9854537322825456, log_density = 1.638724675833231, hamiltonian_energy = 0.8646735397795826, hamiltonian_energy_error = -0.05345028231583804, max_hamiltonian_energy_error = 0.08536308288393535, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7335765638132415, log_density = -1.0357643284662252, hamiltonian_energy = 1.4794636054511383, hamiltonian_energy_error = 0.423280225676397, max_hamiltonian_energy_error = 0.423280225676397, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9250345962866907, log_density = -0.869368101315148, hamiltonian_energy = 3.3706288185976914, hamiltonian_energy_error = -0.22811489858339895, max_hamiltonian_energy_error = -0.5272861972712768, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.921875048741452, log_density = -0.48103019509893663, hamiltonian_energy = 3.5462827728526314, hamiltonian_energy_error = 0.06420982611931558, max_hamiltonian_energy_error = 0.28052363234167244, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9819644685325226, log_density = 0.5262860949575554, hamiltonian_energy = 1.9552556239818588, hamiltonian_energy_error = -0.16181582860423527, max_hamiltonian_energy_error = -0.303915469678532, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.9676564705024937, hamiltonian_energy = 0.23878468530707964, hamiltonian_energy_error = -0.03937038321164055, max_hamiltonian_energy_error = -0.2021865426720615, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9417468099370973, log_density = -1.2938141286054403, hamiltonian_energy = 2.4938521154111006, hamiltonian_energy_error = 0.11711595349344961, max_hamiltonian_energy_error = 0.1979731111581864, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9898124236495024, log_density = 0.8476859509123749, hamiltonian_energy = 2.94228653641561, hamiltonian_energy_error = -0.29660429642773956, max_hamiltonian_energy_error = -0.36139842643307407, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9395479527871462, log_density = 0.4145301434948605, hamiltonian_energy = 1.0160713109803767, hamiltonian_energy_error = 0.045645437271931044, max_hamiltonian_energy_error = 0.1183434297576742, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8879653655207069, log_density = 0.43651838863614323, hamiltonian_energy = 2.461616070975048, hamiltonian_energy_error = -0.08396615738317204, max_hamiltonian_energy_error = 0.28672184579968096, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9899444732454978, log_density = 1.24686469962203, hamiltonian_energy = 0.46188804824458285, hamiltonian_energy_error = -0.011908794196603956, max_hamiltonian_energy_error = 0.04336428941534243, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9383356536502004, log_density = 0.1046722679762091, hamiltonian_energy = 1.1674764344241435, hamiltonian_energy_error = 0.10649398057902637, max_hamiltonian_energy_error = 0.14206252282507092, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9994889333340015, log_density = -0.1676923480585657, hamiltonian_energy = 0.3189742203714321, hamiltonian_energy_error = 0.003583881098707442, max_hamiltonian_energy_error = -0.09409594134065236, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9419238675395819, log_density = 0.6621160213880568, hamiltonian_energy = 1.023046694034471, hamiltonian_energy_error = 0.006442938465935244, max_hamiltonian_energy_error = 0.12326920075776959, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.945944204875254, log_density = 1.074523725326836, hamiltonian_energy = 2.727440630535821, hamiltonian_energy_error = -0.05640567129885721, max_hamiltonian_energy_error = 0.17453748769266664, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.997196109993624, log_density = 0.6993093876829768, hamiltonian_energy = 0.5032244444528873, hamiltonian_energy_error = -0.008919752821373583, max_hamiltonian_energy_error = -0.1082428340417454, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8411275296075463, log_density = -1.0725257613661547, hamiltonian_energy = 6.114935952186638, hamiltonian_energy_error = 0.08548458105066992, max_hamiltonian_energy_error = 0.34601235191092794, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9905641525048976, log_density = -1.8970572655551692, hamiltonian_energy = 2.8222834557923253, hamiltonian_energy_error = 0.04615153417935636, max_hamiltonian_energy_error = -0.10973465688564898, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9973369169113336, log_density = -1.7722496779397652, hamiltonian_energy = 3.549859806329498, hamiltonian_energy_error = -0.02064716903438324, max_hamiltonian_energy_error = -0.10453951870117706, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9167637969564749, log_density = -1.1007144587806836, hamiltonian_energy = 5.403959453936024, hamiltonian_energy_error = 0.08130809188942045, max_hamiltonian_energy_error = 0.22307294987304527, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9258009243144202, log_density = -2.1846910511354576, hamiltonian_energy = 4.26527808661437, hamiltonian_energy_error = 0.15085009591125775, max_hamiltonian_energy_error = 0.20904871558353566, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.928169720680678, log_density = -5.672197011681373, hamiltonian_energy = 8.998676247655617, hamiltonian_energy_error = 0.33762093678213034, max_hamiltonian_energy_error = -0.4827247936019923, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = -2.469700521144846, hamiltonian_energy = 7.00229043582654, hamiltonian_energy_error = -0.30158013651089544, max_hamiltonian_energy_error = -0.5743442822843754, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 1.0, log_density = -1.3721041256365858, hamiltonian_energy = 4.486855622470902, hamiltonian_energy_error = -0.2750260090376164, max_hamiltonian_energy_error = -0.5660440641032674, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9632906771051958, log_density = 0.2966275907257767, hamiltonian_energy = 3.0714301576711946, hamiltonian_energy_error = -0.14744653881704117, max_hamiltonian_energy_error = -0.23502203843414726, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6430722474690109, log_density = -4.25587866533345, hamiltonian_energy = 6.290120967308095, hamiltonian_energy_error = 0.6802334007520772, max_hamiltonian_energy_error = 0.6802334007520772, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9032483390626126, log_density = -4.130749113205839, hamiltonian_energy = 10.842656325631319, hamiltonian_energy_error = -0.2758101002684885, max_hamiltonian_energy_error = -0.5949636190931287, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9013327044390976, log_density = -0.8216358061130826, hamiltonian_energy = 7.4765881734639255, hamiltonian_energy_error = -0.2583957083531132, max_hamiltonian_energy_error = 0.3882102730606274, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9907548039036632, log_density = -2.075089164621147, hamiltonian_energy = 2.9839258958236745, hamiltonian_energy_error = 0.011328429689435815, max_hamiltonian_energy_error = -0.21491677213702287, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9264510414637063, log_density = -1.4553688570030214, hamiltonian_energy = 5.551474338786109, hamiltonian_energy_error = 0.07817976775685587, max_hamiltonian_energy_error = 0.2521339957980189, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9863659937071354, log_density = -1.270280557357717, hamiltonian_energy = 8.242933052628267, hamiltonian_energy_error = -0.10874748589508698, max_hamiltonian_energy_error = -0.32197760665745534, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9492156929003471, log_density = -0.24963352917376724, hamiltonian_energy = 3.388434193593364, hamiltonian_energy_error = -0.014046973841340904, max_hamiltonian_energy_error = 0.1574285400397466, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9847599268493212, log_density = -1.20306757731902, hamiltonian_energy = 1.6306321496946596, hamiltonian_energy_error = 0.0930769134984053, max_hamiltonian_energy_error = -0.13870038713944277, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 1.0, log_density = -0.4675452860459437, hamiltonian_energy = 2.0626916747393738, hamiltonian_energy_error = -0.010679475685119844, max_hamiltonian_energy_error = -0.21382223424774005, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9936260195766116, log_density = 1.1394872314176574, hamiltonian_energy = 1.6819840435999072, hamiltonian_energy_error = -0.2614109320463407, max_hamiltonian_energy_error = -0.2614109320463407, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.837379068915487, log_density = 1.769200335118942, hamiltonian_energy = 1.1563483218573625, hamiltonian_energy_error = 0.04288647834107184, max_hamiltonian_energy_error = 0.2928767704276374, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9732660697815184, log_density = 1.4342853965449827, hamiltonian_energy = 0.9285591893816356, hamiltonian_energy_error = 0.014266821357381332, max_hamiltonian_energy_error = 0.07948544166479232, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.943550680785793, log_density = -0.2575551756345025, hamiltonian_energy = 2.0963383307823134, hamiltonian_energy_error = 0.019561116286208602, max_hamiltonian_energy_error = 0.12621229613708795, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9472432836221242, log_density = 1.5632827337903379, hamiltonian_energy = 2.4260188820818738, hamiltonian_energy_error = 0.002245242803450953, max_hamiltonian_energy_error = 0.1480504774486473, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8049912145646262, log_density = 1.520020693667652, hamiltonian_energy = 1.0357262091740527, hamiltonian_energy_error = 0.076621440076444, max_hamiltonian_energy_error = 0.49024844031828785, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9106238094927094, log_density = 0.6961134117843315, hamiltonian_energy = 0.23440111261582697, hamiltonian_energy_error = 0.0679718095966213, max_hamiltonian_energy_error = 0.23433456739242065, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8148120543438548, log_density = -1.2058807604284958, hamiltonian_energy = 2.5932579853674724, hamiltonian_energy_error = 0.2910872733957137, max_hamiltonian_energy_error = 0.39601530662718787, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9970169336236447, log_density = -1.7493028538412174, hamiltonian_energy = 3.477459941842861, hamiltonian_energy_error = -0.037607061348869486, max_hamiltonian_energy_error = -0.21589207515963071, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.993450385056825, log_density = 0.38620823745086774, hamiltonian_energy = 2.8577605725051587, hamiltonian_energy_error = -0.1463161450985746, max_hamiltonian_energy_error = -0.17895497340517164, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9620469059026912, log_density = -0.5165620590146904, hamiltonian_energy = 2.0435365102342358, hamiltonian_energy_error = 0.07008615032010423, max_hamiltonian_energy_error = 0.1684036212595159, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9128232609380811, log_density = 0.6839359156017224, hamiltonian_energy = 2.398357064601236, hamiltonian_energy_error = -0.16089673676146043, max_hamiltonian_energy_error = 0.18972046467125736, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9908095799688041, log_density = 1.7957995219184877, hamiltonian_energy = -0.16416998231899527, hamiltonian_energy_error = -0.002834569499300499, max_hamiltonian_energy_error = -0.04464546889105303, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8950136941955336, log_density = 0.07831435859040958, hamiltonian_energy = 0.837285466698855, hamiltonian_energy_error = 0.1991001151010552, max_hamiltonian_energy_error = 0.1991001151010552, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 1.3526382692934895, hamiltonian_energy = -0.024817882990882056, hamiltonian_energy_error = -0.22028733486631324, max_hamiltonian_energy_error = -0.22028733486631324, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.846161561956971, log_density = 0.44288374516289153, hamiltonian_energy = 1.8849354593201664, hamiltonian_energy_error = 0.07694592929512734, max_hamiltonian_energy_error = 0.23617591942310145, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9138361708597144, log_density = -0.8795079014275888, hamiltonian_energy = 3.1389871213951017, hamiltonian_energy_error = 0.057371859942886516, max_hamiltonian_energy_error = 0.19481552537560498, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8700971685637432, log_density = -3.473911948449498, hamiltonian_energy = 4.974657051822729, hamiltonian_energy_error = 0.2528134267110884, max_hamiltonian_energy_error = 0.25373780871149165, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9863204843927481, log_density = -4.267086481460989, hamiltonian_energy = 6.3334395724393, hamiltonian_energy_error = 0.07730380779184376, max_hamiltonian_energy_error = -0.16858204108992236, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9764274678210866, log_density = -0.46310231035311666, hamiltonian_energy = 6.441705054082644, hamiltonian_energy_error = 0.01324006949462575, max_hamiltonian_energy_error = -0.3658370338391066, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9716589156325275, log_density = 1.0199992620171177, hamiltonian_energy = 1.5333140881984404, hamiltonian_energy_error = -0.18254775765585451, max_hamiltonian_energy_error = -0.37326100697716935, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.816018728824461, log_density = 0.23069790115124889, hamiltonian_energy = 2.317655843644377, hamiltonian_energy_error = 0.04933806946179997, max_hamiltonian_energy_error = 0.4933319522458164, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.985283813492692, log_density = 1.0546213772838442, hamiltonian_energy = 1.0026403950942666, hamiltonian_energy_error = -0.24784922410113697, max_hamiltonian_energy_error = -0.24784922410113697, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9863631726102191, log_density = 0.666483959004383, hamiltonian_energy = 0.10660720026575965, hamiltonian_energy_error = 0.0030572127399830507, max_hamiltonian_energy_error = -0.07716115788702971, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9933618219960003, log_density = 1.9497938432790018, hamiltonian_energy = -0.1960134359044594, hamiltonian_energy_error = -0.04609162293883373, max_hamiltonian_energy_error = -0.07809528608763872, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9025527056838724, log_density = 0.5533947100144907, hamiltonian_energy = 1.481073085485967, hamiltonian_energy_error = 0.06823548229810372, max_hamiltonian_energy_error = 0.21046732040867155, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9522671002890036, log_density = 1.540520428762182, hamiltonian_energy = 0.9532994085291828, hamiltonian_energy_error = -0.03465935102300777, max_hamiltonian_energy_error = 0.14751695536100784, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9278299367403171, log_density = 0.5497157472859779, hamiltonian_energy = 0.17914266639024679, hamiltonian_energy_error = 0.13532366573834154, max_hamiltonian_energy_error = 0.1603597969358319, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9639749438648351, log_density = 1.7095037710159726, hamiltonian_energy = 0.08342328486065509, hamiltonian_energy_error = -0.15954236645423103, max_hamiltonian_energy_error = -0.15954236645423103, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9052750443614949, log_density = 1.3190246345544683, hamiltonian_energy = 0.19447689983819694, hamiltonian_energy_error = 0.00032125956553685775, max_hamiltonian_energy_error = 0.19509957932202193, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8649208943145761, log_density = 0.7420658988523385, hamiltonian_energy = 2.72923676250217, hamiltonian_energy_error = 0.04860527885961741, max_hamiltonian_energy_error = 0.24704566851813325, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9298375212305342, log_density = 0.17761985244357703, hamiltonian_energy = 2.248348742077773, hamiltonian_energy_error = -0.013056087398370053, max_hamiltonian_energy_error = 0.19449517412096684, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7947724053143498, log_density = -1.7616840184239706, hamiltonian_energy = 7.469892561450568, hamiltonian_energy_error = 0.159008506816674, max_hamiltonian_energy_error = 0.46761689064426815, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9953723257228949, log_density = -5.3334424632547766, hamiltonian_energy = 6.49922795135851, hamiltonian_energy_error = 0.03293000991980222, max_hamiltonian_energy_error = -0.3922850923814014, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8457400669732882, log_density = -5.799207262893466, hamiltonian_energy = 10.086248391414681, hamiltonian_energy_error = -0.06627749501144464, max_hamiltonian_energy_error = 0.4167562331815695, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8295903253362765, log_density = -2.6527233722730443, hamiltonian_energy = 8.400351379315182, hamiltonian_energy_error = -0.10542464346196212, max_hamiltonian_energy_error = 0.5813983362899862, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9113503343589804, log_density = -3.805430496235817, hamiltonian_energy = 5.904162276067699, hamiltonian_energy_error = 0.0475807407673523, max_hamiltonian_energy_error = 0.26410911354232525, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9835423501913848, log_density = 1.4242779530985565, hamiltonian_energy = 4.847823929531443, hamiltonian_energy_error = -0.26804159495548063, max_hamiltonian_energy_error = -0.26804159495548063, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8147641443643406, log_density = -0.6577076094700018, hamiltonian_energy = 2.2279904144436045, hamiltonian_energy_error = 0.19310390059720728, max_hamiltonian_energy_error = 0.26727554303353296, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9748552001120482, log_density = 0.3282553048705328, hamiltonian_energy = 1.767993563938616, hamiltonian_energy_error = -0.11879274113064309, max_hamiltonian_energy_error = -0.20447326332942461, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 1.7860169622275652, hamiltonian_energy = -0.3279478428741984, hamiltonian_energy_error = -0.12591165425975145, max_hamiltonian_energy_error = -0.1287818094253191, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7004196041235269, log_density = -1.6711719711017743, hamiltonian_energy = 2.2172554855920463, hamiltonian_energy_error = 0.5790757722809987, max_hamiltonian_energy_error = 0.5790757722809987, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9441375016244871, log_density = -2.3072400169551894, hamiltonian_energy = 4.17649603502331, hamiltonian_energy_error = 0.11605233461071318, max_hamiltonian_energy_error = -0.44534040328792024, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9612428839846494, log_density = -1.9614270534578608, hamiltonian_energy = 6.418559518322355, hamiltonian_energy_error = -0.3063617746793659, max_hamiltonian_energy_error = -0.4469461108409911, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9991418150085892, log_density = 1.43441150881719, hamiltonian_energy = 2.962036246702721, hamiltonian_energy_error = -0.16842646023033536, max_hamiltonian_energy_error = -0.20530200479756777, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9815539287126686, log_density = -1.5368057489954943, hamiltonian_energy = 2.7447505699242014, hamiltonian_energy_error = 0.023710826757063597, max_hamiltonian_energy_error = 0.06861138338517403, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9291714401288244, log_density = -2.751974044241077, hamiltonian_energy = 4.8367349464898215, hamiltonian_energy_error = 0.05516792133193604, max_hamiltonian_energy_error = 0.1496143080992809, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.98862215347501, log_density = -1.9860871054173757, hamiltonian_energy = 3.209091576280996, hamiltonian_energy_error = -0.10552948683449115, max_hamiltonian_energy_error = -0.10552948683449115, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8507290790415927, log_density = -2.3764314134052373, hamiltonian_energy = 5.548186648928868, hamiltonian_energy_error = 0.23311984753997272, max_hamiltonian_energy_error = 0.3445641174155254, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -1.1743488547133047, hamiltonian_energy = 4.065665219481675, hamiltonian_energy_error = -0.06059711861092332, max_hamiltonian_energy_error = -0.22267996863201844, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9062694673313867, log_density = -3.2100627434825384, hamiltonian_energy = 4.927044019012734, hamiltonian_energy_error = 0.16277611902610456, max_hamiltonian_energy_error = -0.2615643040264679, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9845848621371732, log_density = -1.7224120659639652, hamiltonian_energy = 4.246370745469173, hamiltonian_energy_error = -0.048629016391471325, max_hamiltonian_energy_error = -0.35751097294282674, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9550711765743991, log_density = 1.1314373314259658, hamiltonian_energy = 4.450986428517801, hamiltonian_energy_error = -0.3712277182917729, max_hamiltonian_energy_error = -0.40936585663412917, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8552134687105173, log_density = -0.2562301237349178, hamiltonian_energy = 1.5478686903685894, hamiltonian_energy_error = 0.23593816522179556, max_hamiltonian_energy_error = 0.28372570748379955, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9877804377898302, log_density = 1.0456533807965016, hamiltonian_energy = 1.046039772618467, hamiltonian_energy_error = -0.15526503915295375, max_hamiltonian_energy_error = -0.2823917284823634, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9733237802487429, log_density = 0.12459586440861159, hamiltonian_energy = 1.040543053905425, hamiltonian_energy_error = 0.019287878746991005, max_hamiltonian_energy_error = 0.13075190517423274, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9997855457341794, log_density = 1.3890972298343733, hamiltonian_energy = 0.21045809840774776, hamiltonian_energy_error = -0.0933652975079543, max_hamiltonian_energy_error = -0.1623513861697924, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8926287963648283, log_density = 0.5873163374281702, hamiltonian_energy = 0.8097074655572405, hamiltonian_energy_error = 0.09471026853546971, max_hamiltonian_energy_error = 0.3046423993172451, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9574677399720509, log_density = -0.009464801553392022, hamiltonian_energy = 1.701175723102947, hamiltonian_energy_error = 0.033149274008106744, max_hamiltonian_energy_error = 0.12568681339713317, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9589231031297262, log_density = -1.9468671279092646, hamiltonian_energy = 3.903547967484987, hamiltonian_energy_error = 0.13393406909615724, max_hamiltonian_energy_error = -0.17721922476145568, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9940182568086348, log_density = -1.8988791992811933, hamiltonian_energy = 3.9838619745329162, hamiltonian_energy_error = -0.02721272621706161, max_hamiltonian_energy_error = -0.28282298400525274, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9778249673385994, log_density = 0.5620924396756308, hamiltonian_energy = 2.4163371867583185, hamiltonian_energy_error = -0.15221223877729484, max_hamiltonian_energy_error = -0.15221223877729484, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7850101621821318, log_density = -2.109967825523043, hamiltonian_energy = 3.907206555756268, hamiltonian_energy_error = 0.4022772821968017, max_hamiltonian_energy_error = 0.49383177962527247, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9908932060787172, log_density = -0.6068896969036306, hamiltonian_energy = 4.838524779054471, hamiltonian_energy_error = -0.08838255373375503, max_hamiltonian_energy_error = -0.5074200465115055, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9877775371977928, log_density = -0.2618718667136761, hamiltonian_energy = 2.7917111017214307, hamiltonian_energy_error = -0.13193577016494107, max_hamiltonian_energy_error = -0.2557418289089828, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9743572610670022, log_density = -0.11295294133229739, hamiltonian_energy = 1.4770219474169084, hamiltonian_energy_error = -0.14992240202624196, max_hamiltonian_energy_error = -0.1817104631115618, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8021427696069805, log_density = -2.6197481953890254, hamiltonian_energy = 5.722773773410861, hamiltonian_energy_error = 0.13667322958082817, max_hamiltonian_energy_error = 0.3257614112720697, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7010705019201783, log_density = -2.4729699926258064, hamiltonian_energy = 6.468121072276775, hamiltonian_energy_error = 0.38174340209399915, max_hamiltonian_energy_error = 0.6804634074806213, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9162739442428964, log_density = -0.7599453558790739, hamiltonian_energy = 5.111727005523197, hamiltonian_energy_error = -0.08652387855686605, max_hamiltonian_energy_error = -0.3961556659583936, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6629342751550881, log_density = -0.1597769730339813, hamiltonian_energy = 6.620954405621706, hamiltonian_energy_error = -0.21279025447300715, max_hamiltonian_energy_error = 0.783444963258737, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9607933486887195, log_density = -0.5458788752455774, hamiltonian_energy = 4.950776780409305, hamiltonian_energy_error = -0.035844385399925294, max_hamiltonian_energy_error = 0.21869697069374272, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9453885154967561, log_density = -0.40061964799661354, hamiltonian_energy = 3.316729761334083, hamiltonian_energy_error = -0.054676768669682296, max_hamiltonian_energy_error = 0.15739504664759396, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9511895612296907, log_density = -0.9370524483540716, hamiltonian_energy = 2.00919930863284, hamiltonian_energy_error = 0.0741466991664963, max_hamiltonian_energy_error = 0.08219744167796805, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.925033855048606, log_density = 0.8850718680818561, hamiltonian_energy = 3.7352897445698634, hamiltonian_energy_error = -0.005431680690937579, max_hamiltonian_energy_error = 0.17828751652311858, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.827362861374386, log_density = -2.495094735723395, hamiltonian_energy = 6.234879149801695, hamiltonian_energy_error = 0.181920638820408, max_hamiltonian_energy_error = 0.4760416026082366, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9886661329364738, log_density = 0.5955413188392988, hamiltonian_energy = 5.49143365237848, hamiltonian_energy_error = -0.1605589976698285, max_hamiltonian_energy_error = -0.22810333037293073, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9705001429066609, log_density = 0.8159696182071947, hamiltonian_energy = 1.2503207168962858, hamiltonian_energy_error = 0.011457283833115728, max_hamiltonian_energy_error = 0.09106955867588695, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9077094396736768, log_density = 0.0916645699736609, hamiltonian_energy = 1.9002405317942492, hamiltonian_energy_error = 0.17614605691420682, max_hamiltonian_energy_error = 0.28505092429059653, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9859538875645952, log_density = -0.32432542369873296, hamiltonian_energy = 2.1832819402052253, hamiltonian_energy_error = -0.03042880373152901, max_hamiltonian_energy_error = -0.27192444802264015, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9942330020919794, log_density = -1.190550437024818, hamiltonian_energy = 2.1874466086479813, hamiltonian_energy_error = 0.014736213110389862, max_hamiltonian_energy_error = -0.28715584786596926, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.7625309130930731, hamiltonian_energy = 2.1679920360093177, hamiltonian_energy_error = -0.19031521821948916, max_hamiltonian_energy_error = -0.204874213093865, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9909929344094022, log_density = 1.2629816295723728, hamiltonian_energy = 0.5503321328249609, hamiltonian_energy_error = -0.07175814087172983, max_hamiltonian_energy_error = -0.08042845306022395, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7636503409031741, log_density = -2.4014772560851654, hamiltonian_energy = 6.461593511495, hamiltonian_energy_error = 0.28455872161622153, max_hamiltonian_energy_error = 0.4700165636695779, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9836769036551514, log_density = -3.066446388420495, hamiltonian_energy = 5.682303962680294, hamiltonian_energy_error = 0.043924255849632665, max_hamiltonian_energy_error = -0.27649638193246506, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9982639098277835, log_density = -3.139240007460753, hamiltonian_energy = 5.313363939944927, hamiltonian_energy_error = -0.20748867597045706, max_hamiltonian_energy_error = -0.3004545858028669, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8750811672657698, log_density = -0.3025807403187244, hamiltonian_energy = 6.116840414446464, hamiltonian_energy_error = 0.13881847285987892, max_hamiltonian_energy_error = 0.24248760957761029, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9305185243505562, log_density = 1.4803732582540672, hamiltonian_energy = 3.393620261778973, hamiltonian_energy_error = -0.16589123054311372, max_hamiltonian_energy_error = -0.29880115060462575, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8506221826383842, log_density = -2.7043540120545693, hamiltonian_energy = 3.9115078336822044, hamiltonian_energy_error = 0.26206461946924264, max_hamiltonian_energy_error = 0.26206461946924264, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -1.0986000147139405, hamiltonian_energy = 2.798258870426288, hamiltonian_energy_error = -0.19793582587610903, max_hamiltonian_energy_error = -0.25215497677351095, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9900868105490372, log_density = 0.3871689227124122, hamiltonian_energy = 5.22595549133223, hamiltonian_energy_error = -0.05518594353654116, max_hamiltonian_energy_error = -0.08639478565636871, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9692929736483623, log_density = -1.1580121684597735, hamiltonian_energy = 1.3692356599843567, hamiltonian_energy_error = 0.07913583086875486, max_hamiltonian_energy_error = 0.07913583086875486, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9565074661325971, log_density = 0.0717326136067733, hamiltonian_energy = 3.3988447217276923, hamiltonian_energy_error = 0.013852608041157843, max_hamiltonian_energy_error = 0.16875798506775386, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9384254195393301, log_density = 0.4273306681707094, hamiltonian_energy = 3.088213829770212, hamiltonian_energy_error = 0.08656184278213352, max_hamiltonian_energy_error = 0.23491831720967715, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9705097008726363, log_density = -0.8241021390909946, hamiltonian_energy = 1.5556040905933783, hamiltonian_energy_error = 0.07507838946541834, max_hamiltonian_energy_error = -0.2157078406369941, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9591707331264665, log_density = -1.7182528712113552, hamiltonian_energy = 3.8974127468044086, hamiltonian_energy_error = 0.08781125191901751, max_hamiltonian_energy_error = -0.2767822496193082, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9871932952213044, log_density = -0.40632004243073183, hamiltonian_energy = 2.7324580485321768, hamiltonian_energy_error = -0.13125772493086352, max_hamiltonian_energy_error = -0.3052095201842633, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9710188110010985, log_density = 0.979456517129103, hamiltonian_energy = 2.1279548153465253, hamiltonian_energy_error = -0.08102765830665648, max_hamiltonian_energy_error = -0.17560053868074732, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8201458194532106, log_density = 1.5273727211673922, hamiltonian_energy = 1.571821179732471, hamiltonian_energy_error = 0.10136660995094982, max_hamiltonian_energy_error = 0.4451979595760076, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9769519816860749, log_density = 1.6935076446968509, hamiltonian_energy = -0.7452702525533337, hamiltonian_energy_error = -0.0737765168387684, max_hamiltonian_energy_error = 0.08766131903201868, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8698272311562302, log_density = 0.28901045867202946, hamiltonian_energy = 1.3406018573014333, hamiltonian_energy_error = 0.19414837234560256, max_hamiltonian_energy_error = 0.2142930560608285, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8639969342094265, log_density = 1.5756055292895947, hamiltonian_energy = 2.7815193062873735, hamiltonian_energy_error = -0.06455485381523873, max_hamiltonian_energy_error = 0.434592287958258, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9040858198343213, log_density = 1.758507308684763, hamiltonian_energy = 0.4448902606027296, hamiltonian_energy_error = 0.033425498269149534, max_hamiltonian_energy_error = 0.17903292524790304, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9609504244241741, log_density = 1.5394096829834911, hamiltonian_energy = -0.5328142667978808, hamiltonian_energy_error = -0.006624677515348898, max_hamiltonian_energy_error = 0.10163019801461626, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9600795285056167, log_density = -0.8129391512200073, hamiltonian_energy = 1.9798603633403673, hamiltonian_energy_error = 0.01415934437010491, max_hamiltonian_energy_error = 0.135348982901895, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8861095119604899, log_density = 0.46106846306739513, hamiltonian_energy = 2.506445558200327, hamiltonian_energy_error = 0.09818457982176865, max_hamiltonian_energy_error = 0.18944709310048635, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9795381598782276, log_density = 0.7590748949630672, hamiltonian_energy = 0.25287039152215707, hamiltonian_energy_error = 0.03749084138296899, max_hamiltonian_energy_error = -0.1003266543195852, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9295552426353912, log_density = -0.23473349622425843, hamiltonian_energy = 0.6337939055102533, hamiltonian_energy_error = 0.1936482449977741, max_hamiltonian_energy_error = 0.1936482449977741, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9889366602870014, log_density = 0.41785525949982905, hamiltonian_energy = 2.218902006671144, hamiltonian_energy_error = -0.20108920138202757, max_hamiltonian_energy_error = -0.2995926693571498, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7674988046015924, log_density = -0.22650810645544617, hamiltonian_energy = 3.5918199799578545, hamiltonian_energy_error = 0.1381977334458493, max_hamiltonian_energy_error = 0.6170161940082912, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.989670039925482, log_density = -0.18980753549104, hamiltonian_energy = 3.0311293706035882, hamiltonian_energy_error = -0.054036278623875056, max_hamiltonian_energy_error = -0.17603089879178624, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9799725031218197, log_density = -0.5969420250873014, hamiltonian_energy = 1.8710351529408014, hamiltonian_energy_error = 0.019555520451483455, max_hamiltonian_energy_error = -0.1773163062006844, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9944397947202959, log_density = 0.17884404209834237, hamiltonian_energy = 1.3778824205417977, hamiltonian_energy_error = 0.027586299275151882, max_hamiltonian_energy_error = -0.167565478011666, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9915448861586792, log_density = 0.18245925675529584, hamiltonian_energy = 1.484069798096772, hamiltonian_energy_error = -0.015831470774519962, max_hamiltonian_energy_error = -0.16468443872228522, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9845701877539275, log_density = -0.581585176100937, hamiltonian_energy = 3.191326990204878, hamiltonian_energy_error = -0.05848847284054637, max_hamiltonian_energy_error = -0.26710119061785287, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9244325031168313, log_density = -0.7906244096901034, hamiltonian_energy = 3.7093486728536815, hamiltonian_energy_error = 0.08439374803214372, max_hamiltonian_energy_error = 0.1876405308810738, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9629457127932949, log_density = -2.369097847970572, hamiltonian_energy = 3.695807862318735, hamiltonian_energy_error = 0.10570727422493764, max_hamiltonian_energy_error = -0.2362136468052385, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.976088586162463, log_density = -2.067171757400029, hamiltonian_energy = 5.015254427626811, hamiltonian_energy_error = 0.15439434286752807, max_hamiltonian_energy_error = -0.27297742546052817, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9342206641018049, log_density = 1.3863066961908181, hamiltonian_energy = 3.791298730484381, hamiltonian_energy_error = -0.38049736728476, max_hamiltonian_energy_error = -0.38049736728476, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8635233701930474, log_density = 0.332017252688253, hamiltonian_energy = 1.0645054360259456, hamiltonian_energy_error = 0.1670763329014746, max_hamiltonian_energy_error = 0.1990240788223212, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9986086200140463, log_density = 0.9054123392525746, hamiltonian_energy = 1.0357965158046436, hamiltonian_energy_error = -0.1041576286649255, max_hamiltonian_energy_error = -0.12878035555527356, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9360877573644422, log_density = 0.9315980361830931, hamiltonian_energy = 0.9294756859888045, hamiltonian_energy_error = 0.09044672008723031, max_hamiltonian_energy_error = 0.13532824471959137, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 1.5394021096601946, hamiltonian_energy = 0.15699288023974667, hamiltonian_energy_error = -0.08607590185400382, max_hamiltonian_energy_error = -0.12308959508128425, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8955554603414192, log_density = 0.729260298591818, hamiltonian_energy = 0.4357154931895746, hamiltonian_energy_error = 0.1327116104254964, max_hamiltonian_energy_error = 0.21254131285559197, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9975004545961298, log_density = -0.293303816390452, hamiltonian_energy = 0.691222591258017, hamiltonian_energy_error = 0.016511109735397822, max_hamiltonian_energy_error = -0.2007699118337538, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.856382164666937, log_density = -0.868350001037923, hamiltonian_energy = 2.83821291318103, hamiltonian_energy_error = 0.1754800483422092, max_hamiltonian_energy_error = 0.49560062773178926, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8439344867091947, log_density = -3.6021087888896535, hamiltonian_energy = 4.553358132835996, hamiltonian_energy_error = 0.3967986731587443, max_hamiltonian_energy_error = 0.6214322379956423, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9776664848098848, log_density = 0.8425666824975515, hamiltonian_energy = 4.602577770447832, hamiltonian_energy_error = -0.6497402466596922, max_hamiltonian_energy_error = -0.7696261303500815, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.85331430452713, log_density = 0.04503748367940297, hamiltonian_energy = 2.29279376955031, hamiltonian_energy_error = 0.09268075379725271, max_hamiltonian_energy_error = 0.35953441807029174, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9972396876090097, log_density = -1.3624707665765357, hamiltonian_energy = 3.189098461077734, hamiltonian_energy_error = -0.1498373660655341, max_hamiltonian_energy_error = -0.25476823212052624, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9745068106348664, log_density = 0.6075969238148033, hamiltonian_energy = 3.9925209456650848, hamiltonian_energy_error = -0.03066271118228947, max_hamiltonian_energy_error = 0.10685959920078503, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9778755846220509, log_density = 0.8580686008855434, hamiltonian_energy = 0.7667310933870453, hamiltonian_energy_error = -0.026575991882300976, max_hamiltonian_energy_error = 0.0794523903970239, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 1.4968424811503667, hamiltonian_energy = -0.6302212752800023, hamiltonian_energy_error = -0.015756146864482456, max_hamiltonian_energy_error = -0.07770398158959702, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9246100130627565, log_density = 0.7497290955335032, hamiltonian_energy = 0.7814607705478891, hamiltonian_energy_error = 0.056230712542636674, max_hamiltonian_energy_error = 0.21506363535098294, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9911072895662195, log_density = 1.5228201462849356, hamiltonian_energy = 1.0018324955107643, hamiltonian_energy_error = -0.07229556842794294, max_hamiltonian_energy_error = -0.16118327597064397, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8922162466542686, log_density = -1.0656347633812349, hamiltonian_energy = 3.417958923858789, hamiltonian_energy_error = 0.14967155763155748, max_hamiltonian_energy_error = 0.27539138184827117, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9735572250540796, log_density = -1.8973607036791869, hamiltonian_energy = 4.518122642424347, hamiltonian_energy_error = 0.00033592683692784675, max_hamiltonian_energy_error = 0.18735351994026495, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9812970345706528, log_density = -2.3467477320502343, hamiltonian_energy = 3.600068789434339, hamiltonian_energy_error = -0.025453156029811463, max_hamiltonian_energy_error = -0.18452287020125357, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8257859164919168, log_density = -6.665229687811422, hamiltonian_energy = 8.249493617252272, hamiltonian_energy_error = 0.32332409344345603, max_hamiltonian_energy_error = 0.32332409344345603, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9468425877165373, log_density = -1.7677364242986435, hamiltonian_energy = 9.337904679409194, hamiltonian_energy_error = -0.3947501346852036, max_hamiltonian_energy_error = -0.43568690482848105, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8964567476349412, log_density = -3.993648856725735, hamiltonian_energy = 6.585864893262305, hamiltonian_energy_error = 0.15865199235619887, max_hamiltonian_energy_error = 0.24891601718911538, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9900384830887644, log_density = -2.444948788436056, hamiltonian_energy = 5.401792102311445, hamiltonian_energy_error = 0.04492970789757322, max_hamiltonian_energy_error = -0.4220796503737301, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9849148374786824, log_density = -2.721796625670992, hamiltonian_energy = 5.398274811083829, hamiltonian_energy_error = -0.0241843632945713, max_hamiltonian_energy_error = -0.3447470213716306, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9887308184019811, log_density = -2.6914488971306234, hamiltonian_energy = 3.772573535676396, hamiltonian_energy_error = 0.08216959501402998, max_hamiltonian_energy_error = -0.32317618662671155, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9380608508380931, log_density = -2.839250841826214, hamiltonian_energy = 7.515703182156937, hamiltonian_energy_error = 0.0664770525259124, max_hamiltonian_energy_error = -0.37376815238798766, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -0.0042768759585332106, hamiltonian_energy = 3.4600393886709044, hamiltonian_energy_error = -0.20806000137381186, max_hamiltonian_energy_error = -0.45427647570577, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9986208111419912, log_density = 0.16384268855413175, hamiltonian_energy = 1.900670169167626, hamiltonian_energy_error = -0.1661891587405453, max_hamiltonian_energy_error = -0.23962412627741836, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8796744622488684, log_density = -0.9513265193716407, hamiltonian_energy = 4.514711248673842, hamiltonian_energy_error = 0.2051153094707967, max_hamiltonian_energy_error = 0.31332653482657236, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9628248994983871, log_density = -1.8187995045492116, hamiltonian_energy = 2.6255750082377665, hamiltonian_energy_error = -0.07932305476413548, max_hamiltonian_energy_error = -0.1588074623504352, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9004171813974149, log_density = -2.4730684923816373, hamiltonian_energy = 6.162972692038979, hamiltonian_energy_error = 0.08917302913514202, max_hamiltonian_energy_error = 0.24954239147440305, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8544601843186567, log_density = -1.1789655276859445, hamiltonian_energy = 5.829543220790291, hamiltonian_energy_error = -0.024492473637658385, max_hamiltonian_energy_error = 0.5154629518381117, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8656900877977262, log_density = -3.466872873625265, hamiltonian_energy = 3.8427852570223013, hamiltonian_energy_error = 0.30913556245339624, max_hamiltonian_energy_error = 0.30913556245339624, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 1.0, log_density = -1.7447500845713044, hamiltonian_energy = 4.056095010473878, hamiltonian_energy_error = -0.0537097700306397, max_hamiltonian_energy_error = -0.5460997737814788, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9114326897690291, log_density = -2.348918756118044, hamiltonian_energy = 4.4431557450592845, hamiltonian_energy_error = -0.21450396592475496, max_hamiltonian_energy_error = -0.5914528200748661, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 0.1707575817709186, hamiltonian_energy = 2.956372002179654, hamiltonian_energy_error = -0.3398464784133335, max_hamiltonian_energy_error = -0.5409982854323907, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8527326120119405, log_density = -0.8084223324007151, hamiltonian_energy = 2.95491326125757, hamiltonian_energy_error = 0.1953129572954584, max_hamiltonian_energy_error = 0.6960039319531113, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9125378741365253, log_density = 0.4033475086233267, hamiltonian_energy = 3.7493359806449025, hamiltonian_energy_error = 0.025146345492814692, max_hamiltonian_energy_error = -0.3926004843501518, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9119013202549909, log_density = 1.597738471841403, hamiltonian_energy = 1.8671107127443785, hamiltonian_energy_error = -0.13812610536190206, max_hamiltonian_energy_error = 0.32392729903661, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7472497334060392, log_density = -2.323149415992736, hamiltonian_energy = 2.7447032857555382, hamiltonian_energy_error = 0.5837602114989306, max_hamiltonian_energy_error = 0.7069280706768359, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8946525423437377, log_density = -5.2490309672208, hamiltonian_energy = 5.840121789929329, hamiltonian_energy_error = 0.3798593120632683, max_hamiltonian_energy_error = -0.7842613934767977, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9680978584622554, log_density = 0.9223925053269042, hamiltonian_energy = 5.540110304033881, hamiltonian_energy_error = -1.0148463849644696, max_hamiltonian_energy_error = -1.2568798992435095, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8740470315811214, log_density = -3.2652489579785637, hamiltonian_energy = 3.7302365647887514, hamiltonian_energy_error = 0.3439375270085483, max_hamiltonian_energy_error = 0.3439375270085483, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 0.15343387178162438, hamiltonian_energy = 3.1922510650179112, hamiltonian_energy_error = -0.289481962289746, max_hamiltonian_energy_error = -0.3203421560839903, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9005906437475953, log_density = -1.307260968433086, hamiltonian_energy = 2.093358101225378, hamiltonian_energy_error = 0.111602806790569, max_hamiltonian_energy_error = 0.1246633327093889, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8672478825365015, log_density = 0.17497597282053867, hamiltonian_energy = 3.698042913359527, hamiltonian_energy_error = 0.13017149121558536, max_hamiltonian_energy_error = 0.4684939386032574, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9315089865654408, log_density = -1.1436002964618357, hamiltonian_energy = 2.8061844580415807, hamiltonian_energy_error = 0.10812674868786853, max_hamiltonian_energy_error = 0.19926382695156963, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.988074098756891, log_density = 0.5906888927356988, hamiltonian_energy = 1.5538903063496443, hamiltonian_energy_error = -0.19103362679317004, max_hamiltonian_energy_error = -0.36672131302436894, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.975942025661311, log_density = -0.8328361454921271, hamiltonian_energy = 2.3502644146862774, hamiltonian_energy_error = 0.05642491854120468, max_hamiltonian_energy_error = -0.08302521673785845, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9231794104523819, log_density = -0.43071469111566607, hamiltonian_energy = 3.526620126848929, hamiltonian_energy_error = -0.10062539495566458, max_hamiltonian_energy_error = 0.186142611670717, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9483161277919367, log_density = -0.14293717915232484, hamiltonian_energy = 3.22568455009156, hamiltonian_energy_error = 0.05981852178958036, max_hamiltonian_energy_error = 0.1454103720302542, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9795644558061019, log_density = 0.0766633624166948, hamiltonian_energy = 2.525249336864869, hamiltonian_energy_error = -0.1306936105663059, max_hamiltonian_energy_error = -0.2320084356001395, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9854403603320276, log_density = 0.8479196098156407, hamiltonian_energy = 2.267051849458327, hamiltonian_energy_error = -0.03407000860656151, max_hamiltonian_energy_error = -0.08349228289441246, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8013505670762099, log_density = -0.4521048108176995, hamiltonian_energy = 1.6652393164388521, hamiltonian_energy_error = 0.17697242279230396, max_hamiltonian_energy_error = 0.3370317093488733, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9924024135121926, log_density = -0.08556645797013118, hamiltonian_energy = 1.4537165527586644, hamiltonian_energy_error = -0.0590494325381965, max_hamiltonian_energy_error = -0.20876351592333942, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9286541809114988, log_density = 1.5653274266877126, hamiltonian_energy = 2.116898692624058, hamiltonian_energy_error = -0.13750564745247784, max_hamiltonian_energy_error = 0.1477295964768599, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9330558541713437, log_density = 1.4266261016309745, hamiltonian_energy = 0.03389416140158774, hamiltonian_energy_error = 0.06777704033092524, max_hamiltonian_energy_error = 0.14750753611926437, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9981471548052883, log_density = 1.6475422138472453, hamiltonian_energy = 0.9889750812807483, hamiltonian_energy_error = -0.042651076336071014, max_hamiltonian_energy_error = -0.057986112589506256, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9571749428262842, log_density = 1.3355442464525282, hamiltonian_energy = -0.6791878834098597, hamiltonian_energy_error = -0.0053706290565822545, max_hamiltonian_energy_error = 0.09489009038417995, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6891883637474722, log_density = -2.140447720588474, hamiltonian_energy = 2.528320542319209, hamiltonian_energy_error = 0.5345405309473579, max_hamiltonian_energy_error = 0.5345405309473579, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9843998475958875, log_density = -1.2678653930931585, hamiltonian_energy = 4.047067646269475, hamiltonian_energy_error = -0.11850855080205935, max_hamiltonian_energy_error = -0.615050247248921, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9653503547217489, log_density = 0.41639084958606887, hamiltonian_energy = 3.6583607084200995, hamiltonian_energy_error = -0.3793273316366097, max_hamiltonian_energy_error = -0.3793273316366097, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 1.2014618979571772, hamiltonian_energy = 0.7734893138665382, hamiltonian_energy_error = -0.1552996025263078, max_hamiltonian_energy_error = -0.1774199378460768, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9459106455583025, log_density = 1.0047758425294226, hamiltonian_energy = 0.9196692096284156, hamiltonian_energy_error = 0.031241413095211668, max_hamiltonian_energy_error = 0.10656887968680084, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9621569384997534, log_density = 0.8767491983913303, hamiltonian_energy = 0.6606858730219531, hamiltonian_energy_error = 0.048792767718729424, max_hamiltonian_energy_error = 0.10296886867032884, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9841703008433856, log_density = -0.7848668336867153, hamiltonian_energy = 1.18835586484929, hamiltonian_energy_error = 0.06907208246369878, max_hamiltonian_energy_error = 0.06907208246369878, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9520430538914909, log_density = -0.43086062586918317, hamiltonian_energy = 3.172887697845576, hamiltonian_energy_error = 0.05496827207918065, max_hamiltonian_energy_error = -0.10132548657151386, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9420646769195077, log_density = -2.2896222320273623, hamiltonian_energy = 4.21383029331346, hamiltonian_energy_error = 0.11063550578909265, max_hamiltonian_energy_error = 0.2635606072875021, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 1.996521049349976, hamiltonian_energy = 2.58842226081544, hamiltonian_energy_error = -0.3097740496066743, max_hamiltonian_energy_error = -0.3097740496066743, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9034827735763499, log_density = 1.3808645360154603, hamiltonian_energy = 0.27783943140605594, hamiltonian_energy_error = 0.0662270279317072, max_hamiltonian_energy_error = 0.19710297046593206, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8539907946429923, log_density = -0.8584597034770542, hamiltonian_energy = 3.5685820343109107, hamiltonian_energy_error = 0.13252109934646583, max_hamiltonian_energy_error = 0.4314379201763239, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8935990219872904, log_density = -4.227188896704945, hamiltonian_energy = 5.331425642754252, hamiltonian_energy_error = 0.3944909424877423, max_hamiltonian_energy_error = 0.3944909424877423, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = -2.8938646190121897, hamiltonian_energy = 5.316303321011073, hamiltonian_energy_error = -0.43678848649595814, max_hamiltonian_energy_error = -0.5144485251160988, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9805288392944738, log_density = -3.6592027620451404, hamiltonian_energy = 4.684990751624472, hamiltonian_energy_error = 0.02181873565003567, max_hamiltonian_energy_error = -0.07185266685596403, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9622650942830977, log_density = -1.9654109677441163, hamiltonian_energy = 7.29857168713813, hamiltonian_energy_error = -0.16972909367934896, max_hamiltonian_energy_error = -0.20088419715748884, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9917792051659156, log_density = 0.7175292220568927, hamiltonian_energy = 3.2127347623065594, hamiltonian_energy_error = -0.15998093188058782, max_hamiltonian_energy_error = -0.25312318381030696, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9518254170220791, log_density = 0.7098196489025472, hamiltonian_energy = 1.526914501717438, hamiltonian_energy_error = -0.025322935978207894, max_hamiltonian_energy_error = 0.12826575862058354, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 1.5034815749067434, hamiltonian_energy = 0.09778765773162346, hamiltonian_energy_error = -0.049617434244545566, max_hamiltonian_energy_error = -0.0793567269171579, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9801226101325692, log_density = 1.475574114009964, hamiltonian_energy = -0.6062171120574005, hamiltonian_energy_error = -0.002955181665547868, max_hamiltonian_energy_error = 0.0687491069044418, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9545105540391371, log_density = 0.10512998065599177, hamiltonian_energy = 3.484980044055973, hamiltonian_energy_error = -0.0391517379425923, max_hamiltonian_energy_error = 0.14326816559350197, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8602165842975072, log_density = 0.02068095473630649, hamiltonian_energy = 5.278175393523613, hamiltonian_energy_error = -0.18890229033916572, max_hamiltonian_energy_error = 0.3107393546169366, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.974112512704739, log_density = -0.10235873331029843, hamiltonian_energy = 1.7888536584198287, hamiltonian_energy_error = -0.028647535371638, max_hamiltonian_energy_error = 0.09112959049226799, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9296703406609605, log_density = 1.7450366749614634, hamiltonian_energy = 1.0440876393498777, hamiltonian_energy_error = -0.00875962692394272, max_hamiltonian_energy_error = 0.1711650306804, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8417689178139183, log_density = 1.2651041221111043, hamiltonian_energy = -0.062189392444445435, hamiltonian_energy_error = 0.12944358994102467, max_hamiltonian_energy_error = 0.25571075174152513, tree_depth = 1, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9981799867517019, log_density = 1.4297322398902814, hamiltonian_energy = -0.5400552205124918, hamiltonian_energy_error = -0.09120142730077418, max_hamiltonian_energy_error = -0.12753165602657268, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9152076426462391, log_density = 0.3730518245686305, hamiltonian_energy = 2.879715111462027, hamiltonian_energy_error = 0.09169869393715757, max_hamiltonian_energy_error = 0.1810453122736071, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.31916638700217526, hamiltonian_energy = 0.5094016833863712, hamiltonian_energy_error = -0.013667176157175054, max_hamiltonian_energy_error = -0.06296112959737354, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7789063599900566, log_density = -0.19431072995986032, hamiltonian_energy = 5.0236435627838505, hamiltonian_energy_error = 0.19875729346511584, max_hamiltonian_energy_error = 0.4740069948158583, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9075455962558071, log_density = -1.6543267160627142, hamiltonian_energy = 3.098543347510438, hamiltonian_energy_error = 0.1423981903836169, max_hamiltonian_energy_error = 0.21403452268311973, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.4695272325269819, hamiltonian_energy = 2.518534642057136, hamiltonian_energy_error = -0.1385806550787434, max_hamiltonian_energy_error = -0.2610957558081104, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9755490446262355, log_density = -0.020560526997867257, hamiltonian_energy = 1.6149645134848054, hamiltonian_energy_error = -0.020701983738679264, max_hamiltonian_energy_error = 0.09358809846978966, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9780341337269484, log_density = 1.8998148681319922, hamiltonian_energy = 2.9262526199882553, hamiltonian_energy_error = -0.07900430092096755, max_hamiltonian_energy_error = -0.14997400975656028, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.948629730631498, log_density = -0.39411304369440714, hamiltonian_energy = 3.137139826955654, hamiltonian_energy_error = 0.03115166093055466, max_hamiltonian_energy_error = 0.1452092757030119, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9505397347106465, log_density = -0.5370365829267456, hamiltonian_energy = 2.154206584536442, hamiltonian_energy_error = 0.17747093438301653, max_hamiltonian_energy_error = 0.17747093438301653, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9838976797607305, log_density = -1.3367118280514454, hamiltonian_energy = 2.529652556293474, hamiltonian_energy_error = 0.05166413364756339, max_hamiltonian_energy_error = -0.26235465070730823, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9825868645559869, log_density = -0.9130123502785104, hamiltonian_energy = 3.4728158128317643, hamiltonian_energy_error = -0.09044964289715018, max_hamiltonian_energy_error = -0.13666221734385608, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9552130906602422, log_density = -0.7683804653504076, hamiltonian_energy = 4.176810585905404, hamiltonian_energy_error = 0.04386136151169673, max_hamiltonian_energy_error = -0.10929892786509221, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6757347321472906, log_density = -4.459776361920333, hamiltonian_energy = 6.979769250851612, hamiltonian_energy_error = 0.6033043755388592, max_hamiltonian_energy_error = 1.076244960309504, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -3.017242102209657, hamiltonian_energy = 8.01630824527598, hamiltonian_energy_error = -0.7957728045296424, max_hamiltonian_energy_error = -0.9243838501087076, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9948152882614213, log_density = 0.39791818523246647, hamiltonian_energy = 4.130028577709854, hamiltonian_energy_error = -0.3410919401104664, max_hamiltonian_energy_error = -0.3410919401104664, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9824107364344127, log_density = 0.6660417423452998, hamiltonian_energy = 2.935972238619188, hamiltonian_energy_error = -0.08254758709438947, max_hamiltonian_energy_error = -0.1636971221526502, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.97445035163292, log_density = 0.4237837686852508, hamiltonian_energy = 1.0578890389481763, hamiltonian_energy_error = 0.03283087375579852, max_hamiltonian_energy_error = 0.10331736387003154, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9712172189799212, log_density = 0.9203060899693956, hamiltonian_energy = 1.4771395274444625, hamiltonian_energy_error = -0.030050493171113413, max_hamiltonian_energy_error = -0.15134131684875918, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.898071714846832, log_density = -0.9144824361422561, hamiltonian_energy = 2.556921446286898, hamiltonian_energy_error = 0.1524492453236519, max_hamiltonian_energy_error = 0.2398440623967062, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9168257537557911, log_density = -1.7159289037854446, hamiltonian_energy = 3.4793412952243346, hamiltonian_energy_error = 0.3125804643722221, max_hamiltonian_energy_error = 0.3125804643722221, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9928735284749532, log_density = -4.872460834302384, hamiltonian_energy = 6.631456053413294, hamiltonian_energy_error = 0.023516041967925894, max_hamiltonian_energy_error = -0.6153436269742674, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9874036203444557, log_density = 0.47553740124293675, hamiltonian_energy = 5.940397237933625, hamiltonian_energy_error = -0.37442898632816757, max_hamiltonian_energy_error = -0.5861170414838996, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9022929730272945, log_density = -3.0782746022449388, hamiltonian_energy = 4.37490794041367, hamiltonian_energy_error = 0.2301757441047716, max_hamiltonian_energy_error = 0.27534641865971654, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9921994556247474, log_density = -2.231883729484924, hamiltonian_energy = 5.320527503989023, hamiltonian_energy_error = -0.13545277486268414, max_hamiltonian_energy_error = -0.2637242986771273, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9694436448992182, log_density = -1.5400448745770206, hamiltonian_energy = 4.5091719117521505, hamiltonian_energy_error = 0.06902187688889772, max_hamiltonian_energy_error = -0.12500756629806098, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9733161483384413, log_density = -0.009221025559717155, hamiltonian_energy = 4.906350586084285, hamiltonian_energy_error = -0.11287046742663787, max_hamiltonian_energy_error = -0.19553709338790437, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8928713525176277, log_density = 0.7145597685380096, hamiltonian_energy = 2.1566535121423573, hamiltonian_energy_error = -0.04307738083640045, max_hamiltonian_energy_error = 0.381963576870735, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9251383925676779, log_density = -1.491652253278052, hamiltonian_energy = 4.105282614883459, hamiltonian_energy_error = 0.11001092139431101, max_hamiltonian_energy_error = 0.15174570657374442, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9952465056873152, log_density = -0.815457231800857, hamiltonian_energy = 3.0506579041752873, hamiltonian_energy_error = -0.00717152534740384, max_hamiltonian_energy_error = -0.1061569900311774, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 1.522662940464599, hamiltonian_energy = 1.7123131230956465, hamiltonian_energy_error = -0.08532208746137293, max_hamiltonian_energy_error = -0.08532208746137293, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9289846586721529, log_density = -0.18656864422750097, hamiltonian_energy = 2.856312338589847, hamiltonian_energy_error = 0.07322164287404753, max_hamiltonian_energy_error = 0.17738113766120112, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9989904798792238, log_density = 0.6665278201593701, hamiltonian_energy = 0.8588414284528545, hamiltonian_energy_error = -0.0542532179227071, max_hamiltonian_energy_error = -0.08638909437005049, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8825172724082293, log_density = -1.5324526548376767, hamiltonian_energy = 3.840798026401513, hamiltonian_energy_error = 0.127452738848286, max_hamiltonian_energy_error = 0.31061424080683864, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9803574535661107, log_density = -1.0244556810824115, hamiltonian_energy = 2.1238226015913337, hamiltonian_energy_error = -0.11785177202847441, max_hamiltonian_energy_error = -0.11785177202847441, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8349201959758397, log_density = -0.35616235537698415, hamiltonian_energy = 4.039590229650528, hamiltonian_energy_error = 0.26013194776091986, max_hamiltonian_energy_error = 0.34597576735577906, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9659264007314778, log_density = 0.13651925876419213, hamiltonian_energy = 2.6996091604788015, hamiltonian_energy_error = -0.2653618580363015, max_hamiltonian_energy_error = -0.40159889796441783, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8084700270052719, log_density = -1.0722160281715052, hamiltonian_energy = 1.8141046593510581, hamiltonian_energy_error = 0.19978493641240513, max_hamiltonian_energy_error = 0.25416748871113737, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.41265054675789303, log_density = -2.589540225116476, hamiltonian_energy = 6.41483539311243, hamiltonian_energy_error = 0.6262364537938687, max_hamiltonian_energy_error = 1.7128236477901053, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9865220438338506, log_density = -3.7778275214631982, hamiltonian_energy = 5.1071401881681195, hamiltonian_energy_error = 0.13001909457213845, max_hamiltonian_energy_error = -0.36770256651242583, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9981819216131902, log_density = 0.20249476911832076, hamiltonian_energy = 5.690746413005975, hamiltonian_energy_error = -0.2647177764753934, max_hamiltonian_energy_error = -0.33910542248020903, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9774646301955843, log_density = -1.1456951364333907, hamiltonian_energy = 1.548027494723025, hamiltonian_energy_error = 0.09905028010628558, max_hamiltonian_energy_error = -0.1686831260822974, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9812076162964328, log_density = -3.163614025939122, hamiltonian_energy = 5.9564728791681825, hamiltonian_energy_error = -0.06751894227521049, max_hamiltonian_energy_error = -0.2780036917229687, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.928852307473395, log_density = -2.5375428191877347, hamiltonian_energy = 8.083248685851792, hamiltonian_energy_error = -0.02762246616829067, max_hamiltonian_energy_error = 0.2537270376100462, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9877732492211647, log_density = -0.9665968400450424, hamiltonian_energy = 3.4510064039425616, hamiltonian_energy_error = -0.10663212562572744, max_hamiltonian_energy_error = -0.14265144562876975, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8408595077693111, log_density = -0.2834938902706199, hamiltonian_energy = 3.1799144304478566, hamiltonian_energy_error = 0.23414026810125588, max_hamiltonian_energy_error = 0.27654442935654044, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.99465528842009, log_density = 0.3958547348663508, hamiltonian_energy = 1.8439765740860294, hamiltonian_energy_error = -0.07119193050016004, max_hamiltonian_energy_error = -0.2595534031759106, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9126828669781195, log_density = 0.5087629835692891, hamiltonian_energy = 2.0388904129861585, hamiltonian_energy_error = -0.16671774107195958, max_hamiltonian_energy_error = 0.22367001094431727, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9456565227725526, log_density = 0.779909056361296, hamiltonian_energy = 1.72997612825867, hamiltonian_energy_error = 0.014182964285613497, max_hamiltonian_energy_error = 0.11918240378670375, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9539349320615482, log_density = 0.6335779714984735, hamiltonian_energy = 0.20654063740918316, hamiltonian_energy_error = 0.016538440952259537, max_hamiltonian_energy_error = 0.08624466082669624, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9248882769935197, log_density = 0.9089776282871966, hamiltonian_energy = 0.7777326796489326, hamiltonian_energy_error = 0.016494129645079347, max_hamiltonian_energy_error = 0.16854102174780783, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7513867290183526, log_density = 0.0064107033703599825, hamiltonian_energy = 4.758323060323825, hamiltonian_energy_error = -0.036939912729998525, max_hamiltonian_energy_error = 0.6457181710783093, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9617598423002865, log_density = -0.8070009694390627, hamiltonian_energy = 2.277014494635599, hamiltonian_energy_error = 0.08151566356301032, max_hamiltonian_energy_error = 0.09182521534437749, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9887243820182798, log_density = -1.1162307478590066, hamiltonian_energy = 2.622531167694177, hamiltonian_energy_error = -0.055034769233270886, max_hamiltonian_energy_error = -0.1271665536111497, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9741397512304028, log_density = -3.270967877271758, hamiltonian_energy = 3.879105098089695, hamiltonian_energy_error = 0.10864674482810521, max_hamiltonian_energy_error = 0.10864674482810521, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9224970853466784, log_density = 0.7133706964244055, hamiltonian_energy = 4.626536450571768, hamiltonian_energy_error = -0.2506835915885741, max_hamiltonian_energy_error = 0.26477910940657967, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8926598828155049, log_density = 1.175452876911251, hamiltonian_energy = 1.7376815070760645, hamiltonian_energy_error = 0.03654740434996029, max_hamiltonian_energy_error = 0.24208427281135525, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9249226754748584, log_density = 1.666431225681686, hamiltonian_energy = 2.570356919820072, hamiltonian_energy_error = -0.10754749119865847, max_hamiltonian_energy_error = 0.2571823324492555, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8856987959054636, log_density = -1.5600758072736802, hamiltonian_energy = 3.449388132072499, hamiltonian_energy_error = 0.08359662370704912, max_hamiltonian_energy_error = 0.31092030557119443, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.856983661610662, log_density = -0.05226725759924733, hamiltonian_energy = 6.8001330927157095, hamiltonian_energy_error = -0.028346376134044782, max_hamiltonian_energy_error = 0.3087260768757467, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9704812980617591, log_density = 0.7175100512195005, hamiltonian_energy = 1.2849876149689625, hamiltonian_energy_error = -0.06814202896739929, max_hamiltonian_energy_error = -0.15752855409345146, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 1.0, log_density = 1.2917841031235113, hamiltonian_energy = 0.3374958890968862, hamiltonian_energy_error = -0.05200908185382591, max_hamiltonian_energy_error = -0.11112923744698033, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8429104234442184, log_density = -0.18331682844852182, hamiltonian_energy = 0.9467001886158879, hamiltonian_energy_error = 0.2626902420620596, max_hamiltonian_energy_error = 0.33329646954104275, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9528464382236331, log_density = 0.7613106881201368, hamiltonian_energy = 3.517529792554461, hamiltonian_energy_error = -0.36450325188807886, max_hamiltonian_energy_error = -0.36450325188807886, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9545332170843129, log_density = 1.5796495194232207, hamiltonian_energy = 0.6508605039920266, hamiltonian_energy_error = -0.06668814966809244, max_hamiltonian_energy_error = 0.1010040787630162, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9321749617246008, log_density = 0.24009035666301415, hamiltonian_energy = 0.3908071083400205, hamiltonian_energy_error = 0.13795965076112615, max_hamiltonian_energy_error = 0.14834786150272167, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9116102670230618, log_density = -2.8046958297129763, hamiltonian_energy = 4.816556098703172, hamiltonian_energy_error = 0.1373210760964314, max_hamiltonian_energy_error = 0.24194709310219764, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9313976288731788, log_density = 0.15317710026425146, hamiltonian_energy = 7.499977860926041, hamiltonian_energy_error = -0.24336894436151546, max_hamiltonian_energy_error = 0.24747217442443592, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.978544969565979, log_density = 0.940411824680556, hamiltonian_energy = 0.7927176211024856, hamiltonian_energy_error = 0.004223799504128989, max_hamiltonian_energy_error = 0.09809552165289681, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9553328118114041, log_density = 0.09356898068648434, hamiltonian_energy = 1.5507864399371811, hamiltonian_energy_error = 0.10298154303077989, max_hamiltonian_energy_error = 0.11944514165441111, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9855985695591497, log_density = 0.11720174441795983, hamiltonian_energy = 2.039146395338241, hamiltonian_energy_error = -0.00536754402580053, max_hamiltonian_energy_error = -0.174131068532966, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7596418716730241, log_density = -0.992034140872363, hamiltonian_energy = 3.309846887770462, hamiltonian_energy_error = 0.40910994981830395, max_hamiltonian_energy_error = 0.7018128925647278, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9798852703478886, log_density = 1.144769967288223, hamiltonian_energy = 2.576105713633079, hamiltonian_energy_error = -0.45551043614761255, max_hamiltonian_energy_error = -0.45551043614761255, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9555324304155784, log_density = -0.11320957500546669, hamiltonian_energy = 0.8376907154526577, hamiltonian_energy_error = 0.08242546147031626, max_hamiltonian_energy_error = 0.12659909749029818, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9969556249657778, log_density = 0.7406275027643439, hamiltonian_energy = 1.7888780914746087, hamiltonian_energy_error = -0.12948713465307837, max_hamiltonian_energy_error = -0.12948713465307837, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8736689986757457, log_density = -0.29250189534928595, hamiltonian_energy = 2.3228244503697213, hamiltonian_energy_error = 0.19225221256889524, max_hamiltonian_energy_error = 0.19225221256889524, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9752580952730694, log_density = 1.5013640758508195, hamiltonian_energy = 1.4126959883895154, hamiltonian_energy_error = -0.22737002225069203, max_hamiltonian_energy_error = -0.22737002225069203, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8433124647650729, log_density = 0.7765125141842848, hamiltonian_energy = 0.9840606970514183, hamiltonian_energy_error = 0.0532613478256434, max_hamiltonian_energy_error = 0.30823685140483414, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8652707265352454, log_density = 1.1533021116002793, hamiltonian_energy = 1.7637409313459438, hamiltonian_energy_error = 0.03858104491778347, max_hamiltonian_energy_error = 0.31608172843260407, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9427317186828524, log_density = 0.9628517433607815, hamiltonian_energy = 0.2470676834116854, hamiltonian_energy_error = -0.0007868524314913472, max_hamiltonian_energy_error = 0.1269868193455878, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9240093183544617, log_density = 1.8494361669163446, hamiltonian_energy = 0.809696793480958, hamiltonian_energy_error = -0.06497169070277331, max_hamiltonian_energy_error = 0.21064539368946766, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9172377121529797, log_density = 0.010125195875859916, hamiltonian_energy = 1.9788973416367308, hamiltonian_energy_error = 0.017115511501051284, max_hamiltonian_energy_error = 0.15567816032184068, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9992095080157644, log_density = 0.6265044029268729, hamiltonian_energy = 0.6748700285007136, hamiltonian_energy_error = -0.037593529102119105, max_hamiltonian_energy_error = -0.09808146033803478, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9743735957145934, log_density = -0.05539334843345145, hamiltonian_energy = 0.33936794668981507, hamiltonian_energy_error = 0.062103507466507835, max_hamiltonian_energy_error = -0.0866332338155984, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8172701595003778, log_density = 0.12706108071842248, hamiltonian_energy = 2.4747776147793523, hamiltonian_energy_error = 0.1840496471421904, max_hamiltonian_energy_error = 0.3094697137794551, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.959414892802333, log_density = 0.7556555861212537, hamiltonian_energy = 3.338160825301701, hamiltonian_energy_error = 0.04696650470844066, max_hamiltonian_energy_error = 0.27209105441332904, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9821957820046224, log_density = 0.8404721409691867, hamiltonian_energy = 0.9548895697871973, hamiltonian_energy_error = -0.08382175812694403, max_hamiltonian_energy_error = -0.1647220813529442, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.954760193415886, log_density = -0.008622775001585481, hamiltonian_energy = 1.0249188183212659, hamiltonian_energy_error = 0.017315727291942418, max_hamiltonian_energy_error = 0.13215497105977536, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9710220515301238, log_density = 0.2799461149725637, hamiltonian_energy = 1.1089482226006069, hamiltonian_energy_error = 0.032808254067431264, max_hamiltonian_energy_error = 0.07983966199097403, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9446860050319219, log_density = 0.5090562113463459, hamiltonian_energy = 1.9715130549761604, hamiltonian_energy_error = 0.09198911817125, max_hamiltonian_energy_error = 0.15713420297922598, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9361988360431133, log_density = 0.24323461304692628, hamiltonian_energy = 2.001739872357615, hamiltonian_energy_error = 0.03287427269635357, max_hamiltonian_energy_error = -0.23649461861705445, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 1.4637533053780967, hamiltonian_energy = -0.12085485659556006, hamiltonian_energy_error = -0.19364095537936815, max_hamiltonian_energy_error = -0.22612100709373234, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8487256011925302, log_density = 0.2396128458237481, hamiltonian_energy = 1.9312620609384141, hamiltonian_energy_error = 0.27065513829105603, max_hamiltonian_energy_error = 0.3747245710661429, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9342928017760825, log_density = -0.8712324022119908, hamiltonian_energy = 4.677630976184911, hamiltonian_energy_error = -0.17497101267125004, max_hamiltonian_energy_error = 0.37582044880221144, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9958781497334649, log_density = -1.3543613008824948, hamiltonian_energy = 2.114293502255426, hamiltonian_energy_error = 0.029277382265579188, max_hamiltonian_energy_error = -0.07838157633129317, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9770331465756021, log_density = -3.698951853285253, hamiltonian_energy = 4.549796288487806, hamiltonian_energy_error = 0.023231878365591818, max_hamiltonian_energy_error = -0.0668927420866332, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9891693182778777, log_density = -0.14819913172278198, hamiltonian_energy = 4.768086952579529, hamiltonian_energy_error = -0.04144506117213709, max_hamiltonian_energy_error = -0.1290612366217685, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9926197129802163, log_density = 1.9248949807697109, hamiltonian_energy = 0.6126928754782273, hamiltonian_energy_error = -0.11438957757820511, max_hamiltonian_energy_error = -0.11438957757820511, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7966584544688793, log_density = 0.004559411014858128, hamiltonian_energy = 2.418601490344596, hamiltonian_energy_error = 0.08383101538101734, max_hamiltonian_energy_error = 0.5989175377003129, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9990150409908694, log_density = 0.5698726250965045, hamiltonian_energy = 0.3844077255553696, hamiltonian_energy_error = -0.07939293575339551, max_hamiltonian_energy_error = -0.2208446916008931, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 0.5151343131288542, hamiltonian_energy = -0.017851797178540463, hamiltonian_energy_error = -0.043580428504449875, max_hamiltonian_energy_error = -0.17211673318762355, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9978923175380733, log_density = 0.5323480378907082, hamiltonian_energy = 0.9704012635499326, hamiltonian_energy_error = -0.0662936602873978, max_hamiltonian_energy_error = -0.14065478551999178, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7679893049226195, log_density = 0.2499281539229692, hamiltonian_energy = 2.349147743664976, hamiltonian_energy_error = 0.13485053066278718, max_hamiltonian_energy_error = 0.4277335391886772, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7458138090968246, log_density = -2.086430523865751, hamiltonian_energy = 4.052971056320867, hamiltonian_energy_error = 0.26423449470797244, max_hamiltonian_energy_error = 0.3339554781946008, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9910181629376218, log_density = -1.1449385232539555, hamiltonian_energy = 5.602461813846921, hamiltonian_energy_error = 0.007433831225260867, max_hamiltonian_energy_error = -0.25389664928528344, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8369424233470163, log_density = 0.36622130761695715, hamiltonian_energy = 3.491803720522126, hamiltonian_energy_error = -0.13161075375268716, max_hamiltonian_energy_error = 0.6633961482116395, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9255992371033744, log_density = -0.8777163342110548, hamiltonian_energy = 1.514366133794503, hamiltonian_energy_error = 0.15207760294200656, max_hamiltonian_energy_error = 0.15207760294200656, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8609748864807022, log_density = -1.4484824060405685, hamiltonian_energy = 4.113382091254985, hamiltonian_energy_error = 0.1686114881398142, max_hamiltonian_energy_error = 0.42560761555738047, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9794812711668869, log_density = 0.7945131779438963, hamiltonian_energy = 2.816793571360226, hamiltonian_energy_error = -0.22033436879478385, max_hamiltonian_energy_error = -0.2696096789830529, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7541403942296111, log_density = 0.35404877061960427, hamiltonian_energy = 4.980311032032427, hamiltonian_energy_error = -0.018773768145008418, max_hamiltonian_energy_error = 0.5759955269864161, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8433660578623238, log_density = -0.04529224447967195, hamiltonian_energy = 3.2574196137343425, hamiltonian_energy_error = 0.06694645955020428, max_hamiltonian_energy_error = 0.3339905333038815, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9348118907088098, log_density = -0.25969931153273507, hamiltonian_energy = 1.6746829153414298, hamiltonian_energy_error = 0.1050288198662479, max_hamiltonian_energy_error = 0.16502439244635525, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9562471641104633, log_density = 1.1459443890397871, hamiltonian_energy = 3.088404787860079, hamiltonian_energy_error = -0.04485324380865219, max_hamiltonian_energy_error = 0.19492970315040958, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9749141856060195, log_density = 0.1819275705891794, hamiltonian_energy = 0.8245846268335071, hamiltonian_energy_error = 0.11210754170894766, max_hamiltonian_energy_error = 0.11210754170894766, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9900859856474413, log_density = -0.8864386785431648, hamiltonian_energy = 2.589019857462312, hamiltonian_energy_error = -0.09386160717620529, max_hamiltonian_energy_error = -0.20854361537264143, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.985606238502844, log_density = 0.3747551383526151, hamiltonian_energy = 2.893549572907018, hamiltonian_energy_error = 0.001799792956417967, max_hamiltonian_energy_error = -0.11373485570162378, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9894240378485268, log_density = -0.29005165891344653, hamiltonian_energy = 0.9428089661360541, hamiltonian_energy_error = 0.049550211326787164, max_hamiltonian_energy_error = -0.09376493467282909, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9095230300495253, log_density = -3.0701471237536175, hamiltonian_energy = 5.00814888756571, hamiltonian_energy_error = 0.003805914554499523, max_hamiltonian_energy_error = 0.22492596877997872, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8650438160794461, log_density = -2.6296453510442, hamiltonian_energy = 10.226850099066152, hamiltonian_energy_error = 0.028835377239072812, max_hamiltonian_energy_error = 0.33855379571386734, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9928651762647417, log_density = -2.0681763909418844, hamiltonian_energy = 3.517858385841735, hamiltonian_energy_error = 0.06476515413523964, max_hamiltonian_energy_error = -0.2663125815607761, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9536508543285594, log_density = -0.48369430482237163, hamiltonian_energy = 7.0807167747168025, hamiltonian_energy_error = -0.2458725557470407, max_hamiltonian_energy_error = -0.2458725557470407, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9958882873589137, log_density = 0.17959301364645164, hamiltonian_energy = 1.4088096292957182, hamiltonian_energy_error = 0.004047857980303382, max_hamiltonian_energy_error = -0.10016133035708563, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9889786150997404, log_density = 0.610534675660487, hamiltonian_energy = 1.3474983561747678, hamiltonian_energy_error = -0.09044148192157131, max_hamiltonian_energy_error = -0.1114934229281408, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.5520184443193196, log_density = -5.224949539349499, hamiltonian_energy = 5.396320621861542, hamiltonian_energy_error = 0.6292867877210426, max_hamiltonian_energy_error = 0.6292867877210426, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9857428118710935, log_density = -0.16594485779133095, hamiltonian_energy = 7.988056325834276, hamiltonian_energy_error = -0.4346588021201745, max_hamiltonian_energy_error = -0.4431795453950622, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9943154007019855, log_density = 0.37393145244268133, hamiltonian_energy = 1.2991563605258118, hamiltonian_energy_error = -0.042677768458147414, max_hamiltonian_energy_error = -0.20618117424715554, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9580443091575239, log_density = -1.0117535307080985, hamiltonian_energy = 2.9042019431312656, hamiltonian_energy_error = 0.0442798137065048, max_hamiltonian_energy_error = -0.19984569543334363, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9739602780053774, log_density = 0.8935325420345954, hamiltonian_energy = 1.726859845892843, hamiltonian_energy_error = -0.17401602672357663, max_hamiltonian_energy_error = -0.17401602672357663, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.7728979657257042, hamiltonian_energy = -0.2009491569163474, hamiltonian_energy_error = -0.021911139797476498, max_hamiltonian_energy_error = -0.05336096824862924, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9757301434775665, log_density = -0.5016271053702255, hamiltonian_energy = 0.766971161750335, hamiltonian_energy_error = 0.06485959460104218, max_hamiltonian_energy_error = 0.06485959460104218, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9116561328858305, log_density = -0.6959029211613021, hamiltonian_energy = 4.3326417730347595, hamiltonian_energy_error = -0.05424887789463728, max_hamiltonian_energy_error = 0.2957486095570392, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9620519111104988, log_density = 0.5430425211008121, hamiltonian_energy = 3.9170768956786652, hamiltonian_energy_error = -0.13962228500315987, max_hamiltonian_energy_error = -0.2322584235241365, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7549764564453911, log_density = -2.4997797017343917, hamiltonian_energy = 5.003964000191697, hamiltonian_energy_error = 0.3353356254952855, max_hamiltonian_energy_error = 0.8636860098054884, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 0.9373131724411508, hamiltonian_energy = 3.4343629398772553, hamiltonian_energy_error = -0.27141967361251496, max_hamiltonian_energy_error = -0.5130023008736568, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9953800409690042, log_density = 1.3253697218156635, hamiltonian_energy = 0.3288792985691036, hamiltonian_energy_error = -0.16798864035494132, max_hamiltonian_energy_error = -0.1775120651911002, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9583969026771023, log_density = 0.2233132331705523, hamiltonian_energy = 3.1704797327024825, hamiltonian_energy_error = -0.1734244484673293, max_hamiltonian_energy_error = 0.217896080819028, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6823396013571712, log_density = -3.05034047834814, hamiltonian_energy = 6.017779877175677, hamiltonian_energy_error = 0.28263085000017174, max_hamiltonian_energy_error = 0.45308896644637553, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9349758314371744, log_density = 0.5478316470289961, hamiltonian_energy = 5.108417595405901, hamiltonian_energy_error = -0.16645284063539734, max_hamiltonian_energy_error = -0.3169572538542331, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9981390415487029, log_density = 0.08619408435030707, hamiltonian_energy = 1.099238786075892, hamiltonian_energy_error = -0.036133013449211715, max_hamiltonian_energy_error = -0.1310124774151269, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9933659861945894, log_density = -1.44137622185481, hamiltonian_energy = 1.8231218964563767, hamiltonian_energy_error = 0.09563904946437152, max_hamiltonian_energy_error = -0.09834876854865704, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = -2.7144568838099836, hamiltonian_energy = 3.8984631160283154, hamiltonian_energy_error = -0.051127291779193396, max_hamiltonian_energy_error = -0.19711427520935976, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9760126763954297, log_density = 1.0766007081737392, hamiltonian_energy = 4.682343760875306, hamiltonian_energy_error = -0.11600719938722737, max_hamiltonian_energy_error = -0.12065522168368226, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9393391883974128, log_density = 1.1686185515761025, hamiltonian_energy = 0.7758370424422778, hamiltonian_energy_error = 0.01987557329893974, max_hamiltonian_energy_error = 0.19235585688978885, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9799433953541639, log_density = 1.109469761131292, hamiltonian_energy = -0.2213074513977662, hamiltonian_energy_error = 0.02236031310250819, max_hamiltonian_energy_error = -0.1139113116099032, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.9901068370833461, log_density = 1.6263567308436855, hamiltonian_energy = -0.4862157979072681, hamiltonian_energy_error = -0.08581009082091262, max_hamiltonian_energy_error = -0.13509097467023035, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9569023732891042, log_density = 2.0237379825964243, hamiltonian_energy = -0.6729847231813031, hamiltonian_energy_error = -0.044500222035681825, max_hamiltonian_energy_error = 0.11646086912478282, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.936913478234265, log_density = 0.5348099085959284, hamiltonian_energy = -0.029056855798125003, hamiltonian_energy_error = 0.05145649726073054, max_hamiltonian_energy_error = 0.1266897454698468, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.884928764424771, log_density = -0.7320743959667695, hamiltonian_energy = 2.5772019918859175, hamiltonian_energy_error = 0.18991258352945772, max_hamiltonian_energy_error = 0.2584893283583627, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8196343902358714, log_density = -1.4245119937106718, hamiltonian_energy = 3.5141386259211185, hamiltonian_energy_error = 0.3254701172380039, max_hamiltonian_energy_error = 0.5029052876298232, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.95935602452898, log_density = 0.3831708181237712, hamiltonian_energy = 3.1754354312442614, hamiltonian_energy_error = -0.15694222355693688, max_hamiltonian_energy_error = 0.24923972995801247, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.7320040934796512, log_density = -2.2488794688658977, hamiltonian_energy = 6.34138883092024, hamiltonian_energy_error = 0.47673868872326164, max_hamiltonian_energy_error = 0.8025099171589938, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9934361595439775, log_density = -1.0269734673711461, hamiltonian_energy = 3.120813971699822, hamiltonian_energy_error = -0.10533727359357403, max_hamiltonian_energy_error = -0.658990994821222, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -0.013014057929346734, hamiltonian_energy = 2.5610349413990936, hamiltonian_energy_error = -0.27441591305256186, max_hamiltonian_energy_error = -0.27441591305256186, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9993802743991215, log_density = 0.8953371209330765, hamiltonian_energy = 2.2656675860041036, hamiltonian_energy_error = -0.14548298227359036, max_hamiltonian_energy_error = -0.2335261433847977, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.905501926361863, log_density = -0.38841332391048233, hamiltonian_energy = 2.6608360682956897, hamiltonian_energy_error = 0.0033974000634433565, max_hamiltonian_energy_error = 0.29178686409375265, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.3495490584606351, hamiltonian_energy = 0.7479778531736665, hamiltonian_energy_error = -0.05284723816971115, max_hamiltonian_energy_error = -0.08162318631161458, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9629306851066328, log_density = 0.7391548395770631, hamiltonian_energy = 0.9499175715112367, hamiltonian_energy_error = 0.009545584021303455, max_hamiltonian_energy_error = 0.0938521870586877, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9931002297464611, log_density = 0.4760414305621321, hamiltonian_energy = 1.4977951110339995, hamiltonian_energy_error = -0.010662511886886383, max_hamiltonian_energy_error = -0.04138435478463487, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9292853566424374, log_density = -0.2186432495417634, hamiltonian_energy = 2.566139461612867, hamiltonian_energy_error = -0.021117030601983888, max_hamiltonian_energy_error = 0.16782687041621536, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9412787102086873, log_density = -0.5036958075160278, hamiltonian_energy = 2.4897454367283034, hamiltonian_energy_error = 0.05752759963035459, max_hamiltonian_energy_error = 0.15900275186753277, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9348157469408522, log_density = 0.16073617771938586, hamiltonian_energy = 3.650100719192117, hamiltonian_energy_error = 0.08208493455003829, max_hamiltonian_energy_error = 0.20790620031525364, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9933210020639607, log_density = -0.5825282414517652, hamiltonian_energy = 2.2356467318674156, hamiltonian_energy_error = 0.008012214605248147, max_hamiltonian_energy_error = -0.15314446193780373, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8933305935657546, log_density = -0.6188381679267216, hamiltonian_energy = 2.7357896198200082, hamiltonian_energy_error = -0.1548185917045508, max_hamiltonian_energy_error = 0.3856745680949416, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.988983149531732, log_density = 1.7074846489657354, hamiltonian_energy = 0.8149950554044483, hamiltonian_energy_error = -0.13277556283063552, max_hamiltonian_energy_error = -0.13277556283063552, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9720131740850799, log_density = 0.9210845586059246, hamiltonian_energy = 0.04179964071158937, hamiltonian_energy_error = 0.033572503977797985, max_hamiltonian_energy_error = 0.0774903622050386, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.996278376592019, log_density = 1.8735523966048113, hamiltonian_energy = 0.14112014440565845, hamiltonian_energy_error = -0.035669903643846146, max_hamiltonian_energy_error = -0.059805573132092116, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9266645784363571, log_density = 1.2601555770833066, hamiltonian_energy = 0.37544468715875134, hamiltonian_energy_error = 0.10652230799549733, max_hamiltonian_energy_error = 0.12450720076689459, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.837863828988512, log_density = -1.2596914890163458, hamiltonian_energy = 2.958900914590081, hamiltonian_energy_error = 0.22433391624048493, max_hamiltonian_energy_error = 0.3396399194194535, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9606746400526166, log_density = -2.600043654690868, hamiltonian_energy = 4.826446162380655, hamiltonian_energy_error = 0.098966727749354, max_hamiltonian_energy_error = -0.30577655269450776, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9396280898516246, log_density = 0.0026974501997951705, hamiltonian_energy = 7.646139368723902, hamiltonian_energy_error = -0.21301832293268586, max_hamiltonian_energy_error = 0.24359808566130425, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9679824760143695, log_density = 1.3422352361168812, hamiltonian_energy = 3.0922832145044916, hamiltonian_energy_error = -0.11792094323914482, max_hamiltonian_energy_error = 0.17695911711775114, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8664692472696358, log_density = 0.9398416348619332, hamiltonian_energy = 1.6720900515867454, hamiltonian_energy_error = 0.015797350475126315, max_hamiltonian_energy_error = 0.4001670106732407, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9232200762091582, log_density = 0.5525612898878158, hamiltonian_energy = 1.2706925276557022, hamiltonian_energy_error = 0.10778354302700288, max_hamiltonian_energy_error = 0.24228071260810347, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9969052571238562, log_density = 0.37147585746448897, hamiltonian_energy = 1.1719247339357435, hamiltonian_energy_error = -0.0997494994326702, max_hamiltonian_energy_error = -0.1806404015247225, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9993608270037099, log_density = 1.9545799595839188, hamiltonian_energy = 0.10329912128953023, hamiltonian_energy_error = -0.05954381263607367, max_hamiltonian_energy_error = -0.05954381263607367, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9737227640807973, log_density = 1.9280459793873987, hamiltonian_energy = -0.8002948846257758, hamiltonian_energy_error = -0.015263915860203925, max_hamiltonian_energy_error = 0.07127031607685363, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9695252531748972, log_density = 1.2778278393960534, hamiltonian_energy = -0.04349989692963008, hamiltonian_energy_error = 0.03313219934113709, max_hamiltonian_energy_error = 0.05428780197066971, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9653833312121175, log_density = 1.1845422010883304, hamiltonian_energy = -0.09436687513827535, hamiltonian_energy_error = 0.0286972846437763, max_hamiltonian_energy_error = 0.08472399282361567, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9965391182841001, log_density = 0.9988535551004851, hamiltonian_energy = -0.8099425802544318, hamiltonian_energy_error = 0.01518374741376427, max_hamiltonian_energy_error = -0.04857591294037944, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9918328666861845, log_density = 1.0334887289278836, hamiltonian_energy = -0.594861622664389, hamiltonian_energy_error = 0.04338500063735895, max_hamiltonian_energy_error = -0.07015967483971719, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8419219044144434, log_density = -1.6640691628630542, hamiltonian_energy = 2.8212975304745824, hamiltonian_energy_error = 0.32093690341149284, max_hamiltonian_energy_error = 0.38387170594867204, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9890540957646013, log_density = 0.3728425117553673, hamiltonian_energy = 1.9466352049344566, hamiltonian_energy_error = -0.25928710595203963, max_hamiltonian_energy_error = -0.2777428297524107, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9865563058820216, log_density = 2.082031291821485, hamiltonian_energy = 0.4753895163806261, hamiltonian_energy_error = -0.10920507242413802, max_hamiltonian_energy_error = -0.10920507242413802, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8928670583976775, log_density = -1.388483541053997, hamiltonian_energy = 2.1401123845064607, hamiltonian_energy_error = 0.1849372276662713, max_hamiltonian_energy_error = 0.22030310506084705, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9843048130634353, log_density = 0.18906090366865946, hamiltonian_energy = 3.240025523517545, hamiltonian_energy_error = -0.10460820753325706, max_hamiltonian_energy_error = -0.1636103912086333, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9877506304284365, log_density = 0.7224559785721247, hamiltonian_energy = 1.104652577207539, hamiltonian_energy_error = -0.04882790771073586, max_hamiltonian_energy_error = 0.07335565359626273, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.979249997886514, log_density = -1.7187482022687206, hamiltonian_energy = 3.605559106579472, hamiltonian_energy_error = 0.001903399119921545, max_hamiltonian_energy_error = -0.08908953897660998, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9441710845135172, log_density = -2.3177519289645367, hamiltonian_energy = 3.3504388230099615, hamiltonian_energy_error = 0.08862642110399976, max_hamiltonian_energy_error = 0.16962486802134968, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9879328494205317, log_density = -2.279754742477685, hamiltonian_energy = 4.388514639791944, hamiltonian_energy_error = -0.043026166570753865, max_hamiltonian_energy_error = 0.0730366827044362, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9182313595787025, log_density = -4.9795618651593045, hamiltonian_energy = 5.752706289505466, hamiltonian_energy_error = 0.0857645645060936, max_hamiltonian_energy_error = 0.17807006182187024, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9837700176165874, log_density = -5.325497576832689, hamiltonian_energy = 9.823909864264483, hamiltonian_energy_error = -0.2524467296324868, max_hamiltonian_energy_error = -0.42410954331047357, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7548938417747644, log_density = -6.510363551355904, hamiltonian_energy = 10.645774424147966, hamiltonian_energy_error = 0.04697025233620877, max_hamiltonian_energy_error = 0.6780983247112324, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9115303616640932, log_density = -7.016472778646859, hamiltonian_energy = 11.277325441540523, hamiltonian_energy_error = 0.44918094295225686, max_hamiltonian_energy_error = 0.44918094295225686, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -2.148719653456853, hamiltonian_energy = 6.559276049397209, hamiltonian_energy_error = -0.9253546042359773, max_hamiltonian_energy_error = -0.9253546042359773, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.895829768299523, log_density = 0.27385069607774426, hamiltonian_energy = 4.383799279149212, hamiltonian_energy_error = 0.04593328381474926, max_hamiltonian_energy_error = 0.2630916196071329, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9641580414715821, log_density = 0.5935719651017699, hamiltonian_energy = 2.33982081704362, hamiltonian_energy_error = -0.12346835232982167, max_hamiltonian_energy_error = -0.1311562329784648, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9384646404407457, log_density = -1.8663333050525601, hamiltonian_energy = 3.496345396052157, hamiltonian_energy_error = 0.023771522487591845, max_hamiltonian_energy_error = 0.18949651558166147, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9474378316108544, log_density = -1.6479115640082753, hamiltonian_energy = 3.274020334513281, hamiltonian_energy_error = 0.07355558082209557, max_hamiltonian_energy_error = 0.10939429101747633, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9927810314190875, log_density = -1.9500057760203529, hamiltonian_energy = 6.204661599254222, hamiltonian_energy_error = -0.1452995192208988, max_hamiltonian_energy_error = -0.43471969360929474, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.897737217605535, log_density = 0.42967871773570643, hamiltonian_energy = 5.3321757245536405, hamiltonian_energy_error = -0.04307111012886011, max_hamiltonian_energy_error = 0.35015594654088833, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9383654078945248, log_density = -1.1694977459297853, hamiltonian_energy = 4.049109842592026, hamiltonian_energy_error = -0.02764098098117085, max_hamiltonian_energy_error = 0.23106418917633675, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9971809896378167, log_density = 1.2460219513196176, hamiltonian_energy = 2.0137916782569545, hamiltonian_energy_error = -0.0972023101250783, max_hamiltonian_energy_error = -0.192155609622628, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9419359329357412, log_density = -0.5689622960534333, hamiltonian_energy = 1.1527844939559349, hamiltonian_energy_error = 0.037185473639833155, max_hamiltonian_energy_error = 0.12527710965841155, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9980130032498016, log_density = -0.5945318385710863, hamiltonian_energy = 1.007850031268494, hamiltonian_energy_error = -0.01971654249053323, max_hamiltonian_energy_error = -0.05533203011295229, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8743625157948802, log_density = -2.9232819348895287, hamiltonian_energy = 4.062617306274744, hamiltonian_energy_error = 0.24498662295898743, max_hamiltonian_energy_error = 0.2744699588624311, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9398453764198746, log_density = -0.3736084817073273, hamiltonian_energy = 6.401650682936392, hamiltonian_energy_error = -0.22067529956460064, max_hamiltonian_energy_error = -0.22378653747549926, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9959500519598252, log_density = 1.833805620562881, hamiltonian_energy = 1.4866473484722107, hamiltonian_energy_error = -0.14906943313269938, max_hamiltonian_energy_error = -0.14906943313269938, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8930964196995063, log_density = 0.6306230276417732, hamiltonian_energy = 0.3869913393587421, hamiltonian_energy_error = 0.1602873892126606, max_hamiltonian_energy_error = 0.23375000018657044, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9036716263286322, log_density = -0.3130815026694531, hamiltonian_energy = 2.5969861799231033, hamiltonian_energy_error = 0.07881593148768307, max_hamiltonian_energy_error = 0.26170499593087415, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8614265008389871, log_density = 0.6020788351178936, hamiltonian_energy = 3.3757583761081236, hamiltonian_energy_error = 0.04027060915853742, max_hamiltonian_energy_error = 0.3543217368776883, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.912718780632278, log_density = 0.8172387267880765, hamiltonian_energy = 2.4095121934165986, hamiltonian_energy_error = -0.0017430332564520867, max_hamiltonian_energy_error = 0.2448548624304987, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9556132307944021, log_density = -0.7922753719278042, hamiltonian_energy = 1.5316172347010406, hamiltonian_energy_error = 0.09930175289292942, max_hamiltonian_energy_error = 0.11336351426393954, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9353822538816142, log_density = -1.381407985497857, hamiltonian_energy = 3.0651712328734746, hamiltonian_energy_error = 0.1549540195953596, max_hamiltonian_energy_error = -0.24193404078075398, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9711889981219333, log_density = -0.8859362416392056, hamiltonian_energy = 3.5169501193113777, hamiltonian_energy_error = -0.29795453852291764, max_hamiltonian_energy_error = -0.37692878644744043, tree_depth = 4, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9954441255291369, log_density = 0.8784414949610575, hamiltonian_energy = 2.124784804173548, hamiltonian_energy_error = -0.03736553546783927, max_hamiltonian_energy_error = -0.1402603335341146, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9752916681922337, log_density = 0.44109331902724236, hamiltonian_energy = 1.439171782658659, hamiltonian_energy_error = -0.0691394245789303, max_hamiltonian_energy_error = 0.10159515144987696, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9416950777059968, log_density = -0.267628625364285, hamiltonian_energy = 1.7910349642396308, hamiltonian_energy_error = 0.07207775548485507, max_hamiltonian_energy_error = 0.1647149145676854, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.941653009410094, log_density = -1.1047130304362813, hamiltonian_energy = 3.2391366093530403, hamiltonian_energy_error = 0.0948787659747965, max_hamiltonian_energy_error = 0.17105652602201538, tree_depth = 2, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.6780331396037127, hamiltonian_energy = 1.6210638924515277, hamiltonian_energy_error = -0.09919466167261959, max_hamiltonian_energy_error = -0.21207429462567262, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9111474016937314, log_density = -0.6311698313800544, hamiltonian_energy = 2.795039723947971, hamiltonian_energy_error = 0.18236611621997145, max_hamiltonian_energy_error = 0.2025314295477707, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9976728001605341, log_density = 1.339224366504773, hamiltonian_energy = 2.626140207094754, hamiltonian_energy_error = -0.3162717292026507, max_hamiltonian_energy_error = -0.3778136556766891, tree_depth = 3, numerical_error = false, step_size = 0.1249345588717803, nom_step_size = 0.1249345588717803, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/process_decomposition/script.jl\"","category":"page"},{"location":"examples/process_decomposition/#Process-Decomposition","page":"Process Decomposition","title":"Process Decomposition","text":"","category":"section"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"using AbstractGPs\nusing Plots\nusing Random\nusing Stheno","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Define our model. Define a distribution over f₁, f₂, and f₃, where f₃(x) = f₁(x) + f₂(x).","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f = @gppp let\n    f1 = GP(randn(), SEKernel())\n    f2 = GP(SEKernel())\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Randomly sample N₁ and N₃ locations at which to observe f₁ and f₃ respectively.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"rng, N1, N3 = MersenneTwister(123546), 10, 11;\nx1 = GPPPInput(:f1, sort(rand(rng, N1) * 10));\nx3 = GPPPInput(:f3, sort(rand(rng, N3) * 10));\nx = BlockData(x1, x3);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Generate some toy of f1 and f3, y1 and y3 respectively.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"fx = f(x);\ny = rand(rng, f(x));\ny1, y3 = split(x, y);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Compute the posterior processes.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f_post = posterior(fx, y);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Define some plotting stuff.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Np, S = 500, 25;\nxp_ = range(-2.5, stop=12.5, length=Np);\nxp = BlockData(GPPPInput(:f1, xp_), GPPPInput(:f2, xp_), GPPPInput(:f3, xp_));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Sample jointly from the posterior over each process.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f_samples = rand(rng, f_post(xp, 1e-9), S);\nf′1_xp, f′2_xp, f′3_xp = split(xp, f_samples);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Compute posterior marginals.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"ms = marginals(f_post(xp, 1e-9));\nf′1_m, f′2_m, f′3_m = split(xp, mean.(ms));\nf′1_s, f′2_s, f′3_s = split(xp, std.(ms));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot results","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"posterior_plot = plot(ylims=(-5.0, 5.0));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f1.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′1_m; ribbon=3f′1_s, color=:red, label=\"f1\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′1_xp; color=:red, label=\"\", alpha=0.2, linewidth=1);\nscatter!(posterior_plot, x1.x, y1;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f2.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′2_m; ribbon=3f′2_s, color=:green, label=\"f2\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′2_xp; color=:green, label=\"\", alpha=0.2, linewidth=1)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f3","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′3_m; ribbon=3f′3_s, color=:blue, label=\"f3\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′3_xp; color=:blue, label=\"\", alpha=0.2, linewidth=1);\nscatter!(posterior_plot, x3.x, y3;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/time_varying_blr/script.jl\"","category":"page"},{"location":"examples/time_varying_blr/#Time-Varying-Bayesian-Linear-Regression","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"","category":"section"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"(Image: )","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"using AbstractGPs\nusing ColorTypes\nusing FixedPointNumbers\nusing Plots\nusing Random\nusing Stheno","category":"page"},{"location":"examples/time_varying_blr/#Define-and-inspect-our-model","page":"Time-Varying Bayesian Linear Regression","title":"Define and inspect our model","text":"","category":"section"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"g1 and g2 are time-varying basis functions. In a real application, these might be specified by data.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"w1 and w2 are the time-varying basis functions for these bases, specified by slowly varying GPs.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f is the prediction of the regressor.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"y is the addition of f and rough temporally-correlated \"noise\".","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f = @gppp let\n    g1 = x->x / 4\n    g2 = cos\n    w1 = stretch(GP(SEKernel()), 0.2)\n    w2 = stretch(GP(SEKernel()), 1)\n    f = g1 * w1 + g2 * w2\n    y = f + 0.3 * GP(Matern12Kernel())\nend;","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Sample from the prior from plotting and for conditioning.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"rng, N, Nplot, S = MersenneTwister(123456), 250, 500, 100;\nx = GPPPInput(:y, sort(rand(rng, N) * 10));\nŷ = rand(rng, f(x));","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Compute the posterior.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f′ = posterior(f(x), ŷ);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Sample from the posterior and write to file.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"xp_ = range(-2.5, stop=12.5, length=Nplot);\nxp_w1 = GPPPInput(:w1, xp_);\nxp_w2 = GPPPInput(:w2, xp_);\nxp_y = GPPPInput(:y, xp_);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Generate joint posterior samples.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"xp = BlockData(xp_w1, xp_w2, xp_y);\nf′_xp = rand(rng, f′(xp, 1e-9), S);\nw1′s, w2′s, y′s = split(xp, f′_xp);","category":"page"},{"location":"examples/time_varying_blr/#Plot-results","page":"Time-Varying Bayesian Linear Regression","title":"Plot results","text":"","category":"section"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"gr();\nposterior_plot = plot(\n    legend=:topleft,\n    legendfont=Plots.Font(\n        \"sans-serif\",\n        10,\n        :hcenter,\n        :vcenter,\n        0.0,\n        RGB{Normed{UInt8, 8}}(0.0,0.0,0.0)\n    ),\n    background_color_legend=RGBA(1, 1, 1, 0),\n    foreground_color_legend=RGBA(1, 1, 1, 0),\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over w1.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_w1); color=:green, label=\"w1\");\nplot!(posterior_plot, xp_, w1′s; color=:green, label=\"\", linewidth=1, alpha=0.2);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over w2.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_w2); color=:magenta, label=\"w2\");\nplot!(posterior_plot, xp_, w2′s; color=:magenta, label=\"\", linewidth=1, alpha=0.2);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot x1 and x2","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, (x->x / 4).(xp_);\n    linecolor=:black,\n    linewidth=1.0,\n    label=\"x / 4\",\n);\nplot!(posterior_plot, xp_, cos.(xp_);\n    linecolor=:black,\n    linewidth=1.0,\n    linestyle=:dash,\n    label=\"cos\",\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot samples against which we're regressing.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"scatter!(posterior_plot, x.x, ŷ;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over y.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_y); color=:blue, label=\"y\");\nplot!(posterior_plot, xp_, y′s; color=:blue, label=\"\", linewidth=1, alpha=0.2);\n\nposterior_plot","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"(Image: )","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"}]
}
