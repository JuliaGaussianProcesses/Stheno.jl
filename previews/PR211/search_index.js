var documenterSearchIndex = {"docs":
[{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = GPPPInput(:f3, randn(5))\n\ny = rand(f(x, 0.1))\n\nlogpdf(f(x, 0.1), y) ≈ elbo(f(x, 0.1), y, f(x, 1e-9))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPINput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the GP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = wrap(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we that makes use of a variety of packages from the Julia ecosystem. In particular, we'll make use of","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"WARNING: Method definition rrule(typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/95DKO/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition frule(Any, typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/95DKO/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition rrule(typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/95DKO/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition frule(Any, typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/95DKO/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.02.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"28.171738983419573","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well.\n    s_noise = positive(0.1),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-0.9162907691270586, Bijectors.Exp{0}(), 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.6094379869399091, Bijectors.Exp{0}(), 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(1.6094379094538682, Bijectors.Exp{0}(), 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.490116130486996e-8, Bijectors.Exp{0}(), 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-2.3025852420056685, Bijectors.Exp{0}(), 1.4901161193847656e-8))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     6.919037e+00     3.360173e+01\n * time: 0.0253751277923584\n     1    -1.514872e+01     2.318636e+01\n * time: 1.509979009628296\n     2    -2.298844e+01     1.747324e+01\n * time: 1.5220980644226074\n     3    -2.853467e+01     8.685760e+00\n * time: 1.544722080230713\n     4    -2.997262e+01     6.441637e+00\n * time: 1.5783131122589111\n     5    -3.124602e+01     5.554418e+00\n * time: 1.5897560119628906\n     6    -3.201308e+01     4.198166e+00\n * time: 1.6007130146026611\n     7    -3.245505e+01     1.022010e+00\n * time: 1.611098051071167\n     8    -3.255407e+01     7.704343e-01\n * time: 1.6218960285186768\n     9    -3.257301e+01     3.971766e-01\n * time: 1.632148027420044\n    10    -3.258190e+01     3.332475e-01\n * time: 1.6485741138458252\n    11    -3.258940e+01     1.867355e-01\n * time: 1.665518045425415\n    12    -3.259281e+01     1.634132e-01\n * time: 1.6903200149536133\n    13    -3.259518e+01     1.413377e-01\n * time: 1.7008850574493408\n    14    -3.259619e+01     7.882920e-02\n * time: 1.7177021503448486\n    15    -3.259644e+01     2.139037e-02\n * time: 1.734368085861206\n    16    -3.259648e+01     9.396070e-03\n * time: 1.7457520961761475\n    17    -3.259648e+01     5.544913e-04\n * time: 1.7624530792236328\n    18    -3.259648e+01     1.790496e-05\n * time: 1.7925751209259033\n    19    -3.259648e+01     4.300414e-07\n * time: 1.8097569942474365\n    20    -3.259648e+01     2.021911e-09\n * time: 1.826789140701294\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -0.8301672342894004\n -1.7268458340230741\n  1.5631498406490394\n -0.0045689746543449315\n -2.401498508956369","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.4),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-0.8301672342894004, -1.7268458340230741, 1.5631498406490394, -0.0045689746543449315, -2.401498508956369], [-0.8301672342894004, -1.7268458340230741, 1.5631498406490394, -0.0045689746543449315, -2.401498508956369], [-0.5254242373610891, -2.1424668461808785, 1.3400526947512994, -0.61280503978751, -3.796893394246305], [-0.4545642244429441, -2.396572433413036, 0.9258890651074885, -0.6567940444122584, -3.571001915416878], [0.8553379757263527, -1.315061487064204, 1.3667662478120544, -0.08769922283053715, -3.426321948287056], [0.6847899340996181, -1.8268819301215242, 0.860284097747082, -1.1243078786907892, -3.7100231613289236], [0.5992930219469361, -1.9367090902608266, 1.1238006026527347, -0.16093453480856879, -3.1172013479546212], [0.5562891209598522, -2.2521402576791334, 1.2734262260993958, -0.15258920820089467, -3.57020231488477], [0.862430510848879, -0.8248469324959744, 0.9349435513197091, -0.8067435290141162, -3.5847770261421434], [1.1879047269886067, -0.6184855730910762, 1.4079911826797484, -0.03578662318609639, -3.5618757711758255], [1.1879047269886067, -0.6184855730910762, 1.4079911826797484, -0.03578662318609639, -3.5618757711758255], [1.4825568112331373, 0.17570535686117156, 1.2197894985009676, -0.545197420592328, -3.4350249153678054], [1.8547097378919717, 0.1272800809281937, 0.9464025845378866, -0.8612017431929941, -3.4226891983790817], [1.1084539648046687, 0.27043849211927284, 1.160695270241661, -1.0690900334722382, -3.6664469861192126], [0.782811627843016, -0.37257571730315125, 0.4076838935825584, -0.9085964966291777, -3.553574591876201], [0.782811627843016, -0.37257571730315125, 0.4076838935825584, -0.9085964966291777, -3.553574591876201], [1.5054163192018715, -0.7076809614041876, 1.3209264397322236, -1.3683787495599802, -3.5318553386502063], [2.227502117747776, -1.3647460313393216, 1.3678374067526549, -0.057826151521488386, -3.4355700305581376], [2.288402371880397, -1.4307016385159295, 1.3941646652736113, 0.1118316359815159, -3.3266950938400823], [0.28865103260861413, -1.3612110662512202, 1.4755216615982865, -0.41379519845776014, -3.482595388813052], [-0.25606498805650696, -3.2899873243184445, 1.7478020494945674, 0.5351246252621786, -3.518446562151828], [-1.6353500601598583, -2.280158435926669, 1.2198862017516479, -0.6870832078975928, -4.253208009834579], [-1.736173846425198, -2.0460736860016078, 1.2402156487253975, -0.7756244275402155, -3.98857342896769], [-1.5650909716156352, -1.9751930828358757, 1.0734659133747741, -0.6694885000779396, -4.004261953452693], [-1.8513045149381075, -2.184845654914733, 1.463690111387115, 0.08094206132634853, -3.5541470950036698], [-1.7933112371063957, -2.120475299806068, 1.5183253545353006, -0.107161725685588, -3.735879982420371], [-1.6944930233071316, -1.8457451711277149, 1.6216190780589719, 0.2712526992124729, -4.010546958998454], [-1.4692875168122594, -2.27507308369012, 1.4637233880084064, -0.16109813109406132, -3.9287954944832273], [-1.1874584050902077, -1.7398198555158202, 1.2684199313874136, 0.035371648464752964, -3.918588841313961], [-1.3072975418215236, -1.851198975886249, 1.3761923631829085, 0.04270681017814585, -3.768606778937804], [-1.7628855041558418, -2.588941477096135, 1.0477682450266779, -0.2586383767916652, -3.941803497789477], [-1.4618609168178867, -1.7016090210130177, 0.9809246766878436, -0.8885958729543741, -3.9091828948231218], [-1.9574093646326953, -2.385810254530933, 0.6232419149016815, -0.7229781984632713, -4.0897948118627685], [-1.0823017236435586, -1.5420020906526386, 1.2701750478254903, -0.5842310805311366, -3.527607912782145], [-1.3753160485476057, -1.8922648800414112, 1.4966251285752183, -0.011868567772352512, -4.077894091396766], [-1.0681791994804883, -2.0687325590913592, 1.3488961472375856, -0.006550106510992795, -3.87078320608451], [-0.6104827407470541, -2.2158757094204486, 1.3834441420175274, -0.4709852941113992, -3.393113868569985], [-0.6832271175683952, -2.341985219268643, 1.6491050958133968, -0.4821600045433372, -3.6027709349402115], [-0.9289015832796644, -2.257206626786838, 1.2564821105628767, -0.6431755828071798, -3.5685317823363616], [-2.4314294255330577, -2.0784775491213865, 1.3428915321732222, 0.2171180626355237, -4.555886416247611], [1.3254334043766671, -1.4946155889665875, 0.8127657986097017, -0.9754307363103376, -3.5519371986451316], [1.2299994142140427, -1.4517914639489775, 0.6634451038924936, -0.919292439482428, -3.787878182443372], [1.978612075919568, 1.0093817700066117, 1.0437071686981512, -0.6794974436327121, -3.554141085585283], [1.2721512636981775, 0.2415489234540179, 0.5031667154439519, -1.3984268798108048, -3.633341739479071], [0.9507290822432556, -0.63524356612773, 0.5777514150476825, -1.806452082793251, -3.5012595464009655], [1.0607866521547749, -0.8185374059039975, 0.15935452355036753, -2.0634787692464256, -3.6142325419612438], [1.2470025797780433, 0.42728598973341503, -0.6916369915821701, -2.4623454425567814, -3.591448535915449], [0.765417284381122, -0.1615288704255169, 0.6043938472534476, -1.503408211822585, -3.4855585505739355], [1.6898336351496956, -0.4407506971099463, 0.2910033615229414, -1.597931523618552, -3.708554563251921], [1.3526352909171795, -0.12596811234602637, 0.9918495888514762, -1.4766106123706588, -3.357491032169117], [0.9130811078667512, -0.8815040415567169, 1.286743710068488, 0.2511421397202378, -3.3548262696981457], [0.6690482977332092, -0.5298096874393389, 0.6341808271709989, -1.275208213097026, -3.582554878856692], [1.1261965817496447, -0.7164000563277089, 0.8012482980956693, -1.1725221341909626, -3.5193861763443235], [0.3665349069730484, -1.1454038720891113, 0.8686311588558231, -0.9955208406104352, -3.436948042280431], [2.3269425309447325, 0.7623146277702428, 1.0005260238679108, -0.6045488127028315, -3.6744289638124914], [2.0427379924685525, 0.5307173631083226, 0.7761431360084081, -0.7912958393545619, -3.326030220655544], [1.6266958601393096, -0.07729190967502142, 1.0828996503409198, -1.025370223141916, -3.410281410319785], [1.2713642922644108, 0.15241882139331456, 0.72531388933132, -1.0687120052328134, -3.536821073437924], [0.9180642639619424, -0.7912646891587269, 0.6471310583956813, -1.145516285343456, -3.4561357565798367], [0.5225857840726595, -1.0856489239108884, 0.6468849127217947, -1.2871619349223191, -3.6433181033428728], [1.0120393477440237, -1.0026771669383132, 1.3545528155048143, -0.6312156812503165, -3.5714730991309764], [0.3238596656057742, -0.5666698379712172, 1.272605869730142, -0.6312860460904082, -3.5728286808661043], [0.34595095342578197, -0.4476792157208626, 0.9822065792155175, -0.5573951623969583, -3.558309813509458], [1.3971285905427946, -0.3416390232583576, 0.505688083485073, -1.3287384273113203, -3.4599843570134543], [0.8061661147209984, -0.6408456977267445, 0.29307786488773685, -2.5165409259931346, -3.6482839970076517], [0.37146185670304316, -0.7260118308545012, 0.39536050057390243, -2.6345980013527504, -3.418753149133025], [1.5863160912690202, -0.6026349842832998, -0.1198628951862272, -0.8760624152607333, -3.511747794234517], [1.233826215280068, -0.857805701052791, 0.7902007921638259, -1.316522487571687, -3.6216539732897406], [1.4897038801088656, -0.06697945759432779, 1.598406044628301, 0.19848121929916157, -3.621446896719788], [1.4165645188207416, 0.36591161505704795, 2.374580136724815, 0.4471262874290449, -3.251222573315218], [0.8861515789851673, -0.5639291550398164, 1.2586624296026914, 0.4542695112959899, -3.8306141886314644], [0.28492983381663706, -0.9483808855113542, 1.0651113659008011, -0.14429288693239994, -3.3418795171180977], [0.5665589329303007, -2.278289017895481, 1.5693901125853362, -0.15515283950655145, -3.322654916285389], [1.75415128045565, 0.4437069849632402, 0.34303662625017495, -1.9700586634076858, -3.6400977057012667], [1.7083575085014686, 0.5461572499155087, 0.057675867266238356, -1.776336223435622, -3.6000124422674866], [1.4428209150841442, 0.030348147065747066, 0.5239254186738904, -2.882946870505337, -3.5470773787232632], [1.6721638516847392, 0.14607587384918372, 0.9067127937845131, -3.082763830963725, -3.5510662251271965], [0.7851541079279389, -0.9661009135802326, 0.5981418667744827, -2.5415501702252254, -3.5277160571579587], [1.0710446196076977, -0.6357646498912517, 0.39935242288315015, -2.315225485278815, -3.5325598730171173], [1.102515458143222, -0.36748029329970827, 0.6945915811032132, -2.4794022827447773, -3.250068724797914], [1.800658333258001, 0.14448036370498166, 0.02725733457402335, -1.8767738292144132, -3.795884322259352], [0.5572161734503904, -1.3854424444483902, 1.5798436925686898, 0.8419297130295172, -3.4183999979215467], [1.6202203793944812, -2.463787906422679, 0.3738670916918081, -0.7970447918620854, -3.69790922531942], [-2.738414814458372, -2.3600627632293407, 1.3278124591030456, 0.9432719446803411, -4.552396995312465], [-2.4427401369881916, -1.9887294887926956, 1.224242395000057, 0.41776220044777074, -4.028199740552339], [-1.4897727915816277, -2.7908412578177657, 1.4155994899078919, -0.062215611947005256, -3.65177488849452], [-1.80068631183212, -2.472624207696411, 1.4916430361791908, -0.11448966793938747, -3.7514409329906924], [-1.7932202677892723, -2.258801269671259, 1.3555250319988474, 0.717847669552056, -3.969923601128129], [-1.4692691007226275, -1.971080656819937, 1.6075208657306201, 0.2788951841647002, -3.744123046359639], [-1.6404096136595177, -2.141924178918767, 1.4842455968369677, 0.01130073396948958, -3.792550461448917], [-1.4002745713723512, -2.355048928824491, 1.1557909624156992, -0.48861945138920204, -3.746013765012465], [-1.510870364207869, -3.1266486020252504, 1.43897104046442, 0.23182312375309738, -3.547140487972541], [-1.2760815888546, -3.495768388598862, 1.6679546329389485, 0.33400235128592026, -3.6023146699993878], [-0.12793654992020287, -2.801060336038816, 1.5374253606604116, 0.6948809700426324, -3.4142169854172386], [-0.6665316438640325, -1.73553253086926, 1.6043375594146296, 0.030799122916077115, -3.4643131152400173], [-1.1569797919928009, -1.7715082085071303, 0.8190392382796512, -0.021456611080710647, -3.894645128141996], [-1.178603458359557, -1.6473019951208754, 0.8441068350464861, -0.02851828220078078, -3.8572654407246936], [-1.5998191878978945, -2.3163598643858507, 1.2816723683465119, -0.9571157145553809, -3.987331451886856], [-1.5933202624297376, -1.9504958565320052, 0.278363243156728, -0.3763229518252317, -3.9713585424278173], [-1.3819205397927556, -1.9017265193416817, 0.6858308306677545, -0.25542678584434764, -3.763216832214147], [-1.436510690082315, -2.103642540709269, 1.0690484608451578, -0.9424495355436919, -3.6670438590984675], [-1.7337498993877267, -2.04823194449595, 0.6071581300954674, -0.46386852992463445, -4.04420411083134], [-1.1953797919428437, -1.7158228984029014, 0.8253724160161824, -0.6784784353241373, -3.904451399583802], [-1.2352398766729809, -1.566600597730605, 0.6991458101247277, -0.42472477623017957, -3.6540167476271956], [-0.9839855040085215, -1.769395007578349, 0.8350722812130981, -0.26710019556930664, -4.127371770537858], [-1.6722133540073996, -1.7524826637005457, 1.6036769035093914, -0.4939872973951174, -3.965135546949519], [-1.6526266424760967, -1.9203377046081107, 1.4725527292944454, -0.1815665855670917, -4.254109495261971], [-1.583593281672419, -2.5585427571594987, 0.880350670215164, -0.5603883218415167, -3.866552567787098], [-1.4026158738230667, -1.9008886498596789, 1.1728055243479016, -0.4726438373994788, -4.164969014419635], [-1.4759219355661946, -2.0270939543539934, 0.6007169646922584, -0.5607876598177489, -3.6467274640544547], [-1.8689516335030016, -2.046153042207393, 1.6539277643446155, 0.01336735875440459, -3.677424693276507], [-1.2247548838719362, -2.134372301901889, 1.3113413286188251, -0.21009150165448193, -4.163033572642472], [-1.551952478598805, -2.019017661708153, 0.8860643476272276, -0.5213542944337342, -3.8399083598471253], [-1.7613730331947137, -1.8974033488070796, 1.374435339759449, -0.38891813815524484, -3.9145898547659685], [-2.229319665901448, -2.1027943264072544, 1.1792559467317114, -0.6414934090739557, -4.511565423226576], [-2.1656059180113063, -1.9258162526288574, 1.1403254027556484, -1.1069089120757405, -4.309795601290092], [-2.052254659639096, -2.218280725690117, 1.2780850106465869, -0.9637741945885849, -4.081664255707684], [-1.1028895495092559, -1.9937691159505215, 0.848041450916737, -0.4100711678857763, -3.860584069056382], [1.137352468044962, -1.5539025611942816, 1.5825090127040387, 0.13023858216818215, -3.575791002332871], [0.7341784563036811, -1.3909513697003968, 1.646727203124256, 0.45810532627381195, -3.3831413877772714], [0.6615461505351179, -0.7016100298955998, 1.7859849120493947, 0.22114341620242645, -3.547053848589634], [1.3436420861679756, -0.5536958976593607, 2.013837716663964, -0.9065476530026875, -3.5665934251453426], [1.265428517786593, -0.18502724642353746, 2.09936220607863, -0.8318875307768908, -3.7215263465334227], [1.2067699553016253, -0.3622841921135143, 1.9370134509787955, -0.5085632360133139, -3.3412921106759], [1.7175411219248105, -0.783439418782543, 1.0925106098171937, 0.2248457124661941, -3.700388068772361], [1.3490669378149074, -0.2551322504149419, 1.4226082932618644, -1.173134463452183, -3.650213556381044], [0.749896200176739, -0.6892741755724404, 1.3079181209530295, 0.28100436244821914, -3.542169601438108], [0.9037212743000883, -0.9031999621556637, 0.8593683558410634, -0.4808639590936643, -3.5798560323353183], [1.0317443388907146, -0.5710496121227264, 0.9839912009295537, -0.3611300450637393, -3.5196244549071904], [1.0883312780077934, -0.2669744198816676, 1.9376587339429825, -0.46111469496038765, -3.586744004749219], [0.976252690582202, -0.9054870510129779, 0.9451957648531717, -0.7870788634372158, -3.7343475631309313], [0.5945206962636866, -0.811530862310522, 1.038243940577619, -0.9593779050004212, -3.2778005822861807], [1.403886628891071, -0.6173697002971107, 0.8533621399406539, -0.6603539202843007, -3.4196125980612404], [0.7654901072958383, -0.05051403721516676, 0.6544283603513081, -2.004998630913822, -3.6555082711562017], [1.0253009905121406, -1.2173727467775888, 0.7633029124569486, -1.7056803957311024, -3.5462459812868166], [1.730542211392601, -1.331863968720289, 0.8910907884593104, -0.7823048106103763, -3.4661977040140357], [0.3280500253568315, -1.3186402906361305, 1.7788899525316315, 0.28837513208866167, -3.5806432711130167], [1.2398586587142264, -0.2600073431090463, 0.6066219253287175, -0.6700376271980396, -3.498695066158553], [0.9539551076062037, -0.7844066763557731, 2.0018045810643486, -0.3075649529758205, -3.627057705723231], [0.7216955415186568, -1.2154283453277779, 2.105303141605603, -0.6165192098925784, -3.4554074062897966], [0.8214568866271796, -0.6725800561216608, 2.0201589375677544, -0.7139382960784443, -3.6269650111667118], [0.8189061488065926, -0.7720057294539497, 1.9693760225729318, -0.730989926191087, -3.712607124446402], [0.7188015624754029, -0.7875800620809563, 1.320165009042517, -0.9094928381411708, -3.635658646183531], [1.3999655136612226, -0.6332469004327687, 0.9918172900247417, -1.03660910454296, -3.4011692679146828], [1.4311979080028037, -0.5837940537587682, 0.9043644861226819, -1.1953856021958256, -3.6015409681997355], [0.9207670861763916, -0.23784056409096258, 0.7468450250470441, -1.4745088363194312, -3.647550146537467], [1.561275598967768, -7.832765619081306e-6, 1.302875019308033, -2.4504345493108395, -3.6215465312263158], [1.0438958884284808, -0.14670484081663152, 0.9497012179440515, -0.9683630168087274, -3.7826406830540455], [0.5267181997605267, -0.9741807306601147, 1.2358345171367375, -0.08407354326293685, -3.834972278820098], [1.6125290183579026, -0.8985415700613022, 1.6036030327371582, 0.5565167734528663, -3.594478147987821], [1.8375721454280662, -0.8030928105263011, 1.726451537994831, 1.1305498899589828, -3.4247939178898905], [1.607291459574178, -0.12239733050025071, 2.2523622484388435, -1.170164759390334, -3.504175946157528], [0.9532101623418345, -0.9195698135910104, 1.413439167419796, -1.7029578596021588, -3.56831373894769], [1.316752710054791, 0.3323501175422496, 1.7495875424275842, 0.3188979668411711, -3.522235804526063], [1.2621200193253765, -0.05022951230208497, 1.4797190529495796, 0.3387259193672659, -3.695245719938077], [1.4327153472816123, -1.1761732083013832, 1.6616230995172463, 0.2645218411108772, -3.212463800480854], [1.4984488436191516, -1.176256783605065, 1.5935321183862112, 0.2778803302520877, -3.4537845985170668], [1.3425441454220952, -0.8519702478810218, 1.011221093852284, -0.6210255509044675, -3.5285475069698315], [-0.22455127806844377, -2.3517878861026493, 1.5068660216685372, -0.2501017587880221, -3.6982785999812955], [0.33939999642250446, -1.7112886876447004, 1.0813856748551047, -0.7395893578320055, -3.5440959283249267], [0.13883871968070893, -1.097599010748135, 0.8024051856369735, -1.0250941613281375, -3.600991035993839], [0.6667858115893273, -1.3844956649640965, 1.0154154987038706, -1.6002751263159831, -3.4430559753774586], [0.7909270085715667, -0.9648174659269673, 0.7845978298283817, -1.5904304606429245, -3.4711722811896624], [1.2946023988927327, -0.349755496281703, 1.6144009194812639, -0.3180717280412594, -3.5763162309949066], [0.9654313803252833, -0.40128001197849783, 1.4311713664356802, -0.4682369676584446, -3.435009003948774], [0.7329782005116267, -0.9009474794013164, 1.5303354405163572, -0.6522302134324384, -3.7650815677361775], [1.024089090186068, -0.9161540232323084, 1.97343776234109, 0.5801337897300832, -3.75706909120492], [0.44339183465722276, -1.9603125983289942, 1.4597452577771548, 0.36626004908108567, -3.75064435311232], [0.8694241401081941, -1.7322966917458706, 1.76281753823507, 0.23826638277205464, -3.2093428347969395], [1.4477414111506883, 0.264378382838648, 1.6088231912709308, -2.061582870056439, -3.781068597663358], [0.963965859942341, -1.0384847238639512, 0.5459449620991919, -0.4602313033055282, -3.467001327101993], [1.1575790064772495, -1.0045876228136914, 1.468204996671778, -0.17336684750632408, -3.3155754368649144], [2.1522580244191065, -0.06461783859349512, 1.0065546900274924, -0.0068199192363228075, -3.4423606434879375], [0.32303048030845244, -1.253249144692702, 1.4336699612394506, -0.7393367913122363, -3.5299458388929446], [0.7358770162232465, -1.3805414924462946, 1.1929901746863347, -0.7535409346649782, -3.3656910893538443], [0.5729650009874636, -1.793643790571333, 1.0552199125129416, -0.7371222003298809, -3.7321481348287717], [0.29171151957346186, -2.1265313201597293, 1.2982311953276506, -0.11730548186734469, -3.7714345964956957], [-1.00205936404572, -2.216851763606969, 0.861451866054635, -0.4147579598928539, -3.4331446569335804], [-1.6242056593432945, -1.7989151513458554, 1.1862621582778894, -0.5918346146300638, -4.2675157436249345], [-1.8790742967843521, -2.5591808396083575, 1.021702598596944, -0.7499835275195105, -3.7597124633892873], [-1.8065147068040466, -2.603492091111017, 1.2656146856844201, -0.14358494077708067, -3.805758623623253], [-1.8007671477752625, -2.2761026835907776, 0.9091815598383911, -0.5289656437660195, -3.6975973417567203], [-1.5074615787048318, -2.4535865471942495, 0.7871898100810301, -0.4871749547627025, -3.490737608282045], [-1.43130801035334, -2.062333358803464, 1.1766240790555031, -0.39601116037087647, -3.555166943215849], [-1.4567782517042718, -2.1093173506783534, 1.1753669493100931, -0.5866063817337454, -3.5369731150005883], [-1.9314730650976202, -1.8063850416708396, 0.9749537181756371, -0.08084496658370456, -3.768413503340536], [-1.913379939715993, -2.4215226017287588, 1.5248987720837877, -0.04955828910966409, -3.965074339547631], [-1.7234225364866174, -2.1395843296430757, 1.700379509322984, 0.18190060096602442, -4.073498642290583], [-1.50930998447239, -2.0657324466725613, 1.4284514089617943, -0.10277206328341629, -4.105029789618763], [-1.9509155886842948, -2.117633593197299, 1.4249158093873504, -0.03003646881509739, -3.842166668441048], [-2.2689551249730844, -2.093636812253726, 1.1391976240550001, 0.10823526488698121, -4.096756879277597], [-1.980232179165843, -2.065078189898342, 1.7732379158590983, 0.3154646033621298, -4.259891846148972], [-1.0781101438392013, -1.9249756169345513, 1.067443260687993, -0.5496986102293395, -3.642405506463468], [-1.326586598833208, -2.1996564888972325, 1.1586068848219793, -0.6158076186111355, -3.876532420041224], [-1.4739156706705279, -2.290717461321503, 1.4111461873747637, -0.8743890722012406, -4.208079119052716], [-1.7358242887865976, -2.4105361917187578, 0.8987464893212201, -0.04823878576972018, -3.819016614657105], [-1.7500981006639726, -2.4705505060928585, 1.5462549950423607, -0.16905710621659176, -3.7758942340664032], [0.10115209013006454, -2.085155762687286, 0.7634135585989887, -0.6058089853258645, -3.50951470715783], [1.2865598330045784, 0.24545047825581057, 1.2758655901674127, 0.09155123434200234, -3.382896059360843], [2.993296894953141, -0.4575713358883925, 1.0110848834676218, -0.43573893674800407, -3.722577493887776], [3.2215031314172387, -1.0520237311494618, 1.3086641282752722, -0.801318192074328, -3.3136784893516444], [3.278704012391769, -0.9353525305524842, 1.3749857364290454, -0.9127051961172703, -3.675770868404927], [0.859513134887995, -0.7066416771945006, 0.09270262523166359, -0.7945601845642168, -3.4455726554315778], [0.933998545503109, -0.149502117926406, 1.2919184731076405, -0.38499413773385566, -3.4913273248221763], [1.2731536259836775, -0.8417243467401387, 1.5238535242651894, -1.1603326186972673, -3.553034080396054], [1.3324260534687495, -0.941707432622773, 1.7004046974500615, -0.9681903821208452, -3.235722069788371], [1.449310978117819, 1.0636783241950152, 1.0589549514160632, -0.8709259580142382, -3.2983301764114827], [1.2249446643227286, -1.786491943555112, 1.5426920136017124, -0.03528294753481748, -3.25696005853807], [1.5825195436754804, -1.7920914852928251, 1.0832628781798859, -0.2815845088214087, -3.416156691027051], [1.6865703332773854, -1.3961785640320528, 1.268832045324098, -0.347467208499834, -3.5053579782314994], [0.8370497104113684, -1.3257995624382783, 0.8245617736138091, -0.42948757357937545, -3.411336954134111], [1.359187851392497, -0.009280485970333527, 2.08943108380449, -0.5077612702583829, -3.7429911894659367], [0.9314935442762244, -0.5074522221041058, 1.908496532249558, -0.6504937467813212, -3.304394095537591], [1.014478686986599, -0.5644331886224554, 1.8590601277684777, -0.5403207274160704, -3.5778696287325635], [1.0248998596531023, -0.33881913943175285, 1.3644890975704778, -0.35097923112766316, -3.4362647997784155], [1.1334785259555538, -0.5114973803226743, 1.3795868999271403, -0.4153946917619138, -3.5230328580599046], [1.1863003917531907, -0.3788092820513085, 0.35341958033452914, -2.2674250659393014, -3.54942656705702], [2.2382617792776296, -0.7961621220217596, 1.6565707366274594, 0.45604312156215043, -3.593884468041986], [1.5656319015237208, 0.9350806441441214, 1.3472737186928045, 0.41264987295113453, -3.559777809395314], [1.1168604235339756, -0.6316666728467081, 0.5709215103352046, -2.4327152448903235, -3.665676832248179], [1.2872558099632936, -0.49541650675408894, -0.2783159339585205, -2.128361014349083, -3.5808734869600234], [0.9444018658027766, -0.5007743026536335, -0.2352233745394056, -2.269890836893962, -3.7360132565919386], [1.0085162359979898, -0.6476819586817825, -0.21253582596244147, -2.432657523345727, -3.733170614624078], [0.841455502125342, -0.875648365420116, -0.18333568707783512, -2.1168001463183175, -3.375911908641574], [0.8826236401846385, -0.48099929053933527, -0.592672054435728, -2.6697726318352086, -3.7651705345249], [1.0951668610601804, -0.5594772950767869, -0.28049482498061096, -2.5925730041815527, -3.3356932293017185], [0.8454583535080387, -0.6321652357208721, 1.2002608843555291, -3.4090209360979222, -3.3014523324536142], [1.4669065803587946, -0.11519668513216524, 0.5177239065232379, -1.0010128417353656, -3.936375257086952], [1.3589014184738113, 0.47805598556335555, 1.4138081980078132, -1.4635648507112557, -3.873883016060742], [2.0287047800424567, 0.8037750321103496, 0.365422439137794, -1.453667332786449, -3.1962271448470108], [1.0606540381250422, -0.5536540213815284, 0.32483362063139554, -2.394987327593012, -3.2688873522526167], [1.045921366023037, -0.6979720204261425, 0.22652358608264075, -1.988021902528596, -3.630981159854656], [1.6525868153183212, -0.7010463596306996, 0.7518426703034313, -1.313665885500575, -3.42705244090018], [1.6284247651490455, -1.0761622843582916, 1.2922581774572004, -0.14057042114917692, -3.4768550927878548], [0.7672652482778144, -0.9268863776044401, 1.3601721264772204, -0.4823065471327975, -3.666777063281202], [1.3829105090446216, -1.6934097065690483, 1.412475667876992, -0.22312983648851406, -3.4158399433734066], [1.6783035232051098, -0.016968180744920153, 1.207466031365672, -1.332110745381263, -3.685104985859681], [0.8724232344954886, -0.45281189659424337, 0.9015842445153848, -0.2079508335536199, -3.3838660704458574], [0.9128071154781991, -0.5346674442847859, 0.8817603218174102, -0.303779644814049, -3.683295122644023], [0.8903262322846672, -0.8078165164420723, 1.4055496938546217, -1.3770755942755528, -3.6595201430583337], [0.48079807003985414, -1.9510595865091445, 1.3366780360905108, 0.18050743413193632, -3.817519360099879], [0.3267602779696197, -2.0664602399782988, 1.2096639128924662, -0.04721221960603664, -3.7094341068971644], [-0.35661767796975263, -1.8188784587045692, 1.5330090961106342, 0.039870601317586477, -3.487454437823159], [0.5353122367101419, -1.4092549981355775, 1.329651156776418, 0.006377600848218742, -3.6563275396458823], [-0.08856110765113606, -1.942748987883847, 1.3171881268596901, 0.04514873793108332, -3.327719723520575], [0.6561398988646796, -1.4976863741803514, 1.3314055172805297, -0.8303828011388434, -3.802687752882251], [0.6789264125508225, -1.2114623062826606, 1.661013836416524, -0.2423151557392486, -3.4372726036536614], [1.0938615593365117, -0.7351615095512946, 1.2118927549757617, 0.3067251733883034, -3.682217411958154], [1.0927671960311938, -0.5229578705420987, 0.23975985752746248, -1.367441489358342, -3.475053888274956], [1.2116503092103879, -0.5252636920407261, 0.6584239064308753, -2.4454161500170017, -3.4467458227121113], [1.5478776873104536, -0.11531406289439669, 1.5374206516838411, -1.327819860338672, -3.467756452094245], [1.2294537506939123, -0.2897860897118469, 1.650638647037356, -1.6649308741591038, -3.4873345211227122], [0.8143646367292688, -0.30392738242925577, 2.0396053699151757, -1.756090167704921, -3.6080342469235562], [0.9821371795919107, -0.3111310097098975, 1.2123730468502614, -2.3422652965944675, -3.606015363493633], [1.0149098396105143, -0.04439949782680136, 1.0075471309523023, -1.8097247239432555, -3.305033271020829], [1.1610547168678746, -0.8709866057933814, 0.6462165377376962, -0.6636761119370534, -3.360687735006524], [0.7013469628782969, -1.1557843658360394, 1.3526101151998655, -0.9053462894561985, -3.718465285159561], [0.6211759074138432, -1.93040784560624, 1.2816873947348146, -0.02675056613840107, -3.515589589315804], [1.606374251861397, 0.06846528160959742, 1.2909523430396925, 0.32454586029166055, -3.4505099771367407], [1.40088230227339, -0.43578032714475035, 1.6878771163303434, 0.36234286327080123, -3.6630287355055087], [1.5886253814995162, 0.41798148226784065, 2.1257019411394937, 1.0454863679404212, -3.5309996223903286], [1.7479809195417109, 0.7784864049765562, 1.9146516991892726, 0.9829500668648122, -3.7577782265835666], [1.5991918168332495, 1.4121980977745747, 2.211505024347216, 0.8522490722679379, -3.368465341722172], [1.7210859093094508, -0.6802407087846332, 0.44865841274261664, -1.2690794780921664, -3.594913591357564], [1.366020110917801, -0.4483507547206281, 1.2546630421211336, -1.7049920412889694, -3.400862881544006], [1.4020921449741692, 0.058020660337900626, 1.275231265575245, -1.990782961378179, -3.6658261750302183], [0.8980747840184998, -0.7944531482647692, 1.129641142819819, -1.6342745657493538, -3.4603356891471706], [1.6409307238496145, -0.44695073682581654, 0.5382751886061807, -1.0545572243155525, -3.6999036458015326], [1.477434501443265, -0.36980189920746154, 0.9162392824886294, -0.9053222817062221, -3.5361889687382817], [0.6559750039512233, -1.1550514663498122, 0.8821932300260196, -0.9089163169066657, -3.459581316702466], [0.8620888650066212, -1.1771327275293682, 1.1929987599913916, -0.7058732353686775, -3.144670815088713], [0.6466682664924378, -1.2347203655922152, 1.145674081030354, -0.6797363970118974, -3.527251741929337], [0.9493348652324667, -1.3356224513400996, 1.658355929135874, 0.0064632408979627375, -3.5974110029161435], [0.5058863718306466, -0.8973268565845693, 1.457472690661361, 0.29652142656970354, -3.5116704699534784], [1.0139228927322719, -1.71102773957441, 1.0271013799840236, -0.5136918233998762, -3.2513492283488548], [0.3451604152512257, -1.3404892144719003, 1.2952697589095366, -0.4881847560214505, -3.282770057789285], [0.5506732923931716, -1.8929881523545697, 1.5504548316354259, -0.5563157369575374, -3.506120934627187], [1.0409190975298332, -0.5111108357399663, 0.5169355944598274, -0.8957477443688219, -3.4536466701802273], [0.9297176832184892, -0.7821581933803397, 1.3023008758531311, -1.9529217957266205, -3.627934562096221], [1.3470514100244362, -0.25984780114837835, 1.3525691699732663, -2.020813106866004, -3.5830146156775813], [1.9364002296070706, 0.40265636833395124, 0.712405312033224, -1.786820433449356, -3.260876061378139], [1.8663313370051284, 0.30828901308835105, 0.8539175587001162, -1.6621405085882806, -3.5733056665882317], [1.5963257346201292, 0.8686303566431319, 0.7695043947439316, -1.9984458234146258, -3.4488752179263162], [1.6190612054558313, -0.5544353167299078, 0.36543781085479327, -0.848906119944171, -3.611453980565369], [0.02176445746101205, -1.644712145912343, 1.4605415080639739, -0.7437997155402635, -3.5986243630118846], [1.4209696400125253, -1.2177106247336613, 1.1717456424501698, 0.48314161060053834, -3.134058128442287], [1.6274786783069386, -1.6491461941017225, 1.8972654886935132, 0.2850646577068042, -3.8610057303313314], [1.4261177383349921, -0.4077008328980357, 0.7771344338014121, -0.32357444022296933, -3.574847468620643], [1.2901023407096912, -0.4756134593809789, 0.8006584889224398, -0.21710787140775167, -3.5265416434062686], [1.432298733888544, 0.608090379832239, 0.902084123536541, -2.767207686142897, -3.4490691651795053], [1.5711849642082083, 0.24098850359224483, 0.9553982628390695, -2.1913692466507526, -3.405973585066366], [0.9414142205727056, -0.12273158488313655, -0.20000245850607545, -1.6387663417160632, -3.439968613939363], [1.6280378560586661, 0.016132132778246724, -1.1159850660464115, -1.72080364387188, -3.6153553199653325], [1.3392281294625223, 0.013280643073713797, -1.5073407831495833, -2.109148021151384, -3.9079513584108487], [1.3547776848131385, -0.2775313248356044, -1.8411041880578476, -2.174810798077696, -4.066449598131847], [0.9181047899963487, -0.4300649209204287, -1.7021818684396566, -2.169613866540373, -3.9121409397490354], [1.261175963623666, -0.6464472692797921, -1.6629005954409588, -2.069141430547882, -4.068080867395792], [1.5577188196591845, -0.2601036432159331, -1.8116607098399111, -2.1114019675287437, -3.9399135102200384], [0.5771586274775824, -0.7812611774717286, -1.511888096183498, -2.2316418911962255, -3.8773302192141377], [1.1459498358612237, 0.425717838992397, -1.8540019322378403, -2.1717773433138627, -3.9566749930191905], [1.3151495226127012, -0.9379328977982762, -1.3108614549148296, -2.0144943079842776, -3.822813137821747], [0.8908626051042178, -0.36519301381824604, -1.733217848236695, -2.0219618320450454, -4.0877500267206095], [1.606022333317857, -0.022458234484492363, -1.381232567182615, -2.1857831906491407, -3.8611424717840976], [0.8405641853824826, -0.4222664751211901, -1.70279341458172, -2.0539585645308134, -3.936108072368076], [1.804537135878202, 0.13549429095441412, -1.2728938680838324, -2.2710099963107186, -3.762558070494597], [1.5193682963519255, 0.10516235124200843, -1.3176962509660002, -2.2103374064814885, -3.7063951469115675], [1.0374752031837196, -0.8363295475892383, -1.4533198939870982, -2.1609302546882305, -3.9522957227918214], [1.5961742393924305, 0.438458422102329, -1.583339117763125, -2.0800567770961313, -4.005034860770101], [1.5779952388943566, -0.008030852067936078, -1.715581876353502, -2.504305840862877, -3.634333612868781], [1.4169910578832905, -0.05158736131042843, -1.7900050654140127, -2.082339779063033, -3.986477386986493], [1.3091042926042542, -0.13716992405121217, -2.0543817498739023, -2.4059102650444486, -3.8140446194704185], [0.7329522891003865, -0.8004778920361357, -1.7066704192045727, -1.7560949143527282, -4.008022690129941], [1.2180144379283426, -0.3160565819399457, -1.494666759800981, -2.8055281149702394, -4.000498804553171], [0.7146381919158803, -0.25061752060431425, -1.848513319234094, -1.941327443197457, -3.534744190969888], [1.0735192652614998, -1.0132089182106605, -1.5302889893657663, -2.018250789710626, -3.8358307324490797], [0.9805749984046246, -0.13412798283931932, -1.8376130169634786, -1.9874492245735473, -3.953949108968538], [1.0620629608144165, -0.42396216485407107, -1.7581089228309315, -2.998354815347754, -3.66534766077316], [1.4776228376836522, 0.13892534799897974, -1.5351035155739694, -1.6447234905749275, -4.10043664019617], [1.1369394408234808, -0.491111456796266, -1.5404484244189152, -2.634594303623633, -3.3544527694182933], [1.6964077227115948, 0.009136595838582229, -1.231132161617286, -3.2486617487646887, -3.629257947544835], [1.3188327965912228, -0.6502843997789562, 0.3888053386671638, -1.2141324572159051, -3.4661509147049094], [1.2412410843962587, 0.127426481338472, 1.649570858681998, -1.0351349165813466, -3.451962717227269], [1.204790889497948, -0.39257574741744194, 0.9962937992140326, -1.7474654405805456, -3.4777490303285115], [0.7511009311921663, -0.8144775347862032, 0.7429802289862928, -0.8561537535234984, -3.4686090535501575], [0.7466099640663724, -0.9553119684516307, 0.7302648626674834, -1.06915967588624, -3.4393333854261012], [1.1525942033869516, -0.8631839076768044, 1.1619278263788264, -1.1715056714102474, -3.5504610437403312], [1.183752329446925, 0.055629910308352216, 2.6015101017538007, -0.05095545361743811, -3.711962024214974], [0.7301393779041199, -0.8422491246702408, -2.23634755761051, -2.351156275604632, -3.9299253839104], [1.2123571019869583, -0.19805431597459874, -1.0384954426708466, -1.7246277347215353, -3.780270882886519], [1.5432544170432392, 0.3470609182440093, -1.882498210831614, -1.6905107094429266, -4.118318481460441], [1.5952615709573277, 0.3826017165582151, -2.001803696856663, -1.5920089169375369, -4.380500655754629], [1.339482510685832, 0.1536890247307442, -2.4851042841431243, -2.0158665825871926, -4.782960220457287], [0.8096919887563626, -0.7133226888106805, -1.284301302324363, -2.477205037408075, -3.6208747108490345], [1.529886506116662, -0.1494820927471644, -1.8159365776342955, -2.038210880901368, -4.148545293412761], [1.2111464387239257, 0.3869600722622089, -1.1717545760315131, -2.6911999639703637, -3.496056842423965], [0.9821481806251636, 0.3235799511303087, -1.074603418605867, -2.771621311921411, -3.859966565298384], [1.2964350436514536, 0.44130347837375405, 1.0815021181660474, -1.0528632874919226, -3.6426294816614946], [1.7459552913640521, -0.6077621579343845, 1.128524054966618, -0.4806995865444014, -3.479231799147213], [0.11945916593310278, -1.6814611273603348, 1.2805918642306033, -0.3218872475826837, -3.1150241553259956], [0.6070915092947053, -2.171923640653571, 1.6675980320587604, 0.37188260372554066, -3.210802451245219], [0.40482477937089306, -2.3546975784108195, 1.5169599729560133, 0.03166724288607087, -3.445857219444632], [0.9643410424490901, -1.872532158410071, 1.2853235963010774, -0.25212510496242, -3.7244834209110227], [0.20200530533298644, -1.6025453973151202, 1.5342872003937955, 0.07484479701312587, -3.5614015432870523], [1.465493487231266, -1.0810707714676275, 1.0243611138521822, -0.5927717610361796, -3.6101695603731003], [0.6327843893318104, 0.15648046428191864, 1.6671514047616316, -1.8300810380686658, -3.3403771465922345], [1.3117544124048683, -0.9628158148744779, 1.020904117187988, -1.199285550665219, -3.721992054599144], [1.0780644211310868, -0.1913713756933815, 0.5954224541931371, -1.0505473602331814, -3.6719415248324583], [1.8870763380322373, 0.22321020401327807, 0.4948355257006094, -0.9012399549935021, -3.3917633632643227], [1.106517248879566, -0.5763337167817428, 1.0067087213230066, -1.4851373534170513, -3.3798180813791423], [1.1199053859448005, -0.3786822072185386, 0.5400308395791257, -1.313288060549637, -3.3960957866466743], [1.402662923000175, -1.0160754952212543, 0.5938000737319672, -2.0312123157769304, -3.703236673429717], [1.633891089120054, 0.3923050318884125, 0.9712447494908168, -0.2780955112814283, -3.280998473657728], [0.9327852219817475, -0.7984423446669443, 0.1342535833256309, -1.8591482025038077, -3.3906312736094413], [1.3627877237316959, 0.17232526241281654, -0.193945322312227, -2.9637368325440896, -3.532118529502837], [1.0172059206597692, -0.8398930239443378, 0.48247355169541495, -2.13409708987067, -3.387183927418175], [1.3992499349261147, -0.3051885835749658, 0.5272974588781916, -1.9696637504353378, -3.299125821496705], [1.5879545131689268, -0.36766969109397685, -0.12288946843159032, -1.71306627057549, -3.571758306536973], [0.6377238414204054, -0.5598014475675762, -0.12273432902938139, -2.889314003011781, -3.4596135764017353], [1.3148422304164764, 0.18117645881697717, -0.8729880761088833, -2.362533331398052, -3.814948844104253], [1.2857766696763142, -0.46251493481269856, -2.02586185473902, -2.286946343719247, -4.376929761135881], [1.2711175088377185, 0.02004496082616572, -2.136143383618352, -2.045593050673216, -3.3745159732848666], [1.405424438718536, 0.1434175710517574, -2.012243765993751, -2.039589243496, -3.87741341131317], [1.1865563691066867, 0.16858662978579592, -1.841029232786026, -2.1204611708961023, -4.244406712497476], [1.04875112590332, -0.5035814885829991, -1.3035564049844839, -1.9591919846444705, -3.639952340866199], [0.9791626797682952, -0.7397353256516825, -1.1946349382672334, -1.6439656537277365, -4.03265142353005], [1.201550772941199, -0.1343531937326191, -1.7133501953499475, -2.3070994856587825, -3.7811536439169773], [1.2402141441905472, -0.07904476136455166, -1.6807658362647389, -2.5269482875347276, -3.780986208303109], [1.124769868711392, 0.011955883435135463, -1.8297418688200602, -2.355738899345633, -3.393636266241304], [1.3500132027874974, -0.19640546709624873, -1.6779021583748457, -2.10143803167033, -3.654353353893254], [1.4638922103915584, 0.525819420667412, -1.4582450838669458, -2.4476551735114067, -3.9306105926483523], [1.5821739615943091, -0.09040076815920939, -1.4097932784743614, -1.7197328424661715, -3.728980549009142], [1.3765086891981213, 0.17199819426872912, -1.7033373857448364, -2.3698087500091507, -3.6037369384467093], [1.2515792387924956, 0.18486702173600655, -2.265522727102908, -2.5444046809891487, -3.9375171027923574], [1.5049653164069312, -0.28958135938138063, -1.1664096053437991, -1.7059169318713856, -3.9299377117676637], [1.270108661392611, -0.2687758359624028, -1.5605792847536566, -2.0709153989873608, -3.859975769435652], [1.732862067361151, 0.7122518221053113, -1.8171766280520483, -2.1549110009083603, -3.9734027075049045], [1.3886314792196777, -0.014784503898238432, -1.145094699629969, -2.089810853144527, -4.12823068281308], [1.8015200759617185, 0.3557714647136717, -1.4858418516025682, -2.289579600540172, -3.312568507619404], [1.9508022418169868, 0.4734836583851254, -1.5563751979952718, -2.663948799610545, -3.740173778438287], [1.7588005246731415, 0.5603224262812675, -1.51975890194101, -2.4765987068168416, -3.7173289919195573], [1.1862012691471482, 0.9460041767765656, -1.7737529111229746, -2.6820218011407415, -3.5142512528928624], [1.9041950924581261, 0.2414871114984504, -2.2205500301168763, -1.6546507590198065, -4.181877632676252], [0.7375141417054896, -1.005891614227521, -1.0077050673372736, -2.3814265925761378, -3.5137142704167394], [1.449240062540687, -0.08710639997226793, -1.4155491379278413, -1.845966533015369, -4.002602929190456], [1.4610803664251684, 0.11556690800373327, -1.4002640998309204, -1.7471201670585828, -4.161265384365245], [0.9549927712641715, -0.647290625881771, -1.5358938906108845, -1.7447115031202753, -4.0589847478500785], [0.9335719574510238, -0.6859990670593159, -2.117310006199773, -2.4930627710941646, -3.807270136692839], [0.9564853679543811, -0.5646631754229494, -2.443119682102276, -2.316046226727053, -3.9236980773632677], [0.9260732066306846, -0.9317291504671943, -2.3855540713126273, -2.126321619572991, -4.359256230183554], [1.2532358288233665, -0.3274096271673697, -2.28034857059537, -3.09938603306852, -3.9528834267443678], [1.3926904343022293, -0.2726090627358991, -2.4463958623960167, -2.6074392934501223, -3.800364387134358], [0.5655249525135899, -0.06252996822031408, -1.0966365614404725, -1.5396152474839346, -4.101494135287057], [0.9795501740219281, 0.2478882810432108, -1.3227264178638107, -1.89412180199564, -3.685674107146082], [1.5368307478551262, -0.3897033118202006, -1.2040059871278215, -1.9544571886536306, -4.003702819796706], [0.8178407116007371, -0.7483192147753851, -1.3803589297481378, -2.0129183484070206, -3.7821994561044017], [1.575853178603963, -0.08112711648740188, -1.6676099319125912, -2.0504239645265345, -3.9369007595429553], [0.6501418828582659, -0.5068432281728545, -1.3069176183814237, -2.0613172216386584, -3.946654420747241], [1.04981365315685, -0.7709230395202062, -1.6427328379372228, -2.4624046415706604, -3.610747971945688], [0.9144987925830128, -0.47734854567714624, -1.6076356442014217, -2.1414975797077784, -3.9183540142482163], [0.7178583257308688, -0.41523657986126994, -1.2374089812858267, -2.3406840697711053, -3.61437146192374], [0.6663790939012403, -0.32252538414405524, -1.2786726976050882, -2.3628846073563095, -3.5321983520079407], [1.344644269115589, -0.33263534387072125, -1.6920159592835209, -1.8963904995450087, -3.8611512884389207], [1.1382054500400698, -0.3435349862830987, -1.6866042652061637, -2.198028091417175, -3.9458356974448927], [0.7791835467921758, -0.5451876039120003, -1.4670040054249978, -1.9468166118820927, -4.065115468458258], [1.2393561755900626, -0.2767426739636375, -1.2738287470459362, -2.4628235505649196, -3.977394324991143], [1.4729092555805008, -0.15400737583407298, -1.3961922773588402, -2.4623654184079924, -3.926619293611497], [0.9628827277029818, -0.3027395298946996, -1.5297723001400416, -2.146267997766788, -3.725585911929289], [0.805087668954399, -0.9487438806269066, -1.264372775419773, -1.7301833763518293, -3.860207670101323], [1.3018056311603703, -0.5415300438024268, -1.768075035248951, -2.3742848811741712, -4.082184092493894], [1.3693897973206566, -0.08443089085095956, -1.802804548941885, -2.262550035045711, -4.065645783635746], [1.034827492044733, -0.13632963204771859, -1.6554334302971736, -2.287315712117631, -3.952922434048778], [1.2255305755047396, -0.25670932991433487, -2.1727665210397387, -2.2398344045163108, -3.9825801867627417], [1.1395378782314494, -0.1464247416742547, -2.4272957219128477, -2.23080025183854, -3.7017819342466813], [1.2447252007012999, 0.12803280730252606, -2.0508416800880855, -2.4552850542314775, -4.106409935737199], [1.6974706611336292, 0.2647253421389708, -2.1400789441942094, -1.9987023082059063, -3.931868856352396], [1.089711076612396, -0.3197057251686215, -1.5412332744317867, -2.30997383521984, -4.037664665129534], [0.7075387474560345, -1.0637882310469962, -1.3467483815463848, -2.112365113897794, -3.6159442832227637], [1.4821308178997066, 0.14820828278271536, -1.9891544834626773, -2.288801137491001, -3.855325814320828], [1.578380226830904, 0.6985064431089519, -2.166535863933923, -1.861244129954687, -4.508791387336385], [1.6464474059016991, 0.22698283226292032, -2.154971001642946, -2.500028951412913, -4.106029096829169], [1.4033599636238003, 0.2401477149324706, -1.8190757988614086, -1.9466217222498479, -4.083555032002448], [1.750241093440874, 0.14933668670642666, -2.175834823673513, -2.2108616724329533, -4.109505984112754], [1.650995635737142, -0.17927652850043838, -1.6745873193775997, -2.075830133682224, -3.9746599751581364], [1.3286033031409081, 0.10703032723120452, -2.0746334310104433, -2.317073407172517, -3.874004892986019], [1.7096405932633827, 0.5406314924136358, -1.9597303360912406, -2.373749026742485, -4.204016683913872], [1.1999769769089637, -0.43241594831627445, -1.3034341706617238, -1.8065240492332801, -3.779373820258402], [1.4735467286411974, -0.34294292190158765, -1.105411451378175, -1.644247068998796, -3.988038634372725], [0.6387170028199385, -0.38887490208303205, -1.162724560492463, -1.6624601762438787, -3.7185845558216193], [0.6429835448693413, -1.0492323424785774, -0.8143602859824777, -1.8938174423301086, -3.822204971057176], [1.386907603478731, -0.040228186130253724, -2.242095911586074, -2.506720212629012, -4.049699232657179], [1.0996023815032625, -0.8427427948916992, -2.1322471090292856, -1.810552773173745, -4.117872615746467], [1.073894885888733, -0.8271510023208142, -2.0344568516998542, -2.3804345109649034, -4.407809559912729], [1.058410464584479, -0.8022218163958792, -1.8169589010028024, -2.2622231220502598, -4.115693770798293], [1.365812295533469, -0.5512691865034268, -1.474727459572266, -1.9986844035679097, -3.779896985440109], [1.2192459927098194, -0.5778183217306604, -1.661239236747815, -2.095884767924913, -3.7570571035350175], [0.8271141043459977, -0.7456633017598046, -1.6769544530671494, -2.1174180118559818, -4.182857877798416], [0.8772330023290741, -0.6362467707465934, -1.1797385857243747, -2.263392003920299, -3.932909142086382], [1.3107412014203237, -0.3120003706381793, -1.9205256224724063, -2.123331703793723, -3.828619752951622], [1.2877322049770623, -0.2019635138816408, -1.8166090221171671, -2.3988475294668445, -4.033231724456591], [1.2396654767533872, -0.9159922976245033, -1.4548773382341273, -1.7703320312326154, -3.9019787624071403], [1.1566673692290357, 0.055002161697935675, 0.38807652293853134, -2.5151161861478575, -3.434513070587641], [2.0396752186914897, -0.1234096066028616, 1.1329267065484903, -0.4729235971200832, -3.669261594667068], [0.7619488396506456, -0.651689622874224, 0.9651169718979394, -0.651982369397856, -3.4093594179055966], [1.6771079655926502, -0.4000110687809375, 1.0339045784746959, -0.9542533837268085, -3.64177228309763], [1.541353480414974, -0.16868810152704175, 0.6316164864606786, -1.6443043851716042, -3.452740226791108], [1.1380529306838187, -0.056124127518840904, 1.1706822315463519, -1.949094917008048, -3.508918432469095], [1.2635218646240967, 0.09466352516087616, 0.9368437713503867, -1.683127921538605, -3.632932113995869], [1.5164861029288774, 0.3193117286558061, 0.03009257609266633, -2.145819873132658, -3.6018266736464617], [1.216907295681021, -0.55183786662221, 0.936723325593827, -1.6706882376791747, -3.6940540871431202], [1.045138591699344, -0.36852434606001494, 0.440586236748219, -2.240878000337953, -3.3903961374146925], [2.0051410896742046, 0.0535868991595162, 0.12838855750856995, -1.8379941580383214, -3.656547418882311], [1.3442185212411057, 0.4592959473870137, -0.15623932972202295, -2.07644164686355, -3.630653484573591], [1.2648125506105456, -0.3523583946505379, -1.2824426488934326, -2.203331689702119, -3.9126879874108558], [0.6177690974461887, -0.8996239174955957, -1.4473595061924043, -1.9472574969730196, -4.273335234085653], [1.5627680899822014, -0.4603843131045228, -1.6328992671556037, -2.2047557715922936, -3.7661467553103547], [1.5242060243270024, -0.3654755091613078, -1.9006948163355322, -2.179051258313131, -3.8609550980265404], [1.0985068104519087, 0.25359100134455875, -0.9191550877204917, -1.5745535778880553, -3.89597418722306], [1.2357411147195438, -0.9033885750301891, -2.017064374813076, -2.5284496903724283, -3.972464491078684], [0.7589886543369502, -0.5562065251476909, -1.9054012271866272, -2.5820833868276023, -4.018735174302063], [0.7648525111337492, -0.809228267337949, -1.62167061583607, -2.0011151173653143, -3.8766742656763125], [0.879679061456861, -0.6218430193873852, -1.4359579536791947, -2.2543568760121566, -3.860146270246253], [0.68509030710115, -0.5352305864792024, -1.5628481795898814, -1.889189608332183, -3.8823886713487363], [1.2558629922574487, -0.30045447342446896, -2.1148533112299184, -2.2204396458726734, -3.6190085179571527], [1.174106235011672, -0.6712067220607167, -1.2388828546023827, -2.0611254274151567, -4.189126674359264], [1.0806570637283046, -0.09067655303395847, -2.2034903876513607, -2.566224280676146, -3.924221909325758], [0.9635944453618625, -0.8793448647232149, -1.1151663378391614, -2.0385494100623687, -3.6664986969680626], [1.1596642452697197, -0.31237256959281545, -1.5451267408987355, -2.514627848369524, -3.5837159321323293], [0.5754157703369706, -0.4925762132294095, -1.3498538081400204, -1.6652252226193252, -4.328109459333409], [1.839366222747133, 0.7594309228489192, 0.7182366763724332, -2.5442461335534388, -3.4943920372965946], [1.383409743353562, -0.16117778895656526, 1.3740927222536143, -0.06212092060816246, -3.6068661329423666], [1.0032482430060488, -0.29005241716103064, 1.1839911010086588, 0.24142539516546677, -3.4946366047399966], [1.320777475043894, -0.164362631044033, 1.3806075226252688, 0.27586011827932866, -3.7144589854060577], [1.0086007047132934, -0.32459981750926176, 0.6035850762614752, -1.3912109033817295, -3.6214148662576062], [1.531960030618613, -1.428612367189841, 1.0686798824173205, -0.6950554476634795, -3.6199093537662463], [1.5744263556482239, -2.2769736337883764, 1.121800985326467, -0.10866485300729459, -3.4704143264193124], [1.5358953361032446, -2.175671043618591, 1.3097983631113659, -0.2527497711194059, -3.773654575268898], [1.473213508850328, -0.09082116508496807, 0.8231976949136113, -0.9583107010712051, -3.764375180229782], [1.2656405919058114, -0.25706533079773364, 1.0072594339093688, -1.3037481888185145, -3.316969353286394], [1.2100382214744447, -0.42338371685025195, 1.8160497457653775, 0.28348343340768983, -3.4890461552630367], [1.511094421100195, -1.8132688739190654, 1.2022609997180045, -0.23263194846375618, -3.462392022620034], [1.1868493895732735, -2.032648315928866, 1.3407703709216292, -0.3487965559693696, -3.535418553736812], [0.9347458504374633, -1.3146847666529953, 0.956566980077097, -0.29314254062720607, -3.4340347116980636], [1.6499882282507303, -0.9542310525961435, 1.0472062015068444, -0.1949909691751135, -3.6883093678245817], [2.2993175591019823, -0.9764746246203646, 1.1509262662862212, -0.5834052475348033, -3.4869134340269294], [0.563128686394123, -0.6514713680497665, 2.0358011904505235, 0.6234740022397901, -3.511504175632614], [1.9481837952060845, 0.029623791433451386, 0.7411275221747348, -1.6825874197022914, -3.4338833701126408], [1.1421919304676686, -1.330587201447774, 1.129636121338032, -0.6055287011595445, -3.6115492965033007], [1.268725893890418, -1.6028136402628232, 0.6515860262763077, -1.2302110594722653, -3.4689580212930333], [1.4505363759143786, -1.3155982085821651, 1.16229027875529, -0.012612703158905059, -3.5317136842090857], [0.953313734215925, -0.8963124658057914, 1.513779989103871, 0.050454790580945555, -3.4091304773390863], [0.7717297411059779, -1.3103108017099778, 1.4964026870448315, -0.4224614800103821, -3.4343620877943106], [0.8939517603137195, -0.7055155545979307, 1.7614657602362715, 0.4994394659145366, -3.4438447774354377], [0.23013242105987713, -2.2874400201957648, 1.3582253094659644, -0.6394765486634107, -3.457798642215981], [0.20848125588555896, -2.2492938344582796, 1.2840510950760655, -0.6324427387270007, -3.5980776742863334], [1.933428387515948, -0.5213172644390471, 1.694996875125767, 0.5384737760218166, -3.5669550198400084], [0.9383839658353997, 0.12669595738804643, 1.0511099956698684, -0.6019764272151287, -3.595836160716959], [1.2141644044697364, 0.009455290691447585, 0.9035274468832413, -0.4705662633033342, -3.86383861488104], [0.9924476206321182, -0.4327243148390033, 0.4123658548375909, -2.3237733085565933, -3.56642267571937], [1.3549466470087976, -0.024792151688839026, -2.3655422960919767, -2.200097963615167, -4.224043763203287], [1.3450298669133909, -0.08213950989119366, -2.3112773938628695, -2.1967087540826458, -4.299910179928519]], NamedTuple[(n_steps = 1, is_accept = true, acceptance_rate = 6.4246330679710235e-180, log_density = -6.944525295254138, hamiltonian_energy = 11.492605053168996, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 412.6051772198212, tree_depth = 1, numerical_error = false, step_size = 0.4, nom_step_size = 0.4, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -6.944525295254138, hamiltonian_energy = 7.885788308852005, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 5.8710748427600765e9, tree_depth = 0, numerical_error = true, step_size = 0.9340259163636535, nom_step_size = 0.9340259163636535, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.8776122610528838, log_density = 15.67299967320338, hamiltonian_energy = 7.294819486843787, hamiltonian_energy_error = -1.8911112517577724, max_hamiltonian_energy_error = -1.8911112517577724, tree_depth = 3, numerical_error = false, step_size = 0.09209433883419865, nom_step_size = 0.09209433883419865, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9930460854215762, log_density = 16.508634435668313, hamiltonian_energy = -12.931364560835995, hamiltonian_energy_error = -0.040383249469945426, max_hamiltonian_energy_error = -0.040383249469945426, tree_depth = 3, numerical_error = false, step_size = 0.06922436190850415, nom_step_size = 0.06922436190850415, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9763245112653696, log_density = 18.230737124118882, hamiltonian_energy = -14.447163244985699, hamiltonian_energy_error = 0.014145027179324643, max_hamiltonian_energy_error = 0.046956491528538535, tree_depth = 4, numerical_error = false, step_size = 0.08965156261113805, nom_step_size = 0.08965156261113805, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9632701369752626, log_density = 15.557679305932055, hamiltonian_energy = -13.923836079479017, hamiltonian_energy_error = 0.05684628553414939, max_hamiltonian_energy_error = 0.1347526263475558, tree_depth = 3, numerical_error = false, step_size = 0.12856269630657677, nom_step_size = 0.12856269630657677, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.5320630739847302, log_density = 14.032249967663633, hamiltonian_energy = -11.981413694967777, hamiltonian_energy_error = 1.370451615166136, max_hamiltonian_energy_error = 1.5328751141681156, tree_depth = 3, numerical_error = false, step_size = 0.1931719487356668, nom_step_size = 0.1931719487356668, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9932754276508611, log_density = 17.296816676505085, hamiltonian_energy = -12.977176098293754, hamiltonian_energy_error = -0.25379908192441647, max_hamiltonian_energy_error = -0.25379908192441647, tree_depth = 3, numerical_error = false, step_size = 0.07978388251202445, nom_step_size = 0.07978388251202445, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9858511648982387, log_density = 18.841991847654004, hamiltonian_energy = -15.84126658353004, hamiltonian_energy_error = -0.015376878336198274, max_hamiltonian_energy_error = 0.04722679864301682, tree_depth = 3, numerical_error = false, step_size = 0.141024895155184, nom_step_size = 0.141024895155184, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9153418899945197, log_density = 18.63023576939151, hamiltonian_energy = -17.510042004070357, hamiltonian_energy_error = 0.007754026180240459, max_hamiltonian_energy_error = 0.14636199644058223, tree_depth = 3, numerical_error = false, step_size = 0.24954968759612997, nom_step_size = 0.24954968759612997, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.07023681186725393, log_density = 18.63023576939151, hamiltonian_energy = -17.9379205971437, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 247.4392754386044, tree_depth = 1, numerical_error = false, step_size = 0.3580062615474591, nom_step_size = 0.3580062615474591, is_adapt = true), (n_steps = 95, is_accept = true, acceptance_rate = 0.9968929737953006, log_density = 18.002696746519305, hamiltonian_energy = -16.66266513805331, hamiltonian_energy_error = 0.004074521765343064, max_hamiltonian_energy_error = 0.006482352531445912, tree_depth = 6, numerical_error = false, step_size = 0.035808759301107225, nom_step_size = 0.035808759301107225, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9960230108288013, log_density = 17.450538304376504, hamiltonian_energy = -16.73615697805437, hamiltonian_energy_error = 0.0047030864392390015, max_hamiltonian_energy_error = 0.015331256399420568, tree_depth = 4, numerical_error = false, step_size = 0.06752097781422213, nom_step_size = 0.06752097781422213, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9942878147784033, log_density = 16.81673647566913, hamiltonian_energy = -16.192364286889088, hamiltonian_energy_error = 0.021203794287924183, max_hamiltonian_energy_error = -0.07858709058070801, tree_depth = 4, numerical_error = false, step_size = 0.12711154808208006, nom_step_size = 0.12711154808208006, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9693757107138519, log_density = 16.872775927921744, hamiltonian_energy = -15.61515992461789, hamiltonian_energy_error = -0.1599051412834669, max_hamiltonian_energy_error = -0.36132428714757303, tree_depth = 3, numerical_error = false, step_size = 0.23741279582406435, nom_step_size = 0.23741279582406435, is_adapt = true), (n_steps = 6, is_accept = true, acceptance_rate = 0.03535394429578029, log_density = 16.872775927921744, hamiltonian_energy = -16.16832616692307, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 4880.30795646234, tree_depth = 2, numerical_error = true, step_size = 0.40846261680343693, nom_step_size = 0.40846261680343693, is_adapt = true), (n_steps = 23, is_accept = true, acceptance_rate = 0.9994598893095489, log_density = 16.035241668400324, hamiltonian_energy = -14.635846538937127, hamiltonian_energy_error = 0.00016371261587266872, max_hamiltonian_energy_error = -0.017695718805871508, tree_depth = 4, numerical_error = false, step_size = 0.039466376384560735, nom_step_size = 0.039466376384560735, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9995762839965149, log_density = 16.0545586476308, hamiltonian_energy = -14.853576977916973, hamiltonian_energy_error = -0.030666313448222127, max_hamiltonian_energy_error = -0.07905213500355579, tree_depth = 5, numerical_error = false, step_size = 0.07509919978970318, nom_step_size = 0.07509919978970318, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9290192589636626, log_density = 14.895953675652216, hamiltonian_energy = -14.179432514933712, hamiltonian_energy_error = 0.14710502784987156, max_hamiltonian_energy_error = 0.1664631198939741, tree_depth = 3, numerical_error = false, step_size = 0.14180573050946124, nom_step_size = 0.14180573050946124, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9689829523831719, log_density = 17.29917135504766, hamiltonian_energy = -13.201623654087562, hamiltonian_energy_error = -0.22622785467521034, max_hamiltonian_energy_error = -0.4075724625320216, tree_depth = 3, numerical_error = false, step_size = 0.21467150036453717, nom_step_size = 0.21467150036453717, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9568477921070312, log_density = 13.034588085202026, hamiltonian_energy = -11.024952487628108, hamiltonian_energy_error = 0.007675255697490613, max_hamiltonian_energy_error = 0.12845725147084508, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9904750193853986, log_density = 16.660751504969163, hamiltonian_energy = -11.102462188968065, hamiltonian_energy_error = -0.07315433345523736, max_hamiltonian_energy_error = -0.3289759429962995, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 18.651097029431213, hamiltonian_energy = -16.176661327934237, hamiltonian_energy_error = -0.48209704093813954, max_hamiltonian_energy_error = -0.48209704093813954, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9743681425101353, log_density = 19.227436401344214, hamiltonian_energy = -18.083846294332574, hamiltonian_energy_error = -0.03908330057529952, max_hamiltonian_energy_error = 0.05689261773156318, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.6560300338564434, log_density = 16.617698325036844, hamiltonian_energy = -14.704942420636735, hamiltonian_energy_error = 0.49390144605579955, max_hamiltonian_energy_error = 0.6105149117797009, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9615400821038127, log_density = 18.323848475215964, hamiltonian_energy = -15.886506682426845, hamiltonian_energy_error = -0.21243274118789657, max_hamiltonian_energy_error = -0.4512493564349924, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9562458401588572, log_density = 17.865292207001797, hamiltonian_energy = -15.930118803655828, hamiltonian_energy_error = -0.050257551447057125, max_hamiltonian_energy_error = 0.2056903709127269, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9670328444451819, log_density = 19.022238325111573, hamiltonian_energy = -16.973555097941592, hamiltonian_energy_error = -0.04618026748870818, max_hamiltonian_energy_error = 0.08361348481609099, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9337279700961858, log_density = 17.860856892066334, hamiltonian_energy = -16.86781179638587, hamiltonian_energy_error = 0.06529436093170915, max_hamiltonian_energy_error = 0.09692044052361837, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9586780398742581, log_density = 18.34659665621883, hamiltonian_energy = -16.85144972836862, hamiltonian_energy_error = 0.030918117697339653, max_hamiltonian_energy_error = 0.14405318834953462, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.909244075076994, log_density = 17.632751629510484, hamiltonian_energy = -13.31657001364353, hamiltonian_energy_error = -0.005739808636279875, max_hamiltonian_energy_error = 0.20095298866195144, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9581452695730747, log_density = 17.347644727034584, hamiltonian_energy = -16.129211041183304, hamiltonian_energy_error = 0.030427604258186136, max_hamiltonian_energy_error = 0.1942546471287976, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9808920473970838, log_density = 16.72510745108344, hamiltonian_energy = -15.014591508679233, hamiltonian_energy_error = -0.02472643154381693, max_hamiltonian_energy_error = -0.25581706232586754, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8622966037540288, log_density = 15.24515369668304, hamiltonian_energy = -12.606797303647731, hamiltonian_energy_error = 0.2430278849212275, max_hamiltonian_energy_error = 0.38062444757587244, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9995806940133004, log_density = 18.443891540099074, hamiltonian_energy = -13.963094562048152, hamiltonian_energy_error = -0.2508425194994004, max_hamiltonian_energy_error = -0.41496868409994114, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8612084325753353, log_density = 17.853018506477056, hamiltonian_energy = -15.61668401056334, hamiltonian_energy_error = 0.13545780953061382, max_hamiltonian_energy_error = 0.2425447029811867, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9457968480097729, log_density = 15.755072127813563, hamiltonian_energy = -13.96297510234963, hamiltonian_energy_error = 0.0391272316603839, max_hamiltonian_energy_error = 0.23055449935755234, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9395182627711411, log_density = 15.037331903948052, hamiltonian_energy = -12.905873537577694, hamiltonian_energy_error = -0.023443000929219693, max_hamiltonian_energy_error = 0.32197561030951505, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9786524461386567, log_density = 16.906930658945484, hamiltonian_energy = -10.616470484280306, hamiltonian_energy_error = -0.08758383794846125, max_hamiltonian_energy_error = -0.4474247504552018, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9849618125032202, log_density = 15.49657096631659, hamiltonian_energy = -14.911704887024527, hamiltonian_energy_error = -0.005584782885142303, max_hamiltonian_energy_error = -0.1371494328459537, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9390874428300495, log_density = 17.21410333957782, hamiltonian_energy = -12.510732254913155, hamiltonian_energy_error = -0.10838636165077453, max_hamiltonian_energy_error = 0.23349112784368842, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6957292354818327, log_density = 15.745155862286554, hamiltonian_energy = -14.906342380975277, hamiltonian_energy_error = 0.3423009421151786, max_hamiltonian_energy_error = 0.40814230747779234, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 43, is_accept = true, acceptance_rate = 0.9999822878439004, log_density = 15.7661406485171, hamiltonian_energy = -13.352793926965955, hamiltonian_energy_error = -0.3571905027048512, max_hamiltonian_energy_error = -0.42002425842758484, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8187185031505869, log_density = 17.032566616750046, hamiltonian_energy = -11.035385729927643, hamiltonian_energy_error = 0.17400686836221624, max_hamiltonian_energy_error = 0.3695259147584675, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9917560270040334, log_density = 17.859469626692203, hamiltonian_energy = -16.429629366989673, hamiltonian_energy_error = -0.08193227711164397, max_hamiltonian_energy_error = -0.08193227711164397, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9695367419588652, log_density = 16.90874907565027, hamiltonian_energy = -16.276473113899588, hamiltonian_energy_error = 0.028199379348784248, max_hamiltonian_energy_error = 0.08096506549512128, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9699544965169747, log_density = 15.063528078383833, hamiltonian_energy = -14.110472287082352, hamiltonian_energy_error = 0.054564654629203346, max_hamiltonian_energy_error = -0.17700560066720072, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 63, is_accept = true, acceptance_rate = 0.9659756274355881, log_density = 16.51963614210959, hamiltonian_energy = -13.675873134265544, hamiltonian_energy_error = 0.038460061337268314, max_hamiltonian_energy_error = 0.18342759245281925, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9867233294542228, log_density = 16.319139946261622, hamiltonian_energy = -15.381273142679381, hamiltonian_energy_error = 0.0388005812732235, max_hamiltonian_energy_error = -0.14451446549526814, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9859856149401255, log_density = 17.524962446474227, hamiltonian_energy = -15.308992055326604, hamiltonian_energy_error = 0.009993252253313045, max_hamiltonian_energy_error = -0.18812238967259098, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9365734913391253, log_density = 17.087550734182926, hamiltonian_energy = -15.597196934114496, hamiltonian_energy_error = 0.023976992853459222, max_hamiltonian_energy_error = 0.2264589420221732, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9554976064570543, log_density = 17.301830754946447, hamiltonian_energy = -14.94066654401511, hamiltonian_energy_error = -0.14978096924137496, max_hamiltonian_energy_error = -0.24872708747012595, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9964893686642107, log_density = 18.73866595218707, hamiltonian_energy = -16.660212378127067, hamiltonian_energy_error = -0.07537232139485539, max_hamiltonian_energy_error = -0.10478506559761058, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9389535988597447, log_density = 16.772420323712417, hamiltonian_energy = -12.91112312469864, hamiltonian_energy_error = 0.15973656346332277, max_hamiltonian_energy_error = 0.15973656346332277, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9990653689672572, log_density = 15.33715066819307, hamiltonian_energy = -14.10557536910424, hamiltonian_energy_error = -0.03409099912988722, max_hamiltonian_energy_error = -0.14078713853828617, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.91991558837979, log_density = 15.349863190255403, hamiltonian_energy = -13.548041822122933, hamiltonian_energy_error = 0.19458753423139363, max_hamiltonian_energy_error = 0.22337394801891186, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9879918906481014, log_density = 17.89198171172771, hamiltonian_energy = -14.87664948257213, hamiltonian_energy_error = -0.15070709171631336, max_hamiltonian_energy_error = -0.28776214442579473, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9948301206434973, log_density = 17.86523610657338, hamiltonian_energy = -17.166547928612562, hamiltonian_energy_error = -0.06583718441927644, max_hamiltonian_energy_error = -0.09464253507807996, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9669531143023687, log_density = 18.142150624956855, hamiltonian_energy = -16.929783993165696, hamiltonian_energy_error = 0.02001931219853148, max_hamiltonian_energy_error = 0.08344212924199468, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9752812998922336, log_density = 16.57962538612315, hamiltonian_energy = -16.31602887859249, hamiltonian_energy_error = 0.04336161187959675, max_hamiltonian_energy_error = 0.06149369855483755, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9570489272567579, log_density = 18.68643973785528, hamiltonian_energy = -13.59993921674613, hamiltonian_energy_error = -0.008000758330124924, max_hamiltonian_energy_error = -0.31452017199054616, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8731304360066583, log_density = 15.69112253748451, hamiltonian_energy = -15.393536404806754, hamiltonian_energy_error = 0.1842036592173404, max_hamiltonian_energy_error = 0.1981386652636168, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9738534343912905, log_density = 15.51696818101043, hamiltonian_energy = -13.054211541632768, hamiltonian_energy_error = 0.015320318208560835, max_hamiltonian_energy_error = -0.18920010517111585, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8432987602044676, log_density = 18.00591600049296, hamiltonian_energy = -12.226313988246146, hamiltonian_energy_error = -0.01434695288305754, max_hamiltonian_energy_error = 0.38897034799881425, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8839460220186093, log_density = 15.967351813466347, hamiltonian_energy = -14.582065416046177, hamiltonian_energy_error = -0.014421354602511371, max_hamiltonian_energy_error = 0.30521042740195625, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8436439755500401, log_density = 13.07515418739188, hamiltonian_energy = -12.72885935871286, hamiltonian_energy_error = 0.20082643798224709, max_hamiltonian_energy_error = 0.20082643798224709, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9032836540167177, log_density = 13.089669971411375, hamiltonian_energy = -9.799957021824001, hamiltonian_energy_error = 0.08375844561673595, max_hamiltonian_energy_error = 1.0192456257420162, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 18.097758158327892, hamiltonian_energy = -12.962160461119552, hamiltonian_energy_error = -0.458629414773684, max_hamiltonian_energy_error = -0.458629414773684, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9466247960021272, log_density = 17.579048417079033, hamiltonian_energy = -16.467316163522742, hamiltonian_energy_error = 0.027848363627168027, max_hamiltonian_energy_error = 0.09405126748914228, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7731064173082932, log_density = 13.761421157104037, hamiltonian_energy = -12.337063641728614, hamiltonian_energy_error = 0.37487392871761216, max_hamiltonian_energy_error = 0.4895832389774917, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9773496094634979, log_density = 14.929771551075003, hamiltonian_energy = -7.918639338880829, hamiltonian_energy_error = -0.04502363881036153, max_hamiltonian_energy_error = -0.4407863591115886, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.532703307483821, hamiltonian_energy = -13.704865991250253, hamiltonian_energy_error = -0.21377757098040284, max_hamiltonian_energy_error = -0.6034696423780979, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9901604549378521, log_density = 15.765707272956526, hamiltonian_energy = -13.798563265171481, hamiltonian_energy_error = -0.049517065697271434, max_hamiltonian_energy_error = -0.3483594788446691, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8809102465426805, log_density = 16.291974943169407, hamiltonian_energy = -10.447431873730856, hamiltonian_energy_error = -0.2662334076476398, max_hamiltonian_energy_error = 0.39941618166223414, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9592553194296859, log_density = 15.958231327239616, hamiltonian_energy = -13.151657584968945, hamiltonian_energy_error = -0.047667911323515, max_hamiltonian_energy_error = 0.10931173134079586, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9234033793163879, log_density = 15.391076010047819, hamiltonian_energy = -11.441999919735265, hamiltonian_energy_error = 0.006052674001651326, max_hamiltonian_energy_error = 0.14217849323768483, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9655224265748829, log_density = 13.470230618517029, hamiltonian_energy = -12.694696751209566, hamiltonian_energy_error = 0.0932722537106514, max_hamiltonian_energy_error = 0.0932722537106514, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9587512725118968, log_density = 15.146690951977309, hamiltonian_energy = -11.880666006096547, hamiltonian_energy_error = -0.047572456081205416, max_hamiltonian_energy_error = 0.12705845318175513, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9404800135904271, log_density = 17.066471344605475, hamiltonian_energy = -14.418234439921195, hamiltonian_energy_error = -0.05291617209972621, max_hamiltonian_energy_error = 0.12771479441373224, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7805991703183863, log_density = 14.96153120296383, hamiltonian_energy = -13.805618928069508, hamiltonian_energy_error = 0.4030352303171796, max_hamiltonian_energy_error = 0.5876118581158707, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9754062769315176, log_density = 15.142886948642683, hamiltonian_energy = -10.813066568200739, hamiltonian_energy_error = -0.1431604852395374, max_hamiltonian_energy_error = -0.422800577399542, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9938584420064873, log_density = 15.264205758245396, hamiltonian_energy = -14.093683060733952, hamiltonian_energy_error = -0.12381537631300432, max_hamiltonian_energy_error = -0.2626110447947916, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9642865038973109, log_density = 12.32454414423939, hamiltonian_energy = -10.738314158702913, hamiltonian_energy_error = 0.06837411714141339, max_hamiltonian_energy_error = 0.13871559117990806, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9153457659366342, log_density = 7.092484816692711, hamiltonian_energy = -5.602402263800599, hamiltonian_energy_error = 0.8206113749284505, max_hamiltonian_energy_error = 0.8206113749284505, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 14.518687883737513, hamiltonian_energy = -6.2501244654717585, hamiltonian_energy_error = -0.878299280518533, max_hamiltonian_energy_error = -1.56152608171808, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8913803704209633, log_density = 16.648972029724014, hamiltonian_energy = -11.008464561878199, hamiltonian_energy_error = -0.0019430667090993836, max_hamiltonian_energy_error = -0.6282645335152495, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9439033962459901, log_density = 17.917777271330976, hamiltonian_energy = -15.47789537798331, hamiltonian_energy_error = -0.0028111056812711865, max_hamiltonian_energy_error = -0.18900214787885972, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9786811221858571, log_density = 16.77079975838192, hamiltonian_energy = -15.054941050196986, hamiltonian_energy_error = 0.031016778663515154, max_hamiltonian_energy_error = 0.0745738741446047, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8653279488940461, log_density = 18.11438595503752, hamiltonian_energy = -14.594018065885976, hamiltonian_energy_error = -0.0018695355467812647, max_hamiltonian_energy_error = 0.30683579902872005, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9792462117379152, log_density = 19.023289236446928, hamiltonian_energy = -16.568971473834388, hamiltonian_energy_error = -0.036904743266486406, max_hamiltonian_energy_error = 0.11005818885537977, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8907262067706848, log_density = 18.839711111670027, hamiltonian_energy = -17.11182441556167, hamiltonian_energy_error = 0.03136033054664722, max_hamiltonian_energy_error = 0.23944121305695276, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8392235019320512, log_density = 14.33816863976007, hamiltonian_energy = -13.572771068022352, hamiltonian_energy_error = 0.1660587626149468, max_hamiltonian_energy_error = 0.22568728521356718, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8901785507267048, log_density = 12.304499624665864, hamiltonian_energy = -10.371723311854804, hamiltonian_energy_error = -0.04050199746528804, max_hamiltonian_energy_error = 0.3996784051458775, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9162506198116811, log_density = 13.771131794043043, hamiltonian_energy = -9.063357399328492, hamiltonian_energy_error = 0.12410365831414616, max_hamiltonian_energy_error = 0.33158452336570576, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9981598165257537, log_density = 14.832525381280606, hamiltonian_energy = -12.79334199960784, hamiltonian_energy_error = 0.005404815267986862, max_hamiltonian_energy_error = -0.2959232040072717, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9548913085627482, log_density = 16.795228998429785, hamiltonian_energy = -13.0800865580308, hamiltonian_energy_error = -0.1841578988280066, max_hamiltonian_energy_error = -0.25052330223503994, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9996547394235535, log_density = 16.545586415959367, hamiltonian_energy = -16.212718086125914, hamiltonian_energy_error = -0.00785648887207202, max_hamiltonian_energy_error = -0.03050851550472089, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9501175156148285, log_density = 16.71881763503466, hamiltonian_energy = -13.87667538820405, hamiltonian_energy_error = 0.02652141703604549, max_hamiltonian_energy_error = 0.14918817442535648, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8586471962021306, log_density = 15.42137459706204, hamiltonian_energy = -14.007050909917401, hamiltonian_energy_error = 0.11747384492360169, max_hamiltonian_energy_error = 0.30027052220978767, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9616866967328652, log_density = 17.352532998177438, hamiltonian_energy = -14.128452393484107, hamiltonian_energy_error = -0.06663932393311178, max_hamiltonian_energy_error = -0.4609638595547114, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8449697779761107, log_density = 17.43791809419176, hamiltonian_energy = -14.709389854164122, hamiltonian_energy_error = 0.06183778492547276, max_hamiltonian_energy_error = 0.3835611345170644, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9999177742468018, log_density = 17.889876664690796, hamiltonian_energy = -15.636313643986295, hamiltonian_energy_error = -0.140836002813856, max_hamiltonian_energy_error = -0.14394391894632363, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9412129247947308, log_density = 17.91526177005545, hamiltonian_energy = -15.864306560489869, hamiltonian_energy_error = -0.07119114061558918, max_hamiltonian_energy_error = 0.11652488924075044, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7951981401106821, log_density = 15.66567090501381, hamiltonian_energy = -15.20495305153676, hamiltonian_energy_error = 0.3481614144616145, max_hamiltonian_energy_error = 0.3481614144616145, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9460486647256362, log_density = 14.718696407990763, hamiltonian_energy = -13.656419663607114, hamiltonian_energy_error = 0.33888115671371466, max_hamiltonian_energy_error = -0.47067768896990003, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 16.642141864985067, hamiltonian_energy = -11.009527220547758, hamiltonian_energy_error = -0.6669937293740436, max_hamiltonian_energy_error = -0.7990700005415743, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9951231037492306, log_density = 17.96809942301107, hamiltonian_energy = -15.546542698557385, hamiltonian_energy_error = -0.24905790359468583, max_hamiltonian_energy_error = -0.27785418603705736, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9045265109417777, log_density = 17.964768002334598, hamiltonian_energy = -16.09277458761371, hamiltonian_energy_error = 0.04806984784332613, max_hamiltonian_energy_error = 0.2779741826084212, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9852251807410727, log_density = 18.26885338967282, hamiltonian_energy = -17.17110404153499, hamiltonian_energy_error = 0.04244348091920003, max_hamiltonian_energy_error = -0.07145326103927019, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9825833696325953, log_density = 17.116971953808335, hamiltonian_energy = -16.386916346216374, hamiltonian_energy_error = 0.07218907443561307, max_hamiltonian_energy_error = -0.16100916348666416, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9449918523065209, log_density = 16.86004657619463, hamiltonian_energy = -14.757853998655388, hamiltonian_energy_error = -0.08900469970721048, max_hamiltonian_energy_error = -0.28176052853442535, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.954490703257104, log_density = 16.730475296921313, hamiltonian_energy = -14.554663324427812, hamiltonian_energy_error = 0.13215283104876185, max_hamiltonian_energy_error = -0.42562069341928677, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9715997772446019, log_density = 19.181269465905594, hamiltonian_energy = -14.010559526255273, hamiltonian_energy_error = -0.6986597763324784, max_hamiltonian_energy_error = -0.6986597763324784, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9619176907983957, log_density = 18.622384398511848, hamiltonian_energy = -17.754039178069192, hamiltonian_energy_error = 0.10299187335375137, max_hamiltonian_energy_error = 0.10299187335375137, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8883656113465405, log_density = 16.069916905926153, hamiltonian_energy = -14.73922736201507, hamiltonian_energy_error = 0.20132722787395352, max_hamiltonian_energy_error = 0.23797808611179683, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8310858786508707, log_density = 14.627879435315556, hamiltonian_energy = -9.920613866528218, hamiltonian_energy_error = -0.07171902434219746, max_hamiltonian_energy_error = 0.7067236533019017, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.887465615344183, log_density = 16.123893216040667, hamiltonian_energy = -12.444365052230026, hamiltonian_energy_error = -0.024494257200991854, max_hamiltonian_energy_error = 0.41189043734671493, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9202991306091458, log_density = 17.98090914006688, hamiltonian_energy = -13.890073916462047, hamiltonian_energy_error = -0.20702692790932886, max_hamiltonian_energy_error = 0.2972227117693347, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.839410389732526, log_density = 17.355180870580114, hamiltonian_energy = -12.604996475559062, hamiltonian_energy_error = -0.17476331386504462, max_hamiltonian_energy_error = 0.510407677132509, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9372535788061247, log_density = 16.717920348821462, hamiltonian_energy = -15.170950114431, hamiltonian_energy_error = 0.08653346195047895, max_hamiltonian_energy_error = 0.16660230822292554, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9756156486513731, log_density = 16.73589896598016, hamiltonian_energy = -13.273597680064508, hamiltonian_energy_error = -0.06229460249068275, max_hamiltonian_energy_error = -0.1597832976219724, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9966834091221001, log_density = 16.669581119856637, hamiltonian_energy = -14.553735783029989, hamiltonian_energy_error = 0.02539854830264332, max_hamiltonian_energy_error = -0.11138533998739142, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.885442993018831, log_density = 16.61363251052712, hamiltonian_energy = -12.883698591659098, hamiltonian_energy_error = 0.04071566932492843, max_hamiltonian_energy_error = 0.4460867822157262, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9772822329551877, log_density = 17.025968645549973, hamiltonian_energy = -15.54200889066382, hamiltonian_energy_error = 0.03465109389390619, max_hamiltonian_energy_error = -0.19727519522196957, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.944060989069723, log_density = 16.18937585894104, hamiltonian_energy = -12.622539995689973, hamiltonian_energy_error = -0.1694566084948832, max_hamiltonian_energy_error = -0.27596435165756716, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9512292754047342, log_density = 17.752583701410153, hamiltonian_energy = -14.40810480069744, hamiltonian_energy_error = -0.01261971500682435, max_hamiltonian_energy_error = 0.2556473257648886, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8554748025435569, log_density = 17.213104773218724, hamiltonian_energy = -14.214853470005902, hamiltonian_energy_error = -0.06780311749452217, max_hamiltonian_energy_error = 0.4241536191106974, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 18.51179625323874, hamiltonian_energy = -16.97582413188927, hamiltonian_energy_error = -0.0373442055719444, max_hamiltonian_energy_error = -0.0963783906814406, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9427610491707893, log_density = 18.72406405237579, hamiltonian_energy = -17.34206784325929, hamiltonian_energy_error = -0.021772788853041902, max_hamiltonian_energy_error = 0.12689369872736833, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8418962475912752, log_density = 17.815087150350465, hamiltonian_energy = -15.680864093003134, hamiltonian_energy_error = 0.15361103731603265, max_hamiltonian_energy_error = 0.24877947325427208, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6079215151036853, log_density = 18.173736231242273, hamiltonian_energy = -12.39601225317789, hamiltonian_energy_error = 0.23919605935033061, max_hamiltonian_energy_error = 0.8299121421803832, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8024347309614107, log_density = 16.291528023515028, hamiltonian_energy = -15.490581983076309, hamiltonian_energy_error = 0.29087321030420554, max_hamiltonian_energy_error = 0.415383044266985, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9977541170908718, log_density = 18.2878237552104, hamiltonian_energy = -16.161343568332814, hamiltonian_energy_error = -0.29427392408062936, max_hamiltonian_energy_error = -0.33754618612420195, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9721979851062881, log_density = 15.093726700009382, hamiltonian_energy = -13.810688379352504, hamiltonian_energy_error = 0.13334176149875, max_hamiltonian_energy_error = 0.13334176149875, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9985380598921992, log_density = 15.730072379937676, hamiltonian_energy = -13.128048238698927, hamiltonian_energy_error = -0.055793187990452964, max_hamiltonian_energy_error = -0.2592364067618931, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6066747544033539, log_density = 17.242563333222, hamiltonian_energy = -8.00177955716662, hamiltonian_energy_error = -0.09803144835684563, max_hamiltonian_energy_error = 1.0407762810505723, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9463181306857343, log_density = 16.409914515362495, hamiltonian_energy = -15.259147732660352, hamiltonian_energy_error = 0.006472269688705623, max_hamiltonian_energy_error = 0.1790620449812419, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9872709051509765, log_density = 17.451752853477558, hamiltonian_energy = -15.166392623000913, hamiltonian_energy_error = 0.04190360469430132, max_hamiltonian_energy_error = -0.1332812473901086, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9999195037956151, log_density = 17.602878467181213, hamiltonian_energy = -16.447034006756375, hamiltonian_energy_error = -0.003901432565076135, max_hamiltonian_energy_error = -0.08971957372073192, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8624317811085541, log_density = 16.215468479457854, hamiltonian_energy = -13.854739257583045, hamiltonian_energy_error = -0.0022452505749672724, max_hamiltonian_energy_error = 0.2713308233050675, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9910671011895563, log_density = 17.292243423346882, hamiltonian_energy = -15.565746028409942, hamiltonian_energy_error = -0.02883172475884166, max_hamiltonian_energy_error = -0.13533277380232, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8207146147844268, log_density = 16.92990510734247, hamiltonian_energy = -15.892833294759305, hamiltonian_energy_error = 0.09224102544433777, max_hamiltonian_energy_error = 0.39233355708296536, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7855175065310193, log_density = 18.01293404437205, hamiltonian_energy = -14.134918572418503, hamiltonian_energy_error = -0.06646168695827726, max_hamiltonian_energy_error = 0.5802716130298187, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9242470046236789, log_density = 18.148895870097746, hamiltonian_energy = -16.76057949950787, hamiltonian_energy_error = 0.0852331063482552, max_hamiltonian_energy_error = 0.23223780475566969, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9649578339821775, log_density = 18.446421638106894, hamiltonian_energy = -16.891774602756396, hamiltonian_energy_error = -0.1066494528251738, max_hamiltonian_energy_error = -0.1480077492503611, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9388138928841964, log_density = 17.638345140656995, hamiltonian_energy = -17.201883907049083, hamiltonian_energy_error = 0.07545321027475183, max_hamiltonian_energy_error = 0.1377832901714804, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9743585885603487, log_density = 15.035909779866493, hamiltonian_energy = -14.149704256936664, hamiltonian_energy_error = 0.022634470701687448, max_hamiltonian_energy_error = -0.09394093720813856, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9257929607428422, log_density = 17.183280738384223, hamiltonian_energy = -13.099228156928707, hamiltonian_energy_error = 0.1779218094601447, max_hamiltonian_energy_error = 0.21546534671294104, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9741887445992112, log_density = 15.655691059555618, hamiltonian_energy = -15.176995305627385, hamiltonian_energy_error = 0.1628003228271524, max_hamiltonian_energy_error = -0.358565133343296, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9903625179935354, log_density = 16.682174906246182, hamiltonian_energy = -14.03342092274077, hamiltonian_energy_error = -0.5195776028838779, max_hamiltonian_energy_error = -0.5195776028838779, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6362531479482115, log_density = 14.334545503026384, hamiltonian_energy = -11.479160371048845, hamiltonian_energy_error = 0.16975127358473507, max_hamiltonian_energy_error = 0.8604385113546975, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8873037190883839, log_density = 15.348829211438249, hamiltonian_energy = -10.998329630930792, hamiltonian_energy_error = 0.058139811429882116, max_hamiltonian_energy_error = 0.444687703663428, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.996035964518679, log_density = 16.720282018357675, hamiltonian_energy = -14.186725020219829, hamiltonian_energy_error = -0.12441980346683046, max_hamiltonian_energy_error = -0.22781891819052547, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7760484632222489, log_density = 16.71001217626467, hamiltonian_energy = -12.889734062233593, hamiltonian_energy_error = 0.142393980070036, max_hamiltonian_energy_error = 0.3738409906027549, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.95248563901255, log_density = 17.083564399221352, hamiltonian_energy = -15.269717551291482, hamiltonian_energy_error = 0.0800229770091434, max_hamiltonian_energy_error = 0.11921772862186764, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7249788262040285, log_density = 14.96364349782434, hamiltonian_energy = -12.246778968228945, hamiltonian_energy_error = 0.4688188951573231, max_hamiltonian_energy_error = 0.6801455761500534, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 16.970181648611387, hamiltonian_energy = -14.858019718142101, hamiltonian_energy_error = -0.4078411608073207, max_hamiltonian_energy_error = -0.4078411608073207, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 18.83145349790764, hamiltonian_energy = -15.105748751200647, hamiltonian_energy_error = -0.08274286901706063, max_hamiltonian_energy_error = -0.1285817027567262, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7270493275239653, log_density = 16.53336841533601, hamiltonian_energy = -14.325059324818557, hamiltonian_energy_error = 0.14840649301124031, max_hamiltonian_energy_error = 0.573870017147927, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9103862781609053, log_density = 17.678570650992864, hamiltonian_energy = -14.035991624049695, hamiltonian_energy_error = 0.009870142719709207, max_hamiltonian_energy_error = 0.19645305632066012, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9783064079385878, log_density = 16.127812555910204, hamiltonian_energy = -15.393289506529603, hamiltonian_energy_error = 0.04470510652294912, max_hamiltonian_energy_error = 0.054277263405344556, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8540302624007228, log_density = 14.85765659347675, hamiltonian_energy = -12.3280586815132, hamiltonian_energy_error = 0.08108384044492212, max_hamiltonian_energy_error = 0.5384499888070398, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 17.277587468328257, hamiltonian_energy = -14.142179058353475, hamiltonian_energy_error = -0.16232605701414649, max_hamiltonian_energy_error = -0.18355072772706826, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9901783084162284, log_density = 18.372736547729556, hamiltonian_energy = -16.232360239713906, hamiltonian_energy_error = -0.029852171302710673, max_hamiltonian_energy_error = -0.07168766742043431, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9527378567602562, log_density = 18.29957586834382, hamiltonian_energy = -17.786088468833455, hamiltonian_energy_error = 0.07234999742823334, max_hamiltonian_energy_error = 0.08373293232896017, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9279936619836016, log_density = 17.169360404857308, hamiltonian_energy = -15.196058904635077, hamiltonian_energy_error = 0.19376733383828793, max_hamiltonian_energy_error = 0.21418720288845883, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.77136329297658, hamiltonian_energy = -14.676427210780302, hamiltonian_energy_error = -0.006992011847561486, max_hamiltonian_energy_error = -0.2691304163095296, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.92743263750356, hamiltonian_energy = -13.900235545246007, hamiltonian_energy_error = -0.047811571718204604, max_hamiltonian_energy_error = -0.30636172431765374, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8813010913999102, log_density = 14.679325862903205, hamiltonian_energy = -13.880405318389323, hamiltonian_energy_error = 0.33886689590456953, max_hamiltonian_energy_error = 0.41630993415837025, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9667873595124054, log_density = 14.465164817568642, hamiltonian_energy = -11.606878533727937, hamiltonian_energy_error = -0.1556187037489103, max_hamiltonian_energy_error = -0.43408329256724265, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 16.458639095535304, hamiltonian_energy = -13.903377766030719, hamiltonian_energy_error = -0.25501887470942997, max_hamiltonian_energy_error = -0.40132697759259983, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9548377457388897, log_density = 17.402988123749928, hamiltonian_energy = -11.035119925731788, hamiltonian_energy_error = -0.06869783445716493, max_hamiltonian_energy_error = -0.28898790898884386, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8474831259510619, log_density = 16.086541530325537, hamiltonian_energy = -12.941935387242136, hamiltonian_energy_error = -0.12327989926335015, max_hamiltonian_energy_error = 0.7188850570364096, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9904653993754508, log_density = 17.05307408742477, hamiltonian_energy = -14.80063184279961, hamiltonian_energy_error = -0.01817469846399966, max_hamiltonian_energy_error = -0.20961334707650003, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9023061205263385, log_density = 17.68136866248067, hamiltonian_energy = -15.756073394815985, hamiltonian_energy_error = 0.08894928698858351, max_hamiltonian_energy_error = 0.23330845022905677, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9806930692831419, log_density = 17.082354770040556, hamiltonian_energy = -16.34754078273503, hamiltonian_energy_error = 0.0075403563786373695, max_hamiltonian_energy_error = -0.17865681486448892, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9718371113501032, log_density = 16.420878261762727, hamiltonian_energy = -15.840078177009534, hamiltonian_energy_error = 0.08114896881472866, max_hamiltonian_energy_error = -0.18300931940400567, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9901325689645423, log_density = 15.993587262772508, hamiltonian_energy = -13.946085116442234, hamiltonian_energy_error = -0.00602491068463884, max_hamiltonian_energy_error = -0.3101587607087577, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8215907375416714, log_density = 17.416400811069835, hamiltonian_energy = -12.656730209393722, hamiltonian_energy_error = -0.22531743791932257, max_hamiltonian_energy_error = 0.500214807408101, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8164344139246421, log_density = 17.28105777083901, hamiltonian_energy = -14.29782939373507, hamiltonian_energy_error = 0.15575178579159754, max_hamiltonian_energy_error = 0.5135383515180116, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9677292187481876, log_density = 17.714287478151633, hamiltonian_energy = -15.463050487953929, hamiltonian_energy_error = 0.03293734317390751, max_hamiltonian_energy_error = -0.11272497661187231, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9063252436495522, log_density = 18.299246792948544, hamiltonian_energy = -15.805780627807827, hamiltonian_energy_error = 0.06084804550560641, max_hamiltonian_energy_error = 0.24786407599495774, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8645048306774987, log_density = 16.411745334482752, hamiltonian_energy = -13.263863779543476, hamiltonian_energy_error = 0.22479398865243283, max_hamiltonian_energy_error = 0.23223205607469133, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.985651833807084, log_density = 17.800505552712934, hamiltonian_energy = -15.007741573044578, hamiltonian_energy_error = -0.135992750150022, max_hamiltonian_energy_error = -0.26319474992366665, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9691435446141418, log_density = 17.515305245637187, hamiltonian_energy = -16.5265610463507, hamiltonian_energy_error = 0.012953320107531141, max_hamiltonian_energy_error = -0.25485824043615324, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9255716661175949, log_density = 15.386410271876825, hamiltonian_energy = -14.985826299701786, hamiltonian_energy_error = 0.2648874270613213, max_hamiltonian_energy_error = -0.3933703645386881, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9734859598885927, log_density = 17.921904325120902, hamiltonian_energy = -13.886931560399566, hamiltonian_energy_error = -0.6140141203575986, max_hamiltonian_energy_error = -0.6140141203575986, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.962509281474048, log_density = 18.303346252233172, hamiltonian_energy = -15.141118938726239, hamiltonian_energy_error = -0.16745681049417804, max_hamiltonian_energy_error = -0.16745681049417804, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9419635886981558, log_density = 18.917792015799822, hamiltonian_energy = -16.849347582344485, hamiltonian_energy_error = 0.014486195452146688, max_hamiltonian_energy_error = 0.19636020260791298, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6879528268659305, log_density = 18.456358903408834, hamiltonian_energy = -13.343158449489206, hamiltonian_energy_error = 0.34737104053411016, max_hamiltonian_energy_error = 0.7984268331747977, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9518119218935137, log_density = 17.1548106978924, hamiltonian_energy = -15.98687873760498, hamiltonian_energy_error = 0.004778049684258434, max_hamiltonian_energy_error = 0.1155004401818367, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9371549549274603, log_density = 16.817330543703903, hamiltonian_energy = -14.204337877816192, hamiltonian_energy_error = 0.02891459470473734, max_hamiltonian_energy_error = 0.20611145721125723, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9758877608052868, log_density = 17.80017346516231, hamiltonian_energy = -15.124216379723284, hamiltonian_energy_error = 0.01105860714497453, max_hamiltonian_energy_error = 0.1441715426161636, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9978590265954043, log_density = 18.9552575121133, hamiltonian_energy = -17.492764114436476, hamiltonian_energy_error = -0.0714180175546133, max_hamiltonian_energy_error = -0.0714180175546133, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.4667265542141361, log_density = 14.488381240670865, hamiltonian_energy = -12.274942443431968, hamiltonian_energy_error = 0.73030238420694, max_hamiltonian_energy_error = 1.0378656319680442, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8869456680938806, log_density = 17.551203246205056, hamiltonian_energy = -10.576417862283135, hamiltonian_energy_error = -0.29461343864652, max_hamiltonian_energy_error = 0.4317397650505992, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9907971832034684, log_density = 17.851112411211496, hamiltonian_energy = -16.40149884985856, hamiltonian_energy_error = -0.11841525461743885, max_hamiltonian_energy_error = -0.21588178144056158, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9588997973162459, log_density = 16.729777152728897, hamiltonian_energy = -13.888240361474136, hamiltonian_energy_error = 0.06186016267045602, max_hamiltonian_energy_error = -0.1884575090781997, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.7595717348363982, log_density = 16.832602911923395, hamiltonian_energy = -12.486251156765555, hamiltonian_energy_error = 0.0902545956044225, max_hamiltonian_energy_error = 0.6196123142882097, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8743944860096011, log_density = 14.754521533439906, hamiltonian_energy = -12.793254356202064, hamiltonian_energy_error = 0.11752386811434157, max_hamiltonian_energy_error = 0.3179579031974171, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7868237606731079, log_density = 11.778882534978823, hamiltonian_energy = -9.857262347536233, hamiltonian_energy_error = 0.23932963364790893, max_hamiltonian_energy_error = 0.4696469371314027, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8164305550331291, log_density = 10.698657561116907, hamiltonian_energy = -8.386595490941009, hamiltonian_energy_error = 0.12844872116373907, max_hamiltonian_energy_error = 0.7256640812878334, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8986880264762872, log_density = 14.992603664067472, hamiltonian_energy = -6.158708142395648, hamiltonian_energy_error = -0.18301690557502148, max_hamiltonian_energy_error = 0.8686174205496995, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9884272734133636, log_density = 17.825241486627206, hamiltonian_energy = -12.529488544160621, hamiltonian_energy_error = -0.22387802149354386, max_hamiltonian_energy_error = -0.24940647445320074, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9712475783391257, log_density = 16.712074876075846, hamiltonian_energy = -16.089200553093075, hamiltonian_energy_error = 0.05237211025045241, max_hamiltonian_energy_error = -0.12922189266864237, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7879796535245348, log_density = 14.3074479456948, hamiltonian_energy = -11.670815933668763, hamiltonian_energy_error = 0.38447633619982113, max_hamiltonian_energy_error = 0.5945104953117788, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 13.69305880860291, hamiltonian_energy = -11.435364657397567, hamiltonian_energy_error = -0.11691589402692415, max_hamiltonian_energy_error = -0.5503049060356027, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9962602932986458, log_density = 15.353083286194925, hamiltonian_energy = -11.731218170007885, hamiltonian_energy_error = -0.02625872482960112, max_hamiltonian_energy_error = -0.40692753868760434, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9911138673301971, log_density = 16.812554018250076, hamiltonian_energy = -14.205323108464611, hamiltonian_energy_error = -0.2683278018710098, max_hamiltonian_energy_error = -0.45402866306742773, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9903102002695995, log_density = 17.43938644815898, hamiltonian_energy = -15.706969008721156, hamiltonian_energy_error = -0.06398344697611336, max_hamiltonian_energy_error = -0.10407351846897406, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.8996562942829165, log_density = 17.621346110963785, hamiltonian_energy = -15.807304110131794, hamiltonian_energy_error = 0.14229940478176317, max_hamiltonian_energy_error = 0.198862548419676, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9509738164926581, log_density = 16.334870453747513, hamiltonian_energy = -15.898865063332867, hamiltonian_energy_error = 0.12786593054250872, max_hamiltonian_energy_error = -0.16878335619575324, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9491300795772932, log_density = 16.603405006452952, hamiltonian_energy = -14.757457722978131, hamiltonian_energy_error = 0.07465374765834021, max_hamiltonian_energy_error = -0.3254125824641054, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 18.126051244020758, hamiltonian_energy = -16.78471458575778, hamiltonian_energy_error = -0.30666516732978977, max_hamiltonian_energy_error = -0.30666516732978977, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9423122939032612, log_density = 18.37567590734036, hamiltonian_energy = -16.21407107783973, hamiltonian_energy_error = 0.05945459873194281, max_hamiltonian_energy_error = 0.07833291081448479, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9878098275602601, log_density = 18.909151528604028, hamiltonian_energy = -17.600510330540967, hamiltonian_energy_error = -0.0787462560033525, max_hamiltonian_energy_error = -0.0787462560033525, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9861257672789078, log_density = 17.410126965085382, hamiltonian_energy = -16.74428629930968, hamiltonian_energy_error = 0.002778209786949759, max_hamiltonian_energy_error = 0.027348508903056512, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8865007815083482, log_density = 15.615099379462205, hamiltonian_energy = -12.632615013009529, hamiltonian_energy_error = 0.05950579004737655, max_hamiltonian_energy_error = 0.30250629464039314, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.979039804077435, log_density = 15.194441446731657, hamiltonian_energy = -12.11998948290693, hamiltonian_energy_error = -0.054956210298675146, max_hamiltonian_energy_error = 0.10410693192083187, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9496573660767126, log_density = 16.39736752611265, hamiltonian_energy = -11.57308435645843, hamiltonian_energy_error = 0.025435333204175237, max_hamiltonian_energy_error = 0.13380851510153313, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9453897805776352, log_density = 17.108139889009458, hamiltonian_energy = -14.653408138636584, hamiltonian_energy_error = -0.12356378998514472, max_hamiltonian_energy_error = 0.281768069546132, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7975554283579782, log_density = 16.42415784673937, hamiltonian_energy = -13.34240429179166, hamiltonian_energy_error = 0.09457277751965165, max_hamiltonian_energy_error = 0.33068594231394677, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8466657242794494, log_density = 16.209092206975697, hamiltonian_energy = -11.369023516653439, hamiltonian_energy_error = -0.020564371240793022, max_hamiltonian_energy_error = 0.4387638011602313, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9500903594520052, log_density = 15.470592999735143, hamiltonian_energy = -14.457185654704343, hamiltonian_energy_error = 0.10920827764619823, max_hamiltonian_energy_error = 0.16199080996560333, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9905759982384471, log_density = 15.467247879907706, hamiltonian_energy = -13.818952576049654, hamiltonian_energy_error = -0.06473255893229535, max_hamiltonian_energy_error = -0.2865900477397503, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9228046384474212, log_density = 15.399979101202, hamiltonian_energy = -14.153725874870247, hamiltonian_energy_error = 0.1157660000413685, max_hamiltonian_energy_error = 0.3107187081666378, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9424543152311757, log_density = 11.875207603737984, hamiltonian_energy = -8.072104918101335, hamiltonian_energy_error = 0.03362313826724872, max_hamiltonian_energy_error = 0.7631688585749279, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7265003832997663, log_density = 13.913353282051263, hamiltonian_energy = -4.42520347695042, hamiltonian_energy_error = 0.11205131490456921, max_hamiltonian_energy_error = 1.3736543693356804, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 13.819094421478708, hamiltonian_energy = -12.409619547830538, hamiltonian_energy_error = -0.28831107511896015, max_hamiltonian_energy_error = -0.9098596981767102, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.546433115677043, hamiltonian_energy = -9.421660740765718, hamiltonian_energy_error = -0.15030916492753654, max_hamiltonian_energy_error = -0.6670939040521802, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9349652432685649, log_density = 15.369401357037766, hamiltonian_energy = -10.332234594988241, hamiltonian_energy_error = -0.2628177751643843, max_hamiltonian_energy_error = -0.6839607548395374, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9854023245269988, log_density = 17.317004775028636, hamiltonian_energy = -14.758665596807777, hamiltonian_energy_error = -0.35132182586568383, max_hamiltonian_energy_error = -0.35132182586568383, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.892519463073646, log_density = 17.211234557361298, hamiltonian_energy = -13.507750861775992, hamiltonian_energy_error = 0.0975913367888328, max_hamiltonian_energy_error = 0.2490327007345634, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9431733570731725, log_density = 17.846251025656457, hamiltonian_energy = -15.01127118021194, hamiltonian_energy_error = -0.09409527101941784, max_hamiltonian_energy_error = -0.1724765478468342, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9757000102100972, log_density = 18.415579583439524, hamiltonian_energy = -16.804592576106103, hamiltonian_energy_error = -0.025587015001654834, max_hamiltonian_energy_error = -0.11226754081845769, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 9, is_accept = true, acceptance_rate = 0.8641159393490196, log_density = 16.84111801094562, hamiltonian_energy = -14.853767708585623, hamiltonian_energy_error = 0.11678723015440973, max_hamiltonian_energy_error = 0.2806281823083552, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9779316016143418, log_density = 16.741237278096936, hamiltonian_energy = -15.739068404753294, hamiltonian_energy_error = 0.06722828283196236, max_hamiltonian_energy_error = -0.13124882714267372, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9101077322948751, log_density = 17.168358879375226, hamiltonian_energy = -14.713782802914999, hamiltonian_energy_error = 0.068226536367197, max_hamiltonian_energy_error = 0.3261187398754313, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9003747456234142, log_density = 17.664271972312346, hamiltonian_energy = -15.734916938431377, hamiltonian_energy_error = -0.10876278269707029, max_hamiltonian_energy_error = 0.27570764453984786, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9901242592351831, log_density = 17.55674384322061, hamiltonian_energy = -15.799315956023786, hamiltonian_energy_error = -0.18293335863857152, max_hamiltonian_energy_error = -0.19551505753957166, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7045971304755227, log_density = 15.541623821076112, hamiltonian_energy = -12.394614188724074, hamiltonian_energy_error = 0.3337115789855378, max_hamiltonian_energy_error = 0.8248377687168489, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 16.803858663960817, hamiltonian_energy = -13.445032379742145, hamiltonian_energy_error = -0.3314204370550051, max_hamiltonian_energy_error = -0.4554245866920663, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 1.0, log_density = 15.921728146119325, hamiltonian_energy = -15.30625040441549, hamiltonian_energy_error = -0.06727805624551664, max_hamiltonian_energy_error = -0.19902387772487629, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9518511930012986, log_density = 17.72522055911766, hamiltonian_energy = -13.512443936099402, hamiltonian_energy_error = -0.07900698088898928, max_hamiltonian_energy_error = 0.11835415524096327, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9072545875565542, log_density = 15.724009639279311, hamiltonian_energy = -14.660190213876955, hamiltonian_energy_error = 0.20107856639024568, max_hamiltonian_energy_error = 0.2679366405231072, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9700344251458033, log_density = 16.26679219088037, hamiltonian_energy = -13.359574085475026, hamiltonian_energy_error = 0.10444185549562057, max_hamiltonian_energy_error = -0.34226446994897763, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9904747904944905, log_density = 17.80566750338293, hamiltonian_energy = -15.131138771569072, hamiltonian_energy_error = -0.27473436252430616, max_hamiltonian_energy_error = -0.40415209026958365, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9846759414186744, log_density = 17.200937271446833, hamiltonian_energy = -15.953114130480687, hamiltonian_energy_error = 0.05382720535925323, max_hamiltonian_energy_error = -0.07130156319701086, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7738061308480602, log_density = 17.434455397774073, hamiltonian_energy = -14.502039212276856, hamiltonian_energy_error = 0.09380682035700261, max_hamiltonian_energy_error = 0.6349930779560342, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9838895722296702, log_density = 16.44941544587045, hamiltonian_energy = -15.334619093380422, hamiltonian_energy_error = 0.014092650293477504, max_hamiltonian_energy_error = 0.06632087792900343, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.9577397165016787, log_density = 16.919592147704456, hamiltonian_energy = -13.422485401000268, hamiltonian_energy_error = -0.005757877687994295, max_hamiltonian_energy_error = -0.1992949606677783, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.5768593123251061, log_density = 17.172631679613758, hamiltonian_energy = -11.309515402262662, hamiltonian_energy_error = 0.30595096915750375, max_hamiltonian_energy_error = 0.8161061890255485, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8890795865527316, log_density = 15.353831363900222, hamiltonian_energy = -14.345008217352058, hamiltonian_energy_error = 0.08013686451042012, max_hamiltonian_energy_error = 0.2821916763299708, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9971910092988698, log_density = 16.359653323754088, hamiltonian_energy = -13.951447908839812, hamiltonian_energy_error = -0.11609956781057384, max_hamiltonian_energy_error = -0.17630754317626085, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8036060961340628, log_density = 15.886757698250506, hamiltonian_energy = -12.884589614676461, hamiltonian_energy_error = 0.3198675776435298, max_hamiltonian_energy_error = 0.3198675776435298, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 35, is_accept = true, acceptance_rate = 0.9379876729037475, log_density = 17.06537607477278, hamiltonian_energy = -14.58055034760197, hamiltonian_energy_error = -0.11498592641252436, max_hamiltonian_energy_error = -0.44036306708702355, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9967804562162237, log_density = 17.424327247833034, hamiltonian_energy = -16.366864511013908, hamiltonian_energy_error = -0.05442780965318761, max_hamiltonian_energy_error = -0.2502035414208308, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6865849845172304, log_density = 17.671944789177843, hamiltonian_energy = -11.425195611861154, hamiltonian_energy_error = -0.09683691931584448, max_hamiltonian_energy_error = 1.0040640790772208, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7853192975063041, log_density = 16.940880645015405, hamiltonian_energy = -12.250153039997558, hamiltonian_energy_error = 0.09231524951309744, max_hamiltonian_energy_error = 0.4935416744513823, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.996050463740012, log_density = 17.24049071079893, hamiltonian_energy = -16.125687191483404, hamiltonian_energy_error = 0.02412759013524024, max_hamiltonian_energy_error = -0.07460773085103867, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9684943585959701, log_density = 14.863315853162527, hamiltonian_energy = -13.108291210176532, hamiltonian_energy_error = -0.08501714619544032, max_hamiltonian_energy_error = 0.17642947703294176, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7121916410734929, log_density = 13.505228114039449, hamiltonian_energy = -11.950694665383356, hamiltonian_energy_error = 0.21804205299399904, max_hamiltonian_energy_error = 0.5373147274700578, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9870555296788476, log_density = 11.156105021740164, hamiltonian_energy = -9.090487355382407, hamiltonian_energy_error = -0.0036908074419521597, max_hamiltonian_energy_error = -0.265914923765008, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 16.77362194427996, hamiltonian_energy = -9.000630545023872, hamiltonian_energy_error = -0.1498089576158872, max_hamiltonian_energy_error = -0.22448571169439724, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9334954526596231, log_density = 16.75056153408481, hamiltonian_energy = -15.431417952950879, hamiltonian_energy_error = 0.08346782291708976, max_hamiltonian_energy_error = 0.18276016617568303, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9948266991865519, log_density = 16.43980554350397, hamiltonian_energy = -14.480620769555795, hamiltonian_energy_error = -0.05128757201692302, max_hamiltonian_energy_error = -0.13864349457937486, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7881431817205371, log_density = 17.532019272098594, hamiltonian_energy = -13.474814811533378, hamiltonian_energy_error = 0.017775874108487244, max_hamiltonian_energy_error = 0.5893588266498639, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8407579639542291, log_density = 17.03760255693878, hamiltonian_energy = -14.983806459567914, hamiltonian_energy_error = 0.16796289657753682, max_hamiltonian_energy_error = 0.33550503899164674, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9696554331518944, log_density = 18.81366132237492, hamiltonian_energy = -13.312717971181048, hamiltonian_energy_error = -0.3223798885425282, max_hamiltonian_energy_error = -0.3223798885425282, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.8975181367292208, log_density = 17.99983953275973, hamiltonian_energy = -16.90816966397709, hamiltonian_energy_error = 0.05549649804391521, max_hamiltonian_energy_error = 0.22990581579691138, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6876902325749479, log_density = 15.499630261701295, hamiltonian_energy = -13.669857367886204, hamiltonian_energy_error = 0.6256160936173369, max_hamiltonian_energy_error = 0.7547999402026093, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9524996722142512, log_density = 18.51835611824349, hamiltonian_energy = -13.819274145894063, hamiltonian_energy_error = -0.7434075624405914, max_hamiltonian_energy_error = -0.7434075624405914, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8262515507372215, log_density = 17.928955499102994, hamiltonian_energy = -16.098603975585736, hamiltonian_energy_error = -0.004435606974737993, max_hamiltonian_energy_error = 0.39100929027615017, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8772491758919537, log_density = 16.499777469400044, hamiltonian_energy = -14.68115204500892, hamiltonian_energy_error = 0.13331550564878647, max_hamiltonian_energy_error = 0.1794888130313268, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7829068589204852, log_density = 16.275763400867582, hamiltonian_energy = -12.594440291266228, hamiltonian_energy_error = 0.3353792699404785, max_hamiltonian_energy_error = 0.889343078024524, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9916636349235749, log_density = 16.281541214355492, hamiltonian_energy = -15.688131965137343, hamiltonian_energy_error = -0.03162436589314055, max_hamiltonian_energy_error = -0.40274322690427233, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9673830163762512, log_density = 17.042258163111498, hamiltonian_energy = -13.825658358811586, hamiltonian_energy_error = -0.3106481036624995, max_hamiltonian_energy_error = -0.41377888324505463, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9143667522163097, log_density = 17.56102841641792, hamiltonian_energy = -14.559872708477535, hamiltonian_energy_error = 0.026361541569677627, max_hamiltonian_energy_error = 0.19714150430291433, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.970263420604806, log_density = 16.747519367855645, hamiltonian_energy = -15.67192363932694, hamiltonian_energy_error = 0.003048994157289542, max_hamiltonian_energy_error = -0.1402767656820334, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9064656112828552, log_density = 16.712024587695893, hamiltonian_energy = -15.085874790439329, hamiltonian_energy_error = 0.017794759434311302, max_hamiltonian_energy_error = 0.2266396491472662, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7256668977085312, log_density = 14.425777280534955, hamiltonian_energy = -11.279240340594514, hamiltonian_energy_error = 0.43473751387554493, max_hamiltonian_energy_error = 0.5786605194559797, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 16.58253628882271, hamiltonian_energy = -14.326270026659795, hamiltonian_energy_error = -0.37026072498745677, max_hamiltonian_energy_error = -0.37026072498745677, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.78604050618764, log_density = 14.99934407827935, hamiltonian_energy = -11.34755510639366, hamiltonian_energy_error = 0.13421289675015302, max_hamiltonian_energy_error = 0.41607603109117264, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.997548281414559, log_density = 16.29141455775349, hamiltonian_energy = -11.217312915343951, hamiltonian_energy_error = -0.024745047257335173, max_hamiltonian_energy_error = -0.11971805056485962, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9908790987083743, log_density = 16.431017015426566, hamiltonian_energy = -13.162100167731824, hamiltonian_energy_error = -0.08575271196159484, max_hamiltonian_energy_error = -0.15660380078367453, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6971323452156172, log_density = 12.6293252610127, hamiltonian_energy = -11.414224508197563, hamiltonian_energy_error = 0.7605752478576253, max_hamiltonian_energy_error = 0.9496352939235724, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9466574931081883, log_density = 10.723412670379872, hamiltonian_energy = -8.105534958420904, hamiltonian_energy_error = -0.3595272982461184, max_hamiltonian_energy_error = -0.9100890193501696, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 1.0, log_density = 17.409430478954533, hamiltonian_energy = -10.45273043480577, hamiltonian_energy_error = -0.9811715462825497, max_hamiltonian_energy_error = -1.3808747450369854, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9976855713968713, log_density = 17.338782710485233, hamiltonian_energy = -16.363723110992122, hamiltonian_energy_error = 0.013870071285282393, max_hamiltonian_energy_error = -0.11980395915211872, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.892982870009836, log_density = 13.784962116331524, hamiltonian_energy = -10.809864746196729, hamiltonian_energy_error = 0.10450283788816073, max_hamiltonian_energy_error = 0.2267852752617383, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8953568554985191, log_density = 15.932858119148063, hamiltonian_energy = -11.905435186122194, hamiltonian_energy_error = -0.04147317458844313, max_hamiltonian_energy_error = 0.311480598226197, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9595700331179751, log_density = 15.542572032089476, hamiltonian_energy = -13.8637814915176, hamiltonian_energy_error = 0.09403953679091615, max_hamiltonian_energy_error = 0.09403953679091615, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9120032830008402, log_density = 16.427021657110302, hamiltonian_energy = -12.20338344504021, hamiltonian_energy_error = 0.02869614747396021, max_hamiltonian_energy_error = 0.6314041890779176, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9846048229756221, log_density = 19.340787042710943, hamiltonian_energy = -15.864169636508567, hamiltonian_energy_error = -0.15880788428892068, max_hamiltonian_energy_error = -0.15880788428892068, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9877914312603965, log_density = 19.183995797916104, hamiltonian_energy = -18.940551287385986, hamiltonian_energy_error = 0.026469688610141873, max_hamiltonian_energy_error = 0.028963361189397574, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8946890578510249, log_density = 19.37001428798647, hamiltonian_energy = -17.52208201030318, hamiltonian_energy_error = 0.0031670072135412397, max_hamiltonian_energy_error = 0.22197832244249938, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9059532580006652, log_density = 19.02326863589986, hamiltonian_energy = -18.212464214648268, hamiltonian_energy_error = 0.02687691059625763, max_hamiltonian_energy_error = 0.18211513361272935, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9813099089060434, log_density = 18.7600475812253, hamiltonian_energy = -17.193472690132026, hamiltonian_energy_error = 0.02847170021601997, max_hamiltonian_energy_error = 0.0668535592380195, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9830571412403926, log_density = 17.910670182380105, hamiltonian_energy = -16.83852386491177, hamiltonian_energy_error = 0.04117120224740489, max_hamiltonian_energy_error = 0.04661933911921423, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8849940972066227, log_density = 17.251020706309614, hamiltonian_energy = -15.217609837986767, hamiltonian_energy_error = 0.01827363543457139, max_hamiltonian_energy_error = 0.26304794023980094, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9988626961432426, log_density = 17.34676703551139, hamiltonian_energy = -16.327876863910284, hamiltonian_energy_error = -0.0060349908061674284, max_hamiltonian_energy_error = -0.13604796204063518, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.992602668569222, log_density = 18.948912335858513, hamiltonian_energy = -16.707587095301406, hamiltonian_energy_error = -0.14040241136601495, max_hamiltonian_energy_error = -0.14040241136601495, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.992042718747642, log_density = 18.74010136398345, hamiltonian_energy = -17.938958184630422, hamiltonian_energy_error = -0.0500732400576922, max_hamiltonian_energy_error = 0.0652766397910085, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8063282762286114, log_density = 19.071623301595714, hamiltonian_energy = -16.670489944334413, hamiltonian_energy_error = 0.1281875179461096, max_hamiltonian_energy_error = 0.38259526804793964, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9614766312499446, log_density = 16.978835801363118, hamiltonian_energy = -16.093293670958587, hamiltonian_energy_error = 0.13491863918714486, max_hamiltonian_energy_error = 0.13491863918714486, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 18.439292510664938, hamiltonian_energy = -16.898348643287374, hamiltonian_energy_error = -0.15425751573778257, max_hamiltonian_energy_error = -0.20541446992658052, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.989850747314754, log_density = 18.650075895184244, hamiltonian_energy = -16.563025357143463, hamiltonian_energy_error = -0.014458643429719586, max_hamiltonian_energy_error = -0.07130558331948222, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9803833463696952, log_density = 18.454399313332218, hamiltonian_energy = -16.96728482319399, hamiltonian_energy_error = -0.020119165327628252, max_hamiltonian_energy_error = 0.06909537958337708, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8481941200695851, log_density = 17.18739934919432, hamiltonian_energy = -15.926491969285614, hamiltonian_energy_error = 0.18498997692664432, max_hamiltonian_energy_error = 0.25220507983572915, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9629169354631892, log_density = 19.26380289489281, hamiltonian_energy = -16.52022344246237, hamiltonian_energy_error = -0.18893274212976863, max_hamiltonian_energy_error = -0.18893274212976863, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.914158979895636, log_density = 17.889715552879192, hamiltonian_energy = -17.510647937078126, hamiltonian_energy_error = 0.1102551895630981, max_hamiltonian_energy_error = 0.13391140442120886, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8925805992322936, log_density = 17.15553039515415, hamiltonian_energy = -15.429139559721847, hamiltonian_energy_error = 0.18890987692820893, max_hamiltonian_energy_error = 0.2937542206756536, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7398833537470955, log_density = 15.400876937903742, hamiltonian_energy = -12.46013421852756, hamiltonian_energy_error = 0.4365261357667478, max_hamiltonian_energy_error = 0.7456241926406086, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8844523272451046, log_density = 14.137136392850529, hamiltonian_energy = -12.108991032709142, hamiltonian_energy_error = 0.23547793040639853, max_hamiltonian_energy_error = 0.6061905701009582, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9929861857285961, log_density = 17.673257170173898, hamiltonian_energy = -13.335613250275928, hamiltonian_energy_error = -0.7321014215759725, max_hamiltonian_energy_error = -0.9230368779514748, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9075041009591912, log_density = 18.406786843963214, hamiltonian_energy = -15.784399552649099, hamiltonian_energy_error = 0.04934196863730378, max_hamiltonian_energy_error = 0.24887893787878923, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7211812254099265, log_density = 15.652529956825678, hamiltonian_energy = -13.74567993117177, hamiltonian_energy_error = 0.2932942446811513, max_hamiltonian_energy_error = 0.3962847924624491, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9846063134920023, log_density = 16.786994689940947, hamiltonian_energy = -13.9545574730776, hamiltonian_energy_error = -0.08811848478251072, max_hamiltonian_energy_error = -0.2963980316766701, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7843233682772706, log_density = 15.085612122342246, hamiltonian_energy = -13.974554607698098, hamiltonian_energy_error = 0.42656445031051327, max_hamiltonian_energy_error = 0.5429992375016042, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9429006838533647, log_density = 13.087666318059803, hamiltonian_energy = -7.80595135748282, hamiltonian_energy_error = -0.23314191349870228, max_hamiltonian_energy_error = -0.6186215933857744, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6916526564353959, log_density = 17.434115368693735, hamiltonian_energy = -9.10937762572205, hamiltonian_energy_error = 0.39450236956846396, max_hamiltonian_energy_error = 0.8600822584601833, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9985221537958598, log_density = 17.292812731413772, hamiltonian_energy = -16.48182246228378, hamiltonian_energy_error = 0.010654246229034214, max_hamiltonian_energy_error = -0.09319092154189335, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9946232720018158, log_density = 17.893497685640504, hamiltonian_energy = -15.897058759673836, hamiltonian_energy_error = -0.04360757666810322, max_hamiltonian_energy_error = -0.0624581869256744, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9542006669427662, log_density = 18.10144024215535, hamiltonian_energy = -15.811362623725065, hamiltonian_energy_error = -0.008728806568333525, max_hamiltonian_energy_error = 0.12586331207739931, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9399675619881747, log_density = 17.85445489290039, hamiltonian_energy = -16.758777464118467, hamiltonian_energy_error = 0.014661543767086727, max_hamiltonian_energy_error = 0.17915298720149053, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9720768183011014, log_density = 17.956609179695178, hamiltonian_energy = -15.995888289440687, hamiltonian_energy_error = -0.03154441186206469, max_hamiltonian_energy_error = -0.09141818840989835, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9481163552447217, log_density = 15.208099018581873, hamiltonian_energy = -13.96822790281063, hamiltonian_energy_error = 0.14287434400190158, max_hamiltonian_energy_error = 0.1439872682029204, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.953166478898584, log_density = 16.54887950217681, hamiltonian_energy = -10.07097783545164, hamiltonian_energy_error = -0.3268422225271408, max_hamiltonian_energy_error = -0.3268422225271408, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9987162572063186, log_density = 17.576767528303478, hamiltonian_energy = -15.775328382378905, hamiltonian_energy_error = -0.032640346467172066, max_hamiltonian_energy_error = -0.11546743369106593, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9105239452791236, log_density = 15.406367226329625, hamiltonian_energy = -13.590588875806223, hamiltonian_energy_error = 0.22219853872302586, max_hamiltonian_energy_error = -0.3684654435273398, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8865676930920632, log_density = 12.554103276840925, hamiltonian_energy = -11.015767104492122, hamiltonian_energy_error = 0.4204391272542498, max_hamiltonian_energy_error = 0.4204391272542498, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8863894743153227, log_density = 14.512663997107168, hamiltonian_energy = -7.370886437683974, hamiltonian_energy_error = -2.3387272410597673, max_hamiltonian_energy_error = -2.3387272410597673, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9942824698474234, log_density = 17.335865179432332, hamiltonian_energy = -13.633979957889288, hamiltonian_energy_error = -0.2502123129309517, max_hamiltonian_energy_error = -0.2502123129309517, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9813569036388927, log_density = 18.674695280025063, hamiltonian_energy = -16.39728990955466, hamiltonian_energy_error = -0.11463621554488057, max_hamiltonian_energy_error = 0.12283611939430727, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7802015328648977, log_density = 14.833974823683175, hamiltonian_energy = -14.278839480287647, hamiltonian_energy_error = 0.3442431151622962, max_hamiltonian_energy_error = 0.42243461904296353, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9205596991446138, log_density = 13.237602649504879, hamiltonian_energy = -12.437876546209255, hamiltonian_energy_error = 0.21912061986975218, max_hamiltonian_energy_error = 0.21912061986975218, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 1.0, log_density = 17.019209417238876, hamiltonian_energy = -10.659992004943062, hamiltonian_energy_error = -0.4012676606468055, max_hamiltonian_energy_error = -0.804688926275567, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9964266489115042, log_density = 18.21117690492152, hamiltonian_energy = -16.01361872245156, hamiltonian_energy_error = -0.05053266672122625, max_hamiltonian_energy_error = -0.07306117355149233, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.6824914634642482, log_density = 13.763613630980727, hamiltonian_energy = -12.844417932109405, hamiltonian_energy_error = 0.7817683053394617, max_hamiltonian_energy_error = 1.0722310200994674, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9764468367268058, log_density = 14.157444995283896, hamiltonian_energy = -12.009221010928385, hamiltonian_energy_error = -0.23157372292362766, max_hamiltonian_energy_error = -0.8698694702877621, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9760184255934086, log_density = 16.615191581783193, hamiltonian_energy = -12.83635705402542, hamiltonian_energy_error = -0.4436796149269675, max_hamiltonian_energy_error = -0.5616785079400017, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9536569240912581, log_density = 16.997426182119263, hamiltonian_energy = -15.123414307906305, hamiltonian_energy_error = 0.12937225860146562, max_hamiltonian_energy_error = 0.13342925116604754, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9967562488818892, log_density = 17.20610415596969, hamiltonian_energy = -14.931654593681191, hamiltonian_energy_error = -0.1840035530046631, max_hamiltonian_energy_error = -0.25606455287969787, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9931346354170586, log_density = 18.367348356718374, hamiltonian_energy = -16.65755143543395, hamiltonian_energy_error = -0.008450852855862223, max_hamiltonian_energy_error = -0.05418940901851599, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.6830172353048055, log_density = 11.356714732352, hamiltonian_energy = -9.134555009416356, hamiltonian_energy_error = 0.7065155682487116, max_hamiltonian_energy_error = 0.9512223794238412, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 16.809503237246457, hamiltonian_energy = -10.347079316604265, hamiltonian_energy_error = -0.04489782360397321, max_hamiltonian_energy_error = -0.652737341959714, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9988609442152013, log_density = 17.654406015904144, hamiltonian_energy = -16.674513184448116, hamiltonian_energy_error = -0.15462805615099384, max_hamiltonian_energy_error = -0.2707668161225101, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9038380679165063, log_density = 15.634125573994154, hamiltonian_energy = -13.451797511008134, hamiltonian_energy_error = 0.16905956240391617, max_hamiltonian_energy_error = 0.2461291886496202, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9724139741575585, log_density = 17.77518480530378, hamiltonian_energy = -10.691014982343706, hamiltonian_energy_error = 0.04950987795654882, max_hamiltonian_energy_error = -0.4697872335292441, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9984327236514108, log_density = 17.813124155915133, hamiltonian_energy = -17.560223079000604, hamiltonian_energy_error = -0.013996315215997868, max_hamiltonian_energy_error = -0.13842396004494262, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.955163322423333, log_density = 14.402323788500613, hamiltonian_energy = -13.567732755063602, hamiltonian_energy_error = 0.18489883398221352, max_hamiltonian_energy_error = 0.18489883398221352, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.955157465904709, log_density = 15.60691362490852, hamiltonian_energy = -7.963131441155814, hamiltonian_energy_error = 0.1912047475984986, max_hamiltonian_energy_error = -0.5143427623895551, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9472408413369718, log_density = 16.516812559939453, hamiltonian_energy = -13.699672725905454, hamiltonian_energy_error = -0.2095601453703999, max_hamiltonian_energy_error = -0.3944136486369789, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9771974454183411, log_density = 15.17535954849313, hamiltonian_energy = -12.835509111512897, hamiltonian_energy_error = -0.066487068501635, max_hamiltonian_energy_error = 0.1384238473771049, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9286663013462595, log_density = 16.31237277203057, hamiltonian_energy = -13.058104507266531, hamiltonian_energy_error = 0.11086955176775604, max_hamiltonian_energy_error = 0.38178809177929196, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9400914346075162, log_density = 16.554834696024354, hamiltonian_energy = -14.408124943332643, hamiltonian_energy_error = 0.10618545118864198, max_hamiltonian_energy_error = 0.22389998390424992, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9572726982216082, log_density = 16.501734194511275, hamiltonian_energy = -13.138020437967585, hamiltonian_energy_error = -0.2736396709565998, max_hamiltonian_energy_error = -0.4388874733142849, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8445950116414717, log_density = 14.1737895813047, hamiltonian_energy = -13.050131726581004, hamiltonian_energy_error = 0.12163576249640506, max_hamiltonian_energy_error = 0.3238048218787508, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9559226988584261, log_density = 16.099551451390525, hamiltonian_energy = -12.221600854621514, hamiltonian_energy_error = 0.07502182101302068, max_hamiltonian_energy_error = -0.6938638359325076, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9937024937156878, log_density = 16.100090598416116, hamiltonian_energy = -14.75955604073848, hamiltonian_energy_error = 0.09389961736490626, max_hamiltonian_energy_error = -0.26768332705301034, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6784321329981091, log_density = 12.296295122900277, hamiltonian_energy = -10.14753232756082, hamiltonian_energy_error = 0.7382876556927283, max_hamiltonian_energy_error = 0.9286360745159854, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9248583975717531, log_density = 17.83926002275804, hamiltonian_energy = -11.818444324500689, hamiltonian_energy_error = -0.8067381571021794, max_hamiltonian_energy_error = -1.2340845513023115, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9855218561046303, log_density = 17.577421490386712, hamiltonian_energy = -16.830485494585655, hamiltonian_energy_error = -0.024792051896845635, max_hamiltonian_energy_error = -0.16782703563366752, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9809707416990955, log_density = 18.25922677533392, hamiltonian_energy = -15.465721874591486, hamiltonian_energy_error = -0.02814451705374843, max_hamiltonian_energy_error = 0.1429525562969367, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8685298131257091, log_density = 17.33647385109454, hamiltonian_energy = -14.56838226108239, hamiltonian_energy_error = -0.4068274812738242, max_hamiltonian_energy_error = 0.7793458055324987, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.988516016374712, log_density = 18.94193830015027, hamiltonian_energy = -16.590408304146084, hamiltonian_energy_error = -0.046370687965598734, max_hamiltonian_energy_error = -0.11246270034396133, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.963261764543336, log_density = 18.192667608721898, hamiltonian_energy = -17.366870816544743, hamiltonian_energy_error = 0.040083016320764386, max_hamiltonian_energy_error = 0.08035506676121429, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6621261689088224, log_density = 14.730849143003633, hamiltonian_energy = -14.407359195484567, hamiltonian_energy_error = 0.5723028970265247, max_hamiltonian_energy_error = 0.5723028970265247, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9050729214606533, log_density = 18.27925054710641, hamiltonian_energy = -13.653427817747296, hamiltonian_energy_error = -0.3706688966304892, max_hamiltonian_energy_error = -0.7644651720848845, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9732705677974008, log_density = 17.018375726244436, hamiltonian_energy = -14.124932840978431, hamiltonian_energy_error = 0.010930303757321624, max_hamiltonian_energy_error = -0.13229335802036424, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9637227640274032, log_density = 17.14897759863993, hamiltonian_energy = -15.255980832255581, hamiltonian_energy_error = 0.09732681477329841, max_hamiltonian_energy_error = 0.10759026001762528, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9871260398046091, log_density = 17.36201697904101, hamiltonian_energy = -15.611601344221171, hamiltonian_energy_error = -0.009502929976566321, max_hamiltonian_energy_error = -0.20049293988171968, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9552302489448982, log_density = 15.800422853893767, hamiltonian_energy = -14.19826898681106, hamiltonian_energy_error = 0.006744744443681228, max_hamiltonian_energy_error = -0.31208864938312253, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9906181555352658, log_density = 17.771208842081172, hamiltonian_energy = -14.862648982255024, hamiltonian_energy_error = -0.24134396611704823, max_hamiltonian_energy_error = -0.26843996541817994, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9508728875882321, log_density = 19.5749686786221, hamiltonian_energy = -16.28476145066709, hamiltonian_energy_error = 0.008631486089438312, max_hamiltonian_energy_error = 0.16208978595778945, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9520445435632902, log_density = 17.529178654980626, hamiltonian_energy = -16.03076008287958, hamiltonian_energy_error = -0.034326693410109854, max_hamiltonian_energy_error = 0.13682034349776728, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7387952954995316, log_density = 16.391053622468363, hamiltonian_energy = -13.273456021332095, hamiltonian_energy_error = 0.61991337250603, max_hamiltonian_energy_error = 0.61991337250603, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8130320719233449, log_density = 13.346247687655257, hamiltonian_energy = -10.542195826382144, hamiltonian_energy_error = 0.4278028694864915, max_hamiltonian_energy_error = 0.6664623435018306, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8919938859140242, log_density = 14.268213993058431, hamiltonian_energy = -7.06173993509463, hamiltonian_energy_error = -0.3651641195091173, max_hamiltonian_energy_error = -0.8288500378337122, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 16.82025419785712, hamiltonian_energy = -14.196870307567131, hamiltonian_energy_error = -0.43830271446622504, max_hamiltonian_energy_error = -0.43830271446622504, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.48108410454440326, log_density = 11.446448158077535, hamiltonian_energy = -9.038922452915825, hamiltonian_energy_error = 0.6225409096362728, max_hamiltonian_energy_error = 0.9244007235396801, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.859605448303358, log_density = 11.43127264343846, hamiltonian_energy = -7.438794031131992, hamiltonian_energy_error = -0.23291282700705374, max_hamiltonian_energy_error = -0.8158723343717282, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 15.214649033285745, hamiltonian_energy = -11.134471786846197, hamiltonian_energy_error = -0.5076575793734364, max_hamiltonian_energy_error = -0.8110023969677247, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 18.802082476193675, hamiltonian_energy = -14.429915836422648, hamiltonian_energy_error = -0.18054273417119404, max_hamiltonian_energy_error = -0.18054273417119404, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9208952495807091, log_density = 17.285280834999984, hamiltonian_energy = -16.911043063774272, hamiltonian_energy_error = 0.16746983495272616, max_hamiltonian_energy_error = 0.1751521321485825, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9518087995762426, log_density = 18.095882876514708, hamiltonian_energy = -15.895633814111033, hamiltonian_energy_error = -0.16123631151262607, max_hamiltonian_energy_error = -0.20276268554332155, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8163540525926379, log_density = 17.150880652404105, hamiltonian_energy = -14.780559557255884, hamiltonian_energy_error = 0.15372416776449072, max_hamiltonian_energy_error = 0.38728346126430324, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9981566829736738, log_density = 16.537927929595607, hamiltonian_energy = -15.528482628664731, hamiltonian_energy_error = 0.004026746752410659, max_hamiltonian_energy_error = -0.137299200619303, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9162162886684913, log_density = 15.84594733422922, hamiltonian_energy = -13.821155768619487, hamiltonian_energy_error = 0.02081334017455383, max_hamiltonian_energy_error = 0.25626795357104015, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.5457471052681948, log_density = 11.72806714459955, hamiltonian_energy = -6.6439623924336395, hamiltonian_energy_error = 0.7003040579300652, max_hamiltonian_energy_error = 0.7976624346218815, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9310128626356919, log_density = 14.890072075508465, hamiltonian_energy = -6.68762575758203, hamiltonian_energy_error = -0.6438174881916252, max_hamiltonian_energy_error = -1.0138370184509737, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8369237268607639, log_density = 13.843253371715731, hamiltonian_energy = -6.807510452275405, hamiltonian_energy_error = -0.35500500978060323, max_hamiltonian_energy_error = 1.4029817759630703, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9345539152712818, log_density = 16.363413039490357, hamiltonian_energy = -11.91744184743435, hamiltonian_energy_error = -0.15407948141558236, max_hamiltonian_energy_error = -0.8881645075384199, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9984609749265445, log_density = 17.786470600508387, hamiltonian_energy = -15.693224456018894, hamiltonian_energy_error = -0.15192600156968972, max_hamiltonian_energy_error = -0.22029816781769007, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9974529258009681, log_density = 18.66398578993408, hamiltonian_energy = -16.254027474702376, hamiltonian_energy_error = -0.18287336902381668, max_hamiltonian_energy_error = -0.18287336902381668, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9501057014716181, log_density = 19.074690526696834, hamiltonian_energy = -17.162597485215777, hamiltonian_energy_error = -0.0969632903585449, max_hamiltonian_energy_error = 0.1769774503571746, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6803234671988859, log_density = 18.033714305026926, hamiltonian_energy = -15.313518849281767, hamiltonian_energy_error = 0.35245466641672607, max_hamiltonian_energy_error = 0.5519277506538245, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8816720164241766, log_density = 17.27577721361167, hamiltonian_energy = -15.567959465532223, hamiltonian_energy_error = 0.16169875578932746, max_hamiltonian_energy_error = 0.24079916737746743, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9711385838731191, log_density = 19.470494763875365, hamiltonian_energy = -16.621726011359584, hamiltonian_energy_error = -0.22027767892057426, max_hamiltonian_energy_error = -0.22027767892057426, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7820438085727369, log_density = 17.025622192437954, hamiltonian_energy = -16.018723777665496, hamiltonian_energy_error = 0.20803250692808817, max_hamiltonian_energy_error = 0.32746936763734524, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.975763295685164, log_density = 15.901641238434742, hamiltonian_energy = -15.75768559674022, hamiltonian_energy_error = 0.13622146059158524, max_hamiltonian_energy_error = -0.17186070247699448, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8383493608642621, log_density = 18.736979615997388, hamiltonian_energy = -12.331399702944793, hamiltonian_energy_error = -0.22714661389504087, max_hamiltonian_energy_error = 0.9316879664485338, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9228627043750028, log_density = 19.601105882369716, hamiltonian_energy = -16.503560016468192, hamiltonian_energy_error = -0.10669715342424269, max_hamiltonian_energy_error = 0.22426269379048236, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8675538828396403, log_density = 18.637187440966464, hamiltonian_energy = -16.703973881560824, hamiltonian_energy_error = 0.008450463232698269, max_hamiltonian_energy_error = 0.3045574714082804, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.5973070229796418, log_density = 17.410499798788457, hamiltonian_energy = -14.321321185566651, hamiltonian_energy_error = 0.3958898992560531, max_hamiltonian_energy_error = 0.8278376406810644, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.840027445383254, log_density = 17.913507206842393, hamiltonian_energy = -15.027827894721487, hamiltonian_energy_error = -0.10957044777241798, max_hamiltonian_energy_error = 0.653768141191378, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 18.83041312660033, hamiltonian_energy = -17.432686134806936, hamiltonian_energy_error = -0.08047385246234384, max_hamiltonian_energy_error = -0.17501778936333423, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9242817557991434, log_density = 17.30853212006623, hamiltonian_energy = -13.561172354665008, hamiltonian_energy_error = -0.061500614187149694, max_hamiltonian_energy_error = 0.45366830208670983, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8504724246017246, log_density = 17.980987251450635, hamiltonian_energy = -14.647619437625856, hamiltonian_energy_error = 0.13948758264390904, max_hamiltonian_energy_error = 0.2699552140224668, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9315316020296435, log_density = 18.914123227603042, hamiltonian_energy = -16.160623231649833, hamiltonian_energy_error = -0.1626533885178869, max_hamiltonian_energy_error = 0.24086827773303554, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9709269912748739, log_density = 18.96023205425061, hamiltonian_energy = -17.83929586938937, hamiltonian_energy_error = -0.018445033600716698, max_hamiltonian_energy_error = -0.09827048316312315, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8603200782257171, log_density = 18.28118330771708, hamiltonian_energy = -16.12461697793863, hamiltonian_energy_error = 0.0720204456201472, max_hamiltonian_energy_error = 0.2849769061002174, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8522550887440922, log_density = 15.445627245515375, hamiltonian_energy = -15.371961806049203, hamiltonian_energy_error = 0.2828154038561923, max_hamiltonian_energy_error = 0.2828154038561923, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9831306589002741, log_density = 16.748275929482652, hamiltonian_energy = -14.06839670677612, hamiltonian_energy_error = -0.08070301922880141, max_hamiltonian_energy_error = -0.4050558066914842, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9634587763539102, log_density = 16.69578902528001, hamiltonian_energy = -14.23390166236512, hamiltonian_energy_error = -0.1470805584475432, max_hamiltonian_energy_error = -0.3713655442430195, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9768895389625266, log_density = 18.837171478515877, hamiltonian_energy = -15.722789325766334, hamiltonian_energy_error = -0.03096010531522886, max_hamiltonian_energy_error = -0.1498434161735318, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9820553198840694, log_density = 16.265846399613054, hamiltonian_energy = -15.716171637349653, hamiltonian_energy_error = 0.08486379162681423, max_hamiltonian_energy_error = -0.14220025451916918, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9824031190198951, log_density = 18.122542215196003, hamiltonian_energy = -14.881833294888771, hamiltonian_energy_error = -0.12037512811900974, max_hamiltonian_energy_error = -0.2281202530608848, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8621657140561209, log_density = 14.314001198568786, hamiltonian_energy = -13.651291103032143, hamiltonian_energy_error = 0.19799403605852461, max_hamiltonian_energy_error = 0.22614173060103226, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.70493634683565, log_density = 15.459862308964956, hamiltonian_energy = -11.242751181889599, hamiltonian_energy_error = 0.4561261111748731, max_hamiltonian_energy_error = 0.9500787805451392, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9962290250743727, log_density = 18.19814361699708, hamiltonian_energy = -14.920558384293493, hamiltonian_energy_error = -0.4485170303536421, max_hamiltonian_energy_error = -0.4485170303536421, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9658075009372339, log_density = 16.66591735195197, hamiltonian_energy = -15.77708475885803, hamiltonian_energy_error = 0.02739358252193469, max_hamiltonian_energy_error = 0.07496954521709753, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.5519185061272674, log_density = 18.526357917336206, hamiltonian_energy = -12.777802454690201, hamiltonian_energy_error = 0.1718888651891053, max_hamiltonian_energy_error = 1.1535975812679862, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9123554303370078, log_density = 17.880107936503087, hamiltonian_energy = -16.25722897750959, hamiltonian_energy_error = 0.05635207261686048, max_hamiltonian_energy_error = 0.2587538470382178, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7909471109635933, log_density = 15.881380936233992, hamiltonian_energy = -12.657294645605855, hamiltonian_energy_error = 0.19220294934992666, max_hamiltonian_energy_error = 0.48297693993179536, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9977606706909473, log_density = 18.61674734712616, hamiltonian_energy = -14.135967646070096, hamiltonian_energy_error = -0.1960219590822625, max_hamiltonian_energy_error = -0.21310082183127577, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9431961822019008, log_density = 17.151724881869974, hamiltonian_energy = -16.55072239814389, hamiltonian_energy_error = 0.07309993334731146, max_hamiltonian_energy_error = 0.10922669608291002, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9531580244736688, log_density = 16.44549717116545, hamiltonian_energy = -14.504066934610647, hamiltonian_energy_error = 0.10047735876837649, max_hamiltonian_energy_error = -0.2563872868128634, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9790605631438558, log_density = 14.684339560615811, hamiltonian_energy = -13.635693572632961, hamiltonian_energy_error = 0.08250206480543021, max_hamiltonian_energy_error = -0.11374854018340486, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9874473102239449, log_density = 16.213671436424157, hamiltonian_energy = -12.15797484332102, hamiltonian_energy_error = 0.018084083063852674, max_hamiltonian_energy_error = -0.21650994741293061, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9699148497810886, log_density = 15.873342609881405, hamiltonian_energy = -12.993401275514444, hamiltonian_energy_error = 0.06773905024637727, max_hamiltonian_energy_error = -0.3252948197176373, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8483198431464987, log_density = 13.9717888415784, hamiltonian_energy = -12.86411903620636, hamiltonian_energy_error = 0.579943140210835, max_hamiltonian_energy_error = 0.579943140210835, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 18.091804320993912, hamiltonian_energy = -13.215775904501449, hamiltonian_energy_error = -0.8843074666955619, max_hamiltonian_energy_error = -0.8843074666955619, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9561290463969355, log_density = 18.87723350243709, hamiltonian_energy = -16.473483817090578, hamiltonian_energy_error = -0.06188809505452042, max_hamiltonian_energy_error = -0.1751164312213298, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9750306660513564, log_density = 18.88302486619305, hamiltonian_energy = -17.321601124102862, hamiltonian_energy_error = 0.04732689877085505, max_hamiltonian_energy_error = 0.13760929162809177, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9936931015178099, log_density = 18.294109219482156, hamiltonian_energy = -17.89494285135119, hamiltonian_energy_error = 0.02654982324909838, max_hamiltonian_energy_error = -0.08414514814240803, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8660532241942488, log_density = 17.80098848284007, hamiltonian_energy = -15.743650796336425, hamiltonian_energy_error = 0.2115111395187057, max_hamiltonian_energy_error = 0.3466991125275669, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9852721769475299, log_density = 18.72087773044609, hamiltonian_energy = -16.247881978988588, hamiltonian_energy_error = -0.07121127242317016, max_hamiltonian_energy_error = 0.1440193901249387, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8042770888139735, log_density = 18.469691016775677, hamiltonian_energy = -16.217069234137035, hamiltonian_energy_error = 0.01431353974282601, max_hamiltonian_energy_error = 0.3715399785915263, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9780466991148885, log_density = 17.357212593189026, hamiltonian_energy = -15.533537718173378, hamiltonian_energy_error = 0.06559310644087013, max_hamiltonian_energy_error = 0.0721852705349626, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9046937453438002, log_density = 15.847578530358351, hamiltonian_energy = -12.879396617547611, hamiltonian_energy_error = 0.10307305365145147, max_hamiltonian_energy_error = 0.47828433160728245, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9953743473230074, log_density = 17.336270884354448, hamiltonian_energy = -14.01452892190631, hamiltonian_energy_error = -0.005545947863094369, max_hamiltonian_energy_error = -0.1291256372828542, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.996177839911794, log_density = 18.029323342988615, hamiltonian_energy = -17.100966009676107, hamiltonian_energy_error = 0.012003491598658655, max_hamiltonian_energy_error = -0.1345594374066259, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.929680272517539, log_density = 18.028532385764827, hamiltonian_energy = -15.399538199856542, hamiltonian_energy_error = -0.05317080410218544, max_hamiltonian_energy_error = 0.23401983325166853, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9959044886933914, log_density = 17.877062877349765, hamiltonian_energy = -15.765919955007075, hamiltonian_energy_error = -0.036271386925587734, max_hamiltonian_energy_error = -0.06979341718134435, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.887984700367597, log_density = 17.113301918278722, hamiltonian_energy = -15.671952189962319, hamiltonian_energy_error = -0.004552069800384473, max_hamiltonian_energy_error = 0.2991671009656329, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9900005059708098, log_density = 17.503856504572795, hamiltonian_energy = -16.167730048760642, hamiltonian_energy_error = 0.02352435884341375, max_hamiltonian_energy_error = -0.059607328308093344, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 16.576444850606862, hamiltonian_energy = -15.269656785744145, hamiltonian_energy_error = -0.045687479722463564, max_hamiltonian_energy_error = -0.07061918115686261, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9145511422603353, log_density = 17.504201962575785, hamiltonian_energy = -15.27645887550409, hamiltonian_energy_error = 0.12647283245942553, max_hamiltonian_energy_error = 0.17290843302272307, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9970257721143593, log_density = 16.767495725523805, hamiltonian_energy = -15.456331145258348, hamiltonian_energy_error = 0.0007832486016337015, max_hamiltonian_energy_error = -0.2534497616202245, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8831257758390689, log_density = 15.112398991404842, hamiltonian_energy = -11.95168282524289, hamiltonian_energy_error = 0.045357317736996805, max_hamiltonian_energy_error = 0.32900920679766976, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9437799524189071, log_density = 15.66002044681447, hamiltonian_energy = -13.780686212646657, hamiltonian_energy_error = -0.09870850250354835, max_hamiltonian_energy_error = 0.14565285156128027, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9022218276128273, log_density = 18.92979671815452, hamiltonian_energy = -13.702704624921946, hamiltonian_energy_error = -0.00025741366755127615, max_hamiltonian_energy_error = 0.26194984631207596, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7591765767103633, log_density = 15.897161740920595, hamiltonian_energy = -14.260086313876661, hamiltonian_energy_error = 0.4126039141794866, max_hamiltonian_energy_error = 0.5006147190823871, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9160373054211917, log_density = 17.988171944935722, hamiltonian_energy = -12.470673344905158, hamiltonian_energy_error = -0.07409932638871553, max_hamiltonian_energy_error = 0.18594665125445609, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.887418854611695, log_density = 18.27981831896691, hamiltonian_energy = -14.176315655984386, hamiltonian_energy_error = -0.07666901691278127, max_hamiltonian_energy_error = 0.28379354992897987, tree_depth = 5, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8180204899383432, log_density = 14.848943198583957, hamiltonian_energy = -13.462042938882384, hamiltonian_energy_error = 0.09622305645158491, max_hamiltonian_energy_error = 0.36889857042774565, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9542586303451438, log_density = 15.224578898036949, hamiltonian_energy = -13.759040050014667, hamiltonian_energy_error = 0.08747396595113166, max_hamiltonian_energy_error = -0.20976095400999206, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9448352036488797, log_density = 16.420024313813688, hamiltonian_energy = -12.761397685761935, hamiltonian_energy_error = -0.08158707877272064, max_hamiltonian_energy_error = -0.15980313661578194, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 18.597890989085577, hamiltonian_energy = -15.229848361153433, hamiltonian_energy_error = -0.27013612017771393, max_hamiltonian_energy_error = -0.27265255279546174, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9820327721947238, log_density = 19.049909321448947, hamiltonian_energy = -17.828752716697682, hamiltonian_energy_error = -0.02538957862822855, max_hamiltonian_energy_error = 0.04950701671581825, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8910355870633652, log_density = 18.194681590148747, hamiltonian_energy = -17.530234519859867, hamiltonian_energy_error = 0.10734759468136801, max_hamiltonian_energy_error = 0.1575316719336648, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9003980813033081, log_density = 16.600361631276733, hamiltonian_energy = -15.002167342398621, hamiltonian_energy_error = 0.21046439321533583, max_hamiltonian_energy_error = 0.21046439321533583, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9699211773968427, log_density = 16.47919987469357, hamiltonian_energy = -14.45150045764662, hamiltonian_energy_error = 0.149808868498301, max_hamiltonian_energy_error = -0.26938275361155384, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.947341569355202, log_density = 16.353448402044485, hamiltonian_energy = -14.272765191297658, hamiltonian_energy_error = -0.14443868828053397, max_hamiltonian_energy_error = -0.43788744532649204, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9478086965655997, log_density = 17.353876802195728, hamiltonian_energy = -13.6094120343651, hamiltonian_energy_error = 0.02165281760778015, max_hamiltonian_energy_error = -0.20221936184685774, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7867909792231679, log_density = 17.695431003012423, hamiltonian_energy = -14.088761721611542, hamiltonian_energy_error = 0.13673192830009562, max_hamiltonian_energy_error = 0.4574310601399425, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8222687737019775, log_density = 14.221606079926044, hamiltonian_energy = -9.715504592496677, hamiltonian_energy_error = 0.41698524899005207, max_hamiltonian_energy_error = 0.8543024308965119, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9207583264819648, log_density = 14.205421753486338, hamiltonian_energy = -10.95539412629066, hamiltonian_energy_error = -0.1870704498190019, max_hamiltonian_energy_error = 0.3613151027715471, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9729936610483819, log_density = 18.297779271250853, hamiltonian_energy = -12.202810559128562, hamiltonian_energy_error = -0.0036084179245889914, max_hamiltonian_energy_error = 0.08518128252894819, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.975054575385809, log_density = 17.330429984337755, hamiltonian_energy = -16.98848567135179, hamiltonian_energy_error = 0.0518273735255228, max_hamiltonian_energy_error = 0.05360589456663334, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9543258647095086, log_density = 17.17096743346154, hamiltonian_energy = -16.003028549835157, hamiltonian_energy_error = 0.09888282975116525, max_hamiltonian_energy_error = 0.12441793805556678, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9978160501246033, log_density = 18.131336146897837, hamiltonian_energy = -16.42169226769615, hamiltonian_energy_error = -0.13637965962802312, max_hamiltonian_energy_error = -0.18957713728325842, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9283523963710871, log_density = 17.494562978753123, hamiltonian_energy = -15.557939920301807, hamiltonian_energy_error = 0.09309485503929871, max_hamiltonian_energy_error = 0.189479717981337, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9975527215001795, log_density = 15.869826045103263, hamiltonian_energy = -13.938007005488961, hamiltonian_energy_error = -0.012832019259390037, max_hamiltonian_energy_error = -0.11991310551896106, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6878806193983719, log_density = 14.990674881298993, hamiltonian_energy = -12.831126734303783, hamiltonian_energy_error = 0.18112428993918428, max_hamiltonian_energy_error = 0.49455383550842313, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9973355550941843, log_density = 17.49223997708568, hamiltonian_energy = -12.90297987597462, hamiltonian_energy_error = -0.14954208888386766, max_hamiltonian_energy_error = -0.4050686248732074, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9185683313685257, log_density = 17.50637229921694, hamiltonian_energy = -16.24559284426869, hamiltonian_energy_error = 0.06251400420433129, max_hamiltonian_energy_error = 0.3227044057609998, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9956275048577733, log_density = 17.640541252129864, hamiltonian_energy = -16.284503492232876, hamiltonian_energy_error = -0.21691724847316962, max_hamiltonian_energy_error = -0.24579843348981, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8921941798350655, log_density = 17.0848503126646, hamiltonian_energy = -14.45349617076403, hamiltonian_energy_error = 0.053601091257672095, max_hamiltonian_energy_error = 0.19467266415790618, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9849855262934967, log_density = 16.865679537944786, hamiltonian_energy = -15.741441872500541, hamiltonian_energy_error = 0.018589575538666026, max_hamiltonian_energy_error = 0.03969578978005117, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9478649801648211, log_density = 18.021468197739917, hamiltonian_energy = -16.15491606733624, hamiltonian_energy_error = 0.060048670732314235, max_hamiltonian_energy_error = 0.08744641142725484, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9969766011239493, log_density = 17.512558197205905, hamiltonian_energy = -16.69571288314392, hamiltonian_energy_error = 0.030598894122370268, max_hamiltonian_energy_error = -0.08657274235538637, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9996876514580236, log_density = 16.696225486691645, hamiltonian_energy = -16.048362661587415, hamiltonian_energy_error = -0.08131637744851439, max_hamiltonian_energy_error = -0.12681197082642903, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8819350641761418, log_density = 14.800448586739089, hamiltonian_energy = -13.33962932239345, hamiltonian_energy_error = 0.08445382256896039, max_hamiltonian_energy_error = 0.2316830429516834, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.9970544510267898, log_density = 15.945010983272946, hamiltonian_energy = -13.6311339354546, hamiltonian_energy_error = 0.019539355531627223, max_hamiltonian_energy_error = -0.33502993872505726, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9817371687061687, log_density = 18.28843524514171, hamiltonian_energy = -14.225719755053541, hamiltonian_energy_error = -0.1957804554423479, max_hamiltonian_energy_error = -0.1957804554423479, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8134152331236758, log_density = 15.499604517331132, hamiltonian_energy = -13.667645869282808, hamiltonian_energy_error = 0.12455138213172212, max_hamiltonian_energy_error = 0.37663993724262745, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 17.720933653071793, hamiltonian_energy = -14.717701946106333, hamiltonian_energy_error = -0.06701499986707837, max_hamiltonian_energy_error = -0.09423140893639825, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9419437575805651, log_density = 18.0734595660593, hamiltonian_energy = -16.655028470097445, hamiltonian_energy_error = 0.03276380219440611, max_hamiltonian_energy_error = 0.11596848346498234, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9530142586601319, log_density = 18.17838544544893, hamiltonian_energy = -15.193594352848722, hamiltonian_energy_error = -0.03641687992647924, max_hamiltonian_energy_error = 0.16810984511888805, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9094483618123661, log_density = 16.91515383661622, hamiltonian_energy = -14.736745017686875, hamiltonian_energy_error = 0.029623966668953727, max_hamiltonian_energy_error = 0.25475106328555164, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9992820439978929, log_density = 16.57891945864857, hamiltonian_energy = -12.787006370330923, hamiltonian_energy_error = -0.07001781497212178, max_hamiltonian_energy_error = -0.11423586735067204, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9809177595671456, log_density = 17.02027005340422, hamiltonian_energy = -16.345884794567276, hamiltonian_energy_error = -0.06829575171812152, max_hamiltonian_energy_error = -0.06829575171812152, tree_depth = 2, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8780046423664183, log_density = 16.22707630601763, hamiltonian_energy = -10.805149214914051, hamiltonian_energy_error = -0.003406134498659341, max_hamiltonian_energy_error = 1.0269150672024647, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.965876920301033, log_density = 16.950875207712127, hamiltonian_energy = -14.629306070376641, hamiltonian_energy_error = 0.064168192949289, max_hamiltonian_energy_error = 0.10685797577699141, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6915918218086377, log_density = 15.628642851632002, hamiltonian_energy = -12.406639786553903, hamiltonian_energy_error = 0.5206295736520907, max_hamiltonian_energy_error = 0.6461563415306557, tree_depth = 3, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8571584564548415, log_density = 17.110743924663687, hamiltonian_energy = -11.607571951646236, hamiltonian_energy_error = -0.5263033054378852, max_hamiltonian_energy_error = 0.7459812666121142, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9644143584981244, log_density = 17.07358201019322, hamiltonian_energy = -15.669479482828091, hamiltonian_energy_error = -0.048132122931061616, max_hamiltonian_energy_error = 0.10054103046232221, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9901543979863493, log_density = 17.10198372972719, hamiltonian_energy = -16.696459401375083, hamiltonian_energy_error = 0.036875521301404035, max_hamiltonian_energy_error = -0.13218597407611554, tree_depth = 4, numerical_error = false, step_size = 0.1453570044841796, nom_step_size = 0.1453570044841796, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other WrappedGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising WrappedGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#AbstractGP","page":"Internals","title":"AbstractGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP and CompositeGP implement the AbstractGPs.jl API. Please refer to the AbstractGPs.jl docs for more info on this.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#WrappedGP","page":"Internals","title":"WrappedGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a WrappedGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = wrap(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for WrappedGPs in terms of the AbstractGP that they wrap. So if you want a particular behaviour, just make sure that the AbstractGP that you wrap has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = wrap(GP(mf, kf), gpc)\ng = wrap(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = wrap(GP(mf, kf), GPC())\ng = wrap(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and GPs. We describe the implemented transformations below.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of WrappedGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = wrap(GP(SEKernel()), gpc)\nf2 = wrap(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"}]
}
