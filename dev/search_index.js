var documenterSearchIndex = {"docs":
[{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/gppp_and_pseudo_points/script.jl\"","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Pseudo-Points-in-Additive-Regression","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"using AbstractGPs, Plots, Random, Stheno\ngr();","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Define model.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"σ², ω, T = 1e0, 1.0, 25.0;\nf = @gppp let\n    f1 = periodic(GP(SEKernel()), ω)\n    f2 = GP(0.1 * SEKernel())\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Sample from marginal process to generate toy data.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"rng = MersenneTwister(123456);\nS = 25;\nx = GPPPInput(:f3, range(0.0, T; length=300));\nfx = f(x, σ²);\ny = rand(rng, fx);\n\nxp_ = range(-2.5, T + 2.5; length=500);","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plots for stuff.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"f₁′_plot, f₂′_plot, f₃′_plot = plot(), plot(), plot();\n\nposterior_plot = plot();\napprox_in_marginal_posterior_plot = plot();\napprox_in_latents_posterior_plot = plot();","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Exact-Inference","page":"Pseudo-Points in Additive Regression","title":"Exact Inference","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute the posterior processes, sample from them, and compute marginals.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"@show logpdf(fx, y)\nf′ = posterior(fx, y);\nxp_f1 = GPPPInput(:f1, xp_);\nxp_f2 = GPPPInput(:f2, xp_);\nxp_f3 = GPPPInput(:f3, xp_);\nxp = BlockData(xp_f1, xp_f2, xp_f3);\nf′xp = rand(f′(xp, 1e-9), S);\nf₁′xp, f₂′xp, f₃′xp = split(xp, f′xp);\n\nitems = [\n    (xp_f1, f₁′xp, :red, \"exact\", f₁′_plot),\n    (xp_f2, f₂′xp, :red, \"\", f₂′_plot),\n    (xp_f3, f₃′xp, :red, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"logpdf(fx, y) = -465.99349014012654\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot posterior marginals and samples.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, samples, colour, name, plt) in items\n    plot!(plt, xp_, f′(x); fillalpha=0.2, color=colour, label=name);\n    plot!(plt, xp_, samples; alpha=0.3, color=colour, label=\"\", linewidth=1);\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n)","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Approximate-inference-with-pseudo-data-in-f3","page":"Pseudo-Points in Additive Regression","title":"Approximate inference with pseudo-data in f3","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute approximate posterior process.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"M3 = 25;\nz = GPPPInput(:f3, collect(range(0, T; length=M3)));\nu = f(z, 1e-9);\nf′_approx = posterior(VFE(u), fx, y);\n\n@show elbo(VFE(u), fx, y);\n\nitems = [\n    (xp_f1, :green, \"Z in f3\", f₁′_plot),\n    (xp_f2, :green, \"\", f₂′_plot),\n    (xp_f3, :green, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"elbo(VFE(u), fx, y) = -478.26616160163064\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Posterior marginal variance.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, colour, name, plt) in items\n    plot!(plt, xp_, f′_approx(x); fillalpha=0.3, fillcolor=colour, label=name);\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations and pseudo-input locations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(approx_in_marginal_posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);\nscatter!(approx_in_marginal_posterior_plot, z.x, zeros(M3);\n    markercolor=:black,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z\",\n)","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Perform-approximate-inference-by-placing-pseudo-data-in-f1-and-f2","page":"Pseudo-Points in Additive Regression","title":"Perform approximate inference by placing pseudo-data in f1 and f2","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute approximate posterior process.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"M1, M2 = 15, 10;\nz1 = GPPPInput(:f1, collect(range(0.0, T; length=M1)));\nz2 = GPPPInput(:f2, collect(range(0.0, T; length=M2)));\nz12 = BlockData(z1, z2);\nu12 = f(z12, 1e-9);\nf′_approx_12 = posterior(VFE(u12), fx, y);\n\n@show elbo(VFE(u12), fx, y);\n\nitems = [\n    (xp_f1, :blue, \"Z in f1 and f2\", f₁′_plot),\n    (xp_f2, :blue, \"\", f₂′_plot),\n    (xp_f3, :blue, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"elbo(VFE(u12), fx, y) = -477.4916323879492\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot posterior marginals.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, colour, name, plt) in items\n    plot!(plt, xp_, f′_approx_12(x); fillalpha=0.3, fillcolor=colour, label=name)\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations and pseudo-input locations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(approx_in_latents_posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);\nscatter!(approx_in_latents_posterior_plot, z1.x, zeros(M1);\n    markercolor=:black,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z₁\",\n);\nscatter!(approx_in_latents_posterior_plot, z2.x, zeros(M2);\n    markercolor=:magenta,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z₂\",\n)","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/#The-end-result","page":"Pseudo-Points in Additive Regression","title":"The end result","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"plot(f₁′_plot, f₂′_plot, f₃′_plot; layout=(3, 1))","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples_note/#Notes-on-Examples","page":"Notes on Examples","title":"Notes on Examples","text":"","category":"section"},{"location":"examples_note/","page":"Notes on Examples","title":"Notes on Examples","text":"The examples demonstrate some of the things that can be achieved with Stheno.jl. They tend only to comprise inference given fixed hyper/kernel parameters, because any hyper/kernel parameters in these examples can be learned / inferred in the standard ways discussed in the Getting Started docs.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/sensor_fusion/script.jl\"","category":"page"},{"location":"examples/sensor_fusion/#Sensor-Fusion","page":"Sensor Fusion","title":"Sensor Fusion","text":"","category":"section"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"(Image: )","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"using AbstractGPs\nusing Plots\nusing Random\nusing Stheno","category":"page"},{"location":"examples/sensor_fusion/#Define-and-inspect-our-model","page":"Sensor Fusion","title":"Define and inspect our model","text":"","category":"section"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"rng = MersenneTwister(123456);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"In this example, f is an unknown real-valued function that we wish to infer. To achieve this, we have access to two sensors. The first returns noisy estimates of f, where we have been reliably informed by whoever designed the sensor that the mean of the noise is given by sin(x) - 5 + sqrt(abs(x)), and that it's variance is low (1e-2). How the designer estimated this function, and why a sensor might possibly have such a strange mean error, is beyond the scope of this example. The second returns biased measurements of f, where the bias is known to be 3.5. The model below specifies a model for this scenario.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"model = @gppp let\n\n    # Define a smooth latent process that we wish to infer.\n    f = GP(SEKernel())\n\n    # Define the two noise processes described.\n    noise1 = sqrt(1e-2) * GP(WhiteKernel()) + (x->sin.(x) .- 5.0 .+ sqrt.(abs.(x)))\n    noise2 = sqrt(1e-1) * GP(3.5, WhiteKernel())\n\n    # Define the processes that we get to observe.\n    y1 = f + noise1\n    y2 = f + noise2\nend;","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Generate some toy observations of y₁ and y₂.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"x1 = GPPPInput(:y1, sort(rand(rng, 3) * 10));\nx2 = GPPPInput(:y2, sort(rand(rng, 10) * 10));\nx = BlockData(x1, x2);\nŷ = rand(rng, model(x));\nŷ1, ŷ2 = split(x, ŷ);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Compute the posterior processes.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"model′ = posterior(model(x), ŷ);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Sample jointly from the posterior processes and compute posterior marginals.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"xp_ = range(-2.5, stop=12.5, length=500);\nxp_f = GPPPInput(:f, xp_);\nxp_y1 = GPPPInput(:y1, xp_);\nxp_y2 = GPPPInput(:y2, xp_);\nxp = BlockData(xp_f, xp_y1, xp_y2);\nmodel′_xp = rand(rng, model′(xp, 1e-9));\nf′xp, y1′xp, y2′xp = split(xp, model′_xp);","category":"page"},{"location":"examples/sensor_fusion/#Plot-results","page":"Sensor Fusion","title":"Plot results","text":"","category":"section"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"gr();\n\nposterior_plot = plot();","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over y1.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_y1); color=:red, label=\"y1\");\nplot!(posterior_plot, xp_, y1′xp; color=:red, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over y2.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_y2); color=:green, label=\"y2\");\nplot!(posterior_plot, xp_, y2′xp; color=:green, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over f.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_f); color=:blue, label=\"Latent Function\");\nplot!(posterior_plot, xp_, f′xp; color=:blue, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot samples on which we conditioned.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"scatter!(posterior_plot, x1.x, ŷ1;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Sensor 1\",\n);\nscatter!(posterior_plot, x2.x, ŷ2;\n    markercolor=:green,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Sensor 2\",\n);\n\nposterior_plot","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"(Image: )","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"This page was generated using Literate.jl.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other WrappedGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising WrappedGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#AbstractGP","page":"Internals","title":"AbstractGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP and CompositeGP implement the AbstractGPs.jl API. Please refer to the AbstractGPs.jl docs for more info on this.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#WrappedGP","page":"Internals","title":"WrappedGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a WrappedGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = wrap(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for WrappedGPs in terms of the AbstractGP that they wrap. So if you want a particular behaviour, just make sure that the AbstractGP that you wrap has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = wrap(GP(mf, kf), gpc)\ng = wrap(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = wrap(GP(mf, kf), GPC())\ng = wrap(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and GPs. We describe the implemented transformations below.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of WrappedGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = wrap(GP(SEKernel()), gpc)\nf2 = wrap(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"},{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx_local = randn(5)\n\nx = BlockData(GPPPInput(:f1, x_local), GPPPInput(:f2, x_local), GPPPInput(:f3, x_local))\n\ny = rand(f(x, 1e-12))\n\nf1, f2, f3 = split(x, y)\n\nisapprox(f1 + f2, f3; rtol=1e-4)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPINput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the GP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = wrap(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we make use of a variety of packages from the Julia ecosystem:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.02.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"8.728835786594708","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well.\n    s_noise = positive(0.1),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-0.9162907691270586, exp, 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-1.6094379869399091, exp, 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(1.6094379094538682, exp, 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-1.490116130486996e-8, exp, 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-2.3025852420056685, exp, 1.4901161193847656e-8))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     1.141304e+01     2.757794e+01\n * time: 0.02411198616027832\n     1     5.901110e+00     2.434951e+01\n * time: 1.4815938472747803\n     2     1.192150e+00     1.793382e+01\n * time: 1.5225589275360107\n     3    -2.300298e+00     1.560755e+01\n * time: 1.530310869216919\n     4    -5.293798e+00     1.346499e+01\n * time: 1.5377769470214844\n     5    -8.917754e+00     9.074894e+00\n * time: 1.5451009273529053\n     6    -1.111076e+01     2.831472e+00\n * time: 1.5523319244384766\n     7    -1.152883e+01     1.464146e+00\n * time: 1.559661865234375\n     8    -1.161473e+01     2.776376e-01\n * time: 1.5669028759002686\n     9    -1.161721e+01     6.983999e-02\n * time: 1.6051528453826904\n    10    -1.161743e+01     1.440897e-02\n * time: 1.6124978065490723\n    11    -1.161744e+01     1.875626e-03\n * time: 1.619783878326416\n    12    -1.161744e+01     3.239766e-04\n * time: 1.6269218921661377\n    13    -1.161744e+01     1.736360e-06\n * time: 1.634016990661621\n    14    -1.161744e+01     4.338860e-09\n * time: 1.641171932220459\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -0.9378099154928524\n -1.711249445725035\n  1.5487363313776814\n -0.057168219965000294\n -2.4719999925311167","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.4),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-0.9378099154928524, -1.711249445725035, 1.5487363313776814, -0.057168219965000294, -2.4719999925311167], [-0.9378099154928524, -1.711249445725035, 1.5487363313776814, -0.057168219965000294, -2.4719999925311167], [-1.4198132646209054, -1.4784423382937353, 1.8344469932869945, 0.19594513852513526, -3.1852450842442805], [-1.3742404618429478, -1.4900610861994206, 1.9622568831442684, 0.2969297251692458, -3.5944286692598006], [-0.9473129017398886, -1.2202581352231086, 1.0292717267348133, -0.4504990231869951, -3.759011021656334], [-1.4104214192979834, -1.8302788757835757, 0.9989873761497202, -0.10910231260256839, -3.277978212713516], [-1.3147153136152974, -1.5207458257525173, 1.395695180805427, 0.0007486156727515101, -3.8800896681576837], [-1.2967839299613473, -1.4617165343843246, 0.7447091528533581, -0.9522695637689764, -3.5728532201421777], [-1.2967839299613473, -1.4617165343843246, 0.7447091528533581, -0.9522695637689764, -3.5728532201421777], [-0.9303469838690325, -1.2494516826744455, 0.5646117007713125, -1.071747205228221, -3.735243166898743], [-0.8778720621454014, -1.2169524367553577, 0.593600460984588, -1.2328369430874528, -3.5726054830204017], [-1.3090514176791868, -1.5188434123841206, 1.2668887460718021, -0.4852151350774046, -3.559351417426648], [-0.6824109611702854, -1.0622737850292516, 0.7987482091206852, -0.6732646051042779, -3.4964791876103902], [-1.0910962385729317, -1.35723833103281, 1.2045475546576334, -0.8246756427903241, -3.449071037008062], [-1.0910962385729317, -1.35723833103281, 1.2045475546576334, -0.8246756427903241, -3.449071037008062], [-1.2626178140513358, -1.6276211038646184, 1.25497684448415, -0.36613634260415184, -3.827008107573274], [-0.9497350759357426, -1.3658564179407728, 0.9159254843569865, -0.8024093353218962, -3.2996838035342355], [-1.1110357741583399, -1.4764635432240993, 1.0779690639114066, -0.7400314373686161, -3.623542322451754], [-1.2470207325691005, -1.7910317262917486, 1.42582939469839, -0.4700311780815682, -3.519334207847423], [-1.1284452474278241, -1.1728781702823863, 0.5837429896790979, -0.5136471982310347, -3.409186410855718], [-1.2101172192478722, -1.751137871112214, 0.8277519206540109, -0.2477333703960491, -3.7466464578944634], [-1.139957177816678, -1.3645623921751682, 1.0452525631935201, -0.5956406749774136, -3.5936870310716436], [-1.1677558310623468, -1.5574747641151332, 1.0321112963585197, -0.551871744510807, -3.3218489005973915], [-1.0696020108029722, -1.5120794605846066, 1.0874689079041902, -0.35600354350207897, -3.7530963313552177], [-1.1213424274967796, -1.5618400673905708, 0.24645475338485873, -1.2581863933229949, -3.5381557531354444], [-1.3164249763759817, -1.508410517393524, 0.31334123747113124, -0.7207384398623654, -3.697443368586647], [-1.168719645410939, -1.6677660503002596, 0.4043244571226891, -0.7689707444845018, -3.654439663182244], [-0.7171809676668743, -1.1357306290073699, 0.6523641224960383, -1.0570317734368715, -3.2676728604516523], [-1.499908311136679, -1.5475641857146791, 0.565627808144011, -0.5896792809038598, -3.914956477572703], [-0.8394175864556761, -1.2658206064663349, 0.7347490779965925, -0.7671341338982094, -3.2796658239907743], [-0.7854499161066422, -1.0883149964993006, 1.1086084226867174, -0.32586337351766537, -3.475271588919092], [-0.8331485921316186, -1.1897920762944474, 0.8556767323731854, -1.0230892365602013, -3.38773107255687], [-1.3146115773331175, -1.5044531906672236, 0.5230465496687954, -1.1085285133725158, -3.570939405676018], [-1.2554057418251177, -1.4534878933446098, 0.6254183121057973, -0.8249691245338139, -3.4093581606682157], [-1.022049440221029, -1.3727667463417679, 1.0741722506870466, -0.7894178137909259, -3.6681218236760507], [-0.5950470095837794, -0.7480528206119469, -0.33903513924163076, -1.1247607065139154, -3.35662166863625], [0.9745469627370342, -1.2040904062470408, -1.3875323056011635, -1.7273768631483826, -3.443190645282945], [0.8669142306642452, -1.065372824270396, -1.1790021626257898, -1.45236698150122, -3.580958821632762], [0.793780898433897, -1.053095109658885, -0.968436907796993, -1.1398498861704136, -3.5164491441689463], [0.9263234224970319, -1.0103182928159564, -1.128063053336144, -1.058868332623975, -3.347321030724072], [0.033387938446469465, -0.8332846536970706, -0.9742457407670059, -1.7469985427613224, -3.511207025959952], [0.9861455701559659, -0.18319493410271043, -1.433382606468813, -1.3499899358607133, -3.6443688838918056], [0.4468395143423028, -0.5571618173710693, -1.0357617195375277, -1.6618263190703055, -3.517718898897921], [-0.00286074028236543, -1.3748839837346962, -1.492814366083724, -1.5151437449006397, -3.6219420250590644], [0.6984245173668997, -0.8898080941682195, -0.9093076940309481, -1.5601167047952387, -3.5293991169466654], [1.3008622590689487, -0.7846787768487189, -0.9674367977926295, -1.616177732041681, -3.519591232267254], [1.1834059746092351, -0.6040032623314601, -1.192149007198335, -1.46118668723006, -3.666855251202011], [0.7013028018778454, -0.6322930767453337, -1.0214950576205464, -1.304804556221751, -3.7103930683625963], [-0.029749659684812246, -0.8341767319167713, -1.2061155633687173, -1.3428973092392937, -3.4676321213695687], [0.1662965685700561, -0.8247316613398974, -1.0589305425744169, -1.3881720846272143, -3.6836592171696774], [0.9999881138128079, -1.2946193936941661, -0.9484934499461185, -1.324640601315627, -3.4520961563376247], [0.7480179293446241, -1.0462999083988294, -1.0356470506227464, -0.9953944842644427, -3.7961589375768274], [1.6755366082842498, -0.16294370520630788, -1.4702313828289235, -1.4371405593609363, -3.6852313790996267], [0.007426488651504498, -1.2941940043254554, -0.9197906852514897, -0.77650245097624, -3.6902846198965085], [-0.3255892188699535, -1.1058442780707887, -0.8717448041229834, -1.006107714499054, -3.82971287709321], [-0.34428200433227873, -1.1697396729489222, -0.9492641911793245, -0.9476238176614983, -3.9038193667366996], [-0.04934105012359649, -0.6996363700003272, -1.4071658683146684, -1.4093088640245561, -3.7009507291797825], [1.1005754548477336, -1.0534324227317036, -0.99772929728529, -1.4997852604626736, -3.3469698157125847], [1.0129067282842141, -1.0987065598232548, -0.8720638730479335, -1.498449572199876, -3.4248021259296184], [0.7963788053805274, -1.2056361824561597, -1.073998039148872, -1.3938814000191433, -3.338108968160605], [1.327687188719116, -0.7472319880316183, -1.0216443447256633, -1.446775089631593, -3.8441996690688622], [0.4707574261521023, -1.0675674937701822, -1.1129619101622288, -1.0804875794418587, -3.6554443300098733], [0.8734083926259496, -0.9520650122756669, -1.2585427306869437, -1.5407111093972483, -3.34400783421956], [0.6436781362142552, -0.7965184740602023, -0.9787736125178672, -1.3256734082724768, -3.5773709794706963], [0.4639235937873618, -1.09614615583672, -1.3131232530259411, -1.607998910992976, -4.072918361537666], [0.39924026144694774, -1.0965894753929488, -1.177468431755701, -1.1778259561768225, -3.728269183801518], [0.23471958609997998, -1.1452634124081533, -1.1049863710596952, -1.6369743434989852, -3.3476650973362325], [1.590269862252252, -0.9623401033793448, -0.9112651563004536, -1.2900440370274122, -3.4529792845716454], [1.7344532663863834, -0.918748063525134, -1.184808039921911, -0.9652033642377493, -3.6217232870947202], [1.647324796083016, -0.5443573184782526, -1.0861216870057584, -1.5007409739802835, -3.2580985375749076], [0.6655182911210862, -0.8821127024495172, -1.237868597357037, -1.345212906485258, -3.9490920914415137], [0.6287863520831012, -0.6779409425385351, -1.331257050588741, -1.2694085088686284, -3.8225386572740323], [0.7124916632913704, -0.46692200011403967, -1.2647662385983631, -1.3430165280631408, -3.709578160451835], [1.090459262157452, -0.6190882346476114, -1.2417360710780094, -1.3949201494966519, -3.5366881244582995], [0.9856366824831997, -0.6629818255787971, -1.2916146059701994, -1.674666722639583, -3.3942646896164694], [1.0547171712414423, -0.9295281168480262, -1.09441861421794, -1.1989688123559967, -3.4977927336702037], [1.1334689875408555, -0.7344145655181067, -1.2818834036941469, -1.509784728365979, -3.6042012843406033], [1.4737919340595695, -0.5050001712689139, -1.397992566123976, -1.6799542350988956, -3.7564361752253577], [0.6080898994523136, -1.480129757715185, -0.9159601539739907, -0.9057325218892702, -3.494836363620236], [0.6892735558265572, -1.5338184746124248, -0.7116942202583685, -1.0143795401923779, -3.275308710971799], [1.0215350696478023, -1.0782804042672276, -1.0315584978427856, -1.3748097601467695, -3.658619581746591], [0.8176841726120829, -1.1201842214929618, -0.8227246797738915, -1.263069681605444, -3.5377216774588534], [0.8855448866236391, -0.8787488272779995, -1.0716059896995072, -1.3505089706704554, -3.6851089763546], [0.6361885502623178, -0.753851199003923, -1.4584030397865593, -1.7916250532960343, -3.517606271606683], [0.49612368250302774, -2.0785916357084004, -0.43499797304301274, -0.682858320454028, -3.7078513066098564], [0.41499034065122464, -2.0319227990453843, -0.8709330948247084, -0.6197660733587941, -3.6030161296357703], [0.3373015102526358, -2.0533333802097826, -0.7001445144138502, -0.47946872186378814, -3.5526399678588265], [0.2858360151012136, -2.0940870945084753, -0.43473610069832497, -0.7387240663017782, -3.588168584502619], [-0.055845869733262526, -1.7752405056796838, -0.8168112042724749, -0.9583118311854952, -3.8599560308269822], [1.0360167712895563, -1.902685894510881, -0.672856562336467, -0.8674218866057515, -3.6673300639348407], [-0.22305234000064442, -1.6649575561142815, -0.7569172755511983, -1.3020101354355749, -3.4786503330010192], [0.38771406107543865, -1.4362764631427913, -0.8547024352339594, -0.4974330531319746, -3.5775607677227192], [0.5148496562151275, -1.4119815005371432, -0.951848090730312, -0.8248496401607049, -3.8539162414733026], [0.7725365839431984, -0.06083228429844912, -1.0466419086172496, -1.045297891409289, -3.8273022382316646], [0.5638887642425664, 0.8856712945118241, -1.1320377875919898, -1.5775488688664745, -3.3825618668577184], [1.4027511051349013, 0.44087858831857984, -1.2764349914360362, -1.3664983272777185, -3.825740160626413], [1.9007490436502898, -0.5360497707116065, -1.0831198909347828, -1.3251835345062442, -3.773395124753435], [2.2762284644604525, -0.7060167577469874, -1.0883093176739544, -1.406167065503385, -3.725909013651474], [0.20947826631098182, -0.8965396305893663, -1.4323067384056094, -1.7125940852602524, -3.550463874344365], [0.7217654894124241, -1.2019396496611627, -1.1239276755449235, -1.4457117367031938, -3.428101485686819], [0.6643298891296315, -0.9421597700481287, -1.0034346677891661, -1.245594067093392, -3.5662231754537435], [0.6582303532448031, -0.18993087955151364, -1.654995808480702, -1.6672163242064797, -3.4509366070088254], [0.793264852598785, -1.3740385047941008, -1.0092790356820285, -1.007148262970661, -3.2471943523859577], [-0.008335123536767616, -0.3373147592192759, -1.325245930181863, -1.5532773841148404, -3.7042538261543063], [0.012908270577442899, -0.5624253579329263, -1.1310544416224209, -1.5080353219149294, -3.3941523473121524], [0.13755197182637874, -0.8522111418102866, -1.109245658271296, -1.1984826099562946, -3.5439746658469087], [-0.05594614434940639, -0.7642754520573444, -1.084591211862548, -1.3525964423524874, -3.750889868122884], [0.5481651246816743, -1.124107404337975, -1.1298699135280457, -1.7350206726396746, -3.3451022178542993], [1.0418792636322016, -0.5719776963569383, -1.0251483240550192, -1.3238549517764298, -3.7197122187228437], [1.000040293829123, -0.6216104031730326, -0.9912942459929829, -1.2787575805449476, -3.690437301393556], [0.9887115491402039, -0.4007901972744464, -0.969337928075645, -1.3193889829417942, -3.7834027891928974], [0.9860806985013477, -0.6992736453837378, -1.3490165196008732, -1.6585633709510523, -3.796473176233329], [1.827269734754846, -0.02606877529321261, -0.8998065824098199, -0.9351109735012626, -3.570151009258805], [2.0870855012000353, -1.2708253297347745, -0.9584729754091189, -1.2853651249389717, -3.2668628289239554], [1.1584570403614574, 0.12696832073040637, -1.1420243404522752, -1.89310595224229, -3.448604924343166], [1.4135377054002536, -0.12142079471341434, -1.071589176480992, -1.3418238280489705, -3.4482780534527784], [1.6596771864974869, -0.36048013776751237, -1.395228109427447, -1.6034885214172376, -3.7052820155969366], [1.7838711782970855, -0.4026743218579601, -1.5054844131110476, -1.5120725328211855, -3.6485762332840617], [0.8291115052920587, -0.059640101616067455, -0.8175092734251828, -1.1330393228612932, -3.323635531489135], [-0.061170645837303805, -0.06519598581213254, -0.6896778163045011, -1.0545741627936547, -3.7252741396852294], [0.03588296441784414, -0.1301756090691615, -0.7943379281597353, -1.0120406893584666, -3.692975265281453], [0.04551969967855998, -0.4058610703078447, -0.7385503731767767, -1.1706421421811357, -3.729112869930899], [0.5802335609694674, -0.7129222774079662, -0.9903220235474788, -1.1934111531566147, -3.518574710505966], [1.0889019608436195, -0.9748018436483238, -0.921063996620965, -1.0883225629613809, -3.3864631608552997], [1.288722755655418, -1.022084324334704, -1.0886839576922804, -1.141094473020945, -3.470443976944151], [1.059668379518797, -0.23257605585420088, -1.2981907622744695, -1.4176661355819649, -3.7713057953760387], [1.9781257375518957, -0.35043213359636016, -0.8062124476250425, -1.2747096082192504, -3.3675568994102463], [1.5439614991656407, -0.3185409710314596, -0.9716354291463762, -1.0845889711441392, -3.647664806941733], [0.5275028660439661, -0.17976840234188124, -1.1584878725785153, -1.5619937743691859, -3.460683757831576], [0.7949161588228606, -0.050025624142279845, -1.1892200581302586, -1.100063647441468, -3.5125768671753046], [1.1290481854148149, -0.22085777358765027, -0.9995081829091369, -1.3455445855784418, -3.864472055122159], [0.9897743514906933, -0.30302203155767105, -0.9646180441416737, -1.1374952550065447, -3.2378388056673284], [1.2562551530981927, 0.31898389706529723, -1.4981771642277653, -1.4730571797284875, -3.9495582580093243], [1.0763888357240552, -0.47533792861364826, -0.8138303207346667, -1.3504935916952323, -3.1591689283926314], [0.6260166549174309, -0.8608682249513304, -1.088932814861279, -2.017695377540721, -3.221814503261821], [1.0284592653920472, -0.6138482895482916, -1.3310695133843895, -1.149310537234112, -3.821468577129394], [1.0070697282242538, -0.557371959480547, -0.7904494473716187, -1.4654010532548898, -3.5381128396700765], [0.2243070329637327, -1.276562878627537, -1.3679357353070012, -1.3503271737987619, -3.65470968137073], [0.29917271094015796, -0.5823884277434834, -1.2693336269946103, -1.8418510306235134, -3.6210210173702704], [1.4319862682111868, -0.3522613599576137, -1.3702963607711227, -1.4786107807234745, -3.479229413786574], [1.3484666225945972, -0.36454092779512276, -1.184052062011307, -1.6691498873049357, -3.514710725375204], [1.368080111977549, -0.367308610712732, -1.112650385214166, -1.3288682084300951, -3.3961553817424055], [1.1245467823932593, -0.08873051776093997, -1.2060934538688683, -1.6389129651837524, -3.752837793962978], [1.04403827356922, -0.132167027745659, -1.3083513337869932, -1.8285688499751218, -3.473732718580299], [0.2673609363691971, -0.5444268099610475, -1.4259378188280927, -1.6520801306042887, -3.9021700737488754], [0.5534775307052054, -0.5426102421067619, -0.9557300986238582, -1.5518178159110023, -3.6584888559686872], [0.5160151167796381, -0.5172508181637844, -1.3284886474219313, -1.4038282346558986, -3.45871703666312], [0.6656423959424077, -0.332456375720982, -1.1342096308711642, -1.5203447801882441, -3.8373826640200432], [0.08282552887174208, -1.5122464030006657, -0.8560024575570095, -1.3984937233625248, -3.6389964291520247], [0.13399894377434798, -0.9120701045921229, -1.019465616275468, -0.8347020740743651, -3.5426076064230294], [1.3512175798057413, -0.5155565634768566, -1.615079994058269, -1.8479312702151127, -3.1602555794421896], [1.065696284326563, -0.24880295596544044, -1.380204310230722, -1.7024707564739028, -3.630595738050409], [0.0009391583515270807, -1.5028322745028468, -0.6431838110742096, -0.6718687988226607, -3.4077140359443363], [0.16897299608007593, -0.6103902883655425, -1.0696754289235195, -1.771071276449864, -3.583841712234206], [0.261942971266912, -1.1147499435141508, -0.8442018055932686, -1.3545361037788477, -3.70697993799485], [0.264657000093464, -1.382040842582062, -0.9434086911034317, -1.0024044065246311, -3.4931907574526266], [0.7094109093878773, -1.2931577713916633, -0.4594163369581318, -0.6993098942305683, -3.3728634594976583], [0.7094109093878773, -1.2931577713916633, -0.4594163369581318, -0.6993098942305683, -3.3728634594976583], [0.6538917102658658, -0.9605088930482064, -0.5101433862612447, -0.6897757189068384, -3.1647196210405553], [1.0419263341041876, -1.6496854504626262, -0.8001066370337431, -0.9705130571854379, -3.5908629203384392], [0.40223048471079564, -0.38053181648122547, -1.4843857899262283, -1.7155479677457868, -3.7354761802075003], [0.6887406946599249, -1.0052595895359797, -0.8184851774866113, -1.4501081050579065, -3.599335320284356], [0.6136294086016123, -0.5706379290857211, -1.2371125892107266, -1.5881571235191885, -3.315238913517635], [0.2654116397692048, -0.9624546303488374, -1.0457278755069512, -1.3564243046585283, -3.5533984975009503], [0.9594873442855187, -0.7229785895701784, -0.9835679651603934, -1.0818168233198542, -3.560956974118108], [0.9792392110328697, -1.159744230126446, -1.2140573427802457, -1.6050281073329014, -3.3358624554113114], [1.2001384871408873, 0.20812626344214685, -1.1623884975877872, -1.584217089809797, -3.3981142201812795], [1.200688488401245, -0.1869811046905423, -1.1546967054514081, -1.4679333014022888, -3.711766025190061], [0.6659719065631827, -0.6572662327065284, -1.376389292279897, -1.5855273538375532, -3.53122080008271], [0.5447349113766138, -0.5299348237766759, -1.4123527127270106, -1.5211204554063997, -3.6641539146119566], [1.3322263035773974, -0.07515446299860243, -1.141936012011654, -1.502181182433425, -3.573141199394381], [-0.03220531266615917, -0.7263633094523176, -1.0747384076901976, -1.147956883487152, -3.649154117173386], [-0.09401603310795496, -0.5618057152811312, -1.3052239396906928, -1.160614452916553, -3.878800764730729], [-0.7639761995453899, -1.7428000562595758, 0.24190165571673972, -1.3071176467261827, -3.2305671363242667], [-0.8464950983855386, -1.4876581903794006, 1.0249118662072885, 0.12872846525257514, -3.2502115423844415], [-1.5008903582451836, -1.6094848610174135, 0.703728183379901, -0.5252406293787866, -4.002041158765635], [-0.8562901493053671, -1.3634601157845356, 1.119544577465402, -1.2503555181546928, -3.271972811076641], [-1.102204373628947, -1.0436583303352651, 0.6832905959568352, -1.260833813925441, -3.7822259337861874], [-0.9591872536242119, -0.7247492064863998, 0.6339704082537868, -1.2633463011100012, -3.7582707422587562], [-0.8822756359044847, -1.2423759417352123, 0.27564114466673995, -1.4435119382071988, -3.121212025646869], [-1.5077007035676298, -1.425829538875386, 1.2808349906872198, -0.32041633314266027, -3.684531618931924], [-1.1795416371214795, -1.126223149120058, 0.42729191901529223, -1.190682417235453, -3.41300472560642], [-0.615742136195619, -1.4390662133437382, 0.07471310776674307, -1.4072631807852798, -3.3984411874793987], [-1.0132998892045855, -1.6598008668582493, 0.22513552279770846, -1.0764679940805215, -3.4124019163544377], [-1.0529849796618538, -1.5292941763833725, 1.4870481544434686, -0.32176355670580153, -3.492138394589318], [-1.1441835505701539, -1.3264352877558048, 0.6580262667622683, -0.20214415353863716, -3.744717302863268], [-1.432974754965557, -1.6870256391322946, 1.3748512793425984, -0.7464163700205455, -3.6438677246906597], [-0.6731591132608865, -0.9271235458761895, 1.2426174463609174, -1.2511120819235362, -3.532131097914977], [-1.6884719194992095, -1.8936747713614825, 0.6924398650788688, -0.6607056108301741, -3.596391955836795], [-0.7327513312155944, -0.9824455194679598, 1.3814031996786313, -0.5518815402248036, -3.5576429862802463], [-1.2939319137149439, -0.9195365862068509, 1.4593808450217838, -0.5891560502332759, -3.243189354817606], [-0.8222154481101343, -1.8218237570831657, 1.3046161369001603, -1.0080493209079342, -3.596704717685388], [-1.3390105046903427, -1.355465419926461, 1.2385362441061103, -1.101452055990806, -3.579059517704061], [-0.9887309283958643, -1.2217631537136013, 1.0218030165167007, -0.586270392863544, -3.8858492217685154], [-1.3765726354385215, -1.5279138893661441, 0.7013465621416378, -1.2348436794478215, -3.283332068648775], [-0.8409879697016825, -1.2373069277515854, 0.6978445627258898, -0.9449649512890547, -3.6246163587990425], [-0.5699687523849294, -0.28792490173082547, 0.3868603002784403, -0.7177091709184887, -3.416475649665477], [-0.5579710357243751, -0.4228735464045318, 0.4330935153891723, -1.374912187563043, -3.496465508425755], [-1.0039074626954232, -1.3162677807694643, 1.2005279181357968, -1.105301717218064, -3.6875411056329046], [-0.8214569618287425, -1.2317788508063172, 0.9948241237016012, -1.3724698356778415, -3.381940686177309], [-1.3598163035388469, -1.602731546349636, 0.5306452424877343, -0.43152808018025146, -3.8285714039525707], [-0.967541280123091, -1.437901912096425, 1.1247902648624803, -1.317433424725421, -3.5032937192603377], [-1.28263953077895, -1.4571481743727315, 1.1280634062123978, -1.288453830285824, -3.338113398800924], [-1.1888898361154496, -1.3094118614495862, 0.5183852081179078, -0.23531840895005257, -4.03462027745492], [-1.0590395751995771, -1.0941323855136618, 0.8424261044372494, -0.6279939632441154, -3.696200199005173], [-1.096496734718887, -1.2683249243397716, 0.6458199777540012, -0.6468051066294389, -3.7968318632961937], [-0.8081112076816142, -0.9641397045288476, 0.6452121590408624, -0.7031542346280307, -3.818478951818985], [-0.6862892322529596, -1.239318170015497, 0.7931000847236437, -0.6726534849426978, -3.1767992094292516], [-1.3545024783624524, -1.804039953920909, 0.685465390626766, -0.8011036198591306, -3.6377692791903886], [-1.1955326354514069, -1.242018569023363, 1.131339943942252, -0.4452969875036106, -3.7108381549337772], [-1.2159645222916313, -1.6476582155243864, 1.0455931932835456, -0.4883481642372174, -3.543934461256661], [-1.3721342826253178, -1.3531662218359672, 0.9961455612142585, -0.24530943649305725, -3.9149700571388464], [-1.4982591968017422, -1.3204921517385946, 0.9308309092768844, -0.2360256801886158, -3.434755321998148], [-1.201139440952805, -1.0250170759329482, 1.349452158329248, -1.285481770815634, -3.304009061488146], [-0.8103561328930438, -1.544141180737358, 1.749106965675034, -0.6687577064427519, -3.627386487788326], [-1.573852212343978, -1.8998133464371512, 0.6422073844523322, -0.5121231393976339, -3.272166883783228], [-1.3338885874445743, -1.7907984353625694, 0.3124631192458409, -0.8721007137698404, -3.246851091228623], [-1.1334093117431676, -1.8971060301413003, 0.3092122640145492, -1.0309090489741664, -3.1274074829950393], [-0.6635259029757758, -1.2382526299217487, 0.7835534684193174, -1.3234158807153502, -3.22470461691348], [-1.1922109688564155, -1.0397192945069784, 0.5631717112625279, -0.7031789048902768, -3.6820558383039654], [-1.0761586683531281, -1.4135180677640493, 0.7926449768935779, -0.8582777270507628, -3.727822291489299], [-1.2501453899234078, -1.3340033388897203, 1.3501540822014615, -0.6351237906772773, -3.4382983349289225], [-1.2753949159842188, -1.314807920341294, 2.070460736325976, 1.2984782134080644, -3.2190821388290702], [-1.1650563766009965, -1.2791481967222211, 1.5720394892588054, 0.03574299397951952, -3.6923774433015932], [-1.2400099647660006, -1.8074981473240652, 1.6281177728257794, -0.13147405061243278, -3.2340494989771664], [-0.8663115487263611, -0.805060243085361, 2.293671695791971, -0.8862884953251964, -3.5561706460274825], [-0.7962675127202425, -0.8843992503637111, 2.2602156884513764, -0.7122520335850763, -3.713556873501117], [-1.190892254122486, -1.4183683902055535, 0.9126288253089876, 0.5428020721769969, -3.6703547487818295], [-1.2056071618400968, -1.256313429387622, 1.3192827060511962, 0.4130237476404148, -3.771581388412572], [-1.4042495973484708, -1.4058042852447372, 1.3148805068780764, 0.3433596303862137, -3.855918498292602], [-1.3131218539383396, -1.6804521990435686, 1.1973014882457649, 0.12666478637070072, -3.492015237841177], [-1.1293693284763782, -1.3414649417028153, 0.8029729291074269, -0.5730195688007826, -3.725738161317822], [-1.1113009517579824, -1.6419183939940578, 1.054305175959808, -0.656608285909744, -3.4505698428139593], [-1.045803048814409, -1.201662288595875, 0.004446239606755192, -1.429532468440492, -3.8404151606180728], [-1.134285932219777, -1.7505472852149249, 1.0882793372209296, -0.24501537633945095, -3.5125111064910337], [-1.0590573768812803, -1.1099672461189771, 1.3981974446118184, -0.6120499325172659, -3.5802468224533017], [-1.362286397670088, -1.5625515632023599, 1.267931521942539, -0.49590974816677796, -3.554298703536154], [-1.1817023273397234, -1.5266408919991339, 1.431735068283904, -0.5490426931915146, -3.616341813235382], [-1.1142035176460434, -1.4798064708416283, 1.575829847526298, -0.11391377328250304, -3.570153021534969], [-1.1193276721957175, -1.418320399284401, -0.004738423977410838, -1.2858478322969098, -3.5589701793176185], [-0.9207808683100406, -1.334269374521347, 0.5287494167185014, -0.9553814978296032, -3.3937557020591753], [-0.7864219976546067, -1.2971607445387077, 0.40439807496939845, -1.0590592602427118, -3.3180234437585714], [-1.3191990378560283, -1.3163270754649978, 0.15873834551583452, -0.6478193783823194, -3.8706863706780146], [-0.986382718696577, -1.4950808173071064, 1.0040311889735336, -1.1758649442717748, -3.302799190657006], [-1.1780512845678588, -1.0987876833432122, 0.6548391932081178, -1.4571538259897219, -3.876357044722239], [-0.8120661703870393, -1.0708659963046891, 0.5180015667385368, -1.4156284699671675, -3.512020241265139], [-1.0289617265954132, -1.1320956784333067, 1.7702350035762549, -0.2226250602427301, -3.384800157977335], [-0.7466053983634557, -1.0234898772371699, 0.9266466778903101, -1.56590662796685, -3.6465260925256797], [-0.9342091191623978, -1.1374388802677717, 0.85469724902506, -1.0017052182287889, -3.4471047353211883], [-1.2520935640493196, -1.6678618538390309, 1.2986315698550503, -0.6866287122503107, -3.44260262821707], [-0.8502864403380394, -1.2779802788374357, -0.06268697169981668, -0.7440487787898797, -3.510371219295696], [-0.746576241498661, -1.4292732093368758, -0.1909880840997847, -0.6179438985482366, -3.4716460347719345], [-1.1951709619599393, -1.3030066024824447, 1.1121023562931358, -0.5642435507624148, -3.6083928913639722], [-1.3504612841706274, -1.4212224453821367, 0.988781452645751, -0.6470032398724386, -3.8999941742100854], [-1.2624734845202092, -1.727349153894731, 1.003252018745614, -0.5100340410406599, -3.4055195851776876], [-1.3312812908293992, -1.090534691456567, 0.393458666323536, -0.6216943878807546, -3.697030653486936], [-1.0257943561472336, -1.763777927308831, 0.7924061448627211, -0.5616038651773989, -3.384801813554837], [-1.2276290706061603, -1.376310030547908, 1.4084257387883465, -0.371602429955146, -3.9682786942503245], [-1.1864704217060071, -1.6453917875786903, 0.7434810691546414, -0.47613104694679015, -3.250084809932099], [-1.3408232945691838, -1.288764978858733, 0.43498806211286484, -0.8881599509138323, -3.701720415499958], [-0.961865582983262, -1.4078675625033208, 0.991820605248148, -0.4455415050835254, -3.3610794941171016], [-1.381365016283524, -1.626606131271883, 0.9380964908854562, -0.6937687732492985, -3.8416522656379444], [-1.381365016283524, -1.626606131271883, 0.9380964908854562, -0.6937687732492985, -3.8416522656379444], [-0.7760694509500068, -1.2930520706480155, 0.6409558547510958, -0.8913283276042976, -3.417364221892617], [-1.005636327114284, -1.1198736856922562, -0.1442239867684607, -1.8981108356471095, -3.770980376334688], [-0.7781020844282373, -1.1719392686401664, 0.02536706378026339, -1.6526752087174557, -3.457722558055444], [-1.2472518206611771, -1.4543303145518274, 0.5447972916489817, -0.5815623175270553, -3.6720602759030765], [-1.189692832587814, -1.4155532708246368, 1.0907201618126736, -0.19781283774523895, -3.6543669011628217], [-1.5199055408367403, -1.496875931661106, 1.3623299167189158, -0.06034420011443236, -3.4311857646120916], [-1.1259598303450595, -1.7137523683205782, 0.48773766405246977, -0.8954524183635533, -3.856543752629355], [-1.2955723922164606, -1.244937273250924, -0.13707335203638488, -1.3389466882164718, -3.410584062950222], [-1.183114167117957, -1.6825929031322246, 1.5749827780357386, -0.34896507248576364, -3.6730918175445906], [-1.1967502915289492, -1.1971789007774423, 1.0865998468015923, -0.8193411534575239, -3.585595377266052], [-0.9267258211138961, -1.482245917907435, 1.6018382780732285, -0.8145472678123601, -3.5574569495282606], [-0.9168922063026854, -1.5367111911545712, 1.4483378931181887, -0.8240131661339866, -3.3899103526611207], [-1.1246701174961926, -1.3843228791562914, 1.586136648565444, -1.0411415679304192, -3.510895399769502], [-1.1333297139256975, -1.7704935346220372, 1.3921183937482051, -1.0932894847506391, -3.3842696326235395], [-0.9532078953306008, -0.6427482639768298, 0.7008863585038834, -0.5489772884319264, -3.8820492275975713], [-0.748157701341962, -0.9367271843804172, 0.7557556557037604, -0.6020807753055467, -3.720179764642718], [-0.8316831710916273, -1.547431408756379, 0.34277899616088864, -0.7341097544320826, -3.5030746403151807], [-0.8855303476342625, -0.839029066514252, 0.9839075307219891, -0.5786045500437745, -3.6170607748641848], [-1.1877044704823712, -1.4807424387456172, 0.5569057373920692, -1.479946625757341, -3.345749876252904], [-1.0870504733323714, -1.4188568338617784, 0.42997668076800977, -1.3050153866012066, -3.608337319616384], [-0.9486844197193678, -1.56314163200593, 0.32896379066692905, -1.3583564664021934, -3.5102916157240895], [-1.0043596449777186, -1.3157233976034381, 0.2217448476935941, -1.098984238864382, -3.5593442362377457], [-1.1331194378548972, -1.7867884359305373, 0.5710994890430949, -0.7608018800006723, -3.447874046778346], [-0.8120267381250256, -0.9389455879360011, 0.49348638943966766, -0.8895734293116192, -3.5691914601365022], [-1.1563264107676459, -1.4825124472759361, 0.6290247791476019, -0.30011755392567774, -3.4064781769350385], [-1.2086577438594521, -1.519011731950972, 1.8212039836958824, -0.2394340040980502, -3.3489094201011134], [-1.4834447577396472, -1.280560573988161, 1.82348226521981, -0.20810517424322778, -3.76834033207336], [-1.0805733668383806, -1.5401656523251142, 2.010646992902695, -0.4393404930887045, -3.3625394471917405], [-1.1089363732115527, -1.2326553673882286, 1.4359865810327022, -0.8521584492205205, -3.759181856766673], [-1.3806907672384747, -1.6884326471952573, 1.4520341087755155, -1.0632109022806757, -3.3059570756748538], [-0.9390535889788731, -1.482162168906227, 1.529206211122984, 0.4256357049096168, -3.2380728182337912], [-1.1805631513697192, -1.379481007067597, 1.8192214794157078, 0.2591694687084581, -3.810611326144814], [-1.310186420536126, -1.227118986537152, 1.8135648642916407, 0.18567098280295108, -3.8079901975700476], [-0.5548098057962135, -0.9681503596271488, 0.34519618886596415, -0.7794087454519563, -3.3790695792627132], [-0.9360794517861404, -1.1429507434745327, 0.6561452998710545, -1.167034940729256, -3.2337459654866514], [-1.0760166673812896, -1.1002887005242954, 0.5702661880063052, -1.1856243829117488, -4.0310739159197855], [-0.9455338889774538, -1.9184026629323954, 0.38736944740527096, -0.7903351753201898, -3.1908282482321466], [-1.5067824254826294, -1.4481294247388472, 0.062214801080072046, -0.8463510649110995, -3.8630464376643103], [-0.8423436402559131, -1.0589850907911087, 1.633946228542938, -0.4884947188779448, -3.4824809784085393], [-1.1382972396586257, -1.4822428824648044, 1.5729079986979297, -0.5486604638393163, -3.260038502794084], [-0.8957119403845577, -1.5270914406667688, 1.2955816344681477, -0.34605464449611534, -3.24035018973986], [-1.1766727961121035, -1.118678578804691, 1.4787621556854191, 0.0989374006118952, -3.795349238333341], [-1.1766727961121035, -1.118678578804691, 1.4787621556854191, 0.0989374006118952, -3.795349238333341], [-1.0914282811800076, -1.1504511677218723, 1.895213804855096, 0.14869330889775514, -3.6209799005680017], [-1.344023535897345, -1.4881528973142881, 1.0474283578188877, -0.856055679323795, -3.651814447414244], [-1.493502842030664, -1.556556955982805, 0.4873637201362228, -0.8535613356877613, -3.7585472365767885], [-0.8549717758497133, -1.2192181792918932, 1.0936915483885032, -0.7648287521216742, -3.2771610452677606], [-1.0456344951713634, -1.5225172868738803, 1.063321490814313, -1.056953255458925, -3.634330262514333], [-1.0824431293358063, -1.515216190666126, 1.0558432303095635, -1.0501560486923578, -3.638561806958257], [-0.9369877679154482, -1.0362258570521086, 0.5523111565387476, -1.2184984550003248, -3.757874252828083], [-0.7954970610115423, -1.2370184470638912, 0.7342511200861129, -1.0477060425211053, -3.21063981447429], [-1.3114110889628647, -1.2883979869066202, 1.2762643421575173, -1.2472898241635466, -3.69194321049315], [-0.8160247187328908, -1.428414909593541, 1.3960949758051349, -1.0828510291017532, -3.529347028369287], [-1.0394734845876665, -1.129509312991705, 1.0551505068480802, -0.8904082131759953, -3.371334969781727], [-1.0884707953224997, -0.9500240037472367, 1.191782540249446, -0.7760490780957489, -3.3211571521661436], [-0.8244680849299508, -1.3903333306106282, 0.9726904623885415, -0.5910158239030392, -3.646987461767484], [-1.250718502774851, -1.577858851729511, 0.5889759046507883, 0.0934749290136658, -3.575509760582677], [-1.0939031993182393, -1.2120412294128993, 1.3122466925063487, -1.5528130863634464, -3.7031198187922914], [-0.8986281043619748, -1.1693657405300377, 0.45108190145288435, -1.576511091578043, -3.5420140784935272], [-1.2538708367422982, -1.7733518689056433, 0.7139981623406175, -0.08842441819238994, -3.7961374268575474], [-0.8071750325256928, -0.6955682150925675, 0.6134354332889803, -1.2793930538360136, -3.180416979841036], [-1.13352723467774, -1.451064442360117, 0.6279112274707727, -0.24399707520475963, -3.6840422389889573], [-1.4123767423605047, -1.4517234041317635, 0.6690317251761195, -0.17352875227334, -3.5970801003331365], [-0.9975599045148787, -1.5604258998358167, 2.3049637726462633, 0.14521598392283183, -3.4729581292229157], [-1.167182541998499, -1.3341467017843092, 1.8458545360171525, 0.5221743104316625, -3.664434001403374], [-1.1904059854034879, -1.4779321601097055, 1.0207749594419127, -1.2245114975657088, -3.823399953666498], [-1.1904059854034879, -1.4779321601097055, 1.0207749594419127, -1.2245114975657088, -3.823399953666498], [2.036898175311008, 0.2625441355808433, -1.1442562711836903, -1.3398506445404723, -3.659232420268883], [1.990706536935137, -0.28444501940641265, -0.9435011206399195, -0.957146732451699, -3.253234626299487], [0.18316389596372518, -1.23592097000376, -1.474768165703639, -1.731938312395508, -3.6510266443965733], [0.02281498894593502, -0.6673630898798968, -0.9071224984978208, -0.9758424342230576, -3.4229004959566005], [1.3966099805877579, 0.06093726993242153, -0.7932479548091542, -0.9739434850404654, -3.3381584946419585], [1.3492950596276818, -0.6848359396121086, -1.2337753608395285, -1.341511302378739, -3.720038944985407], [1.240346127045799, -1.3088847342086236, -1.0370014396525955, -1.3235561609812638, -3.358814403277414], [1.267758480724061, -1.487653223954883, -0.7154085556891578, -1.3086097496120574, -3.1929859577206505], [0.9331609367885292, -0.43213872791692964, -1.6041799632226952, -1.6091807671088663, -3.959189577845688], [0.9516344366789884, -0.576975683447338, -1.387410286651946, -1.5543223925325067, -3.828638873239216], [0.822011797600977, -0.249146845072087, -1.0830808265158738, -1.2621557090052407, -3.5585203151680274], [1.780159234089074, -0.028831356303481527, -1.2865651168411996, -1.2898373310825724, -3.601983976493854], [1.7637742732864083, -0.03649293499836605, -1.0591339771500854, -1.2732981042279583, -3.489382421423918], [0.5322614280792001, -1.4659711521153367, -1.317019299411157, -1.4811543933645044, -3.6559266096731213], [0.5684163414779584, -1.1741294419864374, -1.0705647626905417, -1.3217494902474194, -3.563968325992452], [0.5111935412905874, -1.1728748658725838, -1.1231290288337616, -1.337151998492536, -3.6959297362055743], [0.5763918448890953, -1.0398956314013816, -1.0892237033904375, -1.5612725682011133, -3.3589658442369865], [0.3739372426936231, -0.8349117251505427, -0.7683591375364762, -0.7708839458203256, -3.844724773547105], [0.31312900170628005, -0.576538123353431, -0.8182343072709085, -0.9355078362553262, -3.835105622294743], [-0.8865648263226658, -1.5896447359623282, -0.807879050508411, -1.2144744628043946, -3.808134507347171], [1.5529285121836462, -0.4034847298603191, -1.1242803838909077, -1.438255849080217, -3.6190091210958237], [0.7877410262765455, -1.0001090721676522, -1.0096293132489194, -1.176325645154296, -3.707082239016873], [0.5813684257226005, -0.9859993739956268, -1.4636350415496897, -1.3414054293385362, -4.122236479056], [0.6209307548354079, -0.635090987422916, -0.8061785516189974, -1.3849332552941136, -3.453655538322645], [1.574615303167449, -0.6191138676507733, -1.3049024672730836, -1.471334447052864, -3.494781638983113], [1.581137319121464, -0.6489257851099044, -1.3597177625600552, -1.4804592112570178, -3.409073929842019], [1.065467716149874, -0.30500140849325214, -1.0865556477516416, -1.500177924030717, -3.7674162214810543], [0.4418533459327466, -0.6588515237451605, -1.1799031733787475, -1.8161562201597141, -3.529105289349674], [1.7103968991507008, -0.945727919635516, -0.8868602090071188, -1.2526189687319906, -3.5283797805319064], [2.0012454776346598, -0.9578271216719685, -1.0628183644762836, -1.568558470484451, -3.582650518311999], [1.32334859102374, 0.053477276962053816, -0.8843699681366455, -1.1466061688888312, -3.6744531446476887], [1.8879399097870604, 0.03006998263404599, -1.2810994252448562, -1.7417905636694213, -3.485678891804451], [-0.6033724548031276, -2.030421424372064, -0.7549182760033883, -0.725441866772593, -3.3823436533842504], [-0.6874544195559508, -1.919704129311694, -0.6570011779347136, -1.3204099743399655, -3.4564224099400462], [-0.8884270282123433, -0.9112016992479047, 2.1470125887371934, -0.6012167110902837, -3.2040025863173756], [-0.772712977006751, -1.0473828760309472, 2.19620763517693, -0.4851741096342719, -3.4223998700627556], [-1.3869664346911654, -1.2498811045106006, 0.8786977384920626, -0.23668885304810044, -3.628147907895903], [-0.7232969038669865, -1.3980737395122267, 1.2641522728302876, -0.7681070819680441, -3.528453420663522], [-1.2121894683360015, -1.2383014425607899, 2.0879309256245615, -0.04188460462611898, -3.5214166648585032], [-1.215641460739338, -1.276722645271936, 0.8919382328822649, -1.0057020258833504, -3.5758856143644255], [-1.0086779185875, -1.3555034122383196, 1.0944871378599275, -0.9192129602462672, -3.658019490104537], [-1.1183694940885809, -1.2465011918933442, 0.7516976061888496, -0.7960482530113651, -3.448449747332522], [-0.9893803503302266, -1.889444299195021, 0.9855128773006219, -0.8273192418878009, -3.4119030155013528], [-0.86125807061745, -1.2585064804066568, 1.5877349776432708, -0.2612763007296148, -3.754879653291394], [-0.9711541537548294, -1.419610720182569, -0.27273641069217336, -0.7873569784534897, -3.4400408817382244], [-1.1400629711906858, -1.4936916851201605, 1.3620475384063704, -0.8874306616731455, -3.4917929033588937], [-0.8430851749452429, -1.1903625459204143, 1.1877179110852731, -0.9274177400097896, -3.5426586062688408], [-1.021268693709568, -1.133822167747123, 0.6392850582316095, -1.4456395280553893, -3.818035239929295], [-1.1010585131386783, -1.6942870413667692, 0.4513232249578204, -0.6148694445872869, -3.4077327830457236], [-1.2064868802187043, -1.2846442348243392, 0.13805738994484612, -1.5137697694201149, -3.724837931112028], [-1.0962827615973885, -1.2316539641615485, 0.12425967138824132, -1.3258020324185393, -3.7281926622885004], [-1.3973447685533131, -1.5816017601606789, 1.5980256853827248, -0.10364581711450258, -3.731826157541606], [-0.9048349805529285, -1.0388204841343969, 0.9742913259815841, -1.313152662102274, -3.644675547121995], [-1.127107881130014, -0.9475451639203978, 0.8880431778646147, -1.3988922755381192, -3.233131547753593], [-0.8751050284815648, -1.406845768107681, 1.0462552486734624, -1.5107647926633598, -3.8699206985130865], [-1.6188532966668536, -1.749803838228726, -0.399189357787768, -0.6328681105802967, -3.2062837471630017], [-1.7407399373146708, -1.6213363265830572, -0.47888000429839755, -0.6512731680901824, -3.4068695129675612], [-1.3987723129642866, -1.754291390145027, -0.3252150922124236, -0.5836833919666858, -3.585320344744881], [-1.0956685729239666, -1.0976864519713443, 2.007737210378866, -1.0878542488203413, -3.5705779925656724], [-1.0089360795499418, -1.1282566145282569, 1.6444872141868896, -0.8633861926568782, -3.431095697587624], [-0.9467256844613815, -1.1513048340763723, 1.6079999737322639, -0.9174341338071665, -3.42110895634976], [-1.1413383657780103, -1.3510834295355454, 1.2281399492014955, -1.3377546635092485, -3.6973065386756514], [-1.339404085823309, -1.4665402228430613, 0.36366456406758085, -0.6789761007705165, -3.454767781662773], [-1.217947768911573, -1.5017805822975356, 0.32001272572639894, -0.8167891969729117, -3.9693494647597367], [-1.421990355558243, -1.3679837657461873, 0.29888652626587714, -0.866117393048164, -3.870996304315361], [-1.181512085043717, -1.03672579643893, -0.04380532019076355, -1.2327293225274842, -3.5425828334518297], [-1.1513802061575578, -1.4716297885395047, -0.19613140652847538, -1.4154510625370806, -3.596710677407995], [-1.1791257140911742, -1.3289626490072763, 0.8628629558064427, -0.3096157162922505, -3.6332077129281273], [-0.6171323811991779, -0.8301380853918914, 0.3200677916021906, -0.5669899482516592, -3.369329854019111], [-0.787233112835343, -1.2232868998517517, 0.35064865622179225, -0.650464945484805, -3.3312003010028746], [-0.6750150330974816, -1.039791772780866, 0.27136216154697895, -0.6294120934131929, -3.214909947118544], [-1.253217522159353, -1.180127160058281, 1.1783461795901196, -0.5397821226282267, -3.652011723984079], [-1.2595388353006767, -1.120197213076688, 1.2539998763636115, -0.3377101518100249, -3.49098996522889], [-0.671597580736933, -0.9528607610962779, -0.15569980646245968, -0.8980815282640379, -3.5328618548763577], [-0.7867099439603968, -1.1098780407936453, -0.6319285901286048, -1.0489442260212365, -3.514432304021476], [-0.8182727875368507, -1.0835534403794476, -0.7212495306769217, -1.0264412106722547, -3.226017009372074], [-1.6688446369498204, -1.7161074638752227, 1.8406096685520863, -0.29075652099212707, -3.7774166378423413], [-1.2444548456813664, -1.428754207617174, 1.655108197496044, -0.10097117777303215, -3.662435135849117], [-0.9082846555034982, -1.2091410681931933, 1.4206611277517625, 0.1354296044576169, -3.5113276668103355], [-1.209153121389637, -1.8122220428219165, 1.095697873561474, -0.22442861388582103, -3.800535439550565], [-1.2993814557278465, -1.442346460941401, 1.2016054126462123, -0.20465697643753228, -3.342679478860427], [-0.6611886104748215, -1.347612919863292, 1.2476553341418042, -0.36351111714565887, -3.5356600044126054], [-1.1196053360547151, -1.2363551976230192, 0.7027837122968957, -0.9994557773060709, -3.4283934328069154], [-0.5822555703789641, -1.1620193668517784, 0.9881371219112882, -0.5963136745961576, -3.516713841767375], [-1.3115217360105393, -1.3770485348889425, 1.1300388445328349, -0.3652414513642542, -3.461186681807254], [-1.2112634452057347, -1.7950530084733483, 0.5388157843032424, -0.3629215197790418, -3.800158244100234], [-1.468386590569133, -1.437371578103313, 0.5725072636904964, -0.2582355806954492, -3.5355810847411204], [-0.8488198465277652, -1.8610390550928588, 1.115952787174192, -0.5625182302084237, -3.3666054172008137], [-0.9280891533676018, -1.3560786236163127, 1.133122766596258, -0.32073665324063605, -3.3336669657630433], [-1.3303358202043762, -1.4522119452468236, 1.8365134901148608, -0.5278859190861478, -3.892284986766186], [-0.7288423252416173, -1.4104160314449947, 1.0977824001468248, -0.35922079245866534, -2.884871168391213], [-0.9644454991742939, -1.3600666521675557, 0.7429957363691075, -0.8227591048105654, -3.44466415540061], [-1.2935788333714457, -1.752555417882914, 0.7350232182464141, -1.0220315551920502, -3.613601148440836], [-1.044454831511957, -1.207834778263029, 0.9558296769670841, -0.285279959025722, -3.425789469664267], [-1.2666875316430186, -1.2110250029640186, 1.0029954934532495, -0.5821931811073601, -3.3915349620235373], [-1.118681157140074, -1.2669443909387486, 0.9924349139377618, -0.8677682388956559, -3.659085168984204], [-1.7844265172985443, -1.8054916121463722, 0.6832294854436249, -1.1224899364340173, -3.7916082165771394], [-0.6847802070317915, -1.0481411956109237, 0.8109065816581212, -0.23584221320783347, -3.0774682168779055], [-2.0785262938523745, -1.650046108862962, 0.8239320013975107, -0.8862797739858737, -3.773283648914589], [-0.824719843344832, -0.4452113634605493, 0.06121052830165154, -1.1363859082871655, -3.1968435275979634], [-0.5809724128957846, -0.7869356929772103, 0.726794566464745, -1.120360552819018, -3.5898817427220213], [-0.6576795298109148, -1.4138670842839185, -0.030597048327653087, -1.7784420883274814, -3.6755786764048324], [-0.7020335466835073, -1.3980965622846646, 0.03578406411142328, -1.7210253257684667, -3.613823119567358], [-1.0825513746001192, -1.2711066858968252, 0.25438865450655324, -0.2213338712619855, -3.7016826151897093], [-1.0130458314295485, -1.2284573735970312, 0.19094113049490113, -0.8055322625054022, -3.5410876656592283], [-0.8646748032181466, -1.3401241406116764, 0.5772736688595461, -0.12725914436098107, -3.594057635076562], [-0.9819723969443065, -1.2718213915080507, 0.6717310710050981, -1.1215836191896107, -3.841938234815275], [-1.1319006849601458, -1.5083998365998168, 1.1726216725513248, -0.4566583799036056, -3.7992251901751186], [-1.1548061019366929, -1.4147308970288222, 0.8208992367676876, -0.21505623590326134, -3.613750909728179], [-0.9935737823229039, -1.2341494915931346, 1.0412428617667142, -0.8855150669005819, -3.4692419342609795], [-1.244749911166182, -1.3028540008930956, 0.10981943917818893, -0.9464226694408763, -3.7571245351207696], [-0.8176632922235452, -1.1590481603096854, 0.5722363124825129, -0.9116438163743346, -3.3468991540832413], [-0.7117784086876612, -1.138929895364094, 0.5372650257925907, -0.847312365229048, -3.2648013248833414], [-0.9523373898639655, -1.358700005762982, 0.3357428115131639, -0.8640937106513912, -3.454623409957072], [-0.9889122867627096, -1.4406636184497046, 1.3407070719536407, -0.6090198793814527, -3.5899635482387064], [-1.0241939945952478, -1.6131602923430957, 0.7834514027767826, -0.9937044343674107, -3.527247214812134], [-1.0855154278060821, -1.0460429659581214, 0.48825921478678863, -1.3016016235847268, -3.709803498686991], [-1.1968008124508192, -2.0532178572564463, 0.32075088761674847, -0.28092239085074494, -3.541379685767398], [-0.7683616482606689, -1.0129528078214551, 1.6505925721822936, -0.6871424242054577, -3.8096945841537484], [-1.213530058614684, -1.104834414370049, 1.6208794862548053, -0.7546511541597103, -3.557393050451617], [-0.6445809409313836, -1.4239900399613972, 0.6953771950952679, 0.03543849039219413, -3.47922363601124], [-1.2642931031049942, -1.3492384552507526, 1.7653681041156584, 0.3767609179687597, -3.29051740332368], [-1.1436357511990407, -1.7330635658467732, 1.9504128790174176, 0.37546391137895574, -3.8881450031738916], [-1.0788052418440488, -1.084427901480867, 2.231539817098439, 1.1879358621323945, -3.3723022734445833], [-1.3907789568095765, -1.746456085267, 1.2295931539725482, -1.11011974152006, -3.711002318746774], [-1.5244658801239863, -1.505162288448402, 0.6257262574970597, -1.0850851826769934, -3.7394684831051253], [-1.413590573282017, -1.4538014776781063, 0.7087944112174278, -0.892169797484151, -3.9310808803092736], [-1.122146108323226, -1.3590007966597781, 1.0869731242873943, -0.48315295913042633, -3.520196404510105], [-1.189841772068508, -1.6782992413925832, 0.7906676280005246, -0.5211141982389619, -3.416516190952814], [-0.9795174124504171, -1.0437402507962488, 1.353479956588825, -1.2448121057649857, -3.5942096110601294], [-1.068362478181769, -1.3837846042126405, 1.7388533071062535, -0.5079847272316526, -3.5954945937739886], [-1.2751652038793013, -1.9752998347711184, 1.800113044451243, -0.3775196444752702, -3.368355912224854], [-1.0289720974891563, -1.0279746266969438, 1.6727014372547404, -0.720941503416826, -3.7335252050047556], [-0.735811260984728, -1.0293061889952793, 1.7559545590318217, -0.742342381465509, -3.4706724437803076], [-1.073161464093478, -1.3493066438462402, 1.85925775555089, -0.3839719408679514, -3.649096095991005], [-0.9814788623820043, -1.5953180711536203, 1.7571138066681555, -0.3019229056509538, -3.253624274059581], [-1.0362296215459825, -1.5254987855070345, 1.1166349755481277, -0.9348399130776337, -3.5106693748380864], [-1.1404254559766294, -1.2969541715286474, 1.764368426581468, -0.7814089291734874, -3.6626816618935516], [-0.980683322490056, -1.8510142230594433, -1.0355948500191219, -1.1103307815198553, -3.619455245145824], [0.067038979526658, -0.4196002147870035, -1.0354413306271928, -1.278024491851155, -3.3043105391072154], [0.049103542159212726, -0.3421185076291048, -0.8975066074147444, -1.2682674497868949, -3.2695637963235256], [0.21663820695853264, -1.0440032112229698, -1.32380367077705, -1.5809826190717589, -3.9240464070274124], [0.2745783021768833, -1.0311004877801067, -1.3197676465966115, -1.559589627763765, -3.9109523167238547], [0.40314645657691206, -1.076150202618724, -1.247018168706336, -1.558613126889879, -3.2282680729811144], [0.3957696782350868, -0.9114797797378995, -1.0346495893465737, -1.1739755469677031, -3.752677571074539], [0.24634968104504576, -1.2408372427749157, -1.019246733125909, -1.0507104892287173, -3.598006427489927], [0.2929082587222437, -0.9762708411903259, -1.1346038037319406, -1.4347642581932358, -3.384552843782974], [0.28090325691777035, -1.3693615131219443, -1.2930723160004607, -1.6133800839882904, -3.789984278294708], [-0.07018815491783563, -0.23175658550016964, -0.7939216661265622, -1.098223090110918, -3.4667378855477944], [0.8602761227258693, -1.9655923745671233, -0.937468228729022, -1.5154051108138937, -3.3993585828966277], [0.9746339385523334, -1.238540370485598, -0.6414459372838623, -0.6359552945175033, -3.798397416352887], [0.577863030056804, -0.49374116514001876, -1.3633733808901825, -1.9771984748486653, -3.317003897453459], [1.1805428161671891, -1.8900668448817506, -0.7607523855346128, -0.6784928496046434, -3.7701508895075815], [1.5283226860632084, -1.588055241775067, -0.6397683383837276, -1.1454082096980174, -3.2413827756604885], [0.7836970875633094, -1.8548669452418847, -0.7746377477631414, -0.9169146560896538, -3.8788669246517986], [1.0358705402791184, -1.165007242849946, -1.0380954667530622, -1.7051604439818977, -3.318312095493434], [1.0729801365736025, 0.26416722944872634, -1.2554977009459625, -1.1467488678260844, -3.0200417550015426], [0.18524892168876672, -1.704410199060506, -0.5579571411426174, -1.1191328801451816, -3.2963933557022025], [0.32063513442893105, -1.5550869382042884, -0.5397593247787263, -1.0566659488828902, -3.19924625997598], [0.3493059307321974, -1.0367808592362435, -1.2659119392983502, -1.4050290754530494, -3.7250372090885535], [0.288205455176201, -0.45789123831908835, -1.3677263981248384, -1.6299971560360966, -3.4174237797988387], [0.9743273622151729, -0.3172238129806565, -1.4151658354474568, -1.8339155973028485, -3.5998325546511], [0.3439733004771697, -0.9903655506501268, -1.065193678676474, -1.3835497678778008, -3.6852389345651293], [0.7859784695774442, -0.7381087262674079, -1.5109889913626107, -1.8458177175114574, -3.514937957226305], [0.49668949793121164, -0.9477016904887392, -0.8018547649829989, -0.9536154912511516, -3.4475932368785633], [0.1887752596221576, -1.1830319069977244, -0.9368359090936604, -1.4187611840474266, -3.4958307566022326], [1.2274971896061182, -0.536728357141472, -1.085886227337914, -1.3251520866440634, -3.4405316733658395], [1.4219349137200792, -0.7629648731207004, -0.8315414768154719, -1.2283377820451125, -3.588622423911549], [0.7872170905100195, -0.451969020147801, -0.9683888807553822, -1.505230622048752, -3.540786120127393], [1.0604044038390565, -0.46175258053173146, -1.5477550187024725, -1.5245302845313664, -3.8860563359986218]], NamedTuple[(n_steps = 1, is_accept = true, acceptance_rate = 2.4780652359418924e-226, log_density = -14.030852146674253, hamiltonian_energy = 17.337853270322285, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 519.4767529077479, tree_depth = 1, numerical_error = false, step_size = 0.4, nom_step_size = 0.4, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -14.030852146674253, hamiltonian_energy = 15.604923540948468, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 1.0249609267370459e10, tree_depth = 0, numerical_error = true, step_size = 0.9340259163636535, nom_step_size = 0.9340259163636535, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9305265650888747, log_density = -3.36627642978225, hamiltonian_energy = 17.55229678812007, hamiltonian_energy_error = -0.4848984999356887, max_hamiltonian_energy_error = -0.8249268922274808, tree_depth = 2, numerical_error = false, step_size = 0.09209433883419865, nom_step_size = 0.09209433883419865, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.987748063849148, log_density = -0.48048633713543865, hamiltonian_energy = 4.196555718933092, hamiltonian_energy_error = -0.17821917608485105, max_hamiltonian_energy_error = -0.22956540036730644, tree_depth = 2, numerical_error = false, step_size = 0.07970666879760221, nom_step_size = 0.07970666879760221, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.8957057858645734, log_density = 0.6176972605080628, hamiltonian_energy = 3.8145150270940498, hamiltonian_energy_error = 0.028149823920482042, max_hamiltonian_energy_error = 0.2931315555843712, tree_depth = 4, numerical_error = false, step_size = 0.10271695043349609, nom_step_size = 0.10271695043349609, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9648247230656495, log_density = -1.6066195762201865, hamiltonian_energy = 2.378690277777876, hamiltonian_energy_error = 0.10775650725884889, max_hamiltonian_energy_error = 0.10775650725884889, tree_depth = 3, numerical_error = false, step_size = 0.11651527961571938, nom_step_size = 0.11651527961571938, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.8014322907972441, log_density = -0.1947345910766991, hamiltonian_energy = 3.9625250914712495, hamiltonian_energy_error = -0.7468268527944026, max_hamiltonian_energy_error = 1.451169390896883, tree_depth = 3, numerical_error = false, step_size = 0.17543905451676034, nom_step_size = 0.17543905451676034, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9921584763814236, log_density = 1.8561294813177902, hamiltonian_energy = 1.52468762004419, hamiltonian_energy_error = -0.24259257265158674, max_hamiltonian_energy_error = -0.2865528688316181, tree_depth = 4, numerical_error = false, step_size = 0.16731647832820987, nom_step_size = 0.16731647832820987, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.001640197562461016, log_density = 1.8561294813177902, hamiltonian_energy = -0.31361327713442866, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 229.29185423946168, tree_depth = 3, numerical_error = false, step_size = 0.29682445245033656, nom_step_size = 0.29682445245033656, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9961369550622574, log_density = 0.721036816210308, hamiltonian_energy = 0.3057456392711795, hamiltonian_energy_error = 0.0057157118885697855, max_hamiltonian_energy_error = 0.007948069447996309, tree_depth = 5, numerical_error = false, step_size = 0.023557089281821635, nom_step_size = 0.023557089281821635, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9990665283762692, log_density = 0.9203032281787955, hamiltonian_energy = 0.865684793183116, hamiltonian_energy_error = -0.014428775503526614, max_hamiltonian_energy_error = -0.01572612170140464, tree_depth = 3, numerical_error = false, step_size = 0.04349038340346833, nom_step_size = 0.04349038340346833, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9798240385916928, log_density = 1.5889065141377579, hamiltonian_energy = 0.04365809652045827, hamiltonian_energy_error = -0.007729392566870774, max_hamiltonian_energy_error = 0.04856868251363844, tree_depth = 4, numerical_error = false, step_size = 0.08197863690844193, nom_step_size = 0.08197863690844193, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.8899836813080533, log_density = 0.22892311695716927, hamiltonian_energy = 0.9678826139420336, hamiltonian_energy_error = 0.17787982200842611, max_hamiltonian_energy_error = 0.24738200889305673, tree_depth = 3, numerical_error = false, step_size = 0.14612440846697505, nom_step_size = 0.14612440846697505, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9724218046132095, log_density = 1.6646019912858012, hamiltonian_energy = 0.4813930076344972, hamiltonian_energy_error = -0.12936832294455303, max_hamiltonian_energy_error = -0.25210784226649197, tree_depth = 2, numerical_error = false, step_size = 0.19660786168622638, nom_step_size = 0.19660786168622638, is_adapt = true), (n_steps = 6, is_accept = true, acceptance_rate = 0.00011384348071996645, log_density = 1.6646019912858012, hamiltonian_energy = 1.96678408403291, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 1008.7166205674828, tree_depth = 2, numerical_error = true, step_size = 0.34219221709265446, nom_step_size = 0.34219221709265446, is_adapt = true), (n_steps = 63, is_accept = true, acceptance_rate = 0.997412791093899, log_density = 0.4238259992545057, hamiltonian_energy = 0.5898739169451781, hamiltonian_energy_error = 0.005464941153833225, max_hamiltonian_energy_error = 0.008442802674852645, tree_depth = 5, numerical_error = false, step_size = 0.02915188066248924, nom_step_size = 0.02915188066248924, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9959764549449589, log_density = 0.8649413718880679, hamiltonian_energy = 1.2515855260161408, hamiltonian_energy_error = -4.301391778538388e-5, max_hamiltonian_energy_error = -0.02882044233575165, tree_depth = 4, numerical_error = false, step_size = 0.055369923444178876, nom_step_size = 0.055369923444178876, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.995558904569153, log_density = 1.9756072253821735, hamiltonian_energy = -0.5168150884863505, hamiltonian_energy_error = -0.06185616906346564, max_hamiltonian_energy_error = -0.07280286005480835, tree_depth = 3, numerical_error = false, step_size = 0.10398563017107716, nom_step_size = 0.10398563017107716, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.8072354536636892, log_density = -0.1273068757006186, hamiltonian_energy = 0.43076730367118926, hamiltonian_energy_error = 0.31331591832982647, max_hamiltonian_energy_error = 0.3295458927491587, tree_depth = 3, numerical_error = false, step_size = 0.19348529148533256, nom_step_size = 0.19348529148533256, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9743437126380871, log_density = 0.2784546236110934, hamiltonian_energy = 2.884314443269275, hamiltonian_energy_error = -0.09114349595937998, max_hamiltonian_energy_error = -0.4023127122322161, tree_depth = 3, numerical_error = false, step_size = 0.20260530529756335, nom_step_size = 0.20260530529756335, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.989418755543118, log_density = -0.05092987140406002, hamiltonian_energy = 1.0733787753624782, hamiltonian_energy_error = 0.02967278015147512, max_hamiltonian_energy_error = -0.19267870936270448, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 2.0786446055728547, hamiltonian_energy = 0.15118028105140624, hamiltonian_energy_error = -0.3032260196214507, max_hamiltonian_energy_error = -0.3032260196214507, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7595356594437076, log_density = 0.8443102090841688, hamiltonian_energy = 1.4737737488598786, hamiltonian_energy_error = 0.1794328974779953, max_hamiltonian_energy_error = 0.3366356589537389, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9003265998054601, log_density = 0.8743292963499361, hamiltonian_energy = 1.4157159375721466, hamiltonian_energy_error = -0.03331383756800976, max_hamiltonian_energy_error = 0.44576293505763176, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9976568284696884, log_density = 0.6471854433240853, hamiltonian_energy = 0.9614501757961329, hamiltonian_energy_error = -0.1480725341553366, max_hamiltonian_energy_error = -0.19660025125202352, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9330613121902142, log_density = 1.3847861585260794, hamiltonian_energy = 0.5537925537403914, hamiltonian_energy_error = -0.06196368723826784, max_hamiltonian_energy_error = 0.13135635067000173, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8540006993512838, log_density = 1.1455808217259733, hamiltonian_energy = 0.18631357226334866, hamiltonian_energy_error = 0.1500743761187997, max_hamiltonian_energy_error = 0.2591686350287231, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8990493010891564, log_density = -0.25219549022704335, hamiltonian_energy = 2.107546964868845, hamiltonian_energy_error = 0.09158490349750315, max_hamiltonian_energy_error = 0.2997898029919366, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9649336144486049, log_density = -0.33695507687713544, hamiltonian_energy = 2.211074481892952, hamiltonian_energy_error = 0.0366426267005755, max_hamiltonian_energy_error = 0.13555081057240548, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9982896088349962, log_density = 0.4393662239547531, hamiltonian_energy = 1.0213340631985857, hamiltonian_energy_error = -0.06804164409584312, max_hamiltonian_energy_error = -0.1705131774050468, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9455198162058008, log_density = 0.4130857946016828, hamiltonian_energy = 2.3762335764095166, hamiltonian_energy_error = -0.07267706944541619, max_hamiltonian_energy_error = 0.18008733912665598, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9753186954202046, log_density = 0.894663271945296, hamiltonian_energy = 1.701142057196599, hamiltonian_energy_error = -0.006009179023829692, max_hamiltonian_energy_error = 0.12045435412209415, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8546978920906724, log_density = 1.4506479785422428, hamiltonian_energy = 1.1192055225651698, hamiltonian_energy_error = -0.08273246325972794, max_hamiltonian_energy_error = 0.44145708901181613, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8971677248877095, log_density = 1.3584802433223633, hamiltonian_energy = 2.060477128844857, hamiltonian_energy_error = 0.10445430825319679, max_hamiltonian_energy_error = 0.26419003282064324, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9871452039597013, log_density = 1.7199104554078772, hamiltonian_energy = -0.760092685035959, hamiltonian_energy_error = -0.06125736538423332, max_hamiltonian_energy_error = -0.11871381539383907, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9343834891011226, log_density = -1.940749595734622, hamiltonian_energy = 3.9947619879060126, hamiltonian_energy_error = 0.1103072712262172, max_hamiltonian_energy_error = 0.19151840507771922, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9075694543473959, log_density = -0.5990068595449678, hamiltonian_energy = 4.255898166926567, hamiltonian_energy_error = -0.027173732510718196, max_hamiltonian_energy_error = -0.37717378641065746, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8448285060376968, log_density = 1.8632891064514254, hamiltonian_energy = 3.6146792352289356, hamiltonian_energy_error = -0.1770817415719228, max_hamiltonian_energy_error = 0.27897616478795717, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9474978197688265, log_density = 1.2783975306032573, hamiltonian_energy = -0.509623933082507, hamiltonian_energy_error = 0.05886362174925219, max_hamiltonian_energy_error = 0.08683896531205271, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7600961999185509, log_density = -0.6415458478350846, hamiltonian_energy = 1.247290142955763, hamiltonian_energy_error = 0.38344891701721084, max_hamiltonian_energy_error = 0.4804073343342963, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6454742525596802, log_density = -1.1093957339653588, hamiltonian_energy = 6.948707079917408, hamiltonian_energy_error = 0.1251117049414212, max_hamiltonian_energy_error = 1.3288330617908173, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9964145135860143, log_density = 0.015121572359399593, hamiltonian_energy = 3.771348031994716, hamiltonian_energy_error = -0.03050745270815014, max_hamiltonian_energy_error = -0.24469629574178864, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9882390506181227, log_density = 0.5036624162994503, hamiltonian_energy = 1.0269684886677908, hamiltonian_energy_error = -0.134874830256976, max_hamiltonian_energy_error = -0.3574858797134852, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9917889361044772, log_density = -1.6748164671738834, hamiltonian_energy = 2.602507567588982, hamiltonian_energy_error = 0.044465420851276694, max_hamiltonian_energy_error = -0.1817219600276383, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9887296807990575, log_density = 0.8105524676273017, hamiltonian_energy = 3.34171815422516, hamiltonian_energy_error = -0.012476831450589643, max_hamiltonian_energy_error = -0.2233097655284575, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9892877814094247, log_density = 0.5662380124064921, hamiltonian_energy = 0.06845505644161543, hamiltonian_energy_error = 0.004733373974496469, max_hamiltonian_energy_error = -0.2191754148058258, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.943977799161815, log_density = 1.9812727417956246, hamiltonian_energy = 2.3347457641322222, hamiltonian_energy_error = -0.2476628709858515, max_hamiltonian_energy_error = -0.2991393326906291, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9204176189920893, log_density = 1.466126885402117, hamiltonian_energy = -0.7539170756040947, hamiltonian_energy_error = 0.08261969895867627, max_hamiltonian_energy_error = 0.15922316848569196, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9418279987737522, log_density = 0.22344309009273466, hamiltonian_energy = 1.5915361041799791, hamiltonian_energy_error = 0.055826669788711536, max_hamiltonian_energy_error = 0.14454039237535277, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9869308531629291, log_density = 1.0460349356278797, hamiltonian_energy = 0.005329686189812666, hamiltonian_energy_error = -0.06809749090020334, max_hamiltonian_energy_error = -0.10015851764454065, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8251553817698206, log_density = 0.8037124532888757, hamiltonian_energy = 1.9688575446828795, hamiltonian_energy_error = 0.03899515898621653, max_hamiltonian_energy_error = 0.37825377474513333, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.884431774644076, log_density = -0.18388319841117706, hamiltonian_energy = 1.3996903332999402, hamiltonian_energy_error = 0.10206298639024869, max_hamiltonian_energy_error = 0.21924413722565617, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8695367657014196, log_density = -0.15456952829548598, hamiltonian_energy = 3.7148344234353305, hamiltonian_energy_error = -0.04649165521652199, max_hamiltonian_energy_error = 0.463252034491175, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.6777387745445372, log_density = -1.7650276971752703, hamiltonian_energy = 5.962491551198397, hamiltonian_energy_error = 0.341675993777268, max_hamiltonian_energy_error = 0.7877217868441679, tree_depth = 5, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9913149782315961, log_density = -2.2348701183683346, hamiltonian_energy = 3.810366546507188, hamiltonian_energy_error = 0.045837347946389606, max_hamiltonian_energy_error = -0.20230646172656153, tree_depth = 5, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9767147154332619, log_density = -3.068637858236512, hamiltonian_energy = 3.532535004251415, hamiltonian_energy_error = 0.07241570882420234, max_hamiltonian_energy_error = -0.24969385876085148, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9962896685356434, log_density = -0.6571715932391875, hamiltonian_energy = 7.739616381020325, hamiltonian_energy_error = -0.34984981907062984, max_hamiltonian_energy_error = -0.5611534913294633, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9385265512088287, log_density = 0.6846232547182485, hamiltonian_energy = 2.3936960589062752, hamiltonian_energy_error = -0.02065405911595919, max_hamiltonian_energy_error = 0.24557418922573682, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9786565332183823, log_density = 0.43235715359927873, hamiltonian_energy = 0.3257522233945871, hamiltonian_energy_error = 0.03003583366300344, max_hamiltonian_energy_error = 0.12508253924466017, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.962171274730374, log_density = 0.6246147474430774, hamiltonian_energy = 1.0088290069027457, hamiltonian_energy_error = -0.02438996581709696, max_hamiltonian_energy_error = 0.1830188422726826, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8820459292686957, log_density = -0.015966592974056226, hamiltonian_energy = 1.6973786607184147, hamiltonian_energy_error = 0.17423679638000156, max_hamiltonian_energy_error = 0.2965375644565449, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9997619677979109, log_density = 0.6363679003236324, hamiltonian_energy = 0.7531818988470751, hamiltonian_energy_error = -0.2671865152295698, max_hamiltonian_energy_error = -0.4425193376007228, tree_depth = 5, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9428468084953378, log_density = 0.8073238711592197, hamiltonian_energy = 0.4106951500299665, hamiltonian_energy_error = 0.08342030327372885, max_hamiltonian_energy_error = 0.2241281699466915, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.995937020173625, log_density = 1.7844040576621971, hamiltonian_energy = 0.20252502555426055, hamiltonian_energy_error = -0.1442165494486054, max_hamiltonian_energy_error = -0.1442165494486054, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.771464285075117, log_density = -2.4135373100614537, hamiltonian_energy = 4.738988079600836, hamiltonian_energy_error = 0.42704143294028807, max_hamiltonian_energy_error = 0.7489576843066743, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.7667046474902719, hamiltonian_energy = 3.576159853641604, hamiltonian_energy_error = -0.4745191919246299, max_hamiltonian_energy_error = -0.4745191919246299, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9241694495298765, log_density = 0.0026734103975307733, hamiltonian_energy = 0.8866165463030765, hamiltonian_energy_error = 0.08114090161812137, max_hamiltonian_energy_error = 0.16395950482423638, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9880741023069873, log_density = 0.4968512058652266, hamiltonian_energy = 2.414795470756757, hamiltonian_energy_error = -0.08585796322416073, max_hamiltonian_energy_error = -0.12104664134613863, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8507254678015056, log_density = -1.8590851703795472, hamiltonian_energy = 2.417206899051523, hamiltonian_energy_error = 0.3449956925903943, max_hamiltonian_energy_error = 0.3449956925903943, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9982326410951897, log_density = -0.18665627312727295, hamiltonian_energy = 2.626344513270968, hamiltonian_energy_error = -0.1962073608371644, max_hamiltonian_energy_error = -0.3905419903576508, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9904750181643084, log_density = 0.18798811165583373, hamiltonian_energy = 1.4035576506295617, hamiltonian_energy_error = 0.03166879385645105, max_hamiltonian_energy_error = -0.19941395315299792, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9568708496767229, log_density = 0.4514400243029897, hamiltonian_energy = 1.6639544676953681, hamiltonian_energy_error = 0.04566158456854841, max_hamiltonian_energy_error = 0.17804475321636049, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9527560361159301, log_density = 1.4540942588078192, hamiltonian_energy = 0.6893770196347706, hamiltonian_energy_error = -0.19370190033363133, max_hamiltonian_energy_error = 0.24054040527712006, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9316695812501784, log_density = 1.8586828244497227, hamiltonian_energy = -0.6457618961360958, hamiltonian_energy_error = 0.026723794014202884, max_hamiltonian_energy_error = 0.16850774192155726, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9450194495747711, log_density = 0.9030593944945693, hamiltonian_energy = -0.37287665208790755, hamiltonian_energy_error = 0.07904842786642596, max_hamiltonian_energy_error = 0.13353853954660422, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8975018403429139, log_density = 1.3972602243492283, hamiltonian_energy = 2.2952629455604345, hamiltonian_energy_error = -0.011652941813799611, max_hamiltonian_energy_error = 0.2782136742722474, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9999501969692004, log_density = 1.892064957219759, hamiltonian_energy = -1.3871889272100715, hamiltonian_energy_error = -0.0748025019791676, max_hamiltonian_energy_error = -0.09266410563204497, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9279058712941577, log_density = 0.16269337420110475, hamiltonian_energy = 0.9212442465612578, hamiltonian_energy_error = 0.15252278862202662, max_hamiltonian_energy_error = 0.15252278862202662, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9471431902169943, log_density = -0.7002626314804932, hamiltonian_energy = 2.5103477993127012, hamiltonian_energy_error = 0.09861518682229153, max_hamiltonian_energy_error = 0.22852912751706267, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9622097677372514, log_density = -1.2364902232648216, hamiltonian_energy = 2.014074089795945, hamiltonian_energy_error = -0.028430523955524478, max_hamiltonian_energy_error = 0.11890693538369002, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 1.4865794551341, hamiltonian_energy = 2.322746826674238, hamiltonian_energy_error = -0.07058875324617109, max_hamiltonian_energy_error = -0.20741224583337958, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9531925340410612, log_density = 0.921529026303336, hamiltonian_energy = 0.09616885552606513, hamiltonian_energy_error = 0.014329968452884811, max_hamiltonian_energy_error = 0.1292090195457245, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9212171491209844, log_density = 1.8703335856558283, hamiltonian_energy = 0.8034517005950317, hamiltonian_energy_error = -0.04703086096229003, max_hamiltonian_energy_error = 0.18084422380062204, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9293347591771564, log_density = 0.5520851674692864, hamiltonian_energy = -0.01959939357365159, hamiltonian_energy_error = 0.09571493811256238, max_hamiltonian_energy_error = 0.12343368708789804, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.40983140903531506, log_density = -5.838993420190398, hamiltonian_energy = 8.752156484966367, hamiltonian_energy_error = 0.6753675330066393, max_hamiltonian_energy_error = 2.4002072011005104, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -3.8030544919682985, hamiltonian_energy = 5.971342120688828, hamiltonian_energy_error = -0.6004241033250874, max_hamiltonian_energy_error = -0.6315261290416672, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8998982545120331, log_density = -4.118978017251582, hamiltonian_energy = 5.824064909909847, hamiltonian_energy_error = -0.08339253322129725, max_hamiltonian_energy_error = -0.6509710674430549, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7805626782717096, log_density = -4.783750169705238, hamiltonian_energy = 6.695713569084296, hamiltonian_energy_error = -0.24511826839542472, max_hamiltonian_energy_error = -1.0696878003835248, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -3.4597488595581734, hamiltonian_energy = 6.506847148012847, hamiltonian_energy_error = -0.44724481905331537, max_hamiltonian_energy_error = -0.9248908851304849, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = -2.638996577315261, hamiltonian_energy = 5.199430662132784, hamiltonian_energy_error = -0.22621645657537215, max_hamiltonian_energy_error = -0.31246001038308524, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9826648463523012, log_density = -2.4743680998624775, hamiltonian_energy = 4.8457540872097145, hamiltonian_energy_error = 0.07132454544080602, max_hamiltonian_energy_error = -0.12885880429339114, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.4424985466601865, log_density = -3.9725928676976796, hamiltonian_energy = 6.956982623251994, hamiltonian_energy_error = 0.27954630079797926, max_hamiltonian_energy_error = 2.5817090765683632, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6480763153183587, log_density = -2.4622435431708922, hamiltonian_energy = 6.031095723299372, hamiltonian_energy_error = -0.16915984013910634, max_hamiltonian_energy_error = 1.2573043979855179, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9881988656977769, log_density = -1.4303365095618528, hamiltonian_energy = 6.806449239862896, hamiltonian_energy_error = -0.06605672773605153, max_hamiltonian_energy_error = -0.30222272122085503, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9434761223793073, log_density = -7.210845747304987, hamiltonian_energy = 9.37052244361873, hamiltonian_energy_error = 0.19506413172097758, max_hamiltonian_energy_error = 0.19506413172097758, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -0.9570618946702236, hamiltonian_energy = 8.04487569481893, hamiltonian_energy_error = -0.05578591653147136, max_hamiltonian_energy_error = -0.3412219192761068, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9699807358049211, log_density = -0.0030827331373188827, hamiltonian_energy = 2.313753766084556, hamiltonian_energy_error = 0.0055494604281323134, max_hamiltonian_energy_error = 0.1363203463531848, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8718227286439372, log_density = -1.9365154709792591, hamiltonian_energy = 3.405095455235041, hamiltonian_energy_error = 0.05396563455229231, max_hamiltonian_energy_error = 0.34475392831378393, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9969131469182787, log_density = 0.5598588389677701, hamiltonian_energy = 2.83580628932655, hamiltonian_energy_error = -0.16704401758136722, max_hamiltonian_energy_error = -0.16704401758136722, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9047860066329089, log_density = 1.1372105049651626, hamiltonian_energy = 3.0069530038324235, hamiltonian_energy_error = 0.08792474153567387, max_hamiltonian_energy_error = 0.17082297830612747, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9583786963021022, log_density = 1.741040973061569, hamiltonian_energy = 0.3136947450472407, hamiltonian_energy_error = -0.07448657305646567, max_hamiltonian_energy_error = 0.1302726129199343, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8066349112405222, log_density = -1.876347034863855, hamiltonian_energy = 2.4787392590276993, hamiltonian_energy_error = 0.34319219477399043, max_hamiltonian_energy_error = 0.34319219477399043, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9702902372077201, log_density = -1.8529933906794422, hamiltonian_energy = 2.7783465172311437, hamiltonian_energy_error = 0.09324786364814708, max_hamiltonian_energy_error = -0.3235070743893038, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9651877722062908, log_density = -1.533740398212517, hamiltonian_energy = 5.844645754314655, hamiltonian_energy_error = -0.520158861794779, max_hamiltonian_energy_error = -0.520158861794779, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.984381445732965, log_density = -0.5516992261278375, hamiltonian_energy = 2.9782947217489735, hamiltonian_energy_error = -0.011880426364666796, max_hamiltonian_energy_error = -0.11205662068224242, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9875979681308821, log_density = 0.7842537982309867, hamiltonian_energy = 1.5100540442904635, hamiltonian_energy_error = -0.07448573832879468, max_hamiltonian_energy_error = -0.09023007738394284, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9804481817534818, log_density = 0.0074069867238311105, hamiltonian_energy = 0.4473366280179628, hamiltonian_energy_error = 0.03994273927664682, max_hamiltonian_energy_error = 0.0768092054009924, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9806578982491365, log_density = -0.11913454021252079, hamiltonian_energy = 2.6542024299741023, hamiltonian_energy_error = 0.035523791708177654, max_hamiltonian_energy_error = 0.06671234917343227, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9918069283779903, log_density = 1.4727788255233722, hamiltonian_energy = 0.7565877505941163, hamiltonian_energy_error = -0.14194698088800262, max_hamiltonian_energy_error = -0.17021475577866452, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 1.4995179694242076, hamiltonian_energy = -1.1680068040148952, hamiltonian_energy_error = -0.020691315920866593, max_hamiltonian_energy_error = -0.09210868206207268, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.935380295744753, log_density = 0.49016294566843754, hamiltonian_energy = 0.8927094412004117, hamiltonian_energy_error = 0.1908402843947381, max_hamiltonian_energy_error = 0.1908402843947381, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8742562470216914, log_density = 0.9622140279704112, hamiltonian_energy = 2.5782022958969986, hamiltonian_energy_error = -0.16803700706194746, max_hamiltonian_energy_error = 0.27891525429403297, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7644207187990093, log_density = -1.087318184475535, hamiltonian_energy = 4.0471058383116, hamiltonian_energy_error = 0.13712189346370618, max_hamiltonian_energy_error = 0.6426107899876117, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.895269986420986, log_density = -3.581221950498369, hamiltonian_energy = 5.788745512345826, hamiltonian_energy_error = 0.14571231625317438, max_hamiltonian_energy_error = 0.2951110668384347, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9530165678165138, log_density = -1.7569180195061573, hamiltonian_energy = 6.520663260957481, hamiltonian_energy_error = -0.20933047943668548, max_hamiltonian_energy_error = -0.2536240533221763, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9872454962472997, log_density = 0.9982197513667046, hamiltonian_energy = 2.5117858595097706, hamiltonian_energy_error = -0.24364416739613937, max_hamiltonian_energy_error = -0.2556931637289188, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.976724856028131, log_density = 0.46099771171350845, hamiltonian_energy = 0.5078264156137207, hamiltonian_energy_error = -0.007451115166480227, max_hamiltonian_energy_error = 0.09613186244892591, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7744647084551785, log_density = -0.45752732570719346, hamiltonian_energy = 2.235400228498565, hamiltonian_energy_error = 0.16875997399248588, max_hamiltonian_energy_error = 0.33446435048955214, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9758568876575429, log_density = -0.886288012236716, hamiltonian_energy = 2.406882835359407, hamiltonian_energy_error = -0.004889510365495564, max_hamiltonian_energy_error = -0.11972936597265216, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8640509968555375, log_density = -5.681731756118087, hamiltonian_energy = 6.15780297520118, hamiltonian_energy_error = 0.38762323199899473, max_hamiltonian_energy_error = 0.6165087450701048, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -3.542561747359904, hamiltonian_energy = 5.50599506370657, hamiltonian_energy_error = -0.3611331163278457, max_hamiltonian_energy_error = -0.4035588887559989, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9271172811913932, log_density = -2.8426318663710397, hamiltonian_energy = 6.56917369456019, hamiltonian_energy_error = 0.24905931755801802, max_hamiltonian_energy_error = 0.27526929089602525, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9702960205137724, log_density = 1.4348487559778498, hamiltonian_energy = 4.123062379147868, hamiltonian_energy_error = -0.418924100010603, max_hamiltonian_energy_error = -0.418924100010603, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9288877203876453, log_density = 0.6099717604180128, hamiltonian_energy = 1.869415286375384, hamiltonian_energy_error = 0.09444619582696712, max_hamiltonian_energy_error = 0.1311470361000313, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.975799897744366, log_density = 0.6548538387502223, hamiltonian_energy = 0.8394593703257087, hamiltonian_energy_error = 0.021501031199819165, max_hamiltonian_energy_error = 0.10216486659029655, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9122649374149077, log_density = 1.1602676102063896, hamiltonian_energy = 1.626657206510803, hamiltonian_energy_error = -0.31178583092612966, max_hamiltonian_energy_error = -0.31178583092612966, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9024339465138215, log_density = -0.6767321321629289, hamiltonian_energy = 1.8942850897656693, hamiltonian_energy_error = 0.06527215559097166, max_hamiltonian_energy_error = 0.2120110459627096, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.935483108996255, log_density = 0.4870643555412819, hamiltonian_energy = 1.7985103682743189, hamiltonian_energy_error = -0.0021045934253911547, max_hamiltonian_energy_error = 0.10193455557183806, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9823066879741827, log_density = 0.08315302448965944, hamiltonian_energy = 1.994614207892869, hamiltonian_energy_error = 0.01920015674891573, max_hamiltonian_energy_error = 0.08899683416938498, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8857236579439454, log_density = -1.037758589587269, hamiltonian_energy = 2.9771313374498654, hamiltonian_energy_error = 0.21007423044085272, max_hamiltonian_energy_error = 0.3254660566433314, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9810003138428106, log_density = -0.4744345732313846, hamiltonian_energy = 2.6319258858297943, hamiltonian_energy_error = 0.03684982253366931, max_hamiltonian_energy_error = -0.3354009452593263, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = -0.8068050281609747, hamiltonian_energy = 1.4485403399855183, hamiltonian_energy_error = -0.0790653538724615, max_hamiltonian_energy_error = -0.4710915865725873, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9367023327583931, log_density = -2.468161275935687, hamiltonian_energy = 5.9480209172248095, hamiltonian_energy_error = -0.20731192074874638, max_hamiltonian_energy_error = -0.43804364747700664, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.995396384215258, log_density = -0.8642264230552748, hamiltonian_energy = 3.3971588813545526, hamiltonian_energy_error = -0.02548464736500966, max_hamiltonian_energy_error = -0.22527047958189161, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9413489142319195, log_density = -2.7402843218329522, hamiltonian_energy = 4.183119613457918, hamiltonian_energy_error = 0.1310644890812629, max_hamiltonian_energy_error = 0.31667608884502485, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9954313733677197, log_density = -0.5245751471471412, hamiltonian_energy = 3.2639901811604437, hamiltonian_energy_error = -0.0880658333519837, max_hamiltonian_energy_error = -0.5139929561548278, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8686948045238537, log_density = 0.17273587508438126, hamiltonian_energy = 2.29257496324897, hamiltonian_energy_error = 0.11976942721499517, max_hamiltonian_energy_error = 0.3299503156726642, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9948540309870547, log_density = -0.10768744053656576, hamiltonian_energy = 2.1366173361921974, hamiltonian_energy_error = -0.14957069633036646, max_hamiltonian_energy_error = -0.27913197444291526, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9895574108392727, log_density = -0.2974001395448056, hamiltonian_energy = 2.2622933908100595, hamiltonian_energy_error = 0.0005084541114661612, max_hamiltonian_energy_error = -0.1452915127286274, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.829975055162844, log_density = 0.7614038880389771, hamiltonian_energy = 3.3068654105261324, hamiltonian_energy_error = 0.12325087884312902, max_hamiltonian_energy_error = 0.6476165321947049, tree_depth = 5, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8814018822970484, log_density = 0.888182079517783, hamiltonian_energy = 0.9310800985471899, hamiltonian_energy_error = 0.017311533319536165, max_hamiltonian_energy_error = 0.3439878262074423, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9877234049034863, log_density = 1.0668827079637353, hamiltonian_energy = -0.09744072306934348, hamiltonian_energy_error = 0.02276359387650162, max_hamiltonian_energy_error = 0.06537349708204887, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9599923630162579, log_density = 0.468390189872542, hamiltonian_energy = 0.4098434273743332, hamiltonian_energy_error = 0.045209208650262234, max_hamiltonian_energy_error = 0.10562122022436149, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8268166535212609, log_density = -0.18170239748056183, hamiltonian_energy = 3.2336559448633846, hamiltonian_energy_error = 0.06108681278715533, max_hamiltonian_energy_error = 0.31728561375408626, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9319951505242707, log_density = -0.8371600630027061, hamiltonian_energy = 2.667161992665653, hamiltonian_energy_error = 0.10822536602516619, max_hamiltonian_energy_error = 0.18060933764112352, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.741854773669594, log_density = 0.3793902171271313, hamiltonian_energy = 4.110076401830534, hamiltonian_energy_error = 0.12762049797658515, max_hamiltonian_energy_error = 0.5682834363466216, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 0.6537074173101871, hamiltonian_energy = -0.10395905274650441, hamiltonian_energy_error = -0.07941596452083516, max_hamiltonian_energy_error = -0.22883437799161482, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9902486256122582, log_density = 0.1627713639781998, hamiltonian_energy = 0.2316716642963479, hamiltonian_energy_error = 0.07070106610048543, max_hamiltonian_energy_error = -0.16008447939425197, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9464237464614685, log_density = -1.5464687479747425, hamiltonian_energy = 3.6542654005013286, hamiltonian_energy_error = 0.041088665585491846, max_hamiltonian_energy_error = -0.24058801533609664, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9214942995079257, log_density = -1.4044137389224014, hamiltonian_energy = 5.379315198635927, hamiltonian_energy_error = 0.10126925951331689, max_hamiltonian_energy_error = 0.2208696991183592, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9125044375896134, log_density = -4.614906708057042, hamiltonian_energy = 5.42337900896937, hamiltonian_energy_error = 0.28405761760417914, max_hamiltonian_energy_error = 0.3879127153309545, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9876091156607271, log_density = 0.9096608413052287, hamiltonian_energy = 5.56766835979114, hamiltonian_energy_error = -0.5959283256175789, max_hamiltonian_energy_error = -0.5959283256175789, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9133508568766464, log_density = -1.8364460506008422, hamiltonian_energy = 3.195421850989298, hamiltonian_energy_error = 0.05572411575620695, max_hamiltonian_energy_error = 0.2237065592717311, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9312963071136426, log_density = -0.8489644810420369, hamiltonian_energy = 6.33620170687737, hamiltonian_energy_error = 0.071739512478187, max_hamiltonian_energy_error = 0.3186135080203041, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9786017633422955, log_density = -0.3008534359856547, hamiltonian_energy = 2.8475908329936113, hamiltonian_energy_error = 0.05146245180575981, max_hamiltonian_energy_error = -0.21053549859699805, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -0.17455255031347683, hamiltonian_energy = 1.642809413735016, hamiltonian_energy_error = -0.23390566317351213, max_hamiltonian_energy_error = -0.32175234225079685, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8479918605509594, log_density = -2.468802430161662, hamiltonian_energy = 3.9391842894798117, hamiltonian_energy_error = -0.1829814357044075, max_hamiltonian_energy_error = 0.3241405495441487, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.0994346739446712, log_density = -2.468802430161662, hamiltonian_energy = 5.989611887430485, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 2.779695868544664, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9856158808593407, log_density = -2.940829487383069, hamiltonian_energy = 7.206834651078906, hamiltonian_energy_error = -0.12416602698217716, max_hamiltonian_energy_error = -0.3010512695765062, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9933995571859239, log_density = -0.9613396617834553, hamiltonian_energy = 5.134528242045576, hamiltonian_energy_error = -0.2724312860709386, max_hamiltonian_energy_error = -0.3231312034685301, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9144977418590519, log_density = -0.35277890762935726, hamiltonian_energy = 3.091654893426946, hamiltonian_energy_error = -0.011421032033575251, max_hamiltonian_energy_error = 0.31931407445888915, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9268596105910444, log_density = 0.24541184457463494, hamiltonian_energy = 1.692057186512766, hamiltonian_energy_error = 0.1614601586353941, max_hamiltonian_energy_error = 0.21064563161394312, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9958844346833665, log_density = 0.5274499569513704, hamiltonian_energy = 1.3920028104112843, hamiltonian_energy_error = -0.08955020987075657, max_hamiltonian_energy_error = -0.3332963726370899, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.970676524254056, log_density = 1.4982427098144022, hamiltonian_energy = 1.2910150376329899, hamiltonian_energy_error = -0.20648567677289353, max_hamiltonian_energy_error = -0.20648567677289353, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 35, is_accept = true, acceptance_rate = 0.7894555352944421, log_density = 1.1683200904387228, hamiltonian_energy = 1.9390587968612247, hamiltonian_energy_error = 0.017835647470007654, max_hamiltonian_energy_error = 0.6565811006642521, tree_depth = 5, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8865580736927575, log_density = 0.1036972067304589, hamiltonian_energy = 2.9813614744185895, hamiltonian_energy_error = 0.03094693542905702, max_hamiltonian_energy_error = 0.2815686533776085, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9930899058576821, log_density = -0.2069588461456, hamiltonian_energy = 2.883464266354478, hamiltonian_energy_error = -0.06993537819355344, max_hamiltonian_energy_error = -0.15522337305783385, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9744366002475479, log_density = 1.294142925748325, hamiltonian_energy = 1.3851054531440812, hamiltonian_energy_error = -0.0979855240319476, max_hamiltonian_energy_error = -0.10086445177786119, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9973838501445973, log_density = 1.5506767711731193, hamiltonian_energy = 0.3886226564043056, hamiltonian_energy_error = 0.0014946453185555875, max_hamiltonian_energy_error = -0.058855035722705784, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9533611735322214, log_density = 1.158049787385373, hamiltonian_energy = 0.12288192814529797, hamiltonian_energy_error = 0.024322586247938593, max_hamiltonian_energy_error = 0.08393989221289322, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.988881600100893, log_density = 1.1885024282613852, hamiltonian_energy = 1.1450435608517218, hamiltonian_energy_error = -0.037264972441108046, max_hamiltonian_energy_error = -0.08550234526746081, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9695855655624226, log_density = -0.020284737487070714, hamiltonian_energy = 1.6096297710170813, hamiltonian_energy_error = 0.04992942295465497, max_hamiltonian_energy_error = 0.06411196483886306, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8228437944274827, log_density = -2.8447940400077503, hamiltonian_energy = 3.7535633434095694, hamiltonian_energy_error = 0.2762943172764696, max_hamiltonian_energy_error = 0.34257235257371965, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9400233347351721, log_density = -3.741625828896174, hamiltonian_energy = 10.127873139053317, hamiltonian_energy_error = 0.05976210124542547, max_hamiltonian_energy_error = -0.4931698544353509, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8840175150745747, log_density = -1.661827067488975, hamiltonian_energy = 8.819930334501649, hamiltonian_energy_error = -0.09621348643021044, max_hamiltonian_energy_error = 0.6349009523714759, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9203573371241212, log_density = -1.179038431519217, hamiltonian_energy = 4.313651724790143, hamiltonian_energy_error = 0.010898858166445535, max_hamiltonian_energy_error = 0.3268701019395248, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9718424485407406, log_density = -0.3630886620641771, hamiltonian_energy = 4.177809782543448, hamiltonian_energy_error = -0.12808802503634364, max_hamiltonian_energy_error = -0.19070482799939548, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9985611009965302, log_density = -0.2222354640218036, hamiltonian_energy = 1.2156288187297128, hamiltonian_energy_error = -0.016903813418507774, max_hamiltonian_energy_error = -0.1732706361459353, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8814418080219826, log_density = -2.3855809742456326, hamiltonian_energy = 5.1988646410430785, hamiltonian_energy_error = 0.19143750042259633, max_hamiltonian_energy_error = 0.6020237836082725, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9230665154843347, log_density = -2.408466970484355, hamiltonian_energy = 4.53225143517588, hamiltonian_energy_error = 0.06937724283936042, max_hamiltonian_energy_error = -0.3267230047091587, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9630781445064003, log_density = -0.1209690594577264, hamiltonian_energy = 4.100196603453116, hamiltonian_energy_error = -0.17851897403367278, max_hamiltonian_energy_error = -0.5025142283861763, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9484489771058185, log_density = -0.3774824835134538, hamiltonian_energy = 2.0523374648413073, hamiltonian_energy_error = -0.004447214057453408, max_hamiltonian_energy_error = -0.31261276510550173, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.86580520561968, log_density = -3.4841938720267622, hamiltonian_energy = 4.387012491543324, hamiltonian_energy_error = 0.3010780663455428, max_hamiltonian_energy_error = 0.4540776571536913, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 0.06924763877160878, hamiltonian_energy = 5.739575964989214, hamiltonian_energy_error = -0.38979606066985806, max_hamiltonian_energy_error = -0.49572647188743435, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.993503329383433, log_density = 1.1656505714291452, hamiltonian_energy = 0.9416636594006613, hamiltonian_energy_error = -0.0986853289709464, max_hamiltonian_energy_error = -0.16258752744194216, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.992424767810538, log_density = 0.570779530371663, hamiltonian_energy = 0.30124886021371255, hamiltonian_energy_error = 0.0322016973860112, max_hamiltonian_energy_error = -0.03769986114038115, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9823108852440962, log_density = 0.2938188539192268, hamiltonian_energy = 2.492684312096222, hamiltonian_energy_error = 0.014548973378076369, max_hamiltonian_energy_error = -0.0829586864075571, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9897213402768608, log_density = -0.6977902987461935, hamiltonian_energy = 1.7213919594418792, hamiltonian_energy_error = 0.023748250758799605, max_hamiltonian_energy_error = -0.0941594255483742, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9598879398304742, log_density = -1.4043994532163921, hamiltonian_energy = 5.304705172681386, hamiltonian_energy_error = -0.034130716802638794, max_hamiltonian_energy_error = -0.1721111862202962, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9926828875728788, log_density = -0.008498634879437361, hamiltonian_energy = 3.4348866890147107, hamiltonian_energy_error = -0.0999336108529425, max_hamiltonian_energy_error = -0.32338870344458126, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.5052131118806933, log_density = -5.426345685760257, hamiltonian_energy = 6.887319555027195, hamiltonian_energy_error = 1.473148907808162, max_hamiltonian_energy_error = 1.638362882747444, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9393607628000763, log_density = -3.962874989431201, hamiltonian_energy = 6.635864564709569, hamiltonian_energy_error = -0.4338227295041337, max_hamiltonian_energy_error = -1.2452332267883817, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 0.6958073425165701, hamiltonian_energy = 3.652348672808957, hamiltonian_energy_error = -1.1291175225798948, max_hamiltonian_energy_error = -1.1291175225798948, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8948293639865841, log_density = -0.2593418333446387, hamiltonian_energy = 2.4894025773576693, hamiltonian_energy_error = 0.2080886410667464, max_hamiltonian_energy_error = 0.2848351070681243, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8081992376347604, log_density = -0.9996024785623625, hamiltonian_energy = 4.508482834549398, hamiltonian_energy_error = 0.10480243881379714, max_hamiltonian_energy_error = 0.7356675888286377, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9413872708594189, log_density = 1.0069731964080333, hamiltonian_energy = 1.979364351436705, hamiltonian_energy_error = -0.37119173977594677, max_hamiltonian_energy_error = -0.37119173977594677, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7800977938790064, log_density = -4.362187519482055, hamiltonian_energy = 6.7971572469213015, hamiltonian_energy_error = 0.23073424919200303, max_hamiltonian_energy_error = 0.49771536900478797, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9613695611679028, log_density = -3.1147477658920497, hamiltonian_energy = 8.089464349989678, hamiltonian_energy_error = -0.1728929561692265, max_hamiltonian_energy_error = -0.4129584195606606, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9413792888454353, log_density = 1.0910979496304307, hamiltonian_energy = 5.307695374056844, hamiltonian_energy_error = -0.0968089017213769, max_hamiltonian_energy_error = 0.5712789593509306, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7787110724424265, log_density = 0.044389785141891736, hamiltonian_energy = 2.0467887778516927, hamiltonian_energy_error = 0.04190824455103126, max_hamiltonian_energy_error = 0.5069769474696582, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9655680977278676, log_density = 0.4803686240572578, hamiltonian_energy = 0.8476869366946942, hamiltonian_energy_error = -0.010225829723256807, max_hamiltonian_energy_error = 0.10253558014011077, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9358995617179227, log_density = 0.49159817873941414, hamiltonian_energy = 1.747719579018408, hamiltonian_energy_error = -0.010046508694616207, max_hamiltonian_energy_error = 0.1733081568090924, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8515639334497671, log_density = -0.4926726774549923, hamiltonian_energy = 1.9575913296061405, hamiltonian_energy_error = 0.20612036911691556, max_hamiltonian_energy_error = 0.3244187220257504, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7655874211212513, log_density = -2.4925663841269348, hamiltonian_energy = 7.651946053199955, hamiltonian_energy_error = 0.0029405333638443665, max_hamiltonian_energy_error = 0.6593421977188445, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.95768632557931, hamiltonian_energy = 4.601242792349581, hamiltonian_energy_error = -0.37121472118546706, max_hamiltonian_energy_error = -0.37121472118546706, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9372609164474213, log_density = 1.1182006044604922, hamiltonian_energy = 0.5067026933334517, hamiltonian_energy_error = -0.02178752376233173, max_hamiltonian_energy_error = 0.192629536122765, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8241970794898661, log_density = -1.2369323064506386, hamiltonian_energy = 5.526734816656974, hamiltonian_energy_error = 0.3370599337390914, max_hamiltonian_energy_error = 0.36839794438784956, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8984370069940726, log_density = -1.0756652435144858, hamiltonian_energy = 3.3597400325692686, hamiltonian_energy_error = 0.014492870771385835, max_hamiltonian_energy_error = 0.42933766587811784, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.7853224757937216, hamiltonian_energy = 1.277150553094005, hamiltonian_energy_error = -0.1624007257629856, max_hamiltonian_energy_error = -0.2827676270540542, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.911985683723437, log_density = 1.3532176306951165, hamiltonian_energy = 1.764687258982058, hamiltonian_energy_error = -0.05491124329992392, max_hamiltonian_energy_error = 0.20020353940110613, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9974523785797423, log_density = 1.5248666429288846, hamiltonian_energy = -1.0346310780350003, hamiltonian_energy_error = -0.01614382945923465, max_hamiltonian_energy_error = -0.07202223392733442, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9194559535418084, log_density = -0.3585487781169441, hamiltonian_energy = 0.8959903370842515, hamiltonian_energy_error = 0.20349444810231931, max_hamiltonian_energy_error = 0.20349444810231931, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.4959402352633498, log_density = -1.6708477919601847, hamiltonian_energy = 7.3174679000590235, hamiltonian_energy_error = 0.6551482939751097, max_hamiltonian_energy_error = 1.3992117954249927, tree_depth = 1, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.983766822378466, log_density = -2.9987998898403223, hamiltonian_energy = 3.322958503242638, hamiltonian_energy_error = 0.07931503354099556, max_hamiltonian_energy_error = -0.6591749206268469, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9840011272805039, log_density = -1.7061849723230207, hamiltonian_energy = 4.90550523086925, hamiltonian_energy_error = -0.19551373618893209, max_hamiltonian_energy_error = -0.6149890766042443, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9837297284023101, log_density = -2.2806108808460905, hamiltonian_energy = 3.955971134235141, hamiltonian_energy_error = 0.0034171268575207137, max_hamiltonian_energy_error = -0.5267978108805398, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9633212377101942, log_density = -1.020376064170902, hamiltonian_energy = 4.910054953234296, hamiltonian_energy_error = -0.08936109190600217, max_hamiltonian_energy_error = 0.576265387591441, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9281961567198034, log_density = -2.8433722464743827, hamiltonian_energy = 4.674430367377183, hamiltonian_energy_error = 0.12183748347339218, max_hamiltonian_energy_error = -0.21609811365577603, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.891495000375194, log_density = -1.4584715284680811, hamiltonian_energy = 8.397766825101495, hamiltonian_energy_error = -0.10646008860175726, max_hamiltonian_energy_error = -0.554419404141159, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9407989298751609, log_density = -0.08775004390379948, hamiltonian_energy = 3.1598213919582134, hamiltonian_energy_error = -0.022213683730414324, max_hamiltonian_energy_error = 0.37074268423455603, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9995877643035874, log_density = 1.6776322157717445, hamiltonian_energy = 0.5309967749132323, hamiltonian_energy_error = -0.21715153066773274, max_hamiltonian_energy_error = -0.3240484201595617, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9650917827632616, log_density = 1.0595570287855836, hamiltonian_energy = -0.40780126425621055, hamiltonian_energy_error = 0.09379033840829254, max_hamiltonian_energy_error = 0.12184284227532427, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8021733855316957, log_density = -6.132501965918605, hamiltonian_energy = 7.2931044273522705, hamiltonian_energy_error = 0.46219111002043256, max_hamiltonian_energy_error = 0.5852290779128442, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9669420327196632, log_density = 0.7254918844349714, hamiltonian_energy = 7.0431296532524135, hamiltonian_energy_error = -0.6481667572179841, max_hamiltonian_energy_error = -0.6481667572179841, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8134197606304374, log_density = -2.2063410246951634, hamiltonian_energy = 2.6495922758162984, hamiltonian_energy_error = 0.32979956695674506, max_hamiltonian_energy_error = 0.38468120203492573, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9726130985710753, log_density = -3.2017338638845914, hamiltonian_energy = 5.7033062513729345, hamiltonian_energy_error = -0.13420409591528948, max_hamiltonian_energy_error = -0.26309257552793053, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9214784463821717, log_density = -2.9905913562694835, hamiltonian_energy = 5.4952415109466495, hamiltonian_energy_error = -0.002924333919358091, max_hamiltonian_energy_error = 0.2896060754045404, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9715799083975826, log_density = -1.6192127379794012, hamiltonian_energy = 4.791932310687825, hamiltonian_energy_error = -0.14642412028845975, max_hamiltonian_energy_error = -0.15680561395296522, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9171464690275773, log_density = -0.8723496178592658, hamiltonian_energy = 3.5363668843162124, hamiltonian_energy_error = 0.03674523484334635, max_hamiltonian_energy_error = 0.16278281793240312, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9134226017724311, log_density = -1.3560701871615883, hamiltonian_energy = 3.2851906898929157, hamiltonian_energy_error = 0.1371342256804371, max_hamiltonian_energy_error = 0.16741892804721648, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9995376976132445, log_density = 0.06213644391328543, hamiltonian_energy = 2.2437674944580728, hamiltonian_energy_error = -0.1059761069275642, max_hamiltonian_energy_error = -0.16048898803638645, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 1.765673469167023, hamiltonian_energy = 0.3452473427665663, hamiltonian_energy_error = -0.03813819177573441, max_hamiltonian_energy_error = -0.07772951180291088, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9645833902981261, log_density = 1.2205016761357221, hamiltonian_energy = -0.9932011229544128, hamiltonian_energy_error = 0.058453243905781105, max_hamiltonian_energy_error = 0.07490072949656867, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8818617767122234, log_density = -1.267855021102406, hamiltonian_energy = 5.227326146194738, hamiltonian_energy_error = 0.1309363961025296, max_hamiltonian_energy_error = 0.3959163971110975, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9942869900588379, log_density = 0.362238593879475, hamiltonian_energy = 2.1003384504728806, hamiltonian_energy_error = -0.032613643770330825, max_hamiltonian_energy_error = -0.20807411341083482, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9952579172565065, log_density = 1.0019076680230423, hamiltonian_energy = 0.4841531703063504, hamiltonian_energy_error = -0.0768603088461719, max_hamiltonian_energy_error = -0.16546974913408596, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9960562565701482, log_density = 1.295641704865222, hamiltonian_energy = -0.6436659481895409, hamiltonian_energy_error = -0.018053405690669377, max_hamiltonian_energy_error = -0.08090662918289004, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9705000111847032, log_density = 1.6786106041157751, hamiltonian_energy = 0.2310279163017086, hamiltonian_energy_error = -0.08509025458262531, max_hamiltonian_energy_error = -0.08509025458262531, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.83010061327187, log_density = 1.192925342799807, hamiltonian_energy = 0.6207537723395689, hamiltonian_energy_error = 0.008331233228109802, max_hamiltonian_energy_error = 0.3615230320196887, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9622312744678747, log_density = 0.36043259862319665, hamiltonian_energy = 1.4056285839426903, hamiltonian_energy_error = 0.00496323668140386, max_hamiltonian_energy_error = 0.0819806808666359, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9748913674298787, log_density = 1.176369871084475, hamiltonian_energy = 1.0288775197756443, hamiltonian_energy_error = 0.030331517122412333, max_hamiltonian_energy_error = 0.0754227823329292, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8826684628783039, log_density = 0.13629106453376139, hamiltonian_energy = 1.2929481179658113, hamiltonian_energy_error = 0.01933378517215134, max_hamiltonian_energy_error = 0.2326922324563423, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9654325419559981, log_density = -0.5575551584677676, hamiltonian_energy = 2.0326093325950016, hamiltonian_energy_error = 0.02895290345690027, max_hamiltonian_energy_error = 0.1237419221079743, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9551676903182307, log_density = 0.16842720791283128, hamiltonian_energy = 3.07468653873376, hamiltonian_energy_error = -0.01653423660835962, max_hamiltonian_energy_error = -0.15887080616137306, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9179649334846428, log_density = -1.3799271645505211, hamiltonian_energy = 3.9829158416137536, hamiltonian_energy_error = 0.05756556702469373, max_hamiltonian_energy_error = 0.18889571036453834, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.992043120074427, log_density = 0.17423731195308534, hamiltonian_energy = 2.4489347114879227, hamiltonian_energy_error = -0.1846660435608647, max_hamiltonian_energy_error = -0.22969256328098808, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8843437520158851, log_density = -0.28122780201272946, hamiltonian_energy = 1.9552861853630636, hamiltonian_energy_error = 0.13405925224983584, max_hamiltonian_energy_error = 0.2784983946656183, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.980569339122674, log_density = -0.9860996660862895, hamiltonian_energy = 2.8916610930261264, hamiltonian_energy_error = -0.03967237629252374, max_hamiltonian_energy_error = -0.15566922847939146, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 1.1420770206830007, hamiltonian_energy = 1.3603004753878976, hamiltonian_energy_error = -0.09982315581660273, max_hamiltonian_energy_error = -0.12601419536194114, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8789285600344682, log_density = 0.821580350843476, hamiltonian_energy = 1.6265236256264926, hamiltonian_energy_error = -0.05008838163732365, max_hamiltonian_energy_error = 0.48854334600761007, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8947104062098973, log_density = -0.24120214333251866, hamiltonian_energy = 3.117429081074232, hamiltonian_energy_error = -0.060279511911976336, max_hamiltonian_energy_error = 0.3572441843304124, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8493559414384426, log_density = -2.325902217619068, hamiltonian_energy = 3.444697137645637, hamiltonian_energy_error = 0.3087530248800636, max_hamiltonian_energy_error = 0.3087530248800636, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9342518176394343, log_density = 1.825603356844951, hamiltonian_energy = 6.283057724271464, hamiltonian_energy_error = -0.4726755060421093, max_hamiltonian_energy_error = -0.4829390044690687, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8977798828938671, log_density = 0.594593308477311, hamiltonian_energy = 0.12436287622798559, hamiltonian_energy_error = 0.1313808675496404, max_hamiltonian_energy_error = 0.188244059792813, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9320282572834915, log_density = 0.7261663217261649, hamiltonian_energy = 1.143023162667296, hamiltonian_energy_error = 0.017344044242412204, max_hamiltonian_energy_error = 0.21264579225691072, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.78026138680038, log_density = -1.3564962049873444, hamiltonian_energy = 5.153858368903378, hamiltonian_energy_error = 0.31039505964952596, max_hamiltonian_energy_error = 0.644614622182468, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.049436488343612695, hamiltonian_energy = 1.93696862628239, hamiltonian_energy_error = -0.26356987754848604, max_hamiltonian_energy_error = -0.5635388420369947, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8904637093257562, log_density = -0.37307748013334496, hamiltonian_energy = 2.68613395468013, hamiltonian_energy_error = -0.1003811350278001, max_hamiltonian_energy_error = 0.5311214974902501, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8523020169952386, log_density = -0.08679762410825731, hamiltonian_energy = 3.2781676433382803, hamiltonian_energy_error = 0.10898387849322289, max_hamiltonian_energy_error = 0.35471095916670015, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8533386728895235, log_density = 0.7679943047695375, hamiltonian_energy = 2.611233058396869, hamiltonian_energy_error = -0.3221620545305388, max_hamiltonian_energy_error = 0.6357001904788455, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.969107353891696, log_density = 1.0279123878981276, hamiltonian_energy = 0.9377105588781469, hamiltonian_energy_error = -0.015948704892885246, max_hamiltonian_energy_error = -0.16265536281174864, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9554868316931928, log_density = 0.8332265394129728, hamiltonian_energy = 0.2004626549079147, hamiltonian_energy_error = 0.008879838930489381, max_hamiltonian_energy_error = 0.133089803074377, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.4567176373199365, log_density = 0.8332265394129728, hamiltonian_energy = 4.369815861932248, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 0.8579178357878972, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9952715148184306, log_density = 0.7481657484571214, hamiltonian_energy = -0.3627486353493201, hamiltonian_energy_error = -0.003545381458074537, max_hamiltonian_energy_error = -0.0697979022993997, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9807857419738084, log_density = -2.8194607799884377, hamiltonian_energy = 3.3406930290681593, hamiltonian_energy_error = 0.06928496921516558, max_hamiltonian_energy_error = 0.06928496921516558, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9865580496269001, log_density = -1.1905519496673183, hamiltonian_energy = 3.794615976007992, hamiltonian_energy_error = -0.07153733713245014, max_hamiltonian_energy_error = -0.13113836400935197, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9441571187608447, log_density = 1.7749772791022576, hamiltonian_energy = 1.9170883041276978, hamiltonian_energy_error = -0.05847957931596026, max_hamiltonian_energy_error = 0.1429055169521365, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.953206053035768, log_density = 1.5563590268971854, hamiltonian_energy = 0.5309086223881554, hamiltonian_energy_error = 0.02423613290644422, max_hamiltonian_energy_error = 0.09615138170819915, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7464261283015872, log_density = -1.1628388330944741, hamiltonian_energy = 2.091895365382567, hamiltonian_energy_error = 0.4290169300627511, max_hamiltonian_energy_error = 0.5033516883305196, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9560196729172409, log_density = -0.8768151570580027, hamiltonian_energy = 4.7203357171551925, hamiltonian_energy_error = 0.16104617107437313, max_hamiltonian_energy_error = -0.3937022394164167, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9595991030448798, log_density = -2.024443583868525, hamiltonian_energy = 4.702766025737062, hamiltonian_energy_error = -0.05737915473467847, max_hamiltonian_energy_error = -0.534670887903105, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9499420056829513, log_density = 0.3313663276995218, hamiltonian_energy = 3.6641810803258585, hamiltonian_energy_error = -0.20053112335753953, max_hamiltonian_energy_error = -0.40573833206375776, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9928730791073396, log_density = 1.3150624200417038, hamiltonian_energy = 0.5243535412449474, hamiltonian_energy_error = -0.07578685087219106, max_hamiltonian_energy_error = -0.19452859146747836, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9953885250208941, log_density = 0.3763485878536379, hamiltonian_energy = -0.1319486534988745, hamiltonian_energy_error = 0.032812825436414866, max_hamiltonian_energy_error = -0.12117422312990045, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9559896182921802, log_density = 0.3382354386813109, hamiltonian_energy = 0.8023240793548225, hamiltonian_energy_error = -0.018448399597339016, max_hamiltonian_energy_error = -0.1584028812527769, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9851757161465832, log_density = 0.679315302967499, hamiltonian_energy = 0.9389323721668656, hamiltonian_energy_error = -0.10033888537035018, max_hamiltonian_energy_error = -0.12837706358320444, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8418328417024735, log_density = -1.2217584849618035, hamiltonian_energy = 3.007654139709474, hamiltonian_energy_error = 0.24488149930733094, max_hamiltonian_energy_error = 0.3698209229814817, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9123361831497382, log_density = -4.257288795409224, hamiltonian_energy = 5.832113289316583, hamiltonian_energy_error = 0.19171791887000023, max_hamiltonian_energy_error = 0.24624221286336567, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8426159732120712, log_density = -0.7458027497352724, hamiltonian_energy = 6.442280531217503, hamiltonian_energy_error = -0.3148237179305129, max_hamiltonian_energy_error = 0.6389470677567886, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9481904481026906, log_density = -0.20333278461897208, hamiltonian_energy = 2.554480510116265, hamiltonian_energy_error = 0.08290827284779434, max_hamiltonian_energy_error = 0.18321884017351575, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9371794205404004, log_density = -0.513469937251755, hamiltonian_energy = 2.9876034947697745, hamiltonian_energy_error = -0.1355803942912548, max_hamiltonian_energy_error = -0.203348662373533, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9866851722776496, log_density = -0.7869825021332844, hamiltonian_energy = 2.5910291198000883, hamiltonian_energy_error = 0.020105541505867297, max_hamiltonian_energy_error = -0.16526549902323362, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 1.0198526507649213, hamiltonian_energy = 0.8115254640338603, hamiltonian_energy_error = -0.18154862314295084, max_hamiltonian_energy_error = -0.18154862314295084, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8878025622708295, log_density = -0.3761518850940959, hamiltonian_energy = 0.7169216488244854, hamiltonian_energy_error = 0.16184537073491412, max_hamiltonian_energy_error = 0.17881587714502145, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.938493088626748, log_density = 1.2134474025429185, hamiltonian_energy = 3.3135667809923044, hamiltonian_energy_error = -0.15844582976331223, max_hamiltonian_energy_error = 0.1625794542807677, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.873467297397245, log_density = 0.4725813814072044, hamiltonian_energy = 1.6198017972430656, hamiltonian_energy_error = 0.04872392017048233, max_hamiltonian_energy_error = 0.3410161772592717, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9528087161421299, log_density = 0.30828924550256787, hamiltonian_energy = 1.8248974822165906, hamiltonian_energy_error = -0.0759286464499005, max_hamiltonian_energy_error = 0.1251635104133415, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8415013541885941, log_density = 0.6769648521280214, hamiltonian_energy = 2.9483120208356364, hamiltonian_energy_error = 0.0694217208038812, max_hamiltonian_energy_error = 0.2915585805496139, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8948613330986886, log_density = -0.05465105758820776, hamiltonian_energy = 2.918987801900022, hamiltonian_energy_error = 0.0539108502516088, max_hamiltonian_energy_error = 0.3993150510306376, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8626931925621386, log_density = -1.7376926684097125, hamiltonian_energy = 3.290301656579962, hamiltonian_energy_error = 0.2263130039311263, max_hamiltonian_energy_error = 0.4581321351219847, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9860864936439395, log_density = -0.7081203324803926, hamiltonian_energy = 3.902674882610819, hamiltonian_energy_error = -0.16359963616750806, max_hamiltonian_energy_error = -0.36314735649425245, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9974177569260105, log_density = 0.9767494115133388, hamiltonian_energy = 1.5629041998208293, hamiltonian_energy_error = -0.07318771962443149, max_hamiltonian_energy_error = -0.13148734379176386, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8523810303419038, log_density = -1.6592831440072437, hamiltonian_energy = 4.584838716758345, hamiltonian_energy_error = 0.13457696195118274, max_hamiltonian_energy_error = 0.3549924016403967, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9886372564659287, log_density = -1.9801191744666529, hamiltonian_energy = 3.7977085387256104, hamiltonian_energy_error = -0.09121952241697917, max_hamiltonian_energy_error = -0.3940676874774942, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9760294137970885, log_density = -0.2781157466006636, hamiltonian_energy = 2.5562674732996276, hamiltonian_energy_error = -0.17314953623613283, max_hamiltonian_energy_error = -0.2471857466964309, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9215592802503315, log_density = -1.0225467818802407, hamiltonian_energy = 1.6228760155594835, hamiltonian_energy_error = 0.1382860156353083, max_hamiltonian_energy_error = 0.1382860156353083, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.538584834602915, log_density = -1.2129067182983029, hamiltonian_energy = 7.660040494003701, hamiltonian_energy_error = 0.5920346203779046, max_hamiltonian_energy_error = 1.2191269079363645, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8242354923903508, log_density = -0.5071311062030484, hamiltonian_energy = 4.12063231746388, hamiltonian_energy_error = 0.21711766861191562, max_hamiltonian_energy_error = 0.36397857236889175, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.958786328967461, log_density = -2.5047845256253662, hamiltonian_energy = 3.278831451684896, hamiltonian_energy_error = 0.2840223690420842, max_hamiltonian_energy_error = 0.2840223690420842, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.510292180539512, log_density = -2.7860831687001184, hamiltonian_energy = 7.898662482055264, hamiltonian_energy_error = 1.1296979287772952, max_hamiltonian_energy_error = 1.5002524590010387, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9603473124456328, log_density = -1.2595154924579006, hamiltonian_energy = 4.2704520981432825, hamiltonian_energy_error = -0.2831224779398491, max_hamiltonian_energy_error = -0.3456181069665947, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9924757298675412, log_density = 0.2455868697473118, hamiltonian_energy = 3.4076805850823533, hamiltonian_energy_error = -0.22795835272296294, max_hamiltonian_energy_error = -0.22795835272296294, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8617734550260921, log_density = -0.032781078990502976, hamiltonian_energy = 2.3131797589486185, hamiltonian_energy_error = 0.13134655737192347, max_hamiltonian_energy_error = 0.29484147843237896, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9189074859603228, log_density = -0.4173448975314189, hamiltonian_energy = 3.5979334130411464, hamiltonian_energy_error = -0.03222008675162957, max_hamiltonian_energy_error = -0.41209471259186614, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9894737271807614, log_density = -0.6981813635338376, hamiltonian_energy = 1.5513806301136512, hamiltonian_energy_error = -0.0895960465174328, max_hamiltonian_energy_error = -0.21488719990703564, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.29408863108448735, log_density = -0.6981813635338376, hamiltonian_energy = 7.108918715093309, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 2.3014870385645425, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9796677589386753, log_density = -0.23273068510663464, hamiltonian_energy = 6.559125613238014, hamiltonian_energy_error = -0.10376603071647672, max_hamiltonian_energy_error = -0.16501095383802067, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9616022106152408, log_density = 1.6624426384701536, hamiltonian_energy = 1.0525367754801191, hamiltonian_energy_error = -0.027338545403022385, max_hamiltonian_energy_error = 0.12454438678502555, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9028158122535648, log_density = 0.7247261542096641, hamiltonian_energy = 1.163635667997773, hamiltonian_energy_error = 0.11791905363131039, max_hamiltonian_energy_error = 0.1901738903201582, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9902004193289611, log_density = 0.4066420996265361, hamiltonian_energy = 0.5566386337592738, hamiltonian_energy_error = 0.026554435212364225, max_hamiltonian_energy_error = -0.08135521505837007, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9760387967690676, log_density = 1.1685940726996602, hamiltonian_energy = 1.3020181216802111, hamiltonian_energy_error = -0.05087638545789264, max_hamiltonian_energy_error = 0.1033875976582872, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 1, is_accept = true, acceptance_rate = 1.0, log_density = 1.36972186200442, hamiltonian_energy = -1.133583979136875, hamiltonian_energy_error = -0.0352789177071946, max_hamiltonian_energy_error = -0.0352789177071946, tree_depth = 1, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9577417349692989, log_density = -0.07008707788549984, hamiltonian_energy = 1.3679886290215206, hamiltonian_energy_error = 0.032747471564886776, max_hamiltonian_energy_error = 0.15956167643761865, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9773019268583669, log_density = -0.3567493640082189, hamiltonian_energy = 1.1733278506686602, hamiltonian_energy_error = 0.0518902198559823, max_hamiltonian_energy_error = -0.11334382459185899, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7763468790975868, log_density = 0.10168215935030034, hamiltonian_energy = 4.812504328544024, hamiltonian_energy_error = -0.08778486569583155, max_hamiltonian_energy_error = 0.7768265632965923, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9475694055984202, log_density = -0.1660923656945119, hamiltonian_energy = 1.4988435678430374, hamiltonian_energy_error = 0.12763542246060666, max_hamiltonian_energy_error = 0.24255000836268437, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 0.5540179641621759, hamiltonian_energy = 0.7546790373631662, hamiltonian_energy_error = -0.029060282783663016, max_hamiltonian_energy_error = -0.25416388810630086, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.882774195809398, log_density = -1.6152008676109126, hamiltonian_energy = 2.8129592604836837, hamiltonian_energy_error = 0.3322203079430768, max_hamiltonian_energy_error = 0.35963068324999936, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 0.39142545260638606, hamiltonian_energy = 2.381232839535426, hamiltonian_energy_error = -0.3140934277861511, max_hamiltonian_energy_error = -0.4612199173615288, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9830645343271407, log_density = -0.7485087959058365, hamiltonian_energy = 2.9463183529054953, hamiltonian_energy_error = -0.20575694275841405, max_hamiltonian_energy_error = -0.2809933146769361, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9932195004083723, log_density = -0.7340559435968927, hamiltonian_energy = 2.0605515744029503, hamiltonian_energy_error = 0.022491993609564, max_hamiltonian_energy_error = -0.07998423759534345, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9018603686462593, log_density = -0.1257497516099555, hamiltonian_energy = 4.288057378390725, hamiltonian_energy_error = -0.02034669374994813, max_hamiltonian_energy_error = 0.3148227321931527, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8652469834547324, log_density = -1.2225642788176057, hamiltonian_energy = 3.888297024482945, hamiltonian_energy_error = 0.2980071185325337, max_hamiltonian_energy_error = 0.3294495544977618, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8148028781148537, log_density = -3.595187096701311, hamiltonian_energy = 6.224261109100439, hamiltonian_energy_error = 0.3705574559977327, max_hamiltonian_energy_error = 0.3705574559977327, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9970707227458314, log_density = 0.8967606526557557, hamiltonian_energy = 5.706153693746522, hamiltonian_energy_error = -0.49818597787273156, max_hamiltonian_energy_error = -0.5572444982809364, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.96829997057513, log_density = 0.12377283536991257, hamiltonian_energy = 0.218706406886011, hamiltonian_energy_error = 0.11808168808693115, max_hamiltonian_energy_error = 0.11808168808693115, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8260313963201886, log_density = -1.6152455413050149, hamiltonian_energy = 6.450518580583781, hamiltonian_energy_error = 0.05851170293714869, max_hamiltonian_energy_error = 0.48180886016775837, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.848542775494095, log_density = -0.4004614374574267, hamiltonian_energy = 3.6098623095880282, hamiltonian_energy_error = -0.1615314129767893, max_hamiltonian_energy_error = 0.4204306966781832, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8968452638123608, log_density = 0.40268234044197015, hamiltonian_energy = 1.5403893344192807, hamiltonian_energy_error = 0.14073527855315127, max_hamiltonian_energy_error = 0.1758543877593679, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.5768155898242369, log_density = 0.40268234044197015, hamiltonian_energy = 3.6036219785614527, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 1.2508623340422265, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9959685766217211, log_density = -0.060844673172960384, hamiltonian_energy = 3.1142005969826645, hamiltonian_energy_error = -0.03774126057329985, max_hamiltonian_energy_error = -0.14376643585930937, tree_depth = 5, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6666737290696413, log_density = -2.7035337568770395, hamiltonian_energy = 4.915039814344892, hamiltonian_energy_error = 0.49947717247712475, max_hamiltonian_energy_error = 0.623610681977949, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9988758063857586, log_density = -0.4873932042353637, hamiltonian_energy = 4.6168044736148435, hamiltonian_energy_error = -0.2998758238288346, max_hamiltonian_energy_error = -0.49049363859764394, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9452741805618325, log_density = -0.8579447975042873, hamiltonian_energy = 2.2951405719441675, hamiltonian_energy_error = 0.06551292054472535, max_hamiltonian_energy_error = 0.13215028673756235, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9854605650480005, log_density = -1.2803877110661128, hamiltonian_energy = 2.976567395411785, hamiltonian_energy_error = -0.02455988832542033, max_hamiltonian_energy_error = -0.1866522684955183, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9606415214864416, log_density = 1.6290226637779934, hamiltonian_energy = 3.4488767013776247, hamiltonian_energy_error = -0.2513378098220729, max_hamiltonian_energy_error = -0.2513378098220729, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6941737120033924, log_density = 0.06512470445523633, hamiltonian_energy = 4.849491125055518, hamiltonian_energy_error = 0.19455955630235078, max_hamiltonian_energy_error = 0.576999823253403, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9047826829883766, log_density = -2.5592272233990396, hamiltonian_energy = 5.766340656906389, hamiltonian_energy_error = 0.017146347082248603, max_hamiltonian_energy_error = 0.3627634080859332, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9964205264102236, log_density = -1.4068661906879694, hamiltonian_energy = 5.314135070169341, hamiltonian_energy_error = -0.055689304577590804, max_hamiltonian_energy_error = -0.2935907087911449, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9925737728415728, log_density = 1.0858588033480459, hamiltonian_energy = 1.7188464378836645, hamiltonian_energy_error = -0.26013626344526153, max_hamiltonian_energy_error = -0.26013626344526153, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8978529321533751, log_density = 1.1294834043690187, hamiltonian_energy = 1.721746114961328, hamiltonian_energy_error = -0.027184457074341584, max_hamiltonian_energy_error = 0.17574114654622885, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8598375108637466, log_density = 0.2842456067401127, hamiltonian_energy = 2.0079055014656597, hamiltonian_energy_error = 0.059313647035668104, max_hamiltonian_energy_error = 0.37424843412269926, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9543480216524404, log_density = 0.6030329915636123, hamiltonian_energy = 1.2306266909506969, hamiltonian_energy_error = -0.0073674334751561155, max_hamiltonian_energy_error = 0.15277216343828748, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9934892815615444, log_density = -0.09341675420582973, hamiltonian_energy = 3.15805550538045, hamiltonian_energy_error = -0.02037115119571098, max_hamiltonian_energy_error = -0.07670664643725678, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9098241720948789, log_density = 1.5442046529246483, hamiltonian_energy = 1.0351910619860845, hamiltonian_energy_error = -0.04693482632538837, max_hamiltonian_energy_error = 0.19691290688823937, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9738174759797638, log_density = 1.404216179063262, hamiltonian_energy = -0.8512220737485513, hamiltonian_energy_error = 0.018762807056186936, max_hamiltonian_energy_error = 0.05349718964172079, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9614217101613983, log_density = 0.914132732092364, hamiltonian_energy = -0.5226764459060862, hamiltonian_energy_error = 0.07898338289464946, max_hamiltonian_energy_error = 0.09530532482564402, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8454607816851656, log_density = -2.7084573876095845, hamiltonian_energy = 3.5729849613065814, hamiltonian_energy_error = 0.2971898519342182, max_hamiltonian_energy_error = 0.32795787867797266, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9950717579532502, log_density = -2.057242895534136, hamiltonian_energy = 5.611194877873421, hamiltonian_energy_error = -0.05932280149007063, max_hamiltonian_energy_error = -0.3398548134037904, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -3.945679386954545, hamiltonian_energy = 6.5562679529343555, hamiltonian_energy_error = -0.13726857432085815, max_hamiltonian_energy_error = -0.30541777450240026, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9990686107184887, log_density = 1.5993036257360895, hamiltonian_energy = 7.121518452688962, hamiltonian_energy_error = -0.4373467931010655, max_hamiltonian_energy_error = -0.4373467931010655, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.7762925463858096, log_density = 1.2438178514318796, hamiltonian_energy = 1.5420876776724048, hamiltonian_energy_error = 0.10501138039233604, max_hamiltonian_energy_error = 0.47985384951011967, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8448294534890959, log_density = -3.640269259589065, hamiltonian_energy = 5.580465092233827, hamiltonian_energy_error = 0.4274953187879289, max_hamiltonian_energy_error = 0.4274953187879289, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.6443105879707272, hamiltonian_energy = 4.2600459615976725, hamiltonian_energy_error = -0.5514458506654591, max_hamiltonian_energy_error = -0.6867920869977668, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9940203797826039, log_density = 1.055106910332528, hamiltonian_energy = 2.67712099225655, hamiltonian_energy_error = -0.10595693003282136, max_hamiltonian_energy_error = -0.1363248138546833, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9545810817446071, log_density = 0.24953094470088466, hamiltonian_energy = -0.1914525241975687, hamiltonian_energy_error = 0.10842979484291687, max_hamiltonian_energy_error = 0.10842979484291687, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9948435271834789, log_density = 0.8525331176554829, hamiltonian_energy = 0.5393704001876616, hamiltonian_energy_error = -0.014675247958909954, max_hamiltonian_energy_error = -0.15391871520118616, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9805615274545201, log_density = 0.25560723956803955, hamiltonian_energy = 1.7478857980806137, hamiltonian_energy_error = -0.01782777493879717, max_hamiltonian_energy_error = -0.23209404793436317, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9876490955505902, log_density = 0.15991071114860667, hamiltonian_energy = 1.2139805331693598, hamiltonian_energy_error = -0.11542444347244785, max_hamiltonian_energy_error = -0.1266414892999701, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8525929537221584, log_density = -1.8574850834606416, hamiltonian_energy = 6.749547871723297, hamiltonian_energy_error = 0.03163686216954531, max_hamiltonian_energy_error = 0.30457011485867636, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9990908148960809, log_density = -0.2547814464121103, hamiltonian_energy = 2.807156330672423, hamiltonian_energy_error = -0.0865581664750299, max_hamiltonian_energy_error = -0.17932184693237696, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9570237022649187, log_density = -0.9677876283045475, hamiltonian_energy = 1.7546261373647338, hamiltonian_energy_error = 0.0555053049052463, max_hamiltonian_energy_error = 0.14894912151478934, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9751869303755444, log_density = -3.1787405430944826, hamiltonian_energy = 5.703565883609564, hamiltonian_energy_error = 0.007328094822290687, max_hamiltonian_energy_error = 0.16027855924150902, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8968283448392617, log_density = -4.613204230921095, hamiltonian_energy = 5.600112902306081, hamiltonian_energy_error = 0.19538017923337225, max_hamiltonian_energy_error = 0.36299040457131504, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8357132600640249, log_density = -3.7781058944241064, hamiltonian_energy = 9.499950175410298, hamiltonian_energy_error = 0.2265675386264867, max_hamiltonian_energy_error = 0.6896940762538506, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -1.530883608379165, hamiltonian_energy = 3.78990798852697, hamiltonian_energy_error = -0.4054138352865291, max_hamiltonian_energy_error = -0.4054138352865291, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7075851737503147, log_density = -0.35458457251873554, hamiltonian_energy = 5.761909982899453, hamiltonian_energy_error = 0.33286460167970144, max_hamiltonian_energy_error = 0.580497088900346, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -0.2866115343717084, hamiltonian_energy = 2.1583551835304142, hamiltonian_energy_error = -0.03978937608145561, max_hamiltonian_energy_error = -0.38495656240108556, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9970603009954039, log_density = -0.49695355082309334, hamiltonian_energy = 3.6460570974641886, hamiltonian_energy_error = -0.189597474378, max_hamiltonian_energy_error = -0.37023007649077755, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9768161345978831, log_density = 1.5428698348027066, hamiltonian_energy = 2.7286735794809456, hamiltonian_energy_error = -0.06994700427361167, max_hamiltonian_energy_error = 0.15634952444170036, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9989736487393394, log_density = 1.6195385549363284, hamiltonian_energy = -1.1847530287501007, hamiltonian_energy_error = -0.01835005103432974, max_hamiltonian_energy_error = -0.08292092886806679, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9596984285656395, log_density = 1.4220504833454601, hamiltonian_energy = -0.7612512917050639, hamiltonian_energy_error = 0.056489792308884956, max_hamiltonian_energy_error = 0.09891793246867964, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8289488970129956, log_density = -1.5441634483605942, hamiltonian_energy = 1.9857684168778054, hamiltonian_energy_error = 0.3172484363634389, max_hamiltonian_energy_error = 0.3172484363634389, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9931107949960004, log_density = -0.43126612909466466, hamiltonian_energy = 2.467839335364014, hamiltonian_energy_error = -0.2389413859402505, max_hamiltonian_energy_error = -0.5181151781768438, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9499963295290367, log_density = -0.7473596597298497, hamiltonian_energy = 2.7155808127512078, hamiltonian_energy_error = -0.060246971580951936, max_hamiltonian_energy_error = -0.22365579443254324, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9928044691653706, log_density = 1.4771318396156623, hamiltonian_energy = 2.514728483337828, hamiltonian_energy_error = -0.11681860844932457, max_hamiltonian_energy_error = -0.11681860844932457, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9387749919017054, log_density = 1.1016967132059143, hamiltonian_energy = -0.09962148922748115, hamiltonian_energy_error = 0.006182234191111524, max_hamiltonian_energy_error = 0.1335524544275224, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9261489330304049, log_density = -0.5880373744269143, hamiltonian_energy = 2.4656076860767393, hamiltonian_energy_error = 0.12222806518995233, max_hamiltonian_energy_error = 0.170088413779784, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9960953822696158, log_density = 0.5031141660970189, hamiltonian_energy = 1.0301350148668362, hamiltonian_energy_error = -0.05151627302196404, max_hamiltonian_energy_error = -0.13987954578242734, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9803790030980682, log_density = -0.6769503553555971, hamiltonian_energy = 2.4623886139964837, hamiltonian_energy_error = -0.12102934034751511, max_hamiltonian_energy_error = 0.1685723004223969, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9995684849594743, log_density = 0.18261931668626552, hamiltonian_energy = 0.9332053266008216, hamiltonian_energy_error = -0.041845423411859595, max_hamiltonian_energy_error = -0.08342243607070865, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9893833127842876, log_density = 0.32102825844994065, hamiltonian_energy = 1.0148034331543596, hamiltonian_energy_error = -0.028900520906651517, max_hamiltonian_energy_error = -0.11765351284277048, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9575712637314702, log_density = 0.22154487661792643, hamiltonian_energy = 1.6168865155537824, hamiltonian_energy_error = 0.05957996682064737, max_hamiltonian_energy_error = 0.12076270343359408, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.4874067477358259, log_density = -3.546478826439455, hamiltonian_energy = 4.235201030911091, hamiltonian_energy_error = 0.7665525766166601, max_hamiltonian_energy_error = 0.8376236701008617, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9427147135162225, log_density = -3.3630159312574808, hamiltonian_energy = 5.814002388777782, hamiltonian_energy_error = -0.1880435271155152, max_hamiltonian_energy_error = -0.9108373537959435, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9721104565172735, log_density = -5.627820304917364, hamiltonian_energy = 10.557213940828344, hamiltonian_energy_error = 0.03720286407721751, max_hamiltonian_energy_error = -0.5960376323253893, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.926913975905615, log_density = -5.581246964518144, hamiltonian_energy = 8.223376721053326, hamiltonian_energy_error = 0.017485583811550853, max_hamiltonian_energy_error = -0.5337299745365796, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9827006675585339, log_density = -1.9316482568273177, hamiltonian_energy = 5.540939878523947, hamiltonian_energy_error = -0.5284370395300142, max_hamiltonian_energy_error = -0.5349673663352545, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9684105501830965, log_density = -1.6584871288320198, hamiltonian_energy = 4.009680962396914, hamiltonian_energy_error = 0.05334853448358334, max_hamiltonian_energy_error = 0.2125921135419171, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.875926621378878, log_density = 0.09378779360669753, hamiltonian_energy = 4.4888946636840075, hamiltonian_energy_error = 0.03917746045584991, max_hamiltonian_energy_error = 0.29074362902515816, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9771319253585286, log_density = 0.2360165864245971, hamiltonian_energy = 0.4507725985915867, hamiltonian_energy_error = -0.04218275366252622, max_hamiltonian_energy_error = -0.11142653272560332, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9795525028220986, log_density = 0.5568874938068298, hamiltonian_energy = 1.4656101068159537, hamiltonian_energy_error = -0.05650904029222614, max_hamiltonian_energy_error = 0.0669950362116678, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8875347266952974, log_density = 0.793641280916292, hamiltonian_energy = 2.4788055780952907, hamiltonian_energy_error = 0.11764955327258075, max_hamiltonian_energy_error = 0.2860378733945814, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9591857438591144, log_density = -0.5787208955491732, hamiltonian_energy = 0.9871378584137165, hamiltonian_energy_error = 0.20221024920043518, max_hamiltonian_energy_error = 0.20221024920043518, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9937066002583822, log_density = -0.33611635042518273, hamiltonian_energy = 1.9886075643585037, hamiltonian_energy_error = -0.0900097459627458, max_hamiltonian_energy_error = -0.32919282445338327, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7567002131722997, log_density = -1.252660240840548, hamiltonian_energy = 5.289735928476172, hamiltonian_energy_error = 0.2896406431108618, max_hamiltonian_energy_error = 0.5945893618111189, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9454298198367631, log_density = -0.9218534857445206, hamiltonian_energy = 7.079472084052709, hamiltonian_energy_error = -0.3026041294088442, max_hamiltonian_energy_error = -1.0823199067429492, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.96484395403143, log_density = 1.5364313744869413, hamiltonian_energy = 3.42074996097562, hamiltonian_energy_error = 0.012492423727048063, max_hamiltonian_energy_error = 0.10658658163486479, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9267717802051826, log_density = -1.2933515691889843, hamiltonian_energy = 2.4892892543294973, hamiltonian_energy_error = 0.07779738952199544, max_hamiltonian_energy_error = 0.15659249931710217, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9658084971419351, log_density = -0.01120947514733217, hamiltonian_energy = 2.409083334904689, hamiltonian_energy_error = 0.020316850494826344, max_hamiltonian_energy_error = -0.15655119559874908, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9510738997489866, log_density = -1.5306407377770945, hamiltonian_energy = 2.833420365015108, hamiltonian_energy_error = 0.0888177048727048, max_hamiltonian_energy_error = -0.14584207161364304, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9661642972636586, log_density = 0.8220403861754697, hamiltonian_energy = 3.6256752601813114, hamiltonian_energy_error = -0.07756767013995525, max_hamiltonian_energy_error = -0.37409021558564337, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.906736192808329, log_density = -0.4378778617757071, hamiltonian_energy = 2.2906042933925748, hamiltonian_energy_error = 0.22221627822185264, max_hamiltonian_energy_error = 0.3807331827879685, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9128935513195152, log_density = -1.0527982672915037, hamiltonian_energy = 4.652171885826341, hamiltonian_energy_error = -0.6519097952164783, max_hamiltonian_energy_error = -0.6519097952164783, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9991822558255755, log_density = -1.3617706008209431, hamiltonian_energy = 2.8525640048262844, hamiltonian_energy_error = -0.10098350862415995, max_hamiltonian_energy_error = -0.1275734203659482, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8176640281798294, log_density = -3.218726570583047, hamiltonian_energy = 3.308593596445251, hamiltonian_energy_error = 0.2834681523775222, max_hamiltonian_energy_error = 0.2834681523775222, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9431017952696534, log_density = -3.139376417900703, hamiltonian_energy = 13.275189636701237, hamiltonian_energy_error = -0.4164888798116433, max_hamiltonian_energy_error = -0.9708612338228892, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9679454316304125, log_density = 1.1413610284151865, hamiltonian_energy = 4.2810581934599075, hamiltonian_energy_error = -0.2926255977915586, max_hamiltonian_energy_error = -0.2926255977915586, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9507342777309892, log_density = 0.11740081031538452, hamiltonian_energy = 0.2869098771772186, hamiltonian_energy_error = 0.055272311707646904, max_hamiltonian_energy_error = 0.07404638536852193, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8428783427222041, log_density = -1.1244884588662156, hamiltonian_energy = 2.25898797023098, hamiltonian_energy_error = 0.4141986895057186, max_hamiltonian_energy_error = 0.4141986895057186, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.969209655814007, log_density = 0.0616145849288543, hamiltonian_energy = 1.9788949946222716, hamiltonian_energy_error = -0.17131639583656666, max_hamiltonian_energy_error = -0.46859805735493776, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8781615839985596, log_density = -1.1093392709831615, hamiltonian_energy = 3.3105326010650833, hamiltonian_energy_error = -0.038907168580481155, max_hamiltonian_energy_error = 0.4549420236441497, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 1.0, log_density = 1.153111756402316, hamiltonian_energy = 2.0190368823578755, hamiltonian_energy_error = -0.35027537861379177, max_hamiltonian_energy_error = -0.5194956269059903, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8676492259051746, log_density = -1.187041157788956, hamiltonian_energy = 2.896275254985371, hamiltonian_energy_error = 0.3275813186371237, max_hamiltonian_energy_error = 0.5164914999760777, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.8883773034488129, hamiltonian_energy = 1.609951578888162, hamiltonian_energy_error = -0.3367359507306784, max_hamiltonian_energy_error = -0.49190211563484976, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9297645354252771, log_density = -1.126164503631486, hamiltonian_energy = 1.8042499967748933, hamiltonian_energy_error = 0.24137971830036298, max_hamiltonian_energy_error = 0.2771553999605729, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -0.5523352835069542, hamiltonian_energy = 1.8793693686541757, hamiltonian_energy_error = -0.11643248652135685, max_hamiltonian_energy_error = -0.39095407781916225, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8552584517407101, log_density = -2.424109365048057, hamiltonian_energy = 4.9232189070904955, hamiltonian_energy_error = 0.35966300371148474, max_hamiltonian_energy_error = 0.35966300371148474, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 0.6265457036902866, hamiltonian_energy = 3.3044417389543153, hamiltonian_energy_error = -0.3920737244956105, max_hamiltonian_energy_error = -0.3920737244956105, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9493896096030707, log_density = -0.5890042614372053, hamiltonian_energy = 1.2068537347113621, hamiltonian_energy_error = 0.056074887718085, max_hamiltonian_energy_error = 0.19088209338844808, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.4605668928675885, log_density = -4.97819755061367, hamiltonian_energy = 7.55456510416872, hamiltonian_energy_error = 1.0102600836247566, max_hamiltonian_energy_error = 1.2147099885915624, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9819859743583841, log_density = 1.6448706089283256, hamiltonian_energy = 6.791876828791352, hamiltonian_energy_error = -0.648697592864119, max_hamiltonian_energy_error = -0.6978179504995774, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8832860434789739, log_density = 0.821033287625669, hamiltonian_energy = 0.7732319943433532, hamiltonian_energy_error = 0.043048686251366375, max_hamiltonian_energy_error = 0.26300497457677596, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9468347960878091, log_density = 0.7315780478240841, hamiltonian_energy = 1.3656967082403546, hamiltonian_energy_error = 0.06328770434245046, max_hamiltonian_energy_error = 0.21589315609500326, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9103397004567835, log_density = -0.021391143876579477, hamiltonian_energy = 1.9572203304149023, hamiltonian_energy_error = 0.23148833672342017, max_hamiltonian_energy_error = 0.335655338653428, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9984402787074195, log_density = 1.8536553885633325, hamiltonian_energy = 0.6911244523608984, hamiltonian_energy_error = -0.4176147139714912, max_hamiltonian_energy_error = -0.4176147139714912, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.5852973280750329, log_density = -3.051173030216699, hamiltonian_energy = 5.669372027982002, hamiltonian_energy_error = 0.6589470777432815, max_hamiltonian_energy_error = 1.0167329891721115, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7648949666584662, log_density = -3.053447627847726, hamiltonian_energy = 9.40433022111627, hamiltonian_energy_error = 0.28641285799109717, max_hamiltonian_energy_error = 0.3804792805243231, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9343924996925107, log_density = -4.571624099485252, hamiltonian_energy = 5.519653374830903, hamiltonian_energy_error = 0.12658721353683244, max_hamiltonian_energy_error = 0.18630069031231677, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.8183454060109007, log_density = -6.361769142891525, hamiltonian_energy = 8.475248651398548, hamiltonian_energy_error = 0.41514590181379063, max_hamiltonian_energy_error = 2.8272770968411827, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.811856270522314, log_density = -1.2727874809046487, hamiltonian_energy = 8.608054366306273, hamiltonian_energy_error = -2.1185034788110624, max_hamiltonian_energy_error = -2.1185034788110624, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.4362227527661601, log_density = -6.107883379765198, hamiltonian_energy = 7.84043299432022, hamiltonian_energy_error = 1.2516498974504007, max_hamiltonian_energy_error = 2.3010624922261007, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -4.188714026426863, hamiltonian_energy = 6.281677755198125, hamiltonian_energy_error = -0.57240510418527, max_hamiltonian_energy_error = -0.9452405488405793, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9714801475314513, log_density = -0.7566601681223197, hamiltonian_energy = 6.903707462868205, hamiltonian_energy_error = -0.6167523590039012, max_hamiltonian_energy_error = -0.7138961449045089, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9849783580280367, log_density = 1.0504087656724703, hamiltonian_energy = 2.2224343361131753, hamiltonian_energy_error = -0.10447387678551623, max_hamiltonian_energy_error = -0.10447387678551623, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7792769724981964, log_density = -0.5608520700192354, hamiltonian_energy = 3.3934294663105673, hamiltonian_energy_error = 0.1304588526540309, max_hamiltonian_energy_error = 0.5048835838205767, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9300586497078844, log_density = 0.01500698241850884, hamiltonian_energy = 2.8917423395198596, hamiltonian_energy_error = 0.13644971726144783, max_hamiltonian_energy_error = 0.1374113912208017, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9883129883370834, log_density = 0.9593007791438737, hamiltonian_energy = 1.0194434596957398, hamiltonian_energy_error = -0.10370448751989358, max_hamiltonian_energy_error = -0.28107466638342116, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9649742796497914, log_density = 1.4016465882244198, hamiltonian_energy = 0.5797725136751783, hamiltonian_energy_error = -0.1759686474526736, max_hamiltonian_energy_error = -0.1759686474526736, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9452070210517554, log_density = 1.5685207677707478, hamiltonian_energy = -0.11679592596314459, hamiltonian_energy_error = 0.028295812100919138, max_hamiltonian_energy_error = 0.0976838895468301, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8790932933433087, log_density = 0.6462009379593319, hamiltonian_energy = 2.656814514545079, hamiltonian_energy_error = -0.08704493764857091, max_hamiltonian_energy_error = 0.2715604176440851, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8733085352190064, log_density = 0.6180520243876542, hamiltonian_energy = 1.8145574834389353, hamiltonian_energy_error = 0.026248689607355935, max_hamiltonian_energy_error = 0.3369828569711113, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9565585449570332, log_density = -0.28372214113214334, hamiltonian_energy = 0.5061356499368986, hamiltonian_energy_error = 0.06200335800912027, max_hamiltonian_energy_error = 0.07279017475792138, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9967016546643801, log_density = 1.238799353907531, hamiltonian_energy = 1.0328018189945762, hamiltonian_energy_error = -0.09643875714791661, max_hamiltonian_energy_error = -0.14123363000885347, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9271361781829955, log_density = 1.5036920862501866, hamiltonian_energy = 0.7265567143492584, hamiltonian_energy_error = -0.005474932415592271, max_hamiltonian_energy_error = 0.18090645049447462, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9519147487399129, log_density = 1.0901637351455218, hamiltonian_energy = 0.5736444573424275, hamiltonian_energy_error = 0.043781083611390104, max_hamiltonian_energy_error = -0.1679099269449642, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9839418460127314, log_density = -0.013180870037988512, hamiltonian_energy = 0.6619281175995306, hamiltonian_energy_error = -0.033465588271194724, max_hamiltonian_energy_error = 0.1192420621678405, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.815065955558726, log_density = -3.830265565896884, hamiltonian_energy = 4.404855995176592, hamiltonian_energy_error = 0.4594014876415575, max_hamiltonian_energy_error = 0.4594014876415575, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9675478731585795, log_density = -2.0074521030344705, hamiltonian_energy = 5.913614089846167, hamiltonian_energy_error = -0.2594150763529042, max_hamiltonian_energy_error = -0.48140485509880193, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -0.2501526273855461, hamiltonian_energy = 2.6809742873025337, hamiltonian_energy_error = -0.0797180165290916, max_hamiltonian_energy_error = -0.2781733558187578, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9288291771732563, log_density = -3.3622330524218453, hamiltonian_energy = 5.242438469438274, hamiltonian_energy_error = 0.3363894817214321, max_hamiltonian_energy_error = 0.3363894817214321, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9951209046436563, log_density = -1.9355001376136052, hamiltonian_energy = 7.999269066077352, hamiltonian_energy_error = -0.28556461367599173, max_hamiltonian_energy_error = -0.6389749925987092, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8783483586497397, log_density = -3.9651024466392677, hamiltonian_energy = 5.2037878272822296, hamiltonian_energy_error = 0.28501367642469777, max_hamiltonian_energy_error = -0.41701434568156337, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 1.0, log_density = -4.724046261235509, hamiltonian_energy = 7.118867363582215, hamiltonian_energy_error = -0.38619185231878106, max_hamiltonian_energy_error = -0.6583160910218346, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.972504051766265, log_density = -0.7575188191215947, hamiltonian_energy = 7.937377910260952, hamiltonian_energy_error = -0.19762137303176797, max_hamiltonian_energy_error = -0.24844485527564064, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9932470477642117, log_density = 0.07187967824206254, hamiltonian_energy = 3.8773625994195444, hamiltonian_energy_error = -0.06039331728032726, max_hamiltonian_energy_error = -0.17426487688068049, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9647927395001188, log_density = 0.03443034183047189, hamiltonian_energy = 2.6024177008274423, hamiltonian_energy_error = 0.024644990744910444, max_hamiltonian_energy_error = -0.15690259158939224, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.992840299208009, log_density = 1.8578539883855978, hamiltonian_energy = 2.732806367294504, hamiltonian_energy_error = -0.14481874408298623, max_hamiltonian_energy_error = -0.17843466238393457, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9337989202624585, log_density = 1.097183566159007, hamiltonian_energy = -0.2201107657556607, hamiltonian_energy_error = 0.07058871075508977, max_hamiltonian_energy_error = 0.15574293434128617, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9375537619446294, log_density = 0.004024041317421734, hamiltonian_energy = 1.8677690952697765, hamiltonian_energy_error = 0.021840541715064, max_hamiltonian_energy_error = 0.16217686133563314, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9975835426450985, log_density = 1.1469969389087318, hamiltonian_energy = 2.2229980596404233, hamiltonian_energy_error = -0.07027311363370847, max_hamiltonian_energy_error = -0.08199415972098523, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7123076272555661, log_density = -3.7470569667411375, hamiltonian_energy = 4.694634176040711, hamiltonian_energy_error = 0.4624513312449503, max_hamiltonian_energy_error = 0.4624513312449503, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.983223694011142, log_density = -0.34175099189304703, hamiltonian_energy = 5.242510255431148, hamiltonian_energy_error = -0.5341930898734226, max_hamiltonian_energy_error = -0.5341930898734226, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8932727414767815, log_density = -0.522765279749601, hamiltonian_energy = 4.6669681941717815, hamiltonian_energy_error = -0.19128841396865504, max_hamiltonian_energy_error = 0.19440226899559399, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9625557254303314, log_density = 0.7761136378937881, hamiltonian_energy = 2.472355041530037, hamiltonian_energy_error = -0.089316338286479, max_hamiltonian_energy_error = 0.15494978593964603, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8882796700368158, log_density = -0.8894664484880046, hamiltonian_energy = 1.4971489063850425, hamiltonian_energy_error = 0.17225380981774419, max_hamiltonian_energy_error = 0.30449524791247895, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9719065639765019, log_density = 1.4378719775308486, hamiltonian_energy = 3.938294453467324, hamiltonian_energy_error = -0.1506055995057114, max_hamiltonian_energy_error = -0.304980215730291, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9864667501999698, log_density = 0.6719385738165915, hamiltonian_energy = 0.5456765951202862, hamiltonian_energy_error = -0.054390612586026954, max_hamiltonian_energy_error = -0.06019006557621576, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8709766049113309, log_density = -3.8358931476480542, hamiltonian_energy = 5.5355119408808395, hamiltonian_energy_error = 0.17228376880661855, max_hamiltonian_energy_error = 0.25091477210997937, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9100489606789591, log_density = -1.6018874205546174, hamiltonian_energy = 8.381258874844956, hamiltonian_energy_error = 0.1120609708101803, max_hamiltonian_energy_error = 0.3329042437536689, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -2.3137408189176156, hamiltonian_energy = 2.9096717234324787, hamiltonian_energy_error = -0.004872201932249354, max_hamiltonian_energy_error = -0.15131464180534415, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9847341438286925, log_density = -0.35901055951259053, hamiltonian_energy = 3.561040495565513, hamiltonian_energy_error = -0.09211010624064953, max_hamiltonian_energy_error = -0.2566440540981896, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -0.027219759884797412, hamiltonian_energy = 0.5513405590650271, hamiltonian_energy_error = -0.03830980169047493, max_hamiltonian_energy_error = -0.2181075250063872, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9734515125823793, log_density = -0.5618098999986039, hamiltonian_energy = 1.5652292080257122, hamiltonian_energy_error = 0.1160808076598645, max_hamiltonian_energy_error = 0.1160808076598645, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9668507110814557, log_density = 0.8632166145608284, hamiltonian_energy = 2.348688179165616, hamiltonian_energy_error = -0.2973007254748872, max_hamiltonian_energy_error = -0.2973007254748872, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8528107286356715, log_density = 0.279695651750691, hamiltonian_energy = 1.902996517423659, hamiltonian_energy_error = 0.018125997391809978, max_hamiltonian_energy_error = 0.37755446442076934, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9638634253063046, log_density = 0.9883147111565611, hamiltonian_energy = 1.3047158487210821, hamiltonian_energy_error = 0.02614166365695647, max_hamiltonian_energy_error = 0.10919719318415999, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9798999409943516, log_density = -0.5261616567052396, hamiltonian_energy = 0.9328027385702968, hamiltonian_energy_error = 0.07064047276498653, max_hamiltonian_energy_error = 0.07064047276498653, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9322725155566464, log_density = -2.839733558986631, hamiltonian_energy = 4.046834752814844, hamiltonian_energy_error = 0.06698366880348994, max_hamiltonian_energy_error = 0.15988465790018358, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9561163216537615, log_density = -4.162385425185665, hamiltonian_energy = 5.18400525438874, hamiltonian_energy_error = 0.18106955193423868, max_hamiltonian_energy_error = 0.18106955193423868, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8619988014545766, log_density = -3.683694444627884, hamiltonian_energy = 7.445090323275288, hamiltonian_energy_error = -0.07548863521654958, max_hamiltonian_energy_error = 0.7250898559130015, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -1.7998898246307142, hamiltonian_energy = 4.700148008132041, hamiltonian_energy_error = -0.22674754016791177, max_hamiltonian_energy_error = -0.3944678640430963, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9811023414155774, log_density = -4.057628444895762, hamiltonian_energy = 6.364998564607849, hamiltonian_energy_error = 0.009627753540078388, max_hamiltonian_energy_error = 0.19856718813316387, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9969406184491874, log_density = -3.1292159031725575, hamiltonian_energy = 5.3022741033689655, hamiltonian_energy_error = -0.01615254064487104, max_hamiltonian_energy_error = -0.22014881408714437, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9486838257589855, log_density = -4.037134475289388, hamiltonian_energy = 5.608866051179037, hamiltonian_energy_error = 0.2527467430154351, max_hamiltonian_energy_error = -0.2875242746338582, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -0.7498880900172189, hamiltonian_energy = 5.290752713194122, hamiltonian_energy_error = -0.19991176006768097, max_hamiltonian_energy_error = -0.46239309957497543, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6929208172272082, log_density = -6.987311405047856, hamiltonian_energy = 7.356298369451025, hamiltonian_energy_error = 0.7678071918981058, max_hamiltonian_energy_error = 0.7678071918981058, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8806367437058754, log_density = -3.004041246528841, hamiltonian_energy = 10.221651888701498, hamiltonian_energy_error = -2.1246055336671574, max_hamiltonian_energy_error = 2.3311100130219415, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6835793757178351, log_density = -2.9968162638911435, hamiltonian_energy = 6.036066703501943, hamiltonian_energy_error = 0.03255564424334967, max_hamiltonian_energy_error = 0.877317192962475, tree_depth = 2, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 1.4065827067155343, hamiltonian_energy = 4.222064306595383, hamiltonian_energy_error = -0.405539675752113, max_hamiltonian_energy_error = -0.41249022695117255, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9420519522040796, log_density = -0.2812307420983089, hamiltonian_energy = 1.9210438086758506, hamiltonian_energy_error = 0.09383542662127486, max_hamiltonian_energy_error = 0.10147649414713955, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8394961505022541, log_density = 0.1562279300338929, hamiltonian_energy = 5.330694856292548, hamiltonian_energy_error = -0.11483695451727183, max_hamiltonian_energy_error = 0.6718999459434816, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9676725504394158, log_density = 1.4442164261624946, hamiltonian_energy = 1.9073085304470383, hamiltonian_energy_error = -0.05548764080205615, max_hamiltonian_energy_error = -0.09774673591595917, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8541631825300122, log_density = -0.08268467292406179, hamiltonian_energy = 1.3594018629689637, hamiltonian_energy_error = 0.17267975837762495, max_hamiltonian_energy_error = 0.28752019375408366, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9845997727252734, log_density = 0.3031313635637476, hamiltonian_energy = 1.2694046344574232, hamiltonian_energy_error = 0.00021148574047780144, max_hamiltonian_energy_error = 0.07419215322717543, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9927395631885169, log_density = 0.6168846800519479, hamiltonian_energy = 0.8290096878849142, hamiltonian_energy_error = -5.147680142014721e-5, max_hamiltonian_energy_error = -0.08661240799861614, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9957645898898193, log_density = 1.5482388084909733, hamiltonian_energy = -0.005472062188861093, hamiltonian_energy_error = -0.014324247898067188, max_hamiltonian_energy_error = -0.06758175008980594, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9925416361345011, log_density = 0.7822673484888405, hamiltonian_energy = -0.496134268128086, hamiltonian_energy_error = 0.03517176230479585, max_hamiltonian_energy_error = -0.04210268657782157, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9884709106731736, log_density = 1.2114620529481854, hamiltonian_energy = 0.004742010260053275, hamiltonian_energy_error = 0.014207599947873462, max_hamiltonian_energy_error = -0.07212946428892697, tree_depth = 4, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8951392360113458, log_density = -0.5634928585766303, hamiltonian_energy = 2.6716023872222268, hamiltonian_energy_error = 0.16538009737111592, max_hamiltonian_energy_error = 0.23460261712653052, tree_depth = 3, numerical_error = false, step_size = 0.1288625597640232, nom_step_size = 0.1288625597640232, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/process_decomposition/script.jl\"","category":"page"},{"location":"examples/process_decomposition/#Process-Decomposition","page":"Process Decomposition","title":"Process Decomposition","text":"","category":"section"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"using AbstractGPs\nusing Plots\nusing Random\nusing Stheno","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Define our model. Define a distribution over f₁, f₂, and f₃, where f₃(x) = f₁(x) + f₂(x).","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f = @gppp let\n    f1 = GP(randn(), SEKernel())\n    f2 = GP(SEKernel())\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Randomly sample N₁ and N₃ locations at which to observe f₁ and f₃ respectively.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"rng, N1, N3 = MersenneTwister(123546), 10, 11;\nx1 = GPPPInput(:f1, sort(rand(rng, N1) * 10));\nx3 = GPPPInput(:f3, sort(rand(rng, N3) * 10));\nx = BlockData(x1, x3);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Generate some toy of f1 and f3, y1 and y3 respectively.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"fx = f(x);\ny = rand(rng, f(x));\ny1, y3 = split(x, y);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Compute the posterior processes.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f_post = posterior(fx, y);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Define some plotting stuff.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Np, S = 500, 25;\nxp_ = range(-2.5, stop=12.5, length=Np);\nxp = BlockData(GPPPInput(:f1, xp_), GPPPInput(:f2, xp_), GPPPInput(:f3, xp_));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Sample jointly from the posterior over each process.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f_samples = rand(rng, f_post(xp, 1e-9), S);\nf′1_xp, f′2_xp, f′3_xp = split(xp, f_samples);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Compute posterior marginals.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"ms = marginals(f_post(xp, 1e-9));\nf′1_m, f′2_m, f′3_m = split(xp, mean.(ms));\nf′1_s, f′2_s, f′3_s = split(xp, std.(ms));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot results","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"posterior_plot = plot(ylims=(-5.0, 5.0));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f1.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′1_m; ribbon=3f′1_s, color=:red, label=\"f1\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′1_xp; color=:red, label=\"\", alpha=0.2, linewidth=1);\nscatter!(posterior_plot, x1.x, y1;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f2.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′2_m; ribbon=3f′2_s, color=:green, label=\"f2\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′2_xp; color=:green, label=\"\", alpha=0.2, linewidth=1)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f3","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′3_m; ribbon=3f′3_s, color=:blue, label=\"f3\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′3_xp; color=:blue, label=\"\", alpha=0.2, linewidth=1);\nscatter!(posterior_plot, x3.x, y3;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/time_varying_blr/script.jl\"","category":"page"},{"location":"examples/time_varying_blr/#Time-Varying-Bayesian-Linear-Regression","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"","category":"section"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"(Image: )","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"using AbstractGPs\nusing ColorTypes\nusing FixedPointNumbers\nusing Plots\nusing Random\nusing Stheno","category":"page"},{"location":"examples/time_varying_blr/#Define-and-inspect-our-model","page":"Time-Varying Bayesian Linear Regression","title":"Define and inspect our model","text":"","category":"section"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"g1 and g2 are time-varying basis functions. In a real application, these might be specified by data.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"w1 and w2 are the time-varying basis functions for these bases, specified by slowly varying GPs.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f is the prediction of the regressor.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"y is the addition of f and rough temporally-correlated \"noise\".","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f = @gppp let\n    g1 = x->x / 4\n    g2 = cos\n    w1 = stretch(GP(SEKernel()), 0.2)\n    w2 = stretch(GP(SEKernel()), 1)\n    f = g1 * w1 + g2 * w2\n    y = f + 0.3 * GP(Matern12Kernel())\nend;","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Sample from the prior from plotting and for conditioning.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"rng, N, Nplot, S = MersenneTwister(123456), 250, 500, 100;\nx = GPPPInput(:y, sort(rand(rng, N) * 10));\nŷ = rand(rng, f(x));","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Compute the posterior.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f′ = posterior(f(x), ŷ);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Sample from the posterior and write to file.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"xp_ = range(-2.5, stop=12.5, length=Nplot);\nxp_w1 = GPPPInput(:w1, xp_);\nxp_w2 = GPPPInput(:w2, xp_);\nxp_y = GPPPInput(:y, xp_);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Generate joint posterior samples.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"xp = BlockData(xp_w1, xp_w2, xp_y);\nf′_xp = rand(rng, f′(xp, 1e-9), S);\nw1′s, w2′s, y′s = split(xp, f′_xp);","category":"page"},{"location":"examples/time_varying_blr/#Plot-results","page":"Time-Varying Bayesian Linear Regression","title":"Plot results","text":"","category":"section"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"gr();\nposterior_plot = plot(\n    legend=:topleft,\n    legendfont=Plots.Font(\n        \"sans-serif\",\n        10,\n        :hcenter,\n        :vcenter,\n        0.0,\n        RGB{Normed{UInt8, 8}}(0.0,0.0,0.0)\n    ),\n    background_color_legend=RGBA(1, 1, 1, 0),\n    foreground_color_legend=RGBA(1, 1, 1, 0),\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over w1.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_w1); color=:green, label=\"w1\");\nplot!(posterior_plot, xp_, w1′s; color=:green, label=\"\", linewidth=1, alpha=0.2);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over w2.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_w2); color=:magenta, label=\"w2\");\nplot!(posterior_plot, xp_, w2′s; color=:magenta, label=\"\", linewidth=1, alpha=0.2);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot x1 and x2","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, (x->x / 4).(xp_);\n    linecolor=:black,\n    linewidth=1.0,\n    label=\"x / 4\",\n);\nplot!(posterior_plot, xp_, cos.(xp_);\n    linecolor=:black,\n    linewidth=1.0,\n    linestyle=:dash,\n    label=\"cos\",\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot samples against which we're regressing.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"scatter!(posterior_plot, x.x, ŷ;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over y.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_y); color=:blue, label=\"y\");\nplot!(posterior_plot, xp_, y′s; color=:blue, label=\"\", linewidth=1, alpha=0.2);\n\nposterior_plot","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"(Image: )","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"}]
}
