var documenterSearchIndex = {"docs":
[{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/gppp_and_pseudo_points/script.jl\"","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Pseudo-Points-in-Additive-Regression","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"using AbstractGPs, Plots, Random, Stheno\ngr();","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Define model.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"σ², ω, T = 1e0, 1.0, 25.0;\nf = @gppp let\n    f1 = periodic(GP(SEKernel()), ω)\n    f2 = GP(0.1 * SEKernel())\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Sample from marginal process to generate toy data.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"rng = MersenneTwister(123456);\nS = 25;\nx = GPPPInput(:f3, range(0.0, T; length=300));\nfx = f(x, σ²);\ny = rand(rng, fx);\n\nxp_ = range(-2.5, T + 2.5; length=500);","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plots for stuff.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"f₁′_plot, f₂′_plot, f₃′_plot = plot(), plot(), plot();\n\nposterior_plot = plot();\napprox_in_marginal_posterior_plot = plot();\napprox_in_latents_posterior_plot = plot();","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Exact-Inference","page":"Pseudo-Points in Additive Regression","title":"Exact Inference","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute the posterior processes, sample from them, and compute marginals.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"@show logpdf(fx, y)\nf′ = posterior(fx, y);\nxp_f1 = GPPPInput(:f1, xp_);\nxp_f2 = GPPPInput(:f2, xp_);\nxp_f3 = GPPPInput(:f3, xp_);\nxp = BlockData(xp_f1, xp_f2, xp_f3);\nf′xp = rand(f′(xp, 1e-9), S);\nf₁′xp, f₂′xp, f₃′xp = split(xp, f′xp);\n\nitems = [\n    (xp_f1, f₁′xp, :red, \"exact\", f₁′_plot),\n    (xp_f2, f₂′xp, :red, \"\", f₂′_plot),\n    (xp_f3, f₃′xp, :red, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"logpdf(fx, y) = -465.99349014012654\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot posterior marginals and samples.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, samples, colour, name, plt) in items\n    plot!(plt, xp_, f′(x); fillalpha=0.2, color=colour, label=name);\n    plot!(plt, xp_, samples; alpha=0.3, color=colour, label=\"\", linewidth=1);\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n)","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Approximate-inference-with-pseudo-data-in-f3","page":"Pseudo-Points in Additive Regression","title":"Approximate inference with pseudo-data in f3","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute approximate posterior process.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"M3 = 25;\nz = GPPPInput(:f3, collect(range(0, T; length=M3)));\nu = f(z, 1e-9);\nf′_approx = posterior(VFE(u), fx, y);\n\n@show elbo(VFE(u), fx, y);\n\nitems = [\n    (xp_f1, :green, \"Z in f3\", f₁′_plot),\n    (xp_f2, :green, \"\", f₂′_plot),\n    (xp_f3, :green, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"elbo(VFE(u), fx, y) = -478.26616160163064\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Posterior marginal variance.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, colour, name, plt) in items\n    plot!(plt, xp_, f′_approx(x); fillalpha=0.3, fillcolor=colour, label=name);\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations and pseudo-input locations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(approx_in_marginal_posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);\nscatter!(approx_in_marginal_posterior_plot, z.x, zeros(M3);\n    markercolor=:black,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z\",\n)","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/#Perform-approximate-inference-by-placing-pseudo-data-in-f1-and-f2","page":"Pseudo-Points in Additive Regression","title":"Perform approximate inference by placing pseudo-data in f1 and f2","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Compute approximate posterior process.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"M1, M2 = 15, 10;\nz1 = GPPPInput(:f1, collect(range(0.0, T; length=M1)));\nz2 = GPPPInput(:f2, collect(range(0.0, T; length=M2)));\nz12 = BlockData(z1, z2);\nu12 = f(z12, 1e-9);\nf′_approx_12 = posterior(VFE(u12), fx, y);\n\n@show elbo(VFE(u12), fx, y);\n\nitems = [\n    (xp_f1, :blue, \"Z in f1 and f2\", f₁′_plot),\n    (xp_f2, :blue, \"\", f₂′_plot),\n    (xp_f3, :blue, \"\", f₃′_plot),\n];","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"elbo(VFE(u12), fx, y) = -477.4916323879492\n","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot posterior marginals.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"for (x, colour, name, plt) in items\n    plot!(plt, xp_, f′_approx_12(x); fillalpha=0.3, fillcolor=colour, label=name)\nend","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"Plot observations and pseudo-input locations.","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"scatter!(approx_in_latents_posterior_plot, x.x, y;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);\nscatter!(approx_in_latents_posterior_plot, z1.x, zeros(M1);\n    markercolor=:black,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z₁\",\n);\nscatter!(approx_in_latents_posterior_plot, z2.x, zeros(M2);\n    markercolor=:magenta,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Z₂\",\n)","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/#The-end-result","page":"Pseudo-Points in Additive Regression","title":"The end result","text":"","category":"section"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"plot(f₁′_plot, f₂′_plot, f₃′_plot; layout=(3, 1))","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"(Image: )","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"","category":"page"},{"location":"examples/gppp_and_pseudo_points/","page":"Pseudo-Points in Additive Regression","title":"Pseudo-Points in Additive Regression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/custom_affine_transformations/script.jl\"","category":"page"},{"location":"examples/custom_affine_transformations/#Custom-Affine-Transformations","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"","category":"section"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"(Image: )","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"This page explains how to implement your own affine transformation operations by way of example. You can add your own custom affine transformations into Stheno using the same mechanism as all of the existing transformations (addition, multiplication, composition, etc). First, load up the relevant packages.","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno","category":"page"},{"location":"examples/custom_affine_transformations/#The-Affine-Transformation","page":"Custom Affine Transformations","title":"The Affine Transformation","text":"","category":"section"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"Suppose that, for some reason, you wish to implement the affine transformation of a single process f given by (Af)(x) = f(x) + f(x + 3) - 2. In order to define this transformation, first create a function which accepts f and returns a DerivedGP:","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"using Stheno: AbstractGP, DerivedGP, SthenoAbstractGP\n\nA(f::SthenoAbstractGP) = DerivedGP((A, f), f.gpc)","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"A (generic function with 1 method)","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"The first argument to DerivedGP contains A itself and any data needed to fully specify the process results from this transformation. In this case the only piece of information required is f, but really any data can be put in this argument. For example, if we wished to replace the translation of -3 by a parameter, we could do so, and make it a part of this first argument.","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"The second argument is the book-keeping object that needs to be passed around in order to know how to compute covariances properly. It is because of this argument that we restrict the accepted GPs to be SthenoAbstractGP, as we can safely assume that these have a gpc field.","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"We'll now define a type alias in order to simplify some methods later on:","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"const A_args = Tuple{typeof(A), SthenoAbstractGP};","category":"page"},{"location":"examples/custom_affine_transformations/#Most-Important-Methods","page":"Custom Affine Transformations","title":"Most Important Methods","text":"","category":"section"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"We must now define methods of three functions on A_args: mean, cov, and var. First the mean – this method should accept both an A_args and an AbstracVector, and return the mean vector of A(f) at x. Some textbook calculations reveal that this is","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"Stheno.mean((A, f)::A_args, x::AbstractVector) = mean(f, x) .+ mean(f, x .+ 3) .- 2","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"The first argument here is always going to be precisely the tuple of arguments passed into the DerivedGP constructor above. You can assume that you can compute any statistics of f that the AbstractGPs API provides.","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"We now turn our attention to cov. The first method we consider is cov(args::A_args, x::AbstractVector, y::AbstractVector), which should return the cross-covariance matrix between all pairs of points in x and y under the transformed process, A(f). Again, some standard manipulations reveal that this covariance is given by","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"function Stheno.cov((A, f)::A_args, x::AbstractVector, y::AbstractVector)\n    return cov(f, x, y) + cov(f, x, y .+ 3) + cov(f, x .+ 3, y) + cov(f, x .+ 3, y .+ 3)\nend","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"The last substantially new method to implement is cov(args::A_args, g::AbstractGP, x::AbstractVector, y::AbstractVector), which should return the cross-covariance matrix between A(f) at x and g at y. When implementing this method, you can assume you have access to functions like cov(f, g, x, y) etc:","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"function Stheno.cov((A, f)::A_args, g::AbstractGP, x::AbstractVector, y::AbstractVector)\n    return cov(f, g, x, y) + cov(f, g, x .+ 3, y)\nend","category":"page"},{"location":"examples/custom_affine_transformations/#Additional-(Required)-Methods","page":"Custom Affine Transformations","title":"Additional (Required) Methods","text":"","category":"section"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"There are a number of other methods that you should implement. These are all just special cases or slight modifications of the three methods above, and should be straightforward to implement given that you've implemented the above methods.","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"First, lets build a GPPP containing an instance of our transformation so that some properties can be verified. The definition of the methods being implemented is demonstrated by checking an equality after defining each method.","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"gppp = @gppp let\n    f = GP(SEKernel())\n    Af = A(f)\nend","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"Stheno.GaussianProcessProbabilisticProgramme{NamedTuple{(:f, :Af), Tuple{Stheno.AtomicGP{AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}}, Stheno.DerivedGP{Tuple{typeof(Main.##291.A), Stheno.AtomicGP{AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}}}}}}}((f = Stheno.AtomicGP{AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}}(AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}(AbstractGPs.ZeroMean{Float64}(), Squared Exponential Kernel (metric = Distances.Euclidean(0.0))), 1, Stheno.GPC(2)), Af = Stheno.DerivedGP{Tuple{typeof(Main.##291.A), Stheno.AtomicGP{AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}}}}((Main.##291.A, Stheno.AtomicGP{AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}}(AbstractGPs.GP{AbstractGPs.ZeroMean{Float64}, KernelFunctions.SqExponentialKernel{Distances.Euclidean}}(AbstractGPs.ZeroMean{Float64}(), Squared Exponential Kernel (metric = Distances.Euclidean(0.0))), 1, Stheno.GPC(2))), 2, Stheno.GPC(2))), Stheno.GPC(2))","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"Also create some input vectors.","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"x_f = GPPPInput(:f, randn(3))\ny_f = GPPPInput(:f, randn(6))\nx_Af = GPPPInput(:Af, randn(3))\ny_Af = GPPPInput(:Af, randn(6))\nz_Af = GPPPInput(:Af, randn(3))","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"3-element Stheno.GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:Af, -0.12944102919956615)\n (:Af, -0.4872921995905213)\n (:Af, 0.5663429402318824)","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"The covariance matrix at a single pair of inputs:","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"function Stheno.cov((A, f)::A_args, x::AbstractVector)\n    return cov(f, x) + cov(f, x, x .+ 3) + cov(f, x .+ 3, x) + cov(f, x .+ 3)\nend\n\ncov(gppp, x_Af, x_Af) ≈ cov(gppp, x_Af)","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"true","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"The diagonal of the covariance matrix at a single pair of inputs:","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"function Stheno.var((A, f)::A_args, x::AbstractVector)\n    return var(f, x) + var(f, x .+ 3) + var(f, x, x .+ 3) + var(f, x .+ 3, x)\nend\n\nvar(gppp, x_Af) ≈ diag(cov(gppp, x_Af))","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"true","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"The diagonal of the cross-covariance matrix for equal-length inputs:","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"function Stheno.var((A, f)::A_args, x::AbstractVector, y::AbstractVector)\n    return var(f, x, y) + var(f, x, y .+ 3) + var(f, x .+ 3, y) + var(f, x .+ 3, y .+ 3)\nend\n\nvar(gppp, x_Af, z_Af) ≈ diag(cov(gppp, x_Af, z_Af))","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"true","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"The diagonal of the cross-covariance between different processes for equal-length inputs:","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"function Stheno.var((A, f)::A_args, g::AbstractGP, x::AbstractVector, y::AbstractVector)\n    return var(f, g, x, y) + var(f, g, x .+ 3, y)\nend\n\nvar(gppp, x_Af, x_f) ≈ diag(cov(gppp, x_Af, x_f))","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"true","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"cov and var between processes when Af's arguments are the second argument, rather than the first:","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"function Stheno.cov(g::AbstractGP, (A, f)::A_args, x::AbstractVector, y::AbstractVector)\n    return cov(g, f, x, y) + cov(g, f, x, y .+ 3)\nend\n\ncov(gppp, x_f, x_Af) ≈ cov(gppp, x_Af, x_f)'\n\nfunction Stheno.var(g::AbstractGP, (A, f)::A_args, x::AbstractVector, y::AbstractVector)\n    return var(g, f, x, y) + var(g, f, x, y .+ 3)\nend\n\nvar(gppp, x_f, x_Af) ≈ var(gppp, x_Af, x_f)","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"true","category":"page"},{"location":"examples/custom_affine_transformations/#Checking-Your-Implementation","page":"Custom Affine Transformations","title":"Checking Your Implementation","text":"","category":"section"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"Given the numerous methods above, it's a really good idea to utilise the functionality provided by AbstractGPs.jl to check that you've implemented them all consistently with one another.","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"using AbstractGPs.TestUtils: test_internal_abstractgps_interface\nusing Random\n\nrng = MersenneTwister(123456);\ntest_internal_abstractgps_interface(rng, gppp, x_Af, y_Af);\ntest_internal_abstractgps_interface(rng, gppp, x_Af, y_f);\ntest_internal_abstractgps_interface(rng, gppp, x_f, y_Af);","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"Roughly speaking, provided that you've implemented the first three methods correctly, this test ought to catch any glaring problems if you've made a mistake in the rest. If course, it won't check that your implementations of the first three methods correctly implement the desired affine transformation, so you should write whatever tests you need in order to convince yourself of that.","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"","category":"page"},{"location":"examples/custom_affine_transformations/","page":"Custom Affine Transformations","title":"Custom Affine Transformations","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/quadrature-convolution/script.jl\"","category":"page"},{"location":"examples/quadrature-convolution/#Convolution-via-Quadrature","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"","category":"section"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"(Image: )","category":"page"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"This example implements the convolution of a GP against the function ϕ(x) = exp(-x^2), i.e.: (Lf)(x′) = ∫ ϕ(x′ - x) f(x) dx It does this approximately using Gauss-Hermite quadrature, the implementation for which is provided by FastGaussQuadrature.jl. The implementation is limited to GPs whose index set is the real line.","category":"page"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"using AbstractGPs\nusing AbstractGPsMakie\nusing CairoMakie\nusing FastGaussQuadrature\nusing KernelFunctions\nusing LaTeXStrings\nusing LinearAlgebra\nusing Literate\nusing Random\nusing Stheno\n\nimport AbstractGPs: AbstractGP, mean, cov, var\n\nusing CairoMakie: RGB\nusing Stheno: DerivedGP","category":"page"},{"location":"examples/quadrature-convolution/#Define-new-affine-transformation","page":"Convolution via Quadrature","title":"Define new affine transformation","text":"","category":"section"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"The mean function is assumed to have zero-mean. The cross-kernel (function of x′) is ∫ ϕ(x′ - x) k(x, y) dx, and the kernel (function of x′ and y′) is ∫ ϕ(x′ - x) k(x, y) ϕ(y′ - y) dx dy.","category":"page"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"convolve(f::AbstractGP) = DerivedGP((convolve, f), f.gpc)\n\nconst conv_args = Tuple{typeof(convolve), AbstractGP}\n\nmean((_, f)::conv_args, x::AbstractVector{<:Real}) = zeros(length(x))\ncov(args::conv_args, x::AbstractVector{<:Real}) = cov(args, x, x)\nvar(args::conv_args, x::AbstractVector{<:Real}) = var(args, x, x)\nfunction var(args::conv_args, x::AbstractVector{<:Real}, x′::AbstractVector{<:Real})\n    return diag(cov(args, x, x′))\nend\n\n_quadrature(f, xs, ws) = sum(map((x, w) -> w * f(x), xs, ws))\n\nfunction cov((_, f)::conv_args, x::AbstractVector{<:Real}, x′::AbstractVector{<:Real})\n\n    num_points = 15\n    xs, ws = gausshermite(num_points)\n\n    cols_of_C = map(x′) do x′n\n        col_elements = map(x) do xn\n            _quadrature(\n                x -> _quadrature(x′ -> only(cov(f, [xn - x], [x′n - x′])), xs, ws), xs, ws\n            )\n        end\n    end\n    return reduce(hcat, cols_of_C)\nend\n\nfunction cov(\n    (_, f)::conv_args,\n    f′::AbstractGP,\n    x::AbstractVector{<:Real},\n    x′::AbstractVector{<:Real},\n)\n    num_points = 15\n    xs, ws = gausshermite(num_points)\n\n    cols_of_C = map(x′) do x′n\n        col_elements = map(x) do xn\n            _quadrature(x -> only(cov(f, [xn - x], [x′n])), xs, ws)\n        end\n    end\n    return reduce(hcat, cols_of_C)\nend\n\nfunction cov(\n    f′::AbstractGP,\n    args::conv_args,\n    x::AbstractVector{<:Real},\n    x′::AbstractVector{<:Real},\n)\n    return collect(transpose(cov(args, f′, x′, x)))\nend","category":"page"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"cov (generic function with 86 methods)","category":"page"},{"location":"examples/quadrature-convolution/#Some-plotting-config","page":"Convolution via Quadrature","title":"Some plotting config","text":"","category":"section"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"pt_per_unit() = 1\n\nfont_size() = 12\n\nlisting_font_size() = 10\n\npage_width() = 6\n\nsize_from_inches(; height=4, width=4) = 72 .* (width, height)\n\nset_theme!(font=\"Times\")\n\nfunction colours()\n    return Dict(\n        :blue => RGB(0/255, 107/255, 164/255),\n        :cyan => RGB(75/255, 166/255, 251/255),\n        :red => RGB(200/255, 82 / 255, 0 / 255),\n        :pink => RGB(169/255, 90/255, 161/255),\n        :black => RGB(0.0, 0.0, 0.0),\n        :orange => RGB(245/255, 121/255, 58/255),\n    )\nend\n\nshapes() = [:utriangle, :diamond, :square, :circle, :cross]\n\nband_alpha() = 0.3\nsample_alpha() = 0.2\npoint_alpha() = 1.0\n\n\nfunction plot_band!(ax, x_plot, fx, colour, label)\n    ms = marginals(fx)\n    symband!(\n        ax, x_plot, mean.(ms), std.(ms);\n        bandscale=3,\n        color=(colours()[colour], 0.5 * band_alpha()),\n        label=label,\n    )\nend\n\nfunction plot_sample!(ax, x_plot, fx, colour)\n    gpsample!(\n        ax, x_plot, fx;\n        samples=4, color=(colours()[colour], sample_alpha()),\n    )\nend\n\nfunction plot_gp!(ax, x_plot, fx, colour, label)\n    plot_band!(ax, x_plot, fx, colour, label)\n    plot_sample!(ax, x_plot, fx, colour)\nend","category":"page"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"plot_gp! (generic function with 1 method)","category":"page"},{"location":"examples/quadrature-convolution/#Plot-some-stuff","page":"Convolution via Quadrature","title":"Plot some stuff","text":"","category":"section"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"Build a GPPP in which one GP is a convolution of the other, using the convolve transformation defined above.","category":"page"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"let\n    f = @gppp let\n        f = GP(with_lengthscale(Matern52Kernel(), 0.5))\n        g = convolve(f)\n    end\n\n    rng = Xoshiro(123)\n    x_f_obs = GPPPInput(:f, rand(rng, 2) .+ 1)\n    x_g_obs = GPPPInput(:g, -rand(rng, 2) .- 1)\n    x_obs = vcat(x_f_obs, x_g_obs)\n    y = rand(Xoshiro(123), f(x_obs, 1e-3))\n    y_f, y_g = split(x_obs, y)\n    f_post = posterior(f(x_obs, 1e-3), y)\n\n    x_plot = range(-5.0, 5.0; length=100)\n    x_f = GPPPInput(:f, x_plot)\n    x_g = GPPPInput(:g, x_plot)\n    x = vcat(x_f, x_g)\n    fig = Figure()\n\n    # Plot posterior.\n    ax = Axis(fig[1, 1]; xlabel=L\"x\")\n    plot_gp!(ax, x_plot, f_post(x_f, 1e-6), :blue, \"f\")\n    plot_gp!(ax, x_plot, f_post(x_g, 1e-6), :orange, \"g\")\n    scatter!(ax, x_f_obs.x, y_f; color=colours()[:blue], markersize=7)\n    scatter!(ax, x_g_obs.x, y_g; color=colours()[:orange], markersize=7)\n\n    # Plot legend.\n    Legend(fig[1, 2], ax; orientation=:vertical)\n\n    fig\nend","category":"page"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"(Image: )","category":"page"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"","category":"page"},{"location":"examples/quadrature-convolution/","page":"Convolution via Quadrature","title":"Convolution via Quadrature","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples_note/#Notes-on-Examples","page":"Notes on Examples","title":"Notes on Examples","text":"","category":"section"},{"location":"examples_note/","page":"Notes on Examples","title":"Notes on Examples","text":"The examples demonstrate some of the things that can be achieved with Stheno.jl. They tend only to comprise inference given fixed hyper/kernel parameters, because any hyper/kernel parameters in these examples can be learned / inferred in the standard ways discussed in the Getting Started docs.","category":"page"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/differentiation/script.jl\"","category":"page"},{"location":"examples/differentiation/#Differentation","page":"Differentation","title":"Differentation","text":"","category":"section"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"(Image: )","category":"page"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"No one has yet got around to doing a reasonably performant and general implementation of differentiation in the JuliaGPs ecosystem. Here we provide a correct, albeit unbearably slow implementation of differentiation as an affine transformation in Stheno.jl using FiniteDifferences.jl. This implementation should be correct, however. The test_implementation function hopefully ensures that.","category":"page"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"The purpose of this example is to provide a template on which others could build.","category":"page"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"using AbstractGPs\nusing AbstractGPsMakie\nusing CairoMakie\nusing Distributions\nusing FiniteDifferences\nusing LinearAlgebra\nusing Random\nusing Stheno\nusing Test\n\nimport AbstractGPs: mean, cov, var\n\nusing AbstractGPs: AbstractGP\nusing AbstractGPs.TestUtils: test_internal_abstractgps_interface\nusing Stheno: DerivedGP\n\nderivative(f::AbstractGP) = DerivedGP((derivative, f), f.gpc)\n\n\nconst deriv_args = Tuple{typeof(derivative), AbstractGP}\n\nfunction mean((_, f)::deriv_args, x::AbstractVector{<:Real})\n    return zeros(length(x))\n    return ForwardDiff.derivative(α -> (mean(f, α * x)), 1.0)\nend\n\nfunction cov(args::deriv_args, x::AbstractVector{<:Real})\n    return cov(args, x, x)\nend\nfunction var((_, f)::deriv_args, x::AbstractVector{<:Real})\n    return var((derivative, f), x, x)\nend\n\nfunction cov((_, f)::deriv_args, x::AbstractVector{<:Real}, x′::AbstractVector{<:Real})\n    fdm = central_fdm(5, 1)\n    cols_of_C = map(x′) do x′n\n        col_elements = map(x) do xn\n            FiniteDifferences.grad(\n                fdm,\n                xn -> FiniteDifferences.grad(\n                    fdm,\n                    x′n -> cov(f, [xn], [x′n]),\n                    x′n,\n                ),\n                xn\n            )[1]\n        end\n    end\n    return reduce(hcat, cols_of_C)\nend\nfunction var((_, f)::deriv_args, x::AbstractVector{<:Real}, x′::AbstractVector{<:Real})\n    fdm = central_fdm(5, 1)\n    elements = map(x, x′) do xn, x′n\n        FiniteDifferences.grad(\n            fdm,\n            xn -> FiniteDifferences.grad(\n                fdm,\n                x′n -> cov(f, [xn], [x′n]),\n                x′n,\n            ),\n            xn\n        )[1]\n    end\n    return reduce(vcat, elements)\nend\n\nfunction cov(\n    (_, f)::deriv_args,\n    f′::AbstractGP,\n    x::AbstractVector{<:Real},\n    x′::AbstractVector{<:Real},\n)\n    fdm = central_fdm(5, 1)\n    cols_of_C = map(x′) do x′n\n        col_elements = map(x) do xn\n            FiniteDifferences.grad(\n                fdm,\n                xn -> cov(f, [xn], [x′n]),\n                xn,\n            )[1]\n        end\n    end\n    return reduce(hcat, cols_of_C)\nend\nfunction cov(\n    f::AbstractGP,\n    args::deriv_args,\n    x::AbstractVector{<:Real},\n    x′::AbstractVector{<:Real},\n)\n    return collect(cov(args, f, x′, x)')\nend\n\nfunction test_implementation()\n\n    # Specify model and inputs.\n    rng = MersenneTwister(123456)\n    f = @gppp let\n        f = GP(SEKernel())\n        df = derivative(f)\n    end\n    x1 = GPPPInput(:df, randn(rng, 7))\n    x2 = GPPPInput(:df, randn(rng, 6))\n    x3 = GPPPInput(:f, randn(rng, 5))\n\n    # Verify self-consistency.\n    test_internal_abstractgps_interface(rng, f, x1, x2)\n    test_internal_abstractgps_interface(rng, f, x1, x3)\n    test_internal_abstractgps_interface(rng, f, x3, x2)\n\n    # Check that we can approximately differentiate simple trigonometric functions.\n    x_obs = collect(range(-3.0, 3.0; length=25))\n    x_pred = collect(range(-2.5, 2.5; length=25))\n    x_df_pred = GPPPInput(:df, x_pred)\n    let\n        f_post = posterior(f(GPPPInput(:f, x_obs), 1e-12), map(sin, x_obs))\n        @test map(cos, x_pred) ≈ mean(f_post, x_df_pred) rtol=1e-5\n        @test map(cos, x_pred) ≈ rand(f_post(x_df_pred, 1e-8)) rtol=1e-3\n    end\n    let\n        f_post = posterior(f(GPPPInput(:f, x_obs), 1e-12), map(cos, x_obs))\n        @test -map(sin, x_pred) ≈ mean(f_post, GPPPInput(:df, x_pred)) rtol=1e-5\n        @test -map(sin, x_pred) ≈ rand(f_post(x_df_pred, 1e-8)) rtol=1e-3\n    end\nend\ntest_implementation()","category":"page"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"Test Passed\n  Expression: ≈(-(map(sin, x_pred)), rand(f_post(x_df_pred, 1.0e-8)), rtol = 0.001)\n   Evaluated: ≈([0.5984721441039564, 0.751231555699293, 0.8715031914412654, 0.9540857816096938, 0.9954079577517649, 0.9936827001581868, 0.9489846193555862, 0.863246729498086, 0.7401768531960371, 0.5850972729404622, 0.40471456356112473, 0.20682955954864105, -0.0, -0.20682955954864105, -0.40471456356112473, -0.5850972729404622, -0.7401768531960371, -0.863246729498086, -0.9489846193555862, -0.9936827001581868, -0.9954079577517649, -0.9540857816096938, -0.8715031914412654, -0.751231555699293, -0.5984721441039564], [0.5983681090025151, 0.7513087615801006, 0.8715448521941227, 0.9541949632391246, 0.9954598748105563, 0.9938067287111861, 0.9489570691848535, 0.86330784093226, 0.7401403619202516, 0.5852796397417465, 0.40464828315046286, 0.2069158250679706, -0.00011971321686960296, -0.20672958306998576, -0.4047490548519584, -0.5850220062744906, -0.740181061758201, -0.8632956342555448, -0.9488609413308087, -0.9938741733938484, -0.9954366549224873, -0.9541289756935216, -0.8714801851801606, -0.7511731430156127, -0.5986081716891999]; rtol = 0.001)","category":"page"},{"location":"examples/differentiation/#Example:-Inference-given-observations-of-process-and-its-derivative","page":"Differentation","title":"Example: Inference given observations of process and its derivative","text":"","category":"section"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"using CairoMakie: RGB\n\nfunction colours()\n    return Dict(\n        :blue => RGB(0/255, 107/255, 164/255),\n        :cyan => RGB(75/255, 166/255, 251/255),\n        :red => RGB(200/255, 82 / 255, 0 / 255),\n        :pink => RGB(169/255, 90/255, 161/255),\n        :black => RGB(0.0, 0.0, 0.0),\n        :orange => RGB(245/255, 121/255, 58/255),\n    )\nend\n\nband_alpha() = 0.3\nsample_alpha() = 0.2\npoint_alpha() = 1.0\n\nlet\n    # Simple two-component model.\n    f = @gppp let\n        f = GP(SEKernel())\n        df = derivative(f)\n    end\n\n    # Specify inputs at which to make observations.\n    rng = MersenneTwister(123456)\n    x_f = GPPPInput(:f, rand(rng, Uniform(-5.0, 5.0), 10))\n    x_df = GPPPInput(:df, rand(rng, Uniform(-5.0, 5.0), 10))\n    x = BlockData(x_f, x_df)\n\n    # Build observations from simple functions.\n    y_f = map(sin, x_f.x)\n    y_df = map(cos, x_df.x)\n    y = vcat(y_f, y_df)\n\n    # Build posterior and visualise it.\n    f_post = posterior(f(x, 1e-12), y)\n    x_plot = collect(range(-6.0, 6.0; length=150))\n\n    fig = Figure()\n    ax = Axis(fig[1, 1])\n    xlims = (-5.1, 5.1)\n    ylims = (-2, 2)\n\n    let\n        f_xf = f_post(GPPPInput(:f, x_plot), 1e-6)\n        ms = marginals(f_xf)\n        symband!(\n            ax, x_plot, mean.(ms), std.(ms);\n            bandscale=3, color=(colours()[:blue], band_alpha()),\n        )\n        gpsample!(\n            ax, x_plot, f_xf;\n            samples=10, color=(colours()[:blue], sample_alpha()),\n        )\n        scatter!(ax, x_f.x, y_f; color=(colours()[:blue], point_alpha()), label=\"f\")\n    end\n\n    let\n        f_xdf = f_post(GPPPInput(:df, x_plot), 1e-6)\n        ms = marginals(f_xdf)\n        symband!(\n            ax, x_plot, mean.(ms), std.(ms);\n            bandscale=3, color=(colours()[:orange], band_alpha()),\n        )\n        gpsample!(\n            ax, x_plot, f_xdf;\n            samples=10, color=(colours()[:orange], sample_alpha()),\n        )\n        scatter!(ax, x_df.x, y_df; color=(colours()[:orange], point_alpha()), label=\"df\")\n    end\n\n    axislegend(ax; position=:rt)\n    xlims!(ax, xlims)\n    ylims!(ax, ylims)\n\n    fig\nend","category":"page"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"(Image: )","category":"page"},{"location":"examples/differentiation/#Example:-Integration-via-Antiderivatives","page":"Differentation","title":"Example: Integration via Antiderivatives","text":"","category":"section"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"let\n    # Build a model in which we place a prior over the integral, and differentiate it\n    # to obtain the process of which to compute the integral.\n    f = @gppp let\n        F = GP(SEKernel())\n        f = derivative(F)\n    end\n\n    # Build inputs. Integrate from -5.1.\n    rng = MersenneTwister(123456)\n    x_F = GPPPInput(:F, [-5.1])\n    x_f = GPPPInput(:f, rand(rng, Uniform(-5.0, 5.0), 20))\n    x = BlockData(x_F, x_f)\n\n    # Build observations from simple functions. We know that the integral is 0 at -5.1.\n    y_F = [0.0]\n    y_f = map(sin, x_f.x)\n    y = vcat(y_F, y_f)\n\n    # Build posterior and visualise it.\n    f_post = posterior(f(x, 1e-6), y)\n    x_plot = collect(range(-6.0, 6.0; length=150))\n\n    fig = Figure()\n    ax = Axis(fig[1, 1])\n    xlims = (-5.1, 5.1)\n    ylims = (-3, 3)\n\n    let\n        f_xf = f_post(GPPPInput(:f, x_plot), 1e-6)\n        ms = marginals(f_xf)\n        symband!(\n            ax, x_plot, mean.(ms), std.(ms);\n            bandscale=3, color=(colours()[:blue], band_alpha()),\n        )\n        gpsample!(\n            ax, x_plot, f_xf;\n            samples=10, color=(colours()[:blue], sample_alpha()),\n        )\n        scatter!(ax, x_f.x, y_f; color=(colours()[:blue], point_alpha()), label=\"f\")\n    end\n\n    let\n        f_xdf = f_post(GPPPInput(:F, x_plot), 1e-6)\n        ms = marginals(f_xdf)\n        symband!(\n            ax, x_plot, mean.(ms), std.(ms);\n            bandscale=3, color=(colours()[:orange], band_alpha()),\n        )\n        gpsample!(\n            ax, x_plot, f_xdf;\n            samples=10, color=(colours()[:orange], sample_alpha()),\n        )\n        scatter!(ax, x_F.x, y_F; color=(colours()[:orange], point_alpha()), label=\"F\")\n    end\n\n    axislegend(ax; position=:rt)\n    xlims!(ax, xlims)\n    ylims!(ax, ylims)\n\n    fig\nend","category":"page"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"(Image: )","category":"page"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"","category":"page"},{"location":"examples/differentiation/","page":"Differentation","title":"Differentation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"experimental_examples_notes/#Notes-on-Experimental-Examples","page":"Notes on Experimental Examples","title":"Notes on Experimental Examples","text":"","category":"section"},{"location":"experimental_examples_notes/","page":"Notes on Experimental Examples","title":"Notes on Experimental Examples","text":"These examples comprise things that sit on the edge of what is currently doable using Stheno.jl. Their purpose is to illustrate that a particular thing is possible to do with a little bit of work, despite it not currently being available as core functionality in Stheno.jl. For example, they typically involve implementing a new affine transformation, thereby extending the list of operations available for use in Stheno.jl, but they do it in a way that is not completely satisfactory, so it doesn't obviously make sense to include them as basic functionality in the package.","category":"page"},{"location":"experimental_examples_notes/","page":"Notes on Experimental Examples","title":"Notes on Experimental Examples","text":"If you are keen to contribute, this is a good place to look for interesting things to add – probably best to open an issue to discuss how a really solid implementation might look before opening a PR though.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"AtomicGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other AtomicGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising AtomicGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Each of these types implements the Internal AbstractGPs API.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for AtomicGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#AtomicGP","page":"Internals","title":"AtomicGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a AtomicGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = atomic(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for AtomicGPs in terms of the AbstractGP that they atomic. So if you want a particular behaviour, just make sure that the AbstractGP that you atomic has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = atomic(GP(mf, kf), gpc)\ng = atomic(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = atomic(GP(mf, kf), GPC())\ng = atomic(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and AtomicGPs. We describe the implemented transformations below. You can add additional transformations – see Custom Affine Transformations for an a worked example.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of AtomicGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using AtomicGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = atomic(GP(SEKernel()), gpc)\nf2 = atomic(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/sensor_fusion/script.jl\"","category":"page"},{"location":"examples/sensor_fusion/#Sensor-Fusion","page":"Sensor Fusion","title":"Sensor Fusion","text":"","category":"section"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"(Image: )","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"using AbstractGPs\nusing Plots\nusing Random\nusing Stheno","category":"page"},{"location":"examples/sensor_fusion/#Define-and-inspect-our-model","page":"Sensor Fusion","title":"Define and inspect our model","text":"","category":"section"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"rng = MersenneTwister(123456);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"In this example, f is an unknown real-valued function that we wish to infer. To achieve this, we have access to two sensors. The first returns noisy estimates of f, where we have been reliably informed by whoever designed the sensor that the mean of the noise is given by sin(x) - 5 + sqrt(abs(x)), and that it's variance is low (1e-2). How the designer estimated this function, and why a sensor might possibly have such a strange mean error, is beyond the scope of this example. The second returns biased measurements of f, where the bias is known to be 3.5. The model below specifies a model for this scenario.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"model = @gppp let\n\n    # Define a smooth latent process that we wish to infer.\n    f = GP(SEKernel())\n\n    # Define the two noise processes described.\n    noise1 = sqrt(1e-2) * GP(WhiteKernel()) + (x->sin.(x) .- 5.0 .+ sqrt.(abs.(x)))\n    noise2 = sqrt(1e-1) * GP(3.5, WhiteKernel())\n\n    # Define the processes that we get to observe.\n    y1 = f + noise1\n    y2 = f + noise2\nend;","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Generate some toy observations of y₁ and y₂.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"x1 = GPPPInput(:y1, sort(rand(rng, 3) * 10));\nx2 = GPPPInput(:y2, sort(rand(rng, 10) * 10));\nx = BlockData(x1, x2);\nŷ = rand(rng, model(x));\nŷ1, ŷ2 = split(x, ŷ);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Compute the posterior processes.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"model′ = posterior(model(x), ŷ);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Sample jointly from the posterior processes and compute posterior marginals.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"xp_ = range(-2.5, stop=12.5, length=500);\nxp_f = GPPPInput(:f, xp_);\nxp_y1 = GPPPInput(:y1, xp_);\nxp_y2 = GPPPInput(:y2, xp_);\nxp = BlockData(xp_f, xp_y1, xp_y2);\nmodel′_xp = rand(rng, model′(xp, 1e-9));\nf′xp, y1′xp, y2′xp = split(xp, model′_xp);","category":"page"},{"location":"examples/sensor_fusion/#Plot-results","page":"Sensor Fusion","title":"Plot results","text":"","category":"section"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"gr();\n\nposterior_plot = plot();","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over y1.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_y1); color=:red, label=\"y1\");\nplot!(posterior_plot, xp_, y1′xp; color=:red, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over y2.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_y2); color=:green, label=\"y2\");\nplot!(posterior_plot, xp_, y2′xp; color=:green, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot posterior over f.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"plot!(posterior_plot, xp_, model′(xp_f); color=:blue, label=\"Latent Function\");\nplot!(posterior_plot, xp_, f′xp; color=:blue, label=\"\", linewidth=1, linealpha=0.2);","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"Plot samples on which we conditioned.","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"scatter!(posterior_plot, x1.x, ŷ1;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Sensor 1\",\n);\nscatter!(posterior_plot, x2.x, ŷ2;\n    markercolor=:green,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.8,\n    label=\"Sensor 2\",\n);\n\nposterior_plot","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"(Image: )","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"","category":"page"},{"location":"examples/sensor_fusion/","page":"Sensor Fusion","title":"Sensor Fusion","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx_local = randn(5)\n\nx = BlockData(GPPPInput(:f1, x_local), GPPPInput(:f2, x_local), GPPPInput(:f3, x_local))\n\ny = rand(f(x, 1e-12))\n\nf1, f2, f3 = split(x, y)\n\nisapprox(f1 + f2, f3; rtol=1e-4)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPInput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect\nadditive_gp","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the DerivedGP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.additive_gp","page":"API","title":"Stheno.additive_gp","text":"additive_gp(fs)\n\nProduces the GP given by\n\nsum(fs[1](x[1]) + fs[2](x[2]) + ... + fs[D](x[D]))\n\nRequires that length(fs) is the same as the dimension of the inputs to be used.\n\n\n\n\n\nadditive_gp(fs, indices)\n\nfs should be a collection of GPs, and indices a collection of collections of integer indices. For example, indices might be something like [1:2, 3, 4:6], in which case fs would need to comprise exactly three elements. In general, this functions requires that length(fs) == length(indices).\n\nProduces the GP given by\n\nsum(fs[1](x[indices[1]]) + fs[2](x[indices[2]]) + ... + fs[D](x[indices[D]]))\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = atomic(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we make use of a variety of packages from the Julia ecosystem:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.02.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"19.869053634031758","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well. Constrained to be\n    # at least 1e-3.\n    s_noise = positive(0.1, exp, 1e-3),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-0.9162907691270586, exp, 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-1.6094379869399091, exp, 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(1.6094379094538682, exp, 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-1.490116130486996e-8, exp, 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-2.312635428847547, exp, 0.001))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     1.010163e+01     3.164906e+01\n * time: 0.026924848556518555\n     1    -1.480927e+01     1.418581e+01\n * time: 1.683579921722412\n     2    -1.822412e+01     7.177132e+00\n * time: 1.6895639896392822\n     3    -1.895326e+01     4.943694e+00\n * time: 1.700011968612671\n     4    -1.953685e+01     2.823156e+00\n * time: 1.7067668437957764\n     5    -1.971615e+01     1.479874e+00\n * time: 1.7140028476715088\n     6    -1.973362e+01     1.031007e+00\n * time: 1.7212538719177246\n     7    -1.975830e+01     4.338249e-01\n * time: 1.7279448509216309\n     8    -1.976396e+01     5.266994e-02\n * time: 1.73642897605896\n     9    -1.976420e+01     6.223780e-03\n * time: 1.7483818531036377\n    10    -1.976420e+01     2.677650e-04\n * time: 1.7813539505004883\n    11    -1.976420e+01     8.805559e-06\n * time: 1.7870688438415527\n    12    -1.976420e+01     1.047478e-07\n * time: 1.792794942855835\n    13    -1.976420e+01     9.253668e-11\n * time: 1.8013570308685303\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -0.8697297334962092\n -1.385469147694353\n  1.67948646615459\n -0.13572926456869608\n -2.227905124646003","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.4),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-0.8697297334962092, -1.385469147694353, 1.67948646615459, -0.13572926456869608, -2.227905124646003], [-0.8697297334962092, -1.385469147694353, 1.67948646615459, -0.13572926456869608, -2.227905124646003], [-0.7242155883121733, -1.2559884218502477, 1.6274349753545165, -0.12167276163888323, -2.7987696912125264], [-0.7659271433044634, -1.2641664465189753, 1.6939161466768955, -0.09411339840326596, -2.768514375888751], [-0.643956627162521, -1.2768858293912404, 1.4741097688910492, -0.19110374347216189, -3.1330539405286926], [-0.36344367799181615, -1.3560383416211026, 1.0410078880665834, -0.015173805362611925, -3.8439112978023258], [-0.9306310240747543, -1.4955814610050362, 0.5988933048551278, 0.1693495705539298, -3.8458192856071984], [-0.7321599498287481, -1.7502693114676124, 0.7620633025891448, -0.20476261498669018, -3.743743778088416], [-0.6819897738669288, -1.8339676464056855, 1.228049103920534, -0.03942644727773493, -3.863073541447067], [-0.892790634282462, -1.2048519058273572, 1.2149544227209763, -0.014064582943500806, -3.585156878800649], [-0.7975161601452838, -1.5683361865123837, 1.6954456713134722, 0.049165329701015545, -3.8702708956768466], [-0.9981839647945997, -1.5305663439148272, 2.11872473547254, 1.4966642944138233, -3.892368120477107], [-0.9238431672480656, -1.8416755559142102, 2.0597807758647013, 1.9968127110955016, -3.7212016192477555], [-1.1721125116056377, -1.1685116481252342, 2.980287477371177, 1.8236497679167851, -3.9305773876939614], [-0.9884445888887012, -1.0708236255701515, 2.738068039629661, 1.8784411363033617, -3.9080215442618282], [-0.6564250305700705, -1.061649619280067, 1.3976083577469238, 0.30813879032046765, -3.7134857194867608], [-1.2326710620236165, -1.7080766298980978, 0.7263091824741902, 0.4766187387791733, -3.813406352614398], [-1.2326710620236165, -1.7080766298980978, 0.7263091824741902, 0.4766187387791733, -3.813406352614398], [-0.7049886973109455, -1.3311900358316229, 0.4249779498424263, -0.5093852340781336, -3.8179298545570615], [-0.5130413243630434, -1.389407661068377, 1.2277143857346922, 0.5265538577576464, -3.7021263093372823], [-0.044336348242331375, -0.8633511203300771, 1.6695193141112228, 0.09241757560488534, -3.6000627959311022], [-0.11110575407605014, -1.1636624571280123, 0.4906428871336119, -0.22669052421284258, -3.3496849731003513], [2.619986822516258, 0.8871437510284937, -0.3351621709970488, -1.2929464459848352, -3.7810121104522953], [1.2105417970437196, -0.6364354032759595, 0.14550682462992734, -0.32247528941606735, -3.5208207607562736], [1.521360171047898, 0.6134566488204415, -0.3287855382363176, -1.1884902808407638, -3.8977359555054703], [1.483953560034159, 0.5427760004489249, -0.38655802488449487, -1.235147148903803, -3.5935572118345305], [2.1810415967374377, -0.13947055618201074, 0.07615448211517126, -0.23083508437902858, -3.6331753319489493], [1.296322844619951, 0.46135450256656735, -0.6416984182924198, -1.3504676390805666, -3.552982349528451], [1.1264886234842364, 0.22224857108953106, -0.5780145524124705, -1.2650043241326312, -3.630146639502566], [1.2669720543686338, -0.012366236674216297, -0.08956522752326274, -1.5289945617564042, -3.627173026964922], [1.3355724240839997, 0.17029603358682888, -1.0569791601428897, -1.237009657217804, -3.9541185058984825], [1.861164896081199, 0.33849967859226704, -0.8115715070880836, -0.9864414226133031, -4.083597478468494], [1.916854201236906, 0.0949151765497438, -0.2986476956572077, -1.6190379553018837, -3.5875110255292166], [1.0657499823866832, 0.19219795986063942, -0.22247959902827902, -0.7604934736559978, -3.6103869147262926], [0.9111396805021503, -0.05395943027867159, -0.22028328176358938, -0.918716476533709, -3.5930300109974533], [0.8559062359874451, -0.3230814173894987, -0.6227103838958771, -1.0128460640768386, -3.7462805068554674], [1.544626481250611, 0.5336512891103284, -0.18438684896309954, -0.7045125123371434, -3.6052539083381006], [0.3203738349677036, -0.35925653358517684, 0.14422473094880078, -0.19111165711404146, -3.4389917128711858], [2.0475075376017093, 0.3568537022232132, -0.32333476677384465, -1.3429588968050368, -3.6848994155621035], [0.5805870099586566, -0.006706086414389634, -0.001851687761430236, -0.7014241073584434, -3.5970959134439338], [0.7280814570948274, -0.31605681821865594, 0.056209544309287734, -0.4509117799359881, -3.273823770702915], [0.7721649663019583, -0.25961787220452187, 0.37975888564294447, -0.6523227645307254, -3.402662922138155], [0.7178416177579522, 0.2090157437977632, -0.7621631136382875, -1.1206488136949135, -3.8590073791091477], [1.033313890433644, 0.34326746461801927, -0.9819916853224528, -1.857535211042657, -3.605569287535173], [1.9350696702252426, 0.21981933722226904, -0.8875906378701912, -1.1792869865219389, -4.065807803778196], [1.749463786258314, -0.24122234729593958, -0.8583884046766841, -1.2442454649483958, -4.02373448438152], [2.0356012309498484, 0.646197625772505, -0.609378887675299, -1.1997806652670517, -3.461976667466328], [1.9717807265179625, -0.43441392782548366, -0.6582803689699221, -0.7443159207043818, -3.6140066201665912], [1.4025722125698885, 0.6116255290928114, -0.18079581507799722, -0.7656213400851329, -3.780851419844445], [1.789157715326398, 0.0019309274560608686, -0.4480780301344799, -1.7333161196402076, -3.601186042678663], [1.2112261922166614, -0.24678764106612255, -0.37354507855719193, -0.9288080398513812, -3.5861634378342657], [1.695665122669295, -0.009415847546056594, -0.9097440538199796, -1.3850650589313591, -3.662560340401032], [1.08037647714577, 0.07241310110198505, -1.1087233897610242, -1.3138949314761232, -3.8789354102955014], [0.9230196022195347, 0.011962608922519137, -0.7889314556834567, -1.0221711968509286, -3.8273213075629804], [0.48944124944170236, 0.3471487285597221, -1.402302629300088, -2.1153441069329055, -3.819344760796499], [0.4032952859804237, 0.04989947890387944, -2.278137802411261, -1.9749772690345437, -4.203169916341697], [1.0472588308731094, 0.41495554207921503, -0.3025669519322448, -1.3827106460835275, -3.3791434223261816], [1.0737387945842896, 0.33667890300236913, -0.14200114085159063, -1.1488803238926901, -3.1959863370729935], [0.7222815851374262, -0.10124042253116414, -0.4167725756520981, -1.3401027481471046, -3.4598980828111094], [1.2193959456387031, -0.41721517946887476, -0.45520960017532075, -1.4423332282673393, -3.723433326647872], [1.2926415300827225, 0.3117284567887565, -1.0051292450504823, -1.4821490766887324, -3.690616280878853], [2.303501820824936, 0.5674288672095884, 0.007445018543088558, -1.0355152776459493, -3.4244362842523315], [-0.22892246210091516, -1.2968022431552204, 0.36277918210704585, 0.4724134024646969, -3.237125175191124], [-0.11701708531625729, -1.368168860168194, 0.8018929265459989, 0.6589279287495795, -3.7747231998570157], [0.07267939548844086, -0.9577100902734346, 3.8349794268584136, 0.6014104280833699, -3.7458837456674887], [-0.12864242218464747, -0.6569581329760866, 3.1560183706860725, 0.4971865112837524, -3.6695185070310434], [-0.14510011817963817, -0.6058503293331337, 2.8139835289825093, 0.49874427173348207, -3.7984534044640172], [-0.2790222932013596, -0.6385404750003951, 3.1101483822863774, 0.4507014512676678, -3.5923801045054504], [-0.6341154102538387, -1.520357555903011, 0.5298716377104259, -0.07699002777652722, -3.834665898937224], [-0.2756756860439562, -0.7622272227129492, 0.9729047319664311, 0.07947961639262621, -3.785553790527667], [-0.12530343832332513, -1.327371457060168, 0.8868484034415821, -0.2329125237990091, -3.3528813448573698], [-0.09961294851208038, -1.364873197795387, 0.9217088998942015, -0.0828481179894392, -3.5595213985458023], [-0.3410536188621413, -0.6796559810420628, 1.2094879168819088, 0.23243639139782726, -3.429206512730759], [0.2835192223723294, -0.3541342428993155, 1.3666859003272316, 0.2612625150019396, -3.47838519448287], [0.1946483187679186, -0.8771940077133382, 1.2102617487669092, -0.15955178850785245, -3.3712960371921006], [-0.009422451406592286, -0.8394657529345687, 1.0274418803833107, -0.3681101342713393, -3.356041926094328], [0.026395699477414603, -0.43058896420534876, 1.8203902789447997, 0.22900342679410757, -3.47120010592727], [0.0959940029733223, -0.27278449313912845, 1.6087141036418675, -0.45125466324219865, -3.604015668138382], [-0.025102615112162968, -0.584540601085326, 0.4654694469105952, -0.7747750798927131, -3.782396173190138], [-0.5783013211834661, -0.6380211535820086, 0.4453652879972838, -0.4024703766284413, -3.7125875752833304], [-0.0026804334059752355, -0.9969751470503063, 0.5528673341588222, 0.17847638140491387, -3.500519000682864], [-1.1699670501273793, -1.505638709925334, 1.847266305317356, 0.3145145123504374, -4.208065341235386], [-1.1926185846776687, -1.4645098307046296, 1.7106813549844824, 0.06871773713211476, -3.899600237565146], [0.10027239528222964, -1.0082809425146688, 1.222623573890964, -0.06263538316514647, -3.5994836036982742], [-0.6281312859653115, -0.8776628181016771, 0.8386700314633913, -0.29396287500736096, -3.5702411897094306], [0.023177522336823186, -1.0689650667552268, 1.1022510197644155, -0.2208327730767272, -3.833573987419971], [-0.11360994093901824, -1.1570281015303059, 1.5740268930667256, 0.4338260225594378, -3.716179029478562], [-0.6579082133935676, -1.1379082650945813, 1.473572853935937, 0.0898277915847259, -3.3873244488185876], [-0.6311074905127683, -1.3814247592043887, 1.5134958644129717, 0.14413581234135864, -3.477966950383279], [-0.147329644353128, -1.3259232146834314, 1.4320057914460214, -0.2791616131190221, -3.6619700655439074], [-0.08062516191190633, -0.645190372805599, 1.1376843942555104, -0.5926933417774198, -3.5375654509044594], [-0.05240070768555187, -0.6552967659360421, 1.1398326218443653, -0.6303604440014263, -3.5836747040710994], [-1.0549097033756403, -1.59568650253113, 1.7791357667694738, 1.0373191033886917, -3.740139705221559], [-1.2342127415736799, -1.4174829641461248, 1.69321684405973, 1.0762454371545158, -3.6007919462090325], [-1.0042891664708127, -1.4983273361031617, 1.558658138688978, 1.028588988383767, -3.7691321051666633], [-1.0979467699736025, -1.3898943533012031, 1.6238917767993621, 0.9305803880325983, -3.653923235263791], [-1.1081975790298395, -1.9854997183536134, 2.368963910663314, 0.4285651773699486, -3.9876185538436437], [-1.1553918092504503, -1.599421500268579, 2.0069358404033086, 0.3666918634431408, -3.8961205086489743], [-1.0743466827003472, -1.2242929516802092, 2.085993926641334, 0.6305063200030346, -4.036790554045941], [-0.9068166282305121, -1.5547859673956717, 1.3632031445917812, 0.21017395789785223, -3.836563154334715], [-1.0944413270093634, -1.469777178559245, 1.0767072879566721, -0.34209756240863815, -4.011994733174635], [-0.6731495888466945, -1.2679891827252818, 0.9476049342860655, 0.44885665700979793, -3.7941810213611853], [-0.9685600748050911, -1.3794037221531177, 2.3207884695092598, 0.08467597989134915, -3.8369440414447467], [-0.13321483894875652, -1.442660828713555, 0.26691097296288735, 0.1690997843443448, -3.4975612060630876], [0.5531220901341614, -0.14139422697883008, 0.14539920286248856, -0.41029522723050565, -3.5351652593078877], [1.3423188839225806, 0.37339711753896615, 0.03724097915453437, -0.7483146857929195, -3.6133392384575265], [0.7773605919691483, -0.4198621396084239, -0.2063500416446761, -0.6702811659616316, -3.5706642558416117], [1.7123034177373948, 0.3010859768129489, 0.11517177741090623, -0.7394673827349842, -3.634772830202291], [1.9373843124396526, 0.30985756301079054, -0.12258968407649717, -1.2136126445409512, -3.754281448538866], [2.2888490805077213, 0.22134767740207248, 0.03610813269579906, -0.9594332328192882, -3.4933383659486164], [1.3851354691260092, 0.20322991199473364, -0.48969479202884514, -1.164115341988779, -3.779877972402681], [1.2471344716341453, 0.7113318679924524, -0.34244389671547226, -1.2757676324711376, -3.3357190060580253], [1.4624516574256714, 0.6490945058320048, -0.5737742694851705, -1.20816671048779, -3.8653275141384853], [2.0521367864417286, -0.29998011271269526, -0.05258997099076301, -1.2683215516389332, -3.595247693016488], [0.6565656655681176, 0.4516706269191463, -1.0718878934491112, -1.0929885680253808, -4.095905859720537], [0.7872761386024499, 0.4482911329504361, -1.1384656253601884, -1.1051689195151264, -4.279211844810345], [1.0846298489354285, -0.14687510722021666, -0.9050919365943614, -1.5765630999148663, -3.6314063690618297], [1.3566596216166291, 0.011953508200723287, -0.9990863588738024, -1.2692398992613398, -3.8991303772729853], [1.5940869018546215, 0.0662217329404131, 0.15148170540466943, -0.3617088992287786, -3.5076351912519166], [1.1981303716932217, 0.6973131487596368, -0.04633325813679814, -1.0084102672480932, -3.725493900310948], [1.3020707150610966, 0.33140655798497076, -0.5079280350827603, -1.1165423735889475, -3.596655082799831], [1.759959170841813, 0.9427472860225139, 0.004548147903597949, -1.2340848981223078, -3.7605117048278056], [2.0999708253535276, -0.2800013020385832, 0.039271358136262424, -0.7635838361944027, -3.6922805666960157], [2.1448560987455987, -0.6095337047167444, -0.5010424781242678, -0.8901756199611017, -3.5863040266019386], [2.1082987437788794, -1.0958409537411138, -0.24983705145934582, -0.7273693762006395, -3.629375514167441], [1.3927748845566739, -0.43543070188176375, 0.19362575590583553, -0.6102560343162983, -3.543923347094058], [1.2045582094452028, -0.009313933577277972, -0.4973668320611629, -1.1855544024236857, -3.659473133075635], [1.1103226406471371, -0.25351804218594, 0.1938061290458229, -0.21949338880953587, -3.725383246159481], [0.990049343904273, -0.07513513125811785, 0.11394090549032722, -0.5015939623902831, -3.711678893300712], [1.853216198630956, 0.4305263947592721, -0.7035754228346396, -1.5962043908840435, -3.912172633167773], [1.643619781651838, 0.2810307633431199, -1.1631306611016006, -1.719415284932548, -3.524727989433635], [1.1539759360925035, 0.23042980479853034, -0.9294282122101033, -1.5571805516459816, -3.9458914564991687], [1.4273223059628173, 0.5524204906777955, -0.02382801365391817, -0.9584083073655522, -3.5648663599532595], [1.5313197856268836, -0.15588818443995175, -1.2009927351916991, -1.3676664165328805, -3.9338278479058006], [1.4975483789093231, -0.00839238042706382, -1.241492310863532, -1.521471100508901, -3.8434025153724605], [0.6811019575583409, 0.21234702470243486, -0.9328428981173345, -1.2739846463020468, -4.029054075537425], [2.0374616568551764, 0.12323893283557746, -0.22843392928462236, -1.2602794382834497, -3.6466354873291706], [1.0684765411011865, 0.6044037465372887, 0.2709070166085097, -0.5946478533299019, -3.4293168012276656], [2.0835621411371674, 0.2610463275588767, -0.4863671373185119, -1.0522053589450122, -3.8820381082830675], [-0.03675443748831639, -0.08583497430964027, -0.5181808549039933, -1.6878026169616125, -3.9544883023457142], [-0.25882589843336296, 0.07880446920550632, -0.34017774728802214, -1.7609250841129114, -3.746761913668764], [0.2046078720888495, -0.02053184313146396, -0.3768618192559303, -1.51328268420448, -3.604878859426046], [0.8613903916677818, -0.08418621965373779, -0.023882830504906777, -0.2794364251867132, -3.6306341979539822], [0.4026594317132154, -0.09926285545621288, -0.1406822956893098, -1.1620819957268007, -3.480311154728091], [0.8447096368037605, -0.04378214547702742, -0.15507028721767405, -1.0271253285265345, -3.384042044342333], [2.557643248821277, 0.5129332073507178, 0.07544593869162436, -0.7614288880059309, -3.5116972126380683], [1.189344466958535, 0.0992790786888539, -0.07111527278894933, -1.0280473901911447, -3.488826887999307], [1.7856186247252177, -0.0844903713624724, -0.08309030580563113, -1.0344449806341696, -3.3902690070535355], [1.8746367562550448, 0.7660911911165729, -0.2827961028851916, -1.145913900049788, -3.7187440060874444], [1.9030407914789322, 0.9801241024382134, -0.3209679021164888, -1.6320192217491503, -3.4674027145292765], [2.465865374663689, 0.8558904539025994, -0.17834429669324528, -0.4079096393907453, -3.690467175231408], [2.176151489441134, 0.11440710082363931, -0.0722752096867812, -0.6280624941308979, -3.6534072566722298], [1.1579002731595622, 0.10435548455568239, -0.2744114987069392, -1.011669607080984, -3.409134970460583], [0.7356694570579814, -0.13253715832129867, -0.14238245952740333, -1.1078626463218364, -3.706805906477402], [1.6476744673788273, 0.0050979462772986345, 0.2806010550177855, -0.39895590731058683, -3.572859645960973], [1.6476744673788273, 0.0050979462772986345, 0.2806010550177855, -0.39895590731058683, -3.572859645960973], [1.0580114686854345, -0.12746809791749192, -0.0739479270041588, -0.4028860590477733, -3.56978341213886], [2.6052921466724595, 0.28369816262750913, -0.28179949492492257, -1.360188633180099, -3.866339784431765], [-0.0022268858610902664, -0.3275591549261141, 0.16333753071466198, -0.8941766281070139, -3.773194228134361], [-0.541990556059078, -1.231443319363862, 1.2169006272175438, 0.2292024410152898, -4.054978370290523], [-0.462461923501983, -1.3156250919558299, 1.4146935414040074, 0.341142085363048, -3.411917108809288], [-1.4606163256562419, -1.6450754722928171, 1.4816886209748634, -0.03208000767747636, -3.7224755154899163], [-1.3995378732697146, -1.2933954111217252, 1.49569832873824, -0.08871568146290598, -3.8596913976853333], [-1.1323187593588446, -1.5772986628457613, 1.501781050445467, -0.1551678100775904, -4.197612483937144], [-0.027786479189977592, -0.6638115323400695, 1.3021215944186775, -0.08457039671646145, -3.304808736821527], [-0.5491357219927946, -1.4121396540275966, 1.8496911405010557, 0.41719708338605527, -3.5981023156561927], [-0.8152644107944012, -1.4454562674583646, 1.5200969437675191, 0.4259198742758247, -3.72320715584376], [-0.15332127126931128, -1.2382977747757566, 1.3486233241365713, -0.11196172619380412, -3.548125042014883], [-1.248963829990099, -1.3308666695859162, 1.1836037062075633, 0.33790346615739913, -3.7901082017746797], [-0.5546556083159853, -1.2549548936295785, 1.6050353853283732, -0.1996475330794231, -3.7463532822437142], [-0.7354804307007803, -0.8517791714798519, 1.825876906455725, -0.2589352235551882, -3.8525671546288476], [-0.1645037735885568, -0.8623134056393855, 0.9948548497210306, -0.18246921595308005, -3.531912515237732], [-0.1531307478839237, -0.9154190104647625, 0.7663296475715061, -0.18081481337374153, -3.7818245036185214], [-0.07384954118080714, -1.0772017623369283, 1.243537543218104, -0.02944503453446142, -3.3937471044967578], [-0.3840973583013465, -1.4153438964143419, 1.547634369369737, 0.02335456250980913, -3.844631041168678], [-0.8840729518988724, -1.4595959566699026, 1.347665130072732, -0.12203950367947394, -3.4185706568447145], [-1.0361290336337106, -1.5906931979279302, 1.5870989485177136, -0.28283278937784645, -3.3689919709560674], [-1.0017672130884905, -1.2376511428697792, 1.55486851493212, 1.1335273369425254, -3.6771237929558236], [-0.9510491769267956, -1.4636234147750737, 2.263863426369782, 0.6796630971495535, -3.849176691777881], [-0.9457134877081643, -1.414784478022848, 2.061903032641705, 0.7114141223829038, -3.5063759057081607], [-1.2238467546205434, -1.5469557290328975, 0.9895696200119372, -0.2955160880149322, -3.539703705193745], [-1.0249455430547956, -1.7665944864736853, 0.49331391362400456, 0.19387128695123113, -4.104504760195556], [-1.6332564490545367, -2.3694427014459483, 0.3672732019774928, -0.18057366050508275, -4.080044167256931], [-1.9250079525776638, -2.032216004574915, 0.13289792446546606, -0.4045247552505053, -4.188278772782851], [-1.672718437723447, -1.9704082998329489, 0.5460612857657184, 0.7486037465558101, -3.977507803894532], [-1.5060117813249319, -1.9165777229772487, 0.7597397144893165, 0.6151963157014677, -3.923006273466371], [-1.5191111900060523, -1.793047742724561, 0.7352136858260867, 0.8915524675557005, -3.677683725448466], [-1.241049782586005, -2.4548486951864494, 0.39354644705000086, -0.0007340825830338127, -3.8693159619589523], [-1.3152611615318357, -1.9266755434649747, 0.28899520958872205, 0.37584994799808225, -4.064222919723446], [-1.656848386935291, -1.7161489710475317, 0.6815077272025291, -0.3001417079458856, -4.023969794610566], [-0.9009374094460122, -1.2779775597939167, 0.3306341518568642, -0.01544562219888198, -3.9195433879969515], [-0.9362880536936081, -1.1852223969256082, 0.6177733878041349, -0.08622657589076134, -3.930266390055372], [-0.9865109831306388, -1.48132342677432, 1.3703042908996064, 0.16670909487144064, -3.7706991864050017], [-0.8857592098293852, -0.98553973624156, 1.3784857407028737, 0.4835479349274982, -3.807716136563007], [-1.057324962490187, -1.4226930949993348, 1.310225331206795, -0.3552041723649316, -3.6797952369601052], [-0.5112267842628243, -1.1280373157339234, 1.223284897812651, -0.09350664791362207, -3.7762665557298014], [-0.7623731759537031, -0.9817501737813379, 1.2270717515216798, 0.07428812256484298, -3.610427317944379], [-0.10347618469839248, -1.5582781360549103, 1.7067984489826304, 0.8866507611912942, -3.6598934299954977], [-0.6217425424994436, -1.3587281951762593, 1.7802288789570246, 0.6264027606351936, -3.5847060270583317], [-1.27372271469721, -1.495368470887264, 1.3962493506667648, -0.04300716679974722, -4.060220370415651], [-0.570700540304171, -0.958700235464298, 1.6541934659105884, 1.1279481886324114, -3.553505045325342], [-1.2057852233781028, -1.4705459966292336, 1.3819033143610726, -0.2894651217394474, -3.945121136313792], [-1.0065065848176566, -1.417916608939167, 1.6827775798858682, 0.5206006084828039, -3.71816001474657], [-0.9275125908680404, -1.3023272128372965, 1.6865112598772196, -0.11684510027040754, -4.023053469155801], [-0.7436704910890434, -1.622099475009615, 1.6040307138069485, 0.7738227092113312, -3.7689608298309794], [-1.417895202616564, -1.3840769235181782, 1.9669260730002012, 0.4321617147152298, -3.9672520090764136], [-0.25792257294468746, -0.9954028392336897, 1.943530994548342, 1.324049537933896, -3.5670142106666116], [-0.425675799119363, -1.3157037402127243, 2.201768794193967, 0.37643453331373833, -3.368675372019947], [-0.9648301718379475, -1.0948173373365415, 0.43787143917585813, -0.17508440509925255, -3.7110868410628153], [-0.3528360721317909, -0.850609978075653, 2.292688214764976, 0.11780884731286981, -3.9498064096890597], [-1.2165098051107794, -1.2387908696768395, 1.1264936930330176, 0.3353256178101298, -3.6025769700956114], [-0.657977930086505, -1.4490879143953668, 1.9658960603594546, 0.28257695837096247, -3.606501185470551], [-1.205041883274403, -1.561957703913152, 1.6551523330044255, 0.7901978681284886, -4.008021860606383], [-1.2010213539707848, -1.7737591834410424, 0.39944518598231527, 0.06218678008952139, -3.946266140510515], [0.1867707975857111, -0.28400152366249265, 2.383202860374144, 0.38096540776313564, -3.686172097244517], [0.20151691268443284, -0.13002324867730658, 2.557817201710788, 0.38895007630815814, -3.678377804720162], [0.06674210534880384, -0.4010722038867354, 1.863892962296706, -1.5933984847480647, -3.7252879790832623], [-0.15245531121767708, -0.304924557597018, 1.895641213126839, -1.5365403615937285, -3.5125317325267247], [0.104473929914107, -0.01045484589764839, 2.132078378403606, -1.2172328035263074, -3.522446735905901], [0.3078124048574734, 0.2789461028889407, 2.0436913771096723, -1.1191009962727656, -3.564830839297365], [0.4172811976628459, 0.24500290898406446, 2.237353560617764, -1.3129331327313039, -3.83025063406513], [-1.914081612887235, -2.333078822018234, 0.4233479969405225, 0.7310901518318945, -4.13601375871234], [-1.7831937359298187, -2.238838336706923, 0.2945396948556129, 0.6314640795645285, -4.055640245480059], [-1.6806380578739628, -1.9022127292700834, 0.5020049373574115, 0.4004091272254607, -4.109260731230208], [-1.6150395539836615, -2.1247565327228073, 0.4473746624364297, 0.010967624989165453, -3.820609839374527], [-0.8683756572873065, -1.2350268268473334, 1.2051953502310795, 0.12742972777796324, -3.7461460771605224], [-0.8449402004870535, -1.057661678520905, 1.0148814469947198, 0.3921272255055642, -4.02333588069311], [-1.1667473445530665, -1.7983275423833784, 2.007534078808121, 0.5006339313108122, -3.709899080988656], [-0.7672429558530904, -1.0382955298601233, 1.6025644638584065, 0.9073503910941263, -3.9834980518163836], [-1.07713752311466, -1.770712527949875, 1.5329539535660324, -0.29118006358916937, -3.772572197805875], [-0.7349087669422911, -1.1975114714721935, 1.1191606488236958, 0.7583065429575772, -3.9675206046594744], [-0.7883135318885516, -1.0064707926554732, 1.5779729187910667, 0.5140674216900716, -3.612194752604315], [-0.8344856204916579, -1.0725201525709842, 1.4224274014145273, 0.390971668938308, -4.1236696887296995], [-0.39540927567573836, -1.0478797592609836, 1.5578880049250572, 0.3453535887163151, -3.554108533969766], [0.09203583437534194, -1.1750896364222176, 1.8317857192056377, 0.403597181003043, -3.3249680787179883], [-0.9746056281846405, -0.9715419511752685, 1.8174791200873373, 1.1400428713367068, -4.06579246665873], [-0.9399370455438112, -1.8097514706870277, 2.914573806938412, 1.0109167253404614, -3.565970282233986], [-0.5103576022177894, -1.241552180330713, 2.3145946045556953, 0.8245276325850799, -3.6535076492953866], [0.16113858257173388, -0.7527908611458882, 2.6634505771803196, 0.0897452411846128, -3.51591023360898], [-0.004017223871940052, -0.21391540886351876, 2.358807323566521, -0.6444932732251922, -3.700854073621609], [-0.2304493937836105, -0.7104180118960792, 1.8478297682462208, -0.21135150704905586, -3.403549256537127], [0.15701673515059594, -0.5598842539641538, 1.7457574957426714, -0.2977610964034782, -3.5396684604751565], [-0.27558921488188476, -1.0791621806475244, 0.8902223959684123, -0.2157964844784147, -3.7248907639101403], [-1.197992575087829, -1.3794009989566636, 0.7126351464714795, -0.0738578265615194, -3.9245566963523], [1.9957749971758507, 0.24149648714756827, 0.11033913154438438, -0.7179640722029583, -3.615847038451593], [1.895585771602938, 0.388508746750895, 0.10280527040473152, -0.5014282859749467, -3.606041896314984], [1.4737223660863197, 0.20057516017119187, 0.05546777147532281, -0.779698055340924, -3.602654555263605], [0.42518125381989413, -0.29684846405179777, -0.17409922436587535, -0.8844646623281608, -3.550604683942153], [0.27269952215575577, 0.02636133091401624, 1.104714441593394, -1.313496763103762, -3.5675113296059733], [0.32616913160427136, 0.10088780815498452, 1.5241137923201482, -1.1202046992845731, -3.1825762333361722], [0.12844694237312154, -0.31290503665474645, 0.5936749196443847, 0.2730368347451085, -3.4389066189730184], [-0.19778217751565264, -1.3544713939219588, 1.6111433491498524, -0.08015146933923535, -3.523133854036799], [0.09866105444075342, -0.3752791188078953, 0.6289821132104353, 0.06456512866926835, -3.5740961494359307], [0.00844893544934977, -0.4422688992618352, 0.6439979781100554, -0.09200526753828042, -3.6805762613822472], [0.047550675405634305, -0.7682963481194909, 2.2025585219664228, 0.40288755730688586, -3.232838146499808], [0.10166539280668623, 0.1902063804836799, 1.4841320527499193, -0.7412742657335232, -3.6614381605426862], [0.29557932816232907, 0.04351701514353937, 1.6558087785539193, -0.7177615399190713, -3.4130827135952324], [0.2245786078482698, -0.40108731305616985, 0.3700493204430485, -1.421741901707181, -3.32135437962959], [0.4005222516032636, 0.2873867554998789, 0.005820444301833622, -1.1230578093641612, -3.7998629799983807], [1.3950836914405655, -0.5182434058958384, 0.08363192509876329, 0.2154664273134703, -3.54349472187572], [2.2115065571912718, -1.6641246999954697, -0.17733385901101284, -0.4365596247075941, -3.605412905197078], [2.125633028936948, -0.9183489834301966, -0.3138197016109436, -0.42346769828657715, -3.632116943426413], [2.197421978707806, -0.8810653928436092, -0.1568142012204339, -0.46364999254355027, -3.6636650394763746], [2.3841202998762743, 1.2253024550415228, -0.3191720290997339, -1.2221524372624932, -3.4341237076976463], [0.686469194828316, -0.7049251779859912, -0.3806775621537367, -0.8543559902395497, -3.469621040726442], [0.5737847495460957, 0.32555323780134526, -0.4201893515394998, -0.7382302427131833, -3.64290120474731], [1.5765512301363194, 1.0594400248579126, -0.7086644244011808, -1.4854450334486884, -3.4465091012220217], [2.030469966566882, 0.7054189124558329, -0.24011958965912447, -1.2112650456698502, -3.661430111852674], [0.855089683154746, -0.47595203465562325, -0.05333269974329577, -0.8489248683559872, -3.611220716298637], [1.1248281721256486, 0.658795396965032, -0.15703716352427927, -1.0601271844212206, -3.573643332441935], [0.9297813996021899, 0.7008353093225625, 0.04109186505173266, -1.1488297062969177, -3.713505055980837], [1.0594190389393836, 0.5981236363126827, -0.42060450402005967, -1.0464108058453538, -3.6715307703090443], [1.4023267024907098, -0.2730141834072666, -0.0615062666185105, -1.2403442883881246, -3.679256126023668], [1.1277037494723179, 0.18948370090113914, -0.7841168827705514, -1.4629546810208767, -3.545461820195674], [1.3454805150088298, -0.23670337374894107, -1.0199623213354494, -1.1806317381330715, -3.9893678781838022], [1.3385115844747588, -0.2218555868025331, -0.7890271618503528, -0.9192002777109348, -3.782488005598196], [2.8085076639898747, 1.3852568276334247, -0.9703918831340859, -1.6636298564823555, -3.4387111554418737], [3.1318352893381824, 0.8470177357062496, -0.8301707102129223, -1.428184434630815, -3.9679741594072264], [3.0293895057959843, 0.9192572118243488, -0.7876899503114659, -1.473472938564183, -3.7784769897207817], [3.214112480338385, 0.7925605964468622, -0.6796733153735571, -0.9672734961825827, -3.678138435649129], [2.5327187176086494, 0.6046149444941425, -0.6801375275727616, -1.1665456540413968, -3.8483036482903836], [2.2967458294027185, 0.6090476410090159, -0.6538411956907101, -1.1982107766106638, -3.6743719030512425], [2.4967484117832837, 0.4637634441221307, -0.9917660275457569, -1.227314826209278, -4.007134094038958], [0.9209256447003762, -0.16369920099032487, -0.1747914533796236, -1.4196594629445305, -3.3929339142970503], [1.3493654787974578, -0.41410798484263583, -0.36557297944183914, -1.5054251627280524, -3.7901464940823884], [1.4293796750312786, -0.3360900547299204, -0.4339851745799906, -1.752400626945261, -3.448898327226532], [1.0814870364795741, 0.3964767221892292, 0.36127632356822126, -0.0343948255480577, -3.486529258446348], [0.7778694251132284, -0.18804476302474168, 0.11809452294660636, -0.893300241313427, -3.526549245811816], [1.2382202999793674, -0.43327394715597073, -0.11994383888561075, -0.6589298791654715, -3.652747728557329], [1.2647784343056034, -0.5020106362509545, -0.06999276893476196, -0.6402993240003069, -3.889402240369083], [1.2938363666461044, -0.2662981921188129, -0.18120886012346377, -0.6803053396335503, -3.805271419627148], [1.0872200176062554, -0.4205597237664481, -0.34455758934609015, -1.8750979101685248, -3.4807358491443985], [0.7795716782010418, 0.5960474031410977, -0.6790184827371261, -0.7296249882774751, -4.06566698052361], [0.6976382813706071, 0.6189607299708724, -0.7742461049039556, -1.1905694655129195, -3.6530116584992913], [0.20144521496389278, 0.05609681749379522, -1.8329355360647668, -1.9529602948036684, -3.9329615052600415], [1.8726902053320582, 0.4752959422287212, 0.05570295554253807, -0.9276523228080313, -3.6663532580666436], [0.6467241726827897, -0.4140759783611359, 0.09995601093968418, -0.3127815168693351, -3.5007087863825737], [1.1987111883055157, -0.1535669857616267, -0.022570610478211406, -0.822324813035572, -3.7649602719803092], [1.170485106478238, -0.15535884555157384, -0.15974735092794606, -0.897834714135311, -3.51568298415132], [1.3022000262758537, -0.11586295404672377, -0.5358926023778293, -1.337365888572096, -3.427926222996348], [1.2477570698851714, -0.01885061874628833, -0.4380496373251608, -1.4230934216711262, -3.4167046425838157], [1.8106250634642367, 0.10828111937820394, -0.3676789627575508, -1.368572876163701, -3.7827354953993613], [0.623709160391218, 0.0942371689018613, 0.01560231828823963, -0.3892224966387656, -3.302417714382858], [1.871121965634392, 0.051556159572032134, -0.1931562749083591, -1.3837609551655217, -3.770189838933429], [0.8572331211149148, -0.28597949486986873, -0.5944960436709501, -1.152874550969703, -3.459770614723021], [1.8347197534664883, 0.46217415685658136, -0.20586882775057458, -0.552362435454339, -3.483431507694402], [0.6080571581256989, 0.2911529033331989, -1.2621581506921646, -1.6083628329643902, -3.9158701755098724], [1.1987868848448107, 0.14589215373980272, -1.4572567924278061, -1.505222273307265, -4.262441268494711], [0.5396030082076837, -0.10930326972167742, -0.10535778706725443, -1.0596815624007587, -3.67425042983803], [0.2665532046012382, -0.30632308414457393, 0.15058039913478571, -0.5804101107547205, -3.34470378637687], [0.3112030434211367, -0.5175372903858723, 0.16445154265540038, -0.5791924203499995, -3.8043276988471955], [0.7969802612847804, -0.4991598498348751, 0.14572996229276086, -0.07923720037038903, -3.3654127280909787], [0.8037347949362181, -0.1425674516802137, 0.004556087121060454, -0.23731444397926005, -3.827569682211446], [-0.2817045349770146, -1.6624385868530713, 1.7507378545108854, 0.9294265933834798, -3.3251619041567766], [-0.15400924073592934, -1.6212453479160818, 1.762460097503293, 0.8468493109769389, -3.638459149556489], [-1.1124408817807572, -1.0752747443147281, 1.6822609722782476, 0.6556893610900264, -3.7782793741809244], [-0.8345263515302088, -1.634848592810428, 2.214109480190273, 0.6770884770729516, -3.9062848487801816], [-0.9827583580448489, -1.0989708541965735, 2.2972863922587425, 0.8570427583350454, -3.9316549345184395], [-0.4747958909079446, -1.4043897618216947, 2.0745801376295145, 0.7818788693928326, -3.6263971323413675], [-0.6443947266626183, -1.1405243367447562, 1.7364555111936093, 1.2497280965580637, -3.5224099422108037], [-0.006135833785107708, -0.3281612321494334, 1.0550920291231565, -1.1219236778478512, -3.6501074128757636], [0.05189720970785111, -0.4813322268889748, 1.552158474456174, 0.4941380516045125, -3.541853722808015], [-0.23227666784936304, -1.4866436588006116, 2.0637312214800065, 0.660166554485569, -3.624600213782648], [-0.2920124547979219, -0.9276491619451712, 1.8847795217312235, 0.6858088874383755, -3.612436072694937], [-0.13167305980103786, -1.0248336993572238, 2.70510473471501, 0.6929735684637195, -3.7038596392596213], [0.020519993024979418, -0.4573763117537114, 1.8172980524890359, -0.5190523836352878, -3.6540611075804006], [0.15338042492707027, -0.7833346706191435, 1.641105558917828, -0.25183599426523406, -3.458135677907998], [-0.3844017770875243, -1.0609284392642961, 1.3121247318897338, 0.3692097997663357, -3.758980704315804], [-0.03956982913443414, -1.153428904983427, 1.3160595401913886, -0.1836614067726752, -3.376546869181572], [-0.4822768258836398, -1.2354825965587062, 0.9918822112295925, 0.04528114233303611, -4.104756046095027], [-1.0565016344761908, -1.5341426037151327, 2.1864149981385355, 0.5143570651216046, -3.535635189274999], [-0.9083147803995651, -1.6114800489948975, 1.7916029229695396, 0.5725285077380274, -3.935707437995137], [-0.6608882286394295, -0.9653289927801334, 2.0743091611156332, 0.8395586967020123, -3.6795872322050442], [-1.4171017253330782, -1.4944559869638097, 1.6086322591603734, 0.6294882000106328, -3.828825320356446], [-0.9530181673226181, -1.3728832252274052, 1.9631860364930016, 0.3791314198663028, -4.111858253187781], [-0.8862664929457947, -0.945659496497437, 1.7026512428142553, 0.5261963957645146, -3.745390718302606], [-0.48836666848714205, -1.3045345957089545, 1.8746339253427613, 0.5200171451715352, -3.391911213657536], [-0.07597635401991644, -0.8404267666730146, 2.5605668063270386, 0.05491368942034083, -3.4415185434251048], [-0.16923590109931702, -1.1698709314091826, 0.6716366559967311, 0.20787615751572674, -3.6630550819529644], [-0.0012233299202438139, -1.0640260849764782, 2.153808841050545, -0.06976668407315603, -3.8124045672780613], [1.0069318714723716, -1.0285009615697898, 0.1319465422346871, -0.14525967293133082, -3.6320051560158837], [0.4508638694475623, -0.005263950389736705, 0.16918263625537586, -0.16407343709229388, -3.5806541826006377], [0.6641834495892427, -0.13268396004530383, -0.11743637537944593, -0.8367043801441854, -3.6118240959683017], [1.143724199487312, 0.08722605142248963, -0.5586458921917694, -1.1294105193835373, -3.770662516257651], [0.8392678483607284, 0.13125985047889926, -0.3411415142070564, -1.5823026727770446, -3.5238320733891744], [0.5863231476181322, 0.3031589947143047, -0.38092548320407743, -1.461074369465633, -3.67636773265502], [0.7980762425848892, -0.385319779095392, -0.1877054571442956, -1.049891257267183, -3.6411298684621145], [0.8669262693326225, -0.2697113256346837, -0.08860758494269201, -1.0600871121209792, -3.7543122889387006], [1.9480840666217096, 1.0484316471135058, -0.17769297260446446, -1.1898856496168428, -3.296655564072888], [1.7588171216118624, 0.9920333029316626, -0.4152097794762116, -1.0785985466184846, -3.6449523244861117], [2.106203627455914, -0.02351763367058457, -0.6645897160675691, -1.1099622904556468, -3.7424058625480767], [1.7101770203135587, -0.2867106550393381, -0.05103137548722794, -1.1186213222139287, -3.6037906908329616], [1.6766988832037264, -0.39329413434796956, 0.19553585756105737, -1.0448944128013606, -3.474506317583187], [1.4295654597978829, 0.004902077372562957, -0.989855091822555, -1.2010616468058295, -3.8425976941115967], [1.5504400624603332, 0.336787323271386, -1.509595094477862, -1.4634864424131826, -3.883878755089051], [2.0146325181660343, 0.052687845696397256, -1.284210444086935, -1.5076365379724226, -4.257096116078872], [0.20744462812920467, -0.07416428979770974, 0.2102166117256073, -0.84826991955756, -3.8158311889221967], [1.8146139092847526, -0.239042618025204, -0.08007471997868473, -0.7033185644907597, -3.5618269283244075], [1.810380723284647, -0.2788509764057582, -0.13211799052145554, -0.42469389780734274, -3.4583735927110038], [1.9209464337215638, -0.05551455711856035, -0.4718764184253992, -1.2244233734292769, -3.2657763799509643], [1.9049491652585173, 0.10975242105931993, -0.7326926097216069, -1.1974586748762603, -3.271488092308981], [1.7226632310285959, 0.017457529190417848, -0.3945002243279366, -1.2743301550325605, -3.5307963191370972], [1.203878581896772, -0.22080259442192463, -0.21960207814052807, -1.154317139500805, -3.592037682497746], [1.0478328300214206, 0.1284653136702425, -0.15421526779370365, -0.9948430332714969, -3.621864488291059], [1.5239536134355283, 0.4284005474921158, -0.9677271084302904, -1.3991779748574615, -3.990221215076216], [1.6159596848058706, 0.37934283241992894, -0.6839631682536814, -1.3528877370829582, -3.837717268347529], [1.2933591523911736, -0.09849100330516199, -1.137661223484641, -1.3335139118156716, -3.821195785605608], [2.0818979377305613, 0.5688487056708451, -0.936841319969717, -1.6056932176088048, -3.6913521312305053], [1.0980932546255628, -0.15269456765877665, -1.0102720383788115, -1.265015218098622, -3.970354610098331], [1.585625867634913, 0.22970052049537143, -0.9313069608832376, -1.6082044214020859, -3.7185780714588965], [1.5953317055832137, 0.14337722354836926, -1.0295118144421194, -1.1190547841835148, -3.7803409533731043], [1.8288412384043853, -0.19346140577547502, -0.9800213146680962, -1.1913215126226542, -3.7871623895915953], [1.8485810451061946, -0.2611967085238724, -0.9522333377635142, -1.1808540623014157, -3.7753366215719484], [2.104276538487043, 0.18073354979567804, -0.4793595226979394, -1.2457018003381066, -3.6147262123881228], [1.2965165378482606, 0.36917895510943943, -1.0603315759364282, -1.57443768164428, -3.710073463578054], [1.9451282651839323, 1.0329333106962404, -0.6417276903411626, -1.3199929578010388, -3.646116720614001], [1.2688165400123743, 0.18341128628372802, -1.2043145898234588, -1.3282999485629006, -3.8510330022570054], [1.3452341215654682, -0.1395727361598035, -0.6551172474057742, -1.3153557444734498, -3.5690483251574516], [1.1464384267650365, 0.3939763623646411, -0.7427672232023284, -1.3792071098361751, -3.7804211958455087], [1.2208380737835516, 0.2845162248460634, -0.8231727309494593, -1.512219794236142, -3.7815577948843893], [1.5076221735091146, -0.12353823429096572, -1.2276944662298463, -1.5167195341652222, -4.419357520838806], [1.8946580576668657, 0.837910349537494, -1.0114914200113492, -1.6049868545367516, -3.418633440239623], [1.8612717450442415, 0.7714868918136447, -1.02085041875861, -1.5438846464442926, -3.555034351158319], [1.058286783039099, -0.5245121042668617, 0.26729016027529295, -0.2469402660718601, -3.637176185839592], [1.2386398156266356, 0.4877459766462083, 0.10619669900448009, -0.2907095542449314, -3.603046633509637], [1.0787544253699028, 0.5333451167968438, 0.19364705429637707, -0.3725559733068454, -3.3596233493453838], [0.9777422152355703, 0.5636568720484065, 0.31570919038763734, -0.29089465221090294, -3.249719892304645], [1.052396480537661, 0.6482258435948198, 0.16180841224200274, -0.27448351932478304, -3.1414680215115114], [1.0718849945646023, 0.14478798347025656, 0.24968096969662976, 0.2987932795219701, -3.9331215291652843], [1.1156348927181292, 0.5864772327341766, 0.24205010159050314, -0.4739186993507094, -3.3742173827494364], [1.273478010411484, 0.8301132267246455, -0.30764054499146376, -0.9123867534555814, -3.8666339750554988], [1.0919241051172748, -0.1300468995359086, 0.15339522249517362, -0.6607554541024744, -3.3507637465262707], [1.6111401073624754, 0.12526050787207244, -0.1390972708769923, -1.1106585020656126, -3.4460166136839714], [1.3639081668758126, 0.1461848004983997, -0.06784034973828769, -1.0617710104907105, -3.4990226037873327], [1.3429815688588984, -0.08320305636814343, -0.8947336803894254, -1.5600805619745528, -3.79303748911066], [1.6417771657828792, 0.41976171572843446, -0.305311243355905, -0.9449558950004573, -3.658978097606239], [2.3292813410199837, -0.04525528294310443, -0.12414136051315226, -0.7376391741667877, -3.7506746038302254], [2.34569093201187, -0.04202847349822122, -0.1599402953428137, -1.1122047188687063, -3.486105299614081], [0.7593681197677405, 0.23241604134566043, -0.2615245429641876, -0.9016678407847921, -3.618917473029176], [1.7101646765794187, 0.0009206127844556683, 0.20695030605856493, 0.07800197957346831, -3.6087352478685033], [1.7006604365486593, -0.17025650292308792, -1.2192425783822542, -1.2890310133056058, -4.045650368774042], [0.6868672983480404, 0.19202727711398687, -1.123536494447892, -1.6700891952647174, -3.722864940841383], [2.180309620741814, -0.2961904650083944, 0.354137926564744, -0.11793104105556892, -3.574996650484001], [2.217859424459154, -0.4720818432237815, 0.023400829040174903, 0.14234140745376223, -3.7559901190091627], [1.2307757771219194, -0.494312245471671, -0.022042354878586634, -0.2647555765262321, -3.4784625946686125], [1.6473146772593317, 0.5825111799145136, -1.0445008901667197, -1.7981018098261283, -3.7043990225733685], [1.8451340698418393, 0.10632065152408626, -1.1168759305769478, -1.0976456941095414, -3.9411919809699647], [1.8472726123345256, 0.3812085657607627, -0.4830242881920904, -1.0934154871682376, -3.7965412413303103], [2.0509583558968196, 0.6641962508960075, 0.026833723852789825, -1.1637337437647877, -3.362354039393207], [1.9360038068188605, 0.10833717774362633, -0.4270544244450627, -1.7313852555393794, -3.452261019053833], [1.7314139750514363, 0.3916625354728526, -0.4077747407613478, -1.8810657836258475, -3.721989179194293], [1.5249355588072486, 0.2949260521661487, -0.14649910904319996, -1.1328442812691437, -3.2298531708071954], [2.0650869453080434, 0.7524621659351978, -0.5786487810510486, -1.1176293386302196, -3.8439610489282217], [0.9004351893836333, -0.3044698840904343, -0.40712485246489405, -1.2282213668591166, -3.4985337424992924], [0.9231169246907056, -0.1683548212716071, -0.17974808829119726, -1.4445278971444508, -3.6426580851609067], [1.7462216645477469, -0.038677483755053615, -1.0133752584043632, -1.1568101245981337, -3.539908297882439], [0.07961405121167969, 0.12524976250305409, -1.4739302782523038, -1.477125404035044, -4.039659972820396], [1.92703522353106, 0.47117050689278406, -0.3201688480388312, -0.5395396873269662, -3.609413926266211], [1.1353067527968543, -0.4857090749565854, -0.3403485772393068, -1.1253324389684556, -3.8232773029948683], [1.4462609153842252, 0.2773072228312613, -0.9831331472009208, -1.540857762679831, -3.75826934522721], [0.8683894760369173, 0.032258442287604217, 0.12335186070047369, -0.8439345128999581, -3.5098794862470934], [2.527561103624483, 0.4267723320225905, -0.703988068018703, -1.0499214155016805, -3.69394830293501], [1.7866882645485374, 1.4323042491297562, -0.15181073680630713, -1.3464709292619397, -3.447122166283264], [1.6143069365146054, 1.5106311463479387, -0.2273320971085866, -1.3280881423662392, -3.636241285755551], [1.7840142216926667, 1.1977821231539971, -0.2760666234226506, -1.0889437072019736, -3.378916266494344], [2.008539839821569, 0.8630349065239442, -0.11131727682013884, -1.3438824780360228, -3.53901281454786], [1.254748783511158, -0.40359244131143485, -0.15163021639132493, -0.6705780850433816, -3.7238855547720737], [0.9576335859849576, -1.1040276878327506, -0.34909284659037565, -0.6287407697892399, -3.659708189710349], [1.8083690236439889, 1.5215468862100718, -0.33374709453166707, -0.8961591443471627, -3.5515918568272946], [1.1928143714451318, -0.30661063237052066, -0.33563433402169496, -0.8588461402540191, -3.371393422942976], [1.7215272332074876, 0.6299792667563752, -0.49118255409520767, -1.0185261879631662, -3.6136744892138073], [1.6428540928018838, 0.09647717987352047, -1.3010337416026836, -1.6435392117723027, -3.982812520753554], [1.5096571283008093, 0.05490444620148009, -1.179427373483997, -1.4909387503845237, -3.7616066069688436], [1.496803459860318, -0.20255647560629725, -0.11998583780391645, -1.4537894045590745, -3.471289441125348], [1.6088473547609905, -0.2670472620563494, -0.06339867022491229, -1.5497560466770903, -3.5998804936313658], [1.6074696969296511, 0.11704169746940815, -0.6765605918698575, -1.410917673424204, -3.575089696135567], [1.798082357370708, 0.7924789509963848, -0.5792536110430865, -1.181607368318576, -3.7856906186229176], [1.8509026285041414, 0.24987900352314812, -1.1376107421944823, -1.7607765339270645, -3.8296961981648514], [1.6904272182405433, 0.883108731549622, -1.1131112374362244, -1.287543066782294, -3.8530152870822487], [1.7478840792048769, 0.5188789774035412, -0.8448209220620961, -0.9787710425460299, -3.88488836776193], [1.1416224915818138, -0.3477418048801745, -1.1304393810991884, -1.4319645249685524, -3.820370963928233], [1.6311843908198376, 0.10593104697078268, -0.8785409262089441, -1.456413380320022, -3.8864984534532914], [1.3653017917657855, 0.4624864842012179, -0.8352342901506413, -1.4419212037444964, -3.712600919291023], [1.3246212110626625, 0.43661104252430616, -0.6314325548562036, -1.2975850858644953, -3.943205042528908], [0.8340556329612109, 0.14160719099161853, -1.2771064125028246, -1.69717626502208, -3.955136193678492], [0.8227544807446096, 0.013885822991762081, -1.3814887415779216, -1.5498030066571755, -3.6198022295665644], [0.880748319162031, -0.17353451674114545, -1.1951332085673005, -1.6239339409272326, -3.813257699424764], [1.5769684824606196, -0.09587996489103068, -1.0421494492028256, -1.5712287746394669, -3.8972216841238536], [1.5455968654726633, 0.2858220603114273, -1.070801215975986, -1.409006073478273, -3.7861547957681747], [1.972031392164939, 0.998189976250593, -1.1770152423150648, -1.601389127160737, -3.934358625451527], [0.5904407744973595, -0.5179290823344354, -0.07254963375336118, -1.2623919819142582, -3.6203495241069414], [0.5757673524978864, -0.3813699007465474, -0.1661060789056606, -1.3564313583401701, -3.656816292049225], [0.725718936113595, 0.4939105809552353, -0.7086297098328602, -1.388979449281654, -3.6076599644122838], [2.1668224453160407, 0.1604002766618352, -1.338432196072705, -1.4316234205967175, -4.084385820895046], [2.1425792937818398, 0.16721975589974553, -1.2789163620486295, -1.3238815505073875, -3.8756107532017627], [1.0987203256078573, 0.26106989288715277, -0.7133651152533003, -1.5965513343763666, -3.834495864221383], [1.0485077587735248, 0.048593464683945486, 0.2122393065007337, 0.01744050664573299, -3.2326820466959965], [1.1258886015607126, -0.38785570268901115, 0.32217843427582915, 0.17908948454743417, -3.8786912096391783], [1.0676749854212355, -0.3338804765094055, 0.1602958332112114, 0.09419491841369161, -3.8093831753837213], [0.1939258268318839, -1.4396543521101595, 0.1050880372921898, -0.23740817773672682, -3.8020900408981047], [0.04027695893634503, -1.3375979550354251, 0.28673404442907635, 0.009792424782522013, -3.412667299781535], [-0.03768986451116232, -1.5566916800533652, 0.49424337123791595, 0.46809915375122424, -3.63121345245803], [0.835073563473544, -2.3948021025744155, 0.3054038164441213, -0.3742775568969986, -3.6364624292289816], [1.5801048341844781, -2.2343149790800285, 0.4832750358207519, 0.26056333302162543, -3.741516567480467], [-0.32983257757280077, -0.8768156823842927, 0.5714460504974054, -0.09884820234707356, -3.3873235005348], [-0.2331347365685443, -0.5758059941965056, 2.3701556218012882, 0.28521823368911636, -3.397360572672845], [-0.8139089105614739, -0.9648003868172571, 1.3157899530830695, 0.32231944155601805, -3.4168943757942922], [-0.1235609021911574, -1.2823571955948034, 1.946877859460387, 0.21874891974544408, -3.669769601497202], [-0.1897680971007304, -1.1414743323184455, 1.7985853787862696, 0.3020847235682789, -3.4722789382920167], [-0.5489855520407942, -1.038701065744775, 1.9728649192472119, 0.7834606422118524, -3.832527008690893], [-0.4895203440316569, -0.6635799271039169, 2.2350275762021465, -0.07169753461278697, -3.9427792958883217], [-0.7259696784199287, -1.0223410831390436, 2.2877723785525963, -0.06657034898990281, -3.6431186398727635], [-0.18292693697152712, -0.7657320437354885, 2.3679018687077495, 0.1103118306065767, -3.8359222253458056], [-0.060662538528514706, -1.0204496208331646, 2.2778898543300667, 0.04762907168196409, -3.628816727782345], [0.1157232386909703, -0.9894163161607585, 2.0387903880286578, 0.2836031488499837, -3.554672551949166], [-0.202741767446813, -0.7339940682395381, 1.7600368940275228, 0.32106229696998373, -3.58811180186977], [-0.07414155949912227, -1.1894854805087347, 1.3856855209942005, 0.37141667697589403, -3.6137341292798086], [0.011844674358172574, -1.166890351895432, 1.772088236945838, -0.40318487654856233, -3.4683381567565323], [-0.15489959636920683, -1.262501131673718, 1.677551420854749, -0.1291411199819305, -3.360326755284761], [-0.4076556432808033, -0.8142520796724513, 1.312685752681181, -0.4656194533102631, -3.7616869224057115], [0.16977445625413118, -0.5766878531738288, 1.1410909053786344, -0.8022644938486202, -3.493059827140353], [0.12349436816474345, -0.35576044137622653, 0.12396886002525073, -0.30475331635703135, -3.5954690062872676], [0.1640031285080359, -0.46808358103141745, 0.3919443506237519, -0.28810684118285573, -3.5718613475289493], [0.03772667876791287, -0.39098478636598916, 0.5057013686721341, -0.04248807657359256, -3.48525940138195], [-0.09718982761462443, -0.9689821226586983, 1.6326697431077801, -0.06857415128612372, -3.4150497223313256], [-0.16591862697365328, -1.224223051940105, 0.9802902473742033, 0.27778583438546744, -3.700559972333621], [-1.5114613799768883, -1.468430859826255, 1.2831740180782767, -0.47988390809526515, -3.518082082116238], [-1.2027788468415461, -1.7257148285839057, 0.8572446011311884, 0.008920985535288306, -3.5767815508840424], [-0.6508676987877935, -1.2846596026390833, 1.7406996653707323, 0.5313867001087514, -3.8759678668979536], [-0.7415706562536898, -1.1269103110168939, 1.2058874254328553, 0.035473163221967155, -3.6280933193155542], [-0.4565238302680286, -1.2464999398353176, 1.2072221774666132, -0.41809112734030535, -3.657478725787345], [-1.1907921837167346, -1.4104174024515115, 1.5957053792608888, 0.6345213171721059, -3.831537305947168], [-0.9750158900762973, -1.3579672073601199, 1.6395542665547982, -0.1897937507429551, -3.7271939488052883], [-0.8134379652543033, -1.0957915016599769, 1.541734431291357, -0.33422910817459345, -3.730366246489507], [-0.1283194545253163, -1.1733941697365002, 1.2629321575585675, 0.7664569576954227, -3.5520388180008555], [0.2030554509331111, 0.2915579996971185, 1.779615677197802, -1.458914580166151, -3.460827475342807], [0.04436925605122821, -0.5229063579781937, 2.235314989559823, -0.2866350591592206, -3.637495881357561], [0.06312212088940866, -1.0380450955646698, 1.4469285329524098, 0.4676388579603056, -3.614496662193912], [0.46038127847556287, -0.060560424100242184, 0.8651491379110665, 0.3178285436296391, -3.3918142681416112], [-0.04627816451605413, -0.14562256910624144, 0.8438141237274726, 0.08878706574502199, -3.6124394370125565]], NamedTuple[(n_steps = 1, is_accept = true, acceptance_rate = 3.407858078045861e-136, log_density = -19.834227119993855, hamiltonian_energy = 23.0015908441275, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 311.92548868285616, tree_depth = 1, numerical_error = false, step_size = 0.4, nom_step_size = 0.4, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -19.834227119993855, hamiltonian_energy = 21.456965302083006, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 26996.402098845854, tree_depth = 0, numerical_error = true, step_size = 0.9340259163636535, nom_step_size = 0.9340259163636535, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9130452161627877, log_density = -3.7660627888638505, hamiltonian_energy = 19.886167501292093, hamiltonian_energy_error = -0.5298843467121586, max_hamiltonian_energy_error = -2.1176421396300427, tree_depth = 2, numerical_error = false, step_size = 0.09209433883419865, nom_step_size = 0.09209433883419865, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.9924687140571896, log_density = -4.764804846538283, hamiltonian_energy = 5.371137710356448, hamiltonian_energy_error = 0.022853009971466776, max_hamiltonian_energy_error = -0.11574259371458151, tree_depth = 2, numerical_error = false, step_size = 0.07607888924578884, nom_step_size = 0.07607888924578884, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 3.259440882474383, hamiltonian_energy = 5.127433459218992, hamiltonian_energy_error = -0.4389663102060659, max_hamiltonian_energy_error = -0.4389663102060659, tree_depth = 2, numerical_error = false, step_size = 0.09903942588885194, nom_step_size = 0.09903942588885194, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 6.957811875769412, hamiltonian_energy = -2.940303934584259, hamiltonian_energy_error = -0.8442283215514648, max_hamiltonian_energy_error = -0.8442283215514648, tree_depth = 2, numerical_error = false, step_size = 0.15307417943831367, nom_step_size = 0.15307417943831367, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.9206519196948842, log_density = 7.607134575429145, hamiltonian_energy = -5.910790415205659, hamiltonian_energy_error = -0.7484796992418721, max_hamiltonian_energy_error = 1.601806772583597, tree_depth = 3, numerical_error = false, step_size = 0.25859330429355826, nom_step_size = 0.25859330429355826, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.09937402922374085, log_density = 6.170042381848543, hamiltonian_energy = -5.389509013221871, hamiltonian_energy_error = 1.7153500949427416, max_hamiltonian_energy_error = 2886.9552594891948, tree_depth = 2, numerical_error = true, step_size = 0.35973795198381675, nom_step_size = 0.35973795198381675, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9836084703187085, log_density = 4.904386981245583, hamiltonian_energy = 0.4692574425185825, hamiltonian_energy_error = 0.0362581215369584, max_hamiltonian_energy_error = 0.04189790248312342, tree_depth = 4, numerical_error = false, step_size = 0.038871779661070006, nom_step_size = 0.038871779661070006, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9919500511874733, log_density = 7.6409963963530085, hamiltonian_energy = -3.8593949361805713, hamiltonian_energy_error = -0.09037838365026873, max_hamiltonian_energy_error = -0.11498852144695304, tree_depth = 3, numerical_error = false, step_size = 0.06787555851548363, nom_step_size = 0.06787555851548363, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.8947588507859012, log_density = 7.589953982391172, hamiltonian_energy = -5.465201647270662, hamiltonian_energy_error = -0.04950335663800853, max_hamiltonian_energy_error = 0.3269337376052679, tree_depth = 3, numerical_error = false, step_size = 0.12384337492082474, nom_step_size = 0.12384337492082474, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9928035487533505, log_density = 5.434721538314516, hamiltonian_energy = -4.326118700314366, hamiltonian_energy_error = -0.2258177296131736, max_hamiltonian_energy_error = -0.3598839424300442, tree_depth = 3, numerical_error = false, step_size = 0.1677162735791507, nom_step_size = 0.1677162735791507, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.03305575878409451, log_density = 0.7553228995746544, hamiltonian_energy = -0.07953421290297846, hamiltonian_energy_error = 1.4712329219685394, max_hamiltonian_energy_error = 1277.7640732068187, tree_depth = 2, numerical_error = true, step_size = 0.31075157301349493, nom_step_size = 0.31075157301349493, is_adapt = true), (n_steps = 63, is_accept = true, acceptance_rate = 0.9999942269392484, log_density = 0.8503309929171294, hamiltonian_energy = 1.3121921397696612, hamiltonian_energy_error = -0.0004071173566102537, max_hamiltonian_energy_error = -0.015251626478145486, tree_depth = 6, numerical_error = false, step_size = 0.02838093383506631, nom_step_size = 0.02838093383506631, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9981452123815504, log_density = 2.063259414190931, hamiltonian_energy = 0.9010057671366911, hamiltonian_energy_error = -0.025785855835513072, max_hamiltonian_energy_error = -0.04392106801372897, tree_depth = 4, numerical_error = false, step_size = 0.054406191274821686, nom_step_size = 0.054406191274821686, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9944280854872176, log_density = 7.820601861281242, hamiltonian_energy = -0.385925324648956, hamiltonian_energy_error = -0.03890348792085607, max_hamiltonian_energy_error = -0.07052247629596309, tree_depth = 4, numerical_error = false, step_size = 0.10328655247290273, nom_step_size = 0.10328655247290273, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.8556937389942515, log_density = 6.710499429527317, hamiltonian_energy = -4.926856638717313, hamiltonian_energy_error = 0.12059533966636238, max_hamiltonian_energy_error = 0.4601186621280382, tree_depth = 3, numerical_error = false, step_size = 0.19268901925754042, nom_step_size = 0.19268901925754042, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.45279453322479035, log_density = 6.710499429527317, hamiltonian_energy = -3.5866712206190354, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 2.1422908291067726, tree_depth = 2, numerical_error = false, step_size = 0.23360233678432926, nom_step_size = 0.23360233678432926, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9573677930049603, log_density = 4.87659865197206, hamiltonian_energy = -3.532337003070011, hamiltonian_energy_error = 0.07351923301544927, max_hamiltonian_energy_error = 0.08673297557389015, tree_depth = 4, numerical_error = false, step_size = 0.08338474478699177, nom_step_size = 0.08338474478699177, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.1810419191327135, hamiltonian_energy = -4.104885380391004, hamiltonian_energy_error = -0.1691327609210571, max_hamiltonian_energy_error = -0.2136327766669508, tree_depth = 4, numerical_error = false, step_size = 0.13804742430289785, nom_step_size = 0.13804742430289785, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9848361062971086, log_density = 8.645498771072877, hamiltonian_energy = -5.839219823858955, hamiltonian_energy_error = -0.1358534378070031, max_hamiltonian_energy_error = -0.2007877080467768, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.851109051072573, log_density = 6.176236098464395, hamiltonian_energy = -1.5819430983457652, hamiltonian_energy_error = 0.20575081188303024, max_hamiltonian_energy_error = 0.3235503846905756, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7445406966877692, log_density = 4.959033383594191, hamiltonian_energy = -1.6881261904614746, hamiltonian_energy_error = 0.2762955784771641, max_hamiltonian_energy_error = 0.6269423430783561, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9798171082261936, log_density = 7.301673619229119, hamiltonian_energy = -3.811970517891474, hamiltonian_energy_error = -0.15947431678058477, max_hamiltonian_energy_error = -0.15947431678058477, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8403576390374006, log_density = 6.097979018667571, hamiltonian_energy = -4.854236554778759, hamiltonian_energy_error = 0.31482092124854955, max_hamiltonian_energy_error = 0.40469635026234574, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 7.886346690568157, hamiltonian_energy = -6.2957498500709095, hamiltonian_energy_error = -0.2707032494475854, max_hamiltonian_energy_error = -0.2707032494475854, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9268875947129479, log_density = 6.355734220072952, hamiltonian_energy = -5.542963602601745, hamiltonian_energy_error = 0.03468626527016916, max_hamiltonian_energy_error = 0.2537706035942584, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9800613138363187, log_density = 7.438464627123736, hamiltonian_energy = -4.684769379892797, hamiltonian_energy_error = -0.02098167378774285, max_hamiltonian_energy_error = 0.22060330771403258, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9895303436647875, log_density = 7.889031853616386, hamiltonian_energy = -4.680205313526423, hamiltonian_energy_error = -0.05336873745764592, max_hamiltonian_energy_error = -0.07803825575179513, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9240039018931362, log_density = 6.477817376313126, hamiltonian_energy = -5.019587850350122, hamiltonian_energy_error = 0.09678414777150479, max_hamiltonian_energy_error = 0.1458818835933533, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9491409575443167, log_density = 8.228096573354115, hamiltonian_energy = -4.614781734850864, hamiltonian_energy_error = -0.14839363118841487, max_hamiltonian_energy_error = -1.3659392380939677, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8154377182539407, log_density = 5.977966320327932, hamiltonian_energy = -2.984241820427495, hamiltonian_energy_error = 0.27199031293720877, max_hamiltonian_energy_error = 0.4359952861915004, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9782961123317728, log_density = 6.28624867893684, hamiltonian_energy = -3.918746134004139, hamiltonian_energy_error = -0.1069539653738949, max_hamiltonian_energy_error = 0.14745910676485918, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.76458290586246, hamiltonian_energy = -5.855829034744758, hamiltonian_energy_error = -0.017111407053095107, max_hamiltonian_energy_error = -0.12908878607636787, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9824357754962965, log_density = 8.160163843424632, hamiltonian_energy = -4.8436718451892045, hamiltonian_energy_error = -0.06886580820202326, max_hamiltonian_energy_error = -0.12235553947264499, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8959732380197138, log_density = 6.735213190149725, hamiltonian_energy = -5.8432891758315915, hamiltonian_energy_error = 0.07578032435504589, max_hamiltonian_energy_error = 0.4188507947138902, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9295487705344364, log_density = 7.298182345337038, hamiltonian_energy = -4.201834512546543, hamiltonian_energy_error = -0.004504839502450508, max_hamiltonian_energy_error = 0.23368820681717217, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9716116034187153, log_density = 6.5931002562526215, hamiltonian_energy = -5.05983466528212, hamiltonian_energy_error = -0.032248473511241826, max_hamiltonian_energy_error = 0.3096663106864721, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9679755398028985, log_density = 7.36475292975004, hamiltonian_energy = -5.056498996171351, hamiltonian_energy_error = -0.07052551358320791, max_hamiltonian_energy_error = -0.22631147059204793, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9356130873008387, log_density = 7.806751553679667, hamiltonian_energy = -6.200607011648491, hamiltonian_energy_error = -0.05917560737737304, max_hamiltonian_energy_error = 0.15618324734686073, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.810848732748423, log_density = 6.073789669302518, hamiltonian_energy = -4.627339189039571, hamiltonian_energy_error = 0.3114490248288284, max_hamiltonian_energy_error = 0.34750033429317106, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6873484869111023, log_density = 3.1575172631047055, hamiltonian_energy = -1.6528040390536969, hamiltonian_energy_error = 0.7954359176815906, max_hamiltonian_energy_error = 1.672202347726083, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.890349254408861, log_density = 6.875466953263697, hamiltonian_energy = -3.1607449594161574, hamiltonian_energy_error = -1.2413297897532207, max_hamiltonian_energy_error = -2.031078527348087, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.830935604197845, log_density = 5.359074599804558, hamiltonian_energy = -3.739302571868257, hamiltonian_energy_error = 0.15206179326557123, max_hamiltonian_energy_error = 0.27727168524088164, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9971836201455079, log_density = 6.899682279100876, hamiltonian_energy = -4.3637639589259525, hamiltonian_energy_error = -0.17607773163021534, max_hamiltonian_energy_error = -0.2580260224336062, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8725321619522366, log_density = 6.684026691640803, hamiltonian_energy = -3.719415963186914, hamiltonian_energy_error = -0.0013503537621546435, max_hamiltonian_energy_error = 0.35719612264345013, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.991118373119216, log_density = 6.368822772574164, hamiltonian_energy = -4.517858288728949, hamiltonian_energy_error = -0.006790372051101556, max_hamiltonian_energy_error = -0.27678433537658265, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9768740987756549, log_density = 4.558245549164889, hamiltonian_energy = -3.0704721818961493, hamiltonian_energy_error = 0.07238801118973814, max_hamiltonian_energy_error = -0.27779623591488933, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9821774851769485, log_density = 6.664396291880115, hamiltonian_energy = -3.6579389804514273, hamiltonian_energy_error = -0.21084156074858473, max_hamiltonian_energy_error = -0.3572724616357057, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 6.013347337733844, hamiltonian_energy = -5.25852628338852, hamiltonian_energy_error = -0.032119782083389836, max_hamiltonian_energy_error = -0.14728223146839348, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9838449404466019, log_density = 7.664895928460009, hamiltonian_energy = -4.472771854391647, hamiltonian_energy_error = -0.035282004573209846, max_hamiltonian_energy_error = -0.11475397374307228, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9394931863611651, log_density = 8.236985013338824, hamiltonian_energy = -4.99364126603253, hamiltonian_energy_error = -0.012736414689317854, max_hamiltonian_energy_error = 0.2519736250768396, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9968615106073594, log_density = 8.004237418576743, hamiltonian_energy = -7.516711311967742, hamiltonian_energy_error = 0.022214347420100644, max_hamiltonian_energy_error = -0.0494624292864998, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9562528726697835, log_density = 7.293736866219074, hamiltonian_energy = -5.821778697615484, hamiltonian_energy_error = 0.013172132499450484, max_hamiltonian_energy_error = -0.14878527552117582, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.995452028669226, log_density = 6.718461740070937, hamiltonian_energy = -4.796247052396536, hamiltonian_energy_error = -0.029576101268768085, max_hamiltonian_energy_error = -0.1138081919310725, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9761112195098322, log_density = 4.96632909880881, hamiltonian_energy = -3.505784468145773, hamiltonian_energy_error = 0.06184599304229277, max_hamiltonian_energy_error = -0.07884183757400054, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8643121564851616, log_density = 6.463848675151937, hamiltonian_energy = 0.5258855399516102, hamiltonian_energy_error = 0.16332478329580802, max_hamiltonian_energy_error = 0.2825073397967537, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.8122056455547632, log_density = 5.483742169287846, hamiltonian_energy = -2.3347190346998397, hamiltonian_energy_error = 0.20637128699823704, max_hamiltonian_energy_error = 3.176409954033347, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9821411322589899, log_density = 7.055192094238266, hamiltonian_energy = -2.067431814937252, hamiltonian_energy_error = -0.2928082788887032, max_hamiltonian_energy_error = -0.4012765965785823, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9866141289708221, log_density = 6.803498992351457, hamiltonian_energy = -5.339967577438962, hamiltonian_energy_error = -0.0013796584101006815, max_hamiltonian_energy_error = 0.12866130445785284, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9930332075133013, log_density = 8.25006497933376, hamiltonian_energy = -4.9686470360645885, hamiltonian_energy_error = -0.1335906709136916, max_hamiltonian_energy_error = -0.1335906709136916, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9623301586589137, log_density = 6.746270865007023, hamiltonian_energy = -5.540876180904968, hamiltonian_energy_error = 0.06258156869253106, max_hamiltonian_energy_error = 0.10287334655149039, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.7661968313251826, log_density = 3.027359925973842, hamiltonian_energy = 2.435836960647939, hamiltonian_energy_error = 0.23918869786915042, max_hamiltonian_energy_error = 0.8017360073530808, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8975701479941282, log_density = 4.663964563829788, hamiltonian_energy = 1.3922443373847866, hamiltonian_energy_error = -0.5321846383426312, max_hamiltonian_energy_error = 0.5806591743522982, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9006777189810277, log_density = 1.0384131376559438, hamiltonian_energy = 1.4228000457841379, hamiltonian_energy_error = -0.13334197441488804, max_hamiltonian_energy_error = 0.5683956015287901, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9980999060573402, log_density = 4.466698162793588, hamiltonian_energy = 1.5778967278375031, hamiltonian_energy_error = -0.15134416489796543, max_hamiltonian_energy_error = -0.21003391395578896, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.945879839768326, log_density = 4.575019962461045, hamiltonian_energy = -2.792824241586399, hamiltonian_energy_error = 0.11123478764105998, max_hamiltonian_energy_error = 0.12066261380805221, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9253986670795663, log_density = 3.7714420557084924, hamiltonian_energy = -0.049673459495130246, hamiltonian_energy_error = -0.0007930511964122644, max_hamiltonian_energy_error = 0.3909027920109692, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7842263566351939, log_density = 6.631863153360184, hamiltonian_energy = -2.095803968852623, hamiltonian_energy_error = 0.6262568125071768, max_hamiltonian_energy_error = 0.6782754490953673, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9072112028057785, log_density = 7.029240502734022, hamiltonian_energy = -4.898905054986507, hamiltonian_energy_error = -0.05345442136755274, max_hamiltonian_energy_error = 0.8059391503705857, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9835241622429187, log_density = 6.456465661326175, hamiltonian_energy = -5.61724935707796, hamiltonian_energy_error = -0.040739155832681284, max_hamiltonian_energy_error = -0.18976925079211338, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9751458717662196, log_density = 7.311288269696197, hamiltonian_energy = -5.183599364139554, hamiltonian_energy_error = -0.07892206356674336, max_hamiltonian_energy_error = -0.1444536589260741, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.772132824490003, log_density = 6.0712841164799105, hamiltonian_energy = -5.163079812039414, hamiltonian_energy_error = 0.22312809402538747, max_hamiltonian_energy_error = 1.3093034026457664, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.36984081571395777, log_density = 7.025472938131683, hamiltonian_energy = -3.9092674157257385, hamiltonian_energy_error = -1.3014989424423264, max_hamiltonian_energy_error = 2.9559651812562246, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.5980350310156114, log_density = 6.514138194268046, hamiltonian_energy = -4.715890911724168, hamiltonian_energy_error = 0.6128857638861245, max_hamiltonian_energy_error = 0.6908477130967565, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.242574255620491, hamiltonian_energy = -4.01128102921952, hamiltonian_energy_error = -0.24073334625538045, max_hamiltonian_energy_error = -0.46487527518580674, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9583652554321755, log_density = 7.3116039389120795, hamiltonian_energy = -5.581306787190564, hamiltonian_energy_error = -0.025228278613799837, max_hamiltonian_energy_error = -0.18365339585499552, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9708999379786155, log_density = 7.189798175877142, hamiltonian_energy = -3.896906839293271, hamiltonian_energy_error = -0.020054843967206804, max_hamiltonian_energy_error = -0.14824360292330985, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.867483886742491, log_density = 5.009932981767099, hamiltonian_energy = -1.8693620088103922, hamiltonian_energy_error = -0.09514507830522145, max_hamiltonian_energy_error = 1.4825371179925806, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.920252055087573, log_density = 3.9457898368397375, hamiltonian_energy = -0.9974026370068692, hamiltonian_energy_error = 0.14441136344136707, max_hamiltonian_energy_error = -0.5875465354847389, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9248183906984184, log_density = 7.211254477316979, hamiltonian_energy = -2.92108768335149, hamiltonian_energy_error = -0.4350017192594202, max_hamiltonian_energy_error = 0.49047189336011754, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9730895669556693, log_density = 6.569870199425376, hamiltonian_energy = -4.871278163319662, hamiltonian_energy_error = 0.10570815328113703, max_hamiltonian_energy_error = -0.14392024470582765, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9297934674439567, log_density = 8.311943684020457, hamiltonian_energy = -3.065956177764341, hamiltonian_energy_error = -0.17464780798831203, max_hamiltonian_energy_error = 0.3055620997570627, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9153099770478292, log_density = 7.80972699967558, hamiltonian_energy = -5.246966298976429, hamiltonian_energy_error = 0.07768902902649, max_hamiltonian_energy_error = 0.5417592724241294, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.43868685364070525, log_density = 5.833386368382742, hamiltonian_energy = -3.008997384566243, hamiltonian_energy_error = 1.1005582608652946, max_hamiltonian_energy_error = 1.3846039229481795, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.891150188878698, log_density = 6.492478759320061, hamiltonian_energy = -3.4999453316616056, hamiltonian_energy_error = -0.17030837193652282, max_hamiltonian_energy_error = 0.34740052419617085, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9999764440093256, log_density = 7.947271563436619, hamiltonian_energy = -6.388843400789098, hamiltonian_energy_error = -0.33743816799599546, max_hamiltonian_energy_error = -0.3807944347882666, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.768883904127153, log_density = 6.511936575690449, hamiltonian_energy = -3.8775245737926762, hamiltonian_energy_error = 0.43476244510636475, max_hamiltonian_energy_error = 1.000965893664636, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9855752246172117, log_density = 7.749930401560977, hamiltonian_energy = -5.198866721481927, hamiltonian_energy_error = -0.1827247087453303, max_hamiltonian_energy_error = -0.2576729679846155, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6876747296898884, log_density = 7.555721603038263, hamiltonian_energy = -5.524671999263171, hamiltonian_energy_error = -0.12571813143919108, max_hamiltonian_energy_error = 1.6149805638015855, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9935155819673854, log_density = 7.0914242957366795, hamiltonian_energy = -4.989293277025096, hamiltonian_energy_error = 0.01676258307147549, max_hamiltonian_energy_error = -0.19615907003823363, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 7.122483537328989, hamiltonian_energy = -6.937700889129779, hamiltonian_energy_error = -0.025604815396897962, max_hamiltonian_energy_error = -0.06377965243348349, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.939045925397812, log_density = 6.83214285126359, hamiltonian_energy = -3.1743072455690724, hamiltonian_energy_error = 0.03295154218184049, max_hamiltonian_energy_error = 0.14687185324253482, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7130036638571928, log_density = 5.085906837305549, hamiltonian_energy = -3.696864822488536, hamiltonian_energy_error = 0.2800764954567678, max_hamiltonian_energy_error = 0.4785493095758202, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9541141471925535, log_density = 6.704452074654679, hamiltonian_energy = -3.4384371277525814, hamiltonian_energy_error = -0.33211239868794706, max_hamiltonian_energy_error = -0.34527924879530936, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8617582165586289, log_density = 6.593561136411292, hamiltonian_energy = -5.430152908983041, hamiltonian_energy_error = 0.10862857123468928, max_hamiltonian_energy_error = 0.20913940431225075, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.4255384998719219, log_density = -0.3970430518781036, hamiltonian_energy = 4.700681835719709, hamiltonian_energy_error = 0.6499642628958986, max_hamiltonian_energy_error = 6.319964060890868, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9514471208514822, log_density = 7.596865858107735, hamiltonian_energy = 2.9184700698908017, hamiltonian_energy_error = -1.077757677164323, max_hamiltonian_energy_error = -1.077757677164323, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9661362578532131, log_density = 6.758345401205938, hamiltonian_energy = -5.7012863242584455, hamiltonian_energy_error = 0.07065042292104007, max_hamiltonian_energy_error = 0.09091647720990625, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9485298980407222, log_density = 8.417006938995113, hamiltonian_energy = -5.113778195466711, hamiltonian_energy_error = -0.03490531680655096, max_hamiltonian_energy_error = 0.16774357707486587, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9551550907301285, log_density = 7.11043231054809, hamiltonian_energy = -6.212607324265844, hamiltonian_energy_error = -0.01216863347831243, max_hamiltonian_energy_error = 0.08953553585290042, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9943416540491373, log_density = 6.851709062365433, hamiltonian_energy = -6.006876126345453, hamiltonian_energy_error = 0.005043340244674788, max_hamiltonian_energy_error = -0.040573235505754646, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9969353101496853, log_density = 5.958858184937853, hamiltonian_energy = -4.518707441622433, hamiltonian_energy_error = -0.11286599718870072, max_hamiltonian_energy_error = -0.15087571476163664, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9282181755060349, log_density = 5.845669320778078, hamiltonian_energy = -1.5407396044781247, hamiltonian_energy_error = -0.05088053016872163, max_hamiltonian_energy_error = 0.18601152548762911, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9945404608454698, log_density = 7.638942785279129, hamiltonian_energy = -4.7348703146385045, hamiltonian_energy_error = -0.16322387889451484, max_hamiltonian_energy_error = -0.3837028505290263, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9874774487963364, log_density = 8.343783157951913, hamiltonian_energy = -6.674628807042298, hamiltonian_energy_error = 0.0008290012539546865, max_hamiltonian_energy_error = 0.030028966319191497, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8316992467857187, log_density = 6.801576891097685, hamiltonian_energy = -5.804816565645913, hamiltonian_energy_error = 0.15825133642508327, max_hamiltonian_energy_error = 0.6816904087063875, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9977163371584866, log_density = 8.042085756872611, hamiltonian_energy = -6.273866813544374, hamiltonian_energy_error = -0.6287301442417785, max_hamiltonian_energy_error = -0.6287301442417785, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9728816855646495, log_density = 7.320676153898944, hamiltonian_energy = -7.0807871143004695, hamiltonian_energy_error = 0.09704669774474439, max_hamiltonian_energy_error = 0.09704669774474439, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9270422437542543, log_density = 7.385966629019432, hamiltonian_energy = -4.810677801684454, hamiltonian_energy_error = -0.17536698562204833, max_hamiltonian_energy_error = 0.5978019915803188, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9162552637725712, log_density = 7.95477761312711, hamiltonian_energy = -5.618379109260776, hamiltonian_energy_error = 0.10610373556173602, max_hamiltonian_energy_error = 0.21481630595267376, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8736994854299375, log_density = 5.667033724666766, hamiltonian_energy = -4.892084535077327, hamiltonian_energy_error = 0.2061945849615503, max_hamiltonian_energy_error = 0.2061945849615503, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9750341720637813, log_density = 6.706652092323614, hamiltonian_energy = -4.2756710423854685, hamiltonian_energy_error = -0.12899916859287863, max_hamiltonian_energy_error = -0.21600521095106817, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.875288484246538, log_density = 6.230251640960194, hamiltonian_energy = -4.463942677790217, hamiltonian_energy_error = -0.03534250934647076, max_hamiltonian_energy_error = 0.4222143160375138, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7716098412791698, log_density = 4.224173990686042, hamiltonian_energy = -2.804680696380043, hamiltonian_energy_error = 0.2360096555290352, max_hamiltonian_energy_error = 0.9185342122071094, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9648635903409849, log_density = 2.6828761579089964, hamiltonian_energy = -1.4938850586497003, hamiltonian_energy_error = 0.20019692297490943, max_hamiltonian_energy_error = -0.2523586770128432, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9863803939533149, log_density = 7.507364740887793, hamiltonian_energy = -0.9665032894868304, hamiltonian_energy_error = -0.3954547058009954, max_hamiltonian_energy_error = -0.3954547058009954, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9987377512279002, log_density = 8.656868208157835, hamiltonian_energy = -7.350545101252295, hamiltonian_energy_error = -0.07529546545299137, max_hamiltonian_energy_error = -0.07648005299865535, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 0.8743421731075471, log_density = 7.882382521491266, hamiltonian_energy = -7.026391351850243, hamiltonian_energy_error = 0.1264433505516207, max_hamiltonian_energy_error = 0.2083848859925741, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8802226618009747, log_density = 6.753883350389643, hamiltonian_energy = -5.643085442733872, hamiltonian_energy_error = 0.1502094563903995, max_hamiltonian_energy_error = 0.4589294126377359, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9106381279447255, log_density = 7.814989589768924, hamiltonian_energy = -4.583746214829443, hamiltonian_energy_error = 0.0838475615586658, max_hamiltonian_energy_error = 0.3781271372702655, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8912346501537893, log_density = 5.220388328633344, hamiltonian_energy = -4.088591687457139, hamiltonian_energy_error = 0.27287264859956295, max_hamiltonian_energy_error = 0.27287264859956295, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.4570439567617022, log_density = 7.439494494695971, hamiltonian_energy = -1.7051659323016999, hamiltonian_energy_error = -0.11739721038441386, max_hamiltonian_energy_error = 2.0101068619512983, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7423144335174106, log_density = 4.744150314399555, hamiltonian_energy = -4.259146315137571, hamiltonian_energy_error = 0.2916402258541009, max_hamiltonian_energy_error = 0.9983959096596462, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.38639242358436243, log_density = 3.0615916955019813, hamiltonian_energy = -0.48843294514618574, hamiltonian_energy_error = 0.04693332534467842, max_hamiltonian_energy_error = 8.601238431025369, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.501363642866371, hamiltonian_energy = -2.320570428720698, hamiltonian_energy_error = -0.2028001969427069, max_hamiltonian_energy_error = -0.2028001969427069, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6950208717209769, log_density = 8.24423863091909, hamiltonian_energy = -5.801933341711337, hamiltonian_energy_error = 0.44039335940427105, max_hamiltonian_energy_error = 0.6673613566194048, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9509194644256938, log_density = 7.2660975672003385, hamiltonian_energy = -5.768447810832291, hamiltonian_energy_error = -0.11658019763046035, max_hamiltonian_energy_error = 0.2887291391279341, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9429384809882324, log_density = 7.941284447922362, hamiltonian_energy = -6.01085523210413, hamiltonian_energy_error = -0.020691702322522154, max_hamiltonian_energy_error = 0.1765752162264036, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7564656167502297, log_density = 6.44446973456165, hamiltonian_energy = -3.5200806822069173, hamiltonian_energy_error = 0.43421830618324586, max_hamiltonian_energy_error = 0.4817440515229645, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9900242829793593, log_density = 6.5398885679948435, hamiltonian_energy = -4.394258229434378, hamiltonian_energy_error = -0.0926158199247551, max_hamiltonian_energy_error = -0.2692264779775213, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9749856503626307, log_density = 7.581740094821635, hamiltonian_energy = -4.711896729852616, hamiltonian_energy_error = -0.05189457538182918, max_hamiltonian_energy_error = 0.2013498851412372, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9978618439468042, log_density = 8.08842648714346, hamiltonian_energy = -6.117487586330679, hamiltonian_energy_error = -0.06959311615307495, max_hamiltonian_energy_error = -0.19079685139542857, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9842736586443032, log_density = 7.823944437324737, hamiltonian_energy = -6.907945753651751, hamiltonian_energy_error = 0.01090913379461167, max_hamiltonian_energy_error = 0.0857560388986478, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9994403971007385, log_density = 8.295127088025499, hamiltonian_energy = -7.433293829921199, hamiltonian_energy_error = -0.05883841748265617, max_hamiltonian_energy_error = -0.08482408770212313, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7355999657324441, log_density = 6.699849415228856, hamiltonian_energy = -2.8630496751830616, hamiltonian_energy_error = 0.13185038722389386, max_hamiltonian_energy_error = 0.4879779302280385, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9999495805376764, log_density = 7.607623727758716, hamiltonian_energy = -5.729798920744868, hamiltonian_energy_error = -0.10786282550920046, max_hamiltonian_energy_error = -0.15035596746670343, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8951116013991396, log_density = 5.423044797279464, hamiltonian_energy = -4.7179607122774465, hamiltonian_energy_error = 0.4932314703191283, max_hamiltonian_energy_error = 0.4932314703191283, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8056690531874594, log_density = 6.33374668394606, hamiltonian_energy = -2.985505215796107, hamiltonian_energy_error = 0.26659473720038385, max_hamiltonian_energy_error = 0.3944762453538764, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8897359723144435, log_density = 1.6130721927086018, hamiltonian_energy = -0.5533862311508613, hamiltonian_energy_error = 0.28271353178426706, max_hamiltonian_energy_error = 0.5623348251607712, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = -0.11736123376517327, hamiltonian_energy = 3.6305530664746253, hamiltonian_energy_error = -0.3829420873830949, max_hamiltonian_energy_error = -2.3092976752616177, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 5.916373936595589, hamiltonian_energy = -0.04272082433643032, hamiltonian_energy_error = -0.5428394002120178, max_hamiltonian_energy_error = -0.5428394002120178, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.660843680458237, log_density = 6.9715087160349505, hamiltonian_energy = -1.8367730077465083, hamiltonian_energy_error = -0.015665239985700907, max_hamiltonian_energy_error = 2.5943296274637144, tree_depth = 5, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9297422330602014, log_density = 6.960539830746344, hamiltonian_energy = -5.1260243640874315, hamiltonian_energy_error = -0.04519329477722245, max_hamiltonian_energy_error = 0.35748827962943697, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 5, is_accept = true, acceptance_rate = 0.9155131657335861, log_density = 7.498010421176698, hamiltonian_energy = -5.1571030937087325, hamiltonian_energy_error = 0.09020882737187907, max_hamiltonian_energy_error = 0.13956591793305329, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9934665506611594, log_density = 6.775361938000337, hamiltonian_energy = -5.5404264919499315, hamiltonian_energy_error = -0.0821477966267814, max_hamiltonian_energy_error = -0.11290276550543421, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9665620072476646, log_density = 8.585367488822087, hamiltonian_energy = -6.205085188291739, hamiltonian_energy_error = 0.0005127723221622915, max_hamiltonian_energy_error = 0.10026875033380467, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8211821171252426, log_density = 7.706895192106478, hamiltonian_energy = -5.15073469648839, hamiltonian_energy_error = 0.10334188044094361, max_hamiltonian_energy_error = 0.3299363115956311, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9755399633820152, log_density = 7.146037949023496, hamiltonian_energy = -5.6486019741800355, hamiltonian_energy_error = -0.03964850550845611, max_hamiltonian_energy_error = -0.09571148885193281, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9630842430441845, log_density = 5.423053898031375, hamiltonian_energy = -5.032187672342953, hamiltonian_energy_error = 0.052684777626920365, max_hamiltonian_energy_error = 0.4885316098536334, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6748268438004279, log_density = 4.05717646444211, hamiltonian_energy = -2.224931037953136, hamiltonian_energy_error = 0.1456188913837151, max_hamiltonian_energy_error = 1.5147286737064625, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.986920616453249, log_density = 7.379268506491078, hamiltonian_energy = -1.9585355185112814, hamiltonian_energy_error = -0.22474298834394668, max_hamiltonian_energy_error = -0.644562534068926, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8973459487030183, log_density = 7.710345363085336, hamiltonian_energy = -5.788777392904284, hamiltonian_energy_error = 0.16972281411731327, max_hamiltonian_energy_error = 0.3624454669076158, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9593338584910082, log_density = 7.703112744574858, hamiltonian_energy = -4.785537910754426, hamiltonian_energy_error = -0.052735526366111785, max_hamiltonian_energy_error = -0.12679005852681335, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9478673089174136, log_density = 7.11306168415332, hamiltonian_energy = -5.717360344579067, hamiltonian_energy_error = 0.2304717911171501, max_hamiltonian_energy_error = 0.26246050599896265, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.49738570450086783, log_density = 7.11306168415332, hamiltonian_energy = -6.213099046061303, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 0.7811604077250918, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.5781426642673938, log_density = 7.306533556674669, hamiltonian_energy = -4.584094393331206, hamiltonian_energy_error = 0.4063138577608587, max_hamiltonian_energy_error = 0.8368089852618787, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.875538934755123, log_density = 4.170366035424186, hamiltonian_energy = -3.834414085448135, hamiltonian_energy_error = 0.14985455458154773, max_hamiltonian_energy_error = 0.7710803039776462, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7150579022866689, log_density = 4.766240193152191, hamiltonian_energy = -0.02588283295218563, hamiltonian_energy_error = -0.1626340218528588, max_hamiltonian_energy_error = 2.7471974696029684, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.4024779432067322, log_density = 5.10929375680632, hamiltonian_energy = 1.7972277122663787, hamiltonian_energy_error = 1.1073080711607615, max_hamiltonian_energy_error = 1.646069932430228, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.401226454454061, hamiltonian_energy = -4.810274249011792, hamiltonian_energy_error = -0.370570428295113, max_hamiltonian_energy_error = -0.5722994184614754, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9367395573690407, log_density = 6.298366495804897, hamiltonian_energy = -5.359614306774191, hamiltonian_energy_error = 0.11664565076078048, max_hamiltonian_energy_error = 0.18644616989118035, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7697102173888931, log_density = 6.1399365179871666, hamiltonian_energy = -2.4144980071112783, hamiltonian_energy_error = 0.24796094630624577, max_hamiltonian_energy_error = 0.47558654387357757, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9915327436602711, log_density = 6.249582043668946, hamiltonian_energy = -5.03802693364416, hamiltonian_energy_error = -0.09636181566927249, max_hamiltonian_energy_error = -0.3471121878714003, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.140968167251991, hamiltonian_energy = -5.445087699459111, hamiltonian_energy_error = -0.04470514476508303, max_hamiltonian_energy_error = -0.2943862288647354, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9446151199787953, log_density = 7.750223870851352, hamiltonian_energy = -5.370382085136596, hamiltonian_energy_error = -0.20600718558567266, max_hamiltonian_energy_error = -0.3280592863877043, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9953673377441884, log_density = 8.418343731182878, hamiltonian_energy = -7.3794899780259655, hamiltonian_energy_error = -0.012383302706027166, max_hamiltonian_energy_error = -0.07643990835616332, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9905296023697933, log_density = 8.476903265082704, hamiltonian_energy = -6.874559038927278, hamiltonian_energy_error = -0.005939481331058261, max_hamiltonian_energy_error = 0.0358623275696095, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8709263697166698, log_density = 6.926597318969076, hamiltonian_energy = -5.776005962052618, hamiltonian_energy_error = 0.22350007720664689, max_hamiltonian_energy_error = 0.2630728713002135, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9955270639780592, log_density = 7.658855347462097, hamiltonian_energy = -5.27638551171137, hamiltonian_energy_error = -0.02482425858231707, max_hamiltonian_energy_error = -0.049814295360099514, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8837538163924589, log_density = 6.0129804690266955, hamiltonian_energy = -4.905820675480505, hamiltonian_energy_error = 0.012542251394566328, max_hamiltonian_energy_error = 0.2004572985771631, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9665551484063908, log_density = 8.194208618111501, hamiltonian_energy = -3.627027411833593, hamiltonian_energy_error = -0.1924904742951008, max_hamiltonian_energy_error = -0.1924904742951008, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9719663407178778, log_density = 7.3564134681189595, hamiltonian_energy = -6.983488725740465, hamiltonian_energy_error = 0.06851438032082946, max_hamiltonian_energy_error = 0.09157093671398098, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 8.12464058144043, hamiltonian_energy = -7.1991282621664014, hamiltonian_energy_error = -0.028925206485433286, max_hamiltonian_energy_error = -0.11347513638668438, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9498995113321944, log_density = 7.099782384017619, hamiltonian_energy = -5.908306804448575, hamiltonian_energy_error = 0.1294805978785032, max_hamiltonian_energy_error = 0.17856404721535668, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9835982287680647, log_density = 6.648705821354158, hamiltonian_energy = -5.682735018377954, hamiltonian_energy_error = 0.017829831649843086, max_hamiltonian_energy_error = -0.22222771624212534, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9256036301749313, log_density = 4.539616712267005, hamiltonian_energy = -1.9732404632516278, hamiltonian_energy_error = 0.10433733182949734, max_hamiltonian_energy_error = 0.31269645998193596, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9485884489638265, log_density = 5.545348331560232, hamiltonian_energy = -1.1620055474854123, hamiltonian_energy_error = -0.1688569843070411, max_hamiltonian_energy_error = -0.3913700192363567, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9828220264704463, log_density = 7.07888610899516, hamiltonian_energy = -4.655451151437111, hamiltonian_energy_error = -0.17918269990414704, max_hamiltonian_energy_error = -0.17918269990414704, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9223809054858355, log_density = 6.486805347955535, hamiltonian_energy = -5.640392589815393, hamiltonian_energy_error = 0.14297648657352813, max_hamiltonian_energy_error = 0.14297648657352813, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9392098780508616, log_density = 5.389036087783603, hamiltonian_energy = -2.4624081950291656, hamiltonian_energy_error = 0.09725683156095855, max_hamiltonian_energy_error = 0.3458831590801652, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9363747978582487, log_density = 5.954137026207938, hamiltonian_energy = -0.8225965664513168, hamiltonian_energy_error = -0.24601745717739743, max_hamiltonian_energy_error = -0.3438860644233168, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9483272653789159, log_density = 5.07691651801494, hamiltonian_energy = -2.0517162599080896, hamiltonian_energy_error = 0.05821222949672089, max_hamiltonian_energy_error = -0.29641635718918957, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9933649468158754, log_density = 4.750337224433164, hamiltonian_energy = -2.190532880502616, hamiltonian_energy_error = -0.20937658281127103, max_hamiltonian_energy_error = -0.3078908233804212, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9791444093696222, log_density = 5.11091549414661, hamiltonian_energy = -2.9389249100285664, hamiltonian_energy_error = -0.012972144601890445, max_hamiltonian_energy_error = -0.17752047435798834, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7844302012096266, log_density = 5.015851627923421, hamiltonian_energy = -2.0347924929890002, hamiltonian_energy_error = 0.3691120205517078, max_hamiltonian_energy_error = 0.4872648817136398, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8459172264281805, log_density = 3.285452365719131, hamiltonian_energy = -0.12993221587860226, hamiltonian_energy_error = 0.105847013778539, max_hamiltonian_energy_error = 0.3293460032518454, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9537824209775683, log_density = 5.302968029820608, hamiltonian_energy = 0.3364332001138166, hamiltonian_energy_error = -0.38372929229346386, max_hamiltonian_energy_error = -0.44717118790622834, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8715104121248188, log_density = 5.89228077462133, hamiltonian_energy = -1.8790896727004007, hamiltonian_energy_error = 0.06977020433912973, max_hamiltonian_energy_error = 0.3480463063280992, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9986014068888058, log_density = 5.285717224024678, hamiltonian_energy = -4.1493251161449445, hamiltonian_energy_error = -0.05363796763729223, max_hamiltonian_energy_error = -0.25815448521045337, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9858867153184512, log_density = 6.513011421319245, hamiltonian_energy = -4.872448289190294, hamiltonian_energy_error = -0.07158612984794477, max_hamiltonian_energy_error = -0.2813592892123111, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9046439468935402, log_density = 7.0003722223422, hamiltonian_energy = -4.832706204020589, hamiltonian_energy_error = -0.0015124670601593948, max_hamiltonian_energy_error = 0.20507740538536723, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9940899360853196, log_density = 8.836765479761564, hamiltonian_energy = -6.451963225225263, hamiltonian_energy_error = -0.06714354945911793, max_hamiltonian_energy_error = -0.06714354945911793, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7274921058663327, log_density = 6.960695995134145, hamiltonian_energy = -4.735378872193106, hamiltonian_energy_error = 0.07496349305919292, max_hamiltonian_energy_error = 0.5963848026049536, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9797813661068034, log_density = 7.353049141159625, hamiltonian_energy = -5.63888906106686, hamiltonian_energy_error = -0.02434807051171095, max_hamiltonian_energy_error = 0.07681972574471274, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9972000060579879, log_density = 7.879454045307721, hamiltonian_energy = -6.188712832363327, hamiltonian_energy_error = -0.050131958966725954, max_hamiltonian_energy_error = -0.10916442040583263, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9724866167662545, log_density = 7.121259660878884, hamiltonian_energy = -6.6143979075212656, hamiltonian_energy_error = 0.07364443210358562, max_hamiltonian_energy_error = -0.1483568443459511, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9711125338198705, log_density = 4.891323485882433, hamiltonian_energy = -3.5572953427016807, hamiltonian_energy_error = 0.11930641418486854, max_hamiltonian_energy_error = -0.15664870722626612, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.978198309620368, log_density = 7.546460033393814, hamiltonian_energy = -3.9231233077501506, hamiltonian_energy_error = -0.007859096772907304, max_hamiltonian_energy_error = -0.21233102934544412, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9689886962612122, log_density = 7.794045182641373, hamiltonian_energy = -6.736576355465428, hamiltonian_energy_error = -5.295498225699191e-5, max_hamiltonian_energy_error = 0.08624201909937579, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9255931839777926, log_density = 4.76308338859214, hamiltonian_energy = -4.263781474035374, hamiltonian_energy_error = 0.15157132310797827, max_hamiltonian_energy_error = 0.1517812455194152, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9348354898869378, log_density = 7.606435529768035, hamiltonian_energy = -3.0847365285751076, hamiltonian_energy_error = -0.2746148726931459, max_hamiltonian_energy_error = -0.2746148726931459, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.982576230355875, log_density = 8.473317405498245, hamiltonian_energy = -6.542073785252045, hamiltonian_energy_error = -0.011055200211809613, max_hamiltonian_energy_error = -0.052179253393972225, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9376402640444413, log_density = 7.573178602459453, hamiltonian_energy = -6.454958857218487, hamiltonian_energy_error = 0.08682937119347844, max_hamiltonian_energy_error = 0.1210785629669644, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.7591964852099384, log_density = 6.660493440263842, hamiltonian_energy = -5.060758650338332, hamiltonian_energy_error = 0.2333477567844664, max_hamiltonian_energy_error = 0.5440376091487078, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8292920125574018, log_density = 6.432434601175206, hamiltonian_energy = -2.0897771406827648, hamiltonian_energy_error = -0.08767454414466247, max_hamiltonian_energy_error = 0.4901107438863348, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6423749132718911, log_density = 5.354094189548604, hamiltonian_energy = 5.835811316602712, hamiltonian_energy_error = 0.2267620725945676, max_hamiltonian_energy_error = 0.8685626160623672, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9273906841604507, log_density = 5.93693041950451, hamiltonian_energy = -2.87306483662976, hamiltonian_energy_error = 0.11640301168099132, max_hamiltonian_energy_error = 0.42198972810075785, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9925825965752365, log_density = 5.5731082808343935, hamiltonian_energy = -4.037150131596643, hamiltonian_energy_error = -0.07651184196267069, max_hamiltonian_energy_error = -0.39791968630236285, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9880401087108698, log_density = 4.812807498570258, hamiltonian_energy = -4.107412596673598, hamiltonian_energy_error = 0.09231535696444038, max_hamiltonian_energy_error = -0.35584710268576014, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9765010486438647, log_density = 5.322612280718571, hamiltonian_energy = -3.697274645512585, hamiltonian_energy_error = -0.004844621066012689, max_hamiltonian_energy_error = -0.47094168488313626, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8787922318703314, log_density = 7.4261499873289445, hamiltonian_energy = 0.007054458564159205, hamiltonian_energy_error = -0.3943089793227843, max_hamiltonian_energy_error = -0.8527934732576208, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9999213545508457, log_density = 7.284664270062773, hamiltonian_energy = -6.519312344981493, hamiltonian_energy_error = -0.052918638798990614, max_hamiltonian_energy_error = -0.08669462629561764, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8831349414919226, log_density = 7.769792403396282, hamiltonian_energy = -2.64537935436263, hamiltonian_energy_error = -0.05802695020760584, max_hamiltonian_energy_error = 0.2674692867595927, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.7707958912454596, log_density = 6.074676884080683, hamiltonian_energy = -4.1007625448354545, hamiltonian_energy_error = 0.19810072067417117, max_hamiltonian_energy_error = 0.4487596316701423, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8998482361924243, log_density = 5.159185613214325, hamiltonian_energy = -4.481570985596654, hamiltonian_energy_error = 0.025423081923578117, max_hamiltonian_energy_error = 0.2829262356874951, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9633319477209112, log_density = 2.9558198952291797, hamiltonian_energy = -0.8279532237127509, hamiltonian_energy_error = 0.07449965234204603, max_hamiltonian_energy_error = -0.27575264071701877, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6830471061589254, log_density = 1.625059262906916, hamiltonian_energy = 0.29344219861571874, hamiltonian_energy_error = 0.2758939517511001, max_hamiltonian_energy_error = 1.2370198499340734, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 3.892890557905311, hamiltonian_energy = -1.4982975526788396, hamiltonian_energy_error = -0.7858252301249673, max_hamiltonian_energy_error = -1.8234921632961327, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9128368461272399, log_density = 4.139276422186715, hamiltonian_energy = -2.5070905929070904, hamiltonian_energy_error = -0.8676431755256746, max_hamiltonian_energy_error = -0.8676431755256746, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.523670466181103, log_density = 1.0469326198715727, hamiltonian_energy = 1.6900339851277275, hamiltonian_energy_error = 0.826052665395892, max_hamiltonian_energy_error = 1.166376621354822, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.5571937457759243, log_density = 3.1719233475265263, hamiltonian_energy = 0.8385054956347107, hamiltonian_energy_error = 0.7061905504478252, max_hamiltonian_energy_error = 0.9946246136456065, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.763903238131994, log_density = 3.9781247850301646, hamiltonian_energy = -1.708379895322092, hamiltonian_energy_error = 0.2462821251007934, max_hamiltonian_energy_error = 0.6733287529149288, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9393356084219922, log_density = 6.602953390179273, hamiltonian_energy = -2.626142214584386, hamiltonian_energy_error = -0.36048422681095493, max_hamiltonian_energy_error = -0.36048422681095493, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.945120530703609, log_density = 6.956680177676095, hamiltonian_energy = -5.53635671613328, hamiltonian_energy_error = 0.05121939468948966, max_hamiltonian_energy_error = 0.11997040962106098, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9202592946713668, log_density = 8.442832713264309, hamiltonian_energy = -5.43883646920586, hamiltonian_energy_error = 0.06256921458186682, max_hamiltonian_energy_error = 0.19432397184582584, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8985740738933273, log_density = 6.237830463447082, hamiltonian_energy = -5.806800786026622, hamiltonian_energy_error = 0.14550494896767496, max_hamiltonian_energy_error = 0.14550494896767496, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9186286447662001, log_density = 6.2562043855792595, hamiltonian_energy = -2.6300592412451813, hamiltonian_energy_error = -0.05697699411601187, max_hamiltonian_energy_error = 0.97242867477138, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9959063987506448, log_density = 5.6910055833365885, hamiltonian_energy = -5.273711254687149, hamiltonian_energy_error = 0.02907378488932988, max_hamiltonian_energy_error = -0.16446287702963858, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 6.25614190762626, hamiltonian_energy = -5.35791213772038, hamiltonian_energy_error = -0.010478396296055514, max_hamiltonian_energy_error = -0.16818297358944445, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8933269439391526, log_density = 5.378018854690877, hamiltonian_energy = -3.2824998786561115, hamiltonian_energy_error = 0.2154080099556075, max_hamiltonian_energy_error = 0.31266000311689934, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 6.818576118330768, hamiltonian_energy = -4.693301000568883, hamiltonian_energy_error = -0.07970500940742209, max_hamiltonian_energy_error = -0.23742288132003964, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9799352319624415, log_density = 6.166739354727099, hamiltonian_energy = -5.01844986290506, hamiltonian_energy_error = 0.12725833627328154, max_hamiltonian_energy_error = 0.12725833627328154, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7425899612118804, log_density = 7.9155827067294116, hamiltonian_energy = -2.3189649133611834, hamiltonian_energy_error = 0.1490433711829362, max_hamiltonian_energy_error = 1.6178185964149034, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8729265333374077, log_density = 5.758589366124892, hamiltonian_energy = -4.633781287557614, hamiltonian_energy_error = 0.2519810990414424, max_hamiltonian_energy_error = 0.3736428351990817, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.74584250756338, log_density = 4.103370506045739, hamiltonian_energy = -1.6882224851397751, hamiltonian_energy_error = 0.39775192712476715, max_hamiltonian_energy_error = 0.6180629196879159, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9688080406701711, log_density = -0.9945983037465922, hamiltonian_energy = 1.4373354331889976, hamiltonian_energy_error = 0.22481359590386507, max_hamiltonian_energy_error = -0.44938075614949824, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 6.377334848339, hamiltonian_energy = 2.2356756689698134, hamiltonian_energy_error = -0.4323488658047898, max_hamiltonian_energy_error = -0.627206792325901, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9841755983631107, log_density = 6.163454620897777, hamiltonian_energy = -3.246370527468968, hamiltonian_energy_error = -0.15896574371956795, max_hamiltonian_energy_error = -0.5031224628223274, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9344980680372889, log_density = 4.572019485353701, hamiltonian_energy = -2.16850013590488, hamiltonian_energy_error = 0.17121972816118403, max_hamiltonian_energy_error = 0.17121972816118403, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8838014907971617, log_density = 6.479260936077384, hamiltonian_energy = 0.027797126144498918, hamiltonian_energy_error = 0.15828603110652306, max_hamiltonian_energy_error = -2.378126636545101, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9893771390419556, log_density = 7.858450666263922, hamiltonian_energy = -4.312515853349241, hamiltonian_energy_error = -1.006873965552666, max_hamiltonian_energy_error = -1.006873965552666, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9089802196021698, log_density = 7.724634463138182, hamiltonian_energy = -5.952717080039728, hamiltonian_energy_error = 0.09141300920920514, max_hamiltonian_energy_error = 0.14015766596481516, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9485580904552994, log_density = 7.259119048639526, hamiltonian_energy = -5.321564789822515, hamiltonian_energy_error = 0.03240095955356992, max_hamiltonian_energy_error = 0.13026082756033652, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8240587266366992, log_density = 7.893255460984134, hamiltonian_energy = -2.4243140241436576, hamiltonian_energy_error = -0.0966020845304838, max_hamiltonian_energy_error = 0.5432014920897172, tree_depth = 5, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9724205554590616, log_density = 7.685714184560371, hamiltonian_energy = -6.911422707012641, hamiltonian_energy_error = -0.00820756205929829, max_hamiltonian_energy_error = 0.10382441570806478, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9957235016763581, log_density = 8.594213688989498, hamiltonian_energy = -7.228922653308627, hamiltonian_energy_error = -0.007591558920694297, max_hamiltonian_energy_error = 0.014190887554519804, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9537379600410314, log_density = 6.85915820098247, hamiltonian_energy = -6.248981609806912, hamiltonian_energy_error = 0.06285411283357867, max_hamiltonian_energy_error = 0.07490210106395878, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9333968354376423, log_density = 5.943419619944014, hamiltonian_energy = -3.823273441816006, hamiltonian_energy_error = -0.7901988397844018, max_hamiltonian_energy_error = -0.8093053267178658, tree_depth = 5, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.13941112106683537, log_density = 3.0966442113038735, hamiltonian_energy = 0.4643067448250595, hamiltonian_energy_error = 0.3888448422360411, max_hamiltonian_energy_error = 5.5529559667664445, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9039976597915266, log_density = 6.616158761847079, hamiltonian_energy = 1.1125998131769306, hamiltonian_energy_error = -0.35116290010976225, max_hamiltonian_energy_error = 0.7122249172220654, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9371375105796901, log_density = 7.964991895486278, hamiltonian_energy = -5.183259471910726, hamiltonian_energy_error = -0.04938381733474628, max_hamiltonian_energy_error = 0.15332876655482686, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.976318433450367, log_density = 7.554922090588602, hamiltonian_energy = -5.813720148375351, hamiltonian_energy_error = 0.02147875122309717, max_hamiltonian_energy_error = -0.07106822244995481, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8917197806895528, log_density = 7.396854373862381, hamiltonian_energy = -6.419996122561677, hamiltonian_energy_error = 0.09254995898736684, max_hamiltonian_energy_error = 0.2622923548858589, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8817981973999303, log_density = 5.6831977159304685, hamiltonian_energy = -2.689475285475754, hamiltonian_energy_error = 0.24198417426051222, max_hamiltonian_energy_error = 0.33517645885756453, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9168186667828668, log_density = 4.520678918329162, hamiltonian_energy = 0.22096796860793955, hamiltonian_energy_error = -0.33508722130993984, max_hamiltonian_energy_error = -1.192316751059514, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6464328953511306, log_density = 5.71203113138671, hamiltonian_energy = -4.028249107437443, hamiltonian_energy_error = -0.4628190279552915, max_hamiltonian_energy_error = 0.9205975954454075, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9314934344936726, log_density = 3.8419003760747774, hamiltonian_energy = -2.506459483272259, hamiltonian_energy_error = 0.18993659537130014, max_hamiltonian_energy_error = 0.2657185888244591, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9971309891189166, log_density = 5.3753313087476045, hamiltonian_energy = -3.3924129049714264, hamiltonian_energy_error = 0.02028748251040957, max_hamiltonian_energy_error = -0.24328821658270483, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.981711859553744, log_density = 4.504074704347721, hamiltonian_energy = -2.3750843299308384, hamiltonian_energy_error = 0.03169891409268066, max_hamiltonian_energy_error = -1.0132615253329638, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.3815955306153987, log_density = 0.36790076199567423, hamiltonian_energy = 0.9796393368191176, hamiltonian_energy_error = 0.6976342412720924, max_hamiltonian_energy_error = 2.218141037789718, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.4834377815791353, log_density = 2.8280022038179773, hamiltonian_energy = 3.874459284101138, hamiltonian_energy_error = -0.07881805945966924, max_hamiltonian_energy_error = 3.53587462503938, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 4.30564506654172, hamiltonian_energy = -2.485635142836862, hamiltonian_energy_error = -0.10161762713295586, max_hamiltonian_energy_error = -0.5758958843258069, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9869544678049184, log_density = 5.0701872466417495, hamiltonian_energy = -1.3140746923764501, hamiltonian_energy_error = -0.4022352262925035, max_hamiltonian_energy_error = -0.7522842876870675, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9412453764166853, log_density = 4.0195183859954335, hamiltonian_energy = -2.7618842600848814, hamiltonian_energy_error = 0.15951370721929914, max_hamiltonian_energy_error = 0.374411546379104, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9074997712313897, log_density = 5.3821797977525625, hamiltonian_energy = 0.4254831751811974, hamiltonian_energy_error = -0.10772649527043932, max_hamiltonian_energy_error = -0.7768335625862948, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8880399609609569, log_density = 5.06228756408338, hamiltonian_energy = -3.940410540928184, hamiltonian_energy_error = -0.0987830178148128, max_hamiltonian_energy_error = 0.9879699232312458, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.342092675419268, hamiltonian_energy = -3.4985190452147368, hamiltonian_energy_error = -0.15148823143733026, max_hamiltonian_energy_error = -0.15148823143733026, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9951064398989327, log_density = 7.501077316136728, hamiltonian_energy = -6.635949217907465, hamiltonian_energy_error = -0.009551041474327171, max_hamiltonian_energy_error = -0.03795590146528838, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.962471571339686, log_density = 7.173904643511433, hamiltonian_energy = -5.140210939673727, hamiltonian_energy_error = 0.04881677446592292, max_hamiltonian_energy_error = 0.10588462353954409, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8726126680194282, log_density = 5.019977074303171, hamiltonian_energy = -4.575050033470711, hamiltonian_energy_error = 0.241979960477539, max_hamiltonian_energy_error = 0.241979960477539, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9829300345811974, log_density = 6.591545483816109, hamiltonian_energy = -4.200858638790679, hamiltonian_energy_error = 0.01938854034036641, max_hamiltonian_energy_error = -0.13406486774695825, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9754145567225916, log_density = 7.506333963303755, hamiltonian_energy = -6.03992548590634, hamiltonian_energy_error = 0.031077777240021476, max_hamiltonian_energy_error = -0.09734485549445715, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9999472573256835, log_density = 7.4728435712639385, hamiltonian_energy = -5.889494829438966, hamiltonian_energy_error = -0.016539256683260284, max_hamiltonian_energy_error = -0.17480506786151562, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.994741124296345, log_density = 7.496386389807638, hamiltonian_energy = -6.887719673980451, hamiltonian_energy_error = 0.0036585409864065, max_hamiltonian_energy_error = -0.0825145169359649, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8935661731267885, log_density = 6.95592757932762, hamiltonian_energy = -5.487476224484763, hamiltonian_energy_error = 0.02220727210768647, max_hamiltonian_energy_error = 0.6617038013013259, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.854954050344095, log_density = 1.1596974133128946, hamiltonian_energy = 1.7472649886040905, hamiltonian_energy_error = 0.3081069997847141, max_hamiltonian_energy_error = 0.35218063569835056, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.930631602141531, log_density = 2.082846841015485, hamiltonian_energy = 4.449966952755933, hamiltonian_energy_error = -0.15466473796868563, max_hamiltonian_energy_error = 0.3198965282445432, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9983119056626003, log_density = 2.832238780563628, hamiltonian_energy = -0.825036620040914, hamiltonian_energy_error = -0.1054075993002439, max_hamiltonian_energy_error = -0.21300019710605733, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8068682430071451, log_density = 3.242274329918919, hamiltonian_energy = 1.4542684513485238, hamiltonian_energy_error = 0.0077333045948631, max_hamiltonian_energy_error = 0.37729124653426993, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9672300377213714, log_density = 5.783288372953818, hamiltonian_energy = -2.1636629563202563, hamiltonian_energy_error = -0.026226081991222117, max_hamiltonian_energy_error = 0.0731351509357645, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9808976600424506, log_density = 6.6642546641052185, hamiltonian_energy = -5.443305603766346, hamiltonian_energy_error = -0.03183759174939205, max_hamiltonian_energy_error = 0.07311681297402295, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8832132076386973, log_density = 5.473139663423538, hamiltonian_energy = -4.532197637654198, hamiltonian_energy_error = 0.02350937665465125, max_hamiltonian_energy_error = 0.1719972266199754, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8803872053879535, log_density = 6.668859267455042, hamiltonian_energy = -2.00510402447909, hamiltonian_energy_error = 0.14655994707797815, max_hamiltonian_energy_error = -0.3270549798508928, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9491396117168986, log_density = 6.007329764332882, hamiltonian_energy = -3.3213743037752774, hamiltonian_energy_error = 0.04255694401034393, max_hamiltonian_energy_error = -0.2598929801605716, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7893279870689612, log_density = 5.169510332437934, hamiltonian_energy = -0.7199756849569567, hamiltonian_energy_error = 0.09551254185477376, max_hamiltonian_energy_error = 0.4260939162151911, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9949812488920742, log_density = 5.82948504008996, hamiltonian_energy = -4.138783760700445, hamiltonian_energy_error = 0.07826565972940003, max_hamiltonian_energy_error = -0.32572213374229264, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8849456150760541, log_density = 7.451544984969036, hamiltonian_energy = -4.638683222860006, hamiltonian_energy_error = 0.1660272872043329, max_hamiltonian_energy_error = 0.2517373163285015, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.5390617928200285, hamiltonian_energy = -6.364471742618319, hamiltonian_energy_error = -0.08429505970693096, max_hamiltonian_energy_error = -0.1532065944500065, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8489224687260427, log_density = 5.767791192642806, hamiltonian_energy = -5.43674859819985, hamiltonian_energy_error = 0.26063488798559753, max_hamiltonian_energy_error = 0.26063488798559753, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9267121086805156, log_density = 6.9846057712628316, hamiltonian_energy = -4.322325549648439, hamiltonian_energy_error = -0.1545819386460856, max_hamiltonian_energy_error = 0.24828659759387373, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8820377473255699, log_density = 3.1982380188599375, hamiltonian_energy = 0.5019935813919973, hamiltonian_energy_error = 0.11118944362844463, max_hamiltonian_energy_error = -1.4582484832769547, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.931080884753336, log_density = 2.572090823002002, hamiltonian_energy = -0.632387714394913, hamiltonian_energy_error = 0.06938869504185385, max_hamiltonian_energy_error = 0.26748365734136176, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9306209249166223, log_density = 5.443706906240159, hamiltonian_energy = -1.034536364777356, hamiltonian_energy_error = -0.15157403843660733, max_hamiltonian_energy_error = 0.23336716638440125, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9803950834441552, log_density = 6.586518582265246, hamiltonian_energy = -3.3780487225062656, hamiltonian_energy_error = -0.05333805576117667, max_hamiltonian_energy_error = -0.2758323157031737, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9512388661096054, log_density = 7.6500156822298315, hamiltonian_energy = -3.852662349041287, hamiltonian_energy_error = -0.15544975504424619, max_hamiltonian_energy_error = 0.21907027313049232, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8759822894615529, log_density = 7.325284168490635, hamiltonian_energy = -5.48393642161431, hamiltonian_energy_error = 0.11926530378911337, max_hamiltonian_energy_error = 0.3400879830461596, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9140625589904634, log_density = 8.007654918787036, hamiltonian_energy = -5.9119522392179125, hamiltonian_energy_error = 0.08578605365122449, max_hamiltonian_energy_error = 0.22478381921799517, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8825136090997968, log_density = 8.413970273577203, hamiltonian_energy = -6.285223832537857, hamiltonian_energy_error = -0.003003135535926127, max_hamiltonian_energy_error = 0.26803328790879455, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8801520069777485, log_density = 7.391707003732822, hamiltonian_energy = -5.925808736327559, hamiltonian_energy_error = 0.12056076559450801, max_hamiltonian_energy_error = 0.28577486093255544, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9857996825158244, log_density = 7.482961155986164, hamiltonian_energy = -6.7582895292748315, hamiltonian_energy_error = 0.005636400312754475, max_hamiltonian_energy_error = -0.18455037167071353, tree_depth = 5, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9940707732498832, log_density = 7.314564820728986, hamiltonian_energy = -6.385499949270416, hamiltonian_energy_error = 0.008695325610124982, max_hamiltonian_energy_error = -0.11183964935301205, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7977442736137789, log_density = 5.782811503994225, hamiltonian_energy = -3.9465294697463067, hamiltonian_energy_error = 0.28327459498733987, max_hamiltonian_energy_error = 0.581502209638971, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 6.759865544905047, hamiltonian_energy = -5.495807491693938, hamiltonian_energy_error = -0.1251168386162682, max_hamiltonian_energy_error = -0.3357011313470224, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8490707428538237, log_density = 6.291996873644518, hamiltonian_energy = -2.7749333989899725, hamiltonian_energy_error = 0.1161668568628973, max_hamiltonian_energy_error = 0.5039188753106596, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9026055483839551, log_density = 6.1295728142530645, hamiltonian_energy = -4.711884392834536, hamiltonian_energy_error = 0.2868330112141697, max_hamiltonian_energy_error = -0.5293163378605286, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8324356445987355, log_density = 7.298757329123799, hamiltonian_energy = -4.315931124929046, hamiltonian_energy_error = 0.10307400146796475, max_hamiltonian_energy_error = 0.46853457332858284, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8404404736441425, log_density = 5.7050170841641155, hamiltonian_energy = -3.117177216787505, hamiltonian_energy_error = 0.12160967641146403, max_hamiltonian_energy_error = 0.43537032006047616, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.780846647682335, log_density = 7.477635359034275, hamiltonian_energy = -4.714204212402329, hamiltonian_energy_error = -0.13264735500286218, max_hamiltonian_energy_error = 1.386266368019462, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9086224084296924, log_density = 6.046554658544642, hamiltonian_energy = -4.326894839948105, hamiltonian_energy_error = 0.07218844595125162, max_hamiltonian_energy_error = 0.15676226764211965, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9841382730263504, log_density = 5.469806708858327, hamiltonian_energy = -5.00659441857513, hamiltonian_energy_error = 0.07927768682874259, max_hamiltonian_energy_error = -0.16143251575078388, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9702763396094116, log_density = 6.206001625966248, hamiltonian_energy = -4.175678611573986, hamiltonian_energy_error = -0.10043418222223188, max_hamiltonian_energy_error = -0.33443998968001587, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.918302970655192, log_density = 5.869974354309809, hamiltonian_energy = -4.9479160457194045, hamiltonian_energy_error = 0.2280369804184641, max_hamiltonian_energy_error = -0.3015117665896536, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9206352395503654, log_density = 4.416244868465325, hamiltonian_energy = -0.6539871699274129, hamiltonian_energy_error = 0.030044923876320073, max_hamiltonian_energy_error = -1.60157794530038, tree_depth = 5, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9343165008010094, log_density = 5.070121433160928, hamiltonian_energy = -2.691243984472629, hamiltonian_energy_error = -0.028471116288330656, max_hamiltonian_energy_error = 0.2194634531858597, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.947549046129886, log_density = 5.991006368840585, hamiltonian_energy = -2.4974089280278022, hamiltonian_energy_error = 0.015775979019625463, max_hamiltonian_energy_error = -0.4472176634392633, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 5.791596154637244, hamiltonian_energy = -4.417113155970181, hamiltonian_energy_error = -0.0979769213837578, max_hamiltonian_energy_error = -0.3945756451023694, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9816236023353943, log_density = 5.896615084683628, hamiltonian_energy = -3.8550453327396865, hamiltonian_energy_error = -0.21584952171427485, max_hamiltonian_energy_error = -0.21584952171427485, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9075720211762691, log_density = 6.891863241461714, hamiltonian_energy = -4.228349843071964, hamiltonian_energy_error = 0.04955319600484387, max_hamiltonian_energy_error = 0.1925192796866977, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9227866422502191, log_density = 4.763763281447607, hamiltonian_energy = -4.426395906812506, hamiltonian_energy_error = 0.1420318810519836, max_hamiltonian_energy_error = 0.1420318810519836, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9757311206237357, log_density = 5.221558873934004, hamiltonian_energy = -2.0991491470816497, hamiltonian_energy_error = -0.13387758186971954, max_hamiltonian_energy_error = -0.32930789209419764, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9470350952560697, log_density = 7.582858998150974, hamiltonian_energy = -3.4482704382158866, hamiltonian_energy_error = 0.008437185714062156, max_hamiltonian_energy_error = 0.5336864253795679, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9463329007080294, log_density = 6.599966490629255, hamiltonian_energy = -5.366537817252195, hamiltonian_energy_error = 0.08047591732192938, max_hamiltonian_energy_error = 0.10199087962006548, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9437061365709067, log_density = 7.160003533905165, hamiltonian_energy = -5.9707746248409, hamiltonian_energy_error = -0.012213353760284207, max_hamiltonian_energy_error = 0.41483308417760867, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.958404668130718, log_density = 6.040054829325996, hamiltonian_energy = -4.793334393521869, hamiltonian_energy_error = -0.010768588629455067, max_hamiltonian_energy_error = 0.11497378424740567, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9835621210048023, log_density = 7.043579116556561, hamiltonian_energy = -4.703930549889357, hamiltonian_energy_error = 0.015740776703340842, max_hamiltonian_energy_error = 0.0691032792896289, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7944590751693659, log_density = 7.5219045757835925, hamiltonian_energy = -4.563065110871484, hamiltonian_energy_error = -1.2278639800398827, max_hamiltonian_energy_error = -1.2278639800398827, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.5055324730769324, log_density = 7.6290777851429326, hamiltonian_energy = -4.333994924510324, hamiltonian_energy_error = 0.3636043651109384, max_hamiltonian_energy_error = 1.7512433432020313, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9787887000596405, log_density = 7.5787309097842686, hamiltonian_energy = -6.728798870364431, hamiltonian_energy_error = 0.014626996597435493, max_hamiltonian_energy_error = -0.12443714914456283, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.6744715294712127, log_density = 3.7052311894475807, hamiltonian_energy = -2.3012843487351664, hamiltonian_energy_error = 0.5593409523662491, max_hamiltonian_energy_error = 1.4149257724409923, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 5.912164000188884, hamiltonian_energy = -2.1081004132676022, hamiltonian_energy_error = -0.5653140572171145, max_hamiltonian_energy_error = -0.7301708891170535, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.406586698157318, hamiltonian_energy = -5.315080493756559, hamiltonian_energy_error = -0.032479859520257115, max_hamiltonian_energy_error = -0.1964143205978255, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9302739988443582, log_density = 6.031106992603725, hamiltonian_energy = -2.1761143129315537, hamiltonian_energy_error = 0.06537954330314122, max_hamiltonian_energy_error = -0.9145195551565122, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9812843458224854, log_density = 6.777888709680294, hamiltonian_energy = -4.593712197734128, hamiltonian_energy_error = 0.05214191994200057, max_hamiltonian_energy_error = 0.07968830716806519, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9795866157636486, log_density = 6.875114915695885, hamiltonian_energy = -5.333454791430766, hamiltonian_energy_error = 0.00820616836136967, max_hamiltonian_energy_error = -0.1399969077786718, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8675409901772374, log_density = 6.577510600059382, hamiltonian_energy = -3.794590667448695, hamiltonian_energy_error = -0.018902675587314732, max_hamiltonian_energy_error = 0.5525824599570326, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.812437656789248, log_density = 6.724557696246025, hamiltonian_energy = -3.092207310585599, hamiltonian_energy_error = 0.16019260315548944, max_hamiltonian_energy_error = 0.3360858102667441, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9376327513244814, log_density = 6.673180512930621, hamiltonian_energy = -3.7759393886757646, hamiltonian_energy_error = -0.06980178492115208, max_hamiltonian_energy_error = 0.22841426955535749, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9961689846027186, log_density = 7.428714063315689, hamiltonian_energy = -5.758092042418529, hamiltonian_energy_error = -0.046742611135229595, max_hamiltonian_energy_error = -0.05459465562935595, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8718574881693292, log_density = 6.208760113761096, hamiltonian_energy = -4.721939018012549, hamiltonian_energy_error = 0.2824614443779909, max_hamiltonian_energy_error = 0.2824614443779909, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 55, is_accept = true, acceptance_rate = 0.9170188071593781, log_density = 6.244299867265493, hamiltonian_energy = -3.729799045418453, hamiltonian_energy_error = -0.05444611632250851, max_hamiltonian_energy_error = 0.30339912131509594, tree_depth = 5, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8796668820470906, log_density = 6.970897452824685, hamiltonian_energy = -4.583688037037686, hamiltonian_energy_error = -0.03114669813513249, max_hamiltonian_energy_error = 0.2861377652582684, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.993106163355011, log_density = 7.8948645016064525, hamiltonian_energy = -6.552727180445853, hamiltonian_energy_error = 0.006681506453189101, max_hamiltonian_energy_error = 0.027997493952232944, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9369882949934957, log_density = 7.846891468805875, hamiltonian_energy = -6.624706250557163, hamiltonian_energy_error = 0.08494250208153442, max_hamiltonian_energy_error = 0.2829665401382604, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9713459069653718, log_density = 6.795544837385743, hamiltonian_energy = -6.120324448298885, hamiltonian_energy_error = 0.026509738980403874, max_hamiltonian_energy_error = 0.07181444056230823, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9978218355444962, log_density = 6.604628934805174, hamiltonian_energy = -5.771828044524927, hamiltonian_energy_error = -0.02878995591790723, max_hamiltonian_energy_error = -0.08052127488894811, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9990618849965597, log_density = 7.454556519949151, hamiltonian_energy = -6.072822333303867, hamiltonian_energy_error = -0.014509467705679846, max_hamiltonian_energy_error = -0.05224132603722342, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9058994321673809, log_density = 7.404284989484074, hamiltonian_energy = -6.364002072752064, hamiltonian_energy_error = 0.07721223970759805, max_hamiltonian_energy_error = 0.14175265856854669, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9417558051578507, log_density = 5.264661478170332, hamiltonian_energy = -5.047544245769059, hamiltonian_energy_error = 0.15361360197746432, max_hamiltonian_energy_error = -0.21613032013912203, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9804381008628188, log_density = 6.35146233833199, hamiltonian_energy = -4.205040840943202, hamiltonian_energy_error = -0.10818728151722112, max_hamiltonian_energy_error = 0.12277501055050655, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.985772347613514, log_density = 6.930800081710597, hamiltonian_energy = -4.423079394108621, hamiltonian_energy_error = -0.04269128178495851, max_hamiltonian_energy_error = 0.12223160301964509, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9755215502949247, log_density = 7.740539676006076, hamiltonian_energy = -5.367741247479864, hamiltonian_energy_error = -0.029882508302968347, max_hamiltonian_energy_error = 0.10922927208420496, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.7478753999138831, log_density = 4.960828886420167, hamiltonian_energy = -3.579462144574287, hamiltonian_energy_error = 0.8440671416617009, max_hamiltonian_energy_error = 0.8440671416617009, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 1.0, log_density = 8.45045746117022, hamiltonian_energy = -4.313960402016765, hamiltonian_energy_error = -0.3039616858445111, max_hamiltonian_energy_error = -0.9645176989558557, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9503467166987138, log_density = 6.656949824703101, hamiltonian_energy = -4.351210709758336, hamiltonian_energy_error = -0.009183596920848025, max_hamiltonian_energy_error = -1.4784546833676657, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.705827034231121, log_density = 4.466282210253011, hamiltonian_energy = -2.7695444581142326, hamiltonian_energy_error = 0.1571480739307165, max_hamiltonian_energy_error = 1.1576235259516245, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9539261119454695, log_density = 5.4950762400351785, hamiltonian_energy = -1.1585018350982859, hamiltonian_energy_error = -0.14269733997215228, max_hamiltonian_energy_error = -0.4442163786519244, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8695757799368106, log_density = 7.931234307187733, hamiltonian_energy = -3.704494565005553, hamiltonian_energy_error = -0.030002458759689432, max_hamiltonian_energy_error = 0.39148057818596804, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6018174106837381, log_density = 6.124168881208561, hamiltonian_energy = -4.372557180405462, hamiltonian_energy_error = 0.2420968615434278, max_hamiltonian_energy_error = 1.6127028601217708, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9271296266411092, log_density = 5.146795760545366, hamiltonian_energy = -2.5359126133526724, hamiltonian_energy_error = 0.06916655795546012, max_hamiltonian_energy_error = 0.44047954509786846, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9410911644308998, log_density = 4.412834304134945, hamiltonian_energy = -1.4931763197114116, hamiltonian_energy_error = 0.09796523438520754, max_hamiltonian_energy_error = -1.0736548578032559, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9597063311272049, log_density = 8.004059038793274, hamiltonian_energy = -4.1508897432800005, hamiltonian_energy_error = -0.45016301828325167, max_hamiltonian_energy_error = -0.8046226125576736, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9655452192181001, log_density = 8.42841768620561, hamiltonian_energy = -5.969313094424523, hamiltonian_energy_error = -0.09815386590585629, max_hamiltonian_energy_error = 0.1529508649551392, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9889176137661322, log_density = 8.48847462476705, hamiltonian_energy = -8.040546266739389, hamiltonian_energy_error = 0.002517734811489092, max_hamiltonian_energy_error = 0.026769684859102583, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.985963880267886, log_density = 8.312061542117023, hamiltonian_energy = -7.090935732651982, hamiltonian_energy_error = -0.05484249744041492, max_hamiltonian_energy_error = 0.12565471115906046, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9373963475399407, log_density = 7.970136988737984, hamiltonian_energy = -6.192066718730495, hamiltonian_energy_error = 0.012934879010736644, max_hamiltonian_energy_error = 0.1547458583082797, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9989710726064029, log_density = 8.164968045160396, hamiltonian_energy = -7.134224590864998, hamiltonian_energy_error = -0.059874137213994594, max_hamiltonian_energy_error = -0.13784106586139622, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8912177116075646, log_density = 7.24005286136919, hamiltonian_energy = -4.403935395076887, hamiltonian_energy_error = 0.029820310316249987, max_hamiltonian_energy_error = 0.3220796539291717, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.895771950607557, hamiltonian_energy = -6.085800075514715, hamiltonian_energy_error = -0.03666201149897219, max_hamiltonian_energy_error = -0.09581419014522119, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9932210802122395, log_density = 8.412260925009067, hamiltonian_energy = -7.511534655033419, hamiltonian_energy_error = 0.01156534254220265, max_hamiltonian_energy_error = -0.047032569529617874, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9279189920776617, log_density = 7.644864189791198, hamiltonian_energy = -7.164557850353071, hamiltonian_energy_error = 0.13445637543887923, max_hamiltonian_energy_error = 0.13445637543887923, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9210457378826022, log_density = 7.051308385523296, hamiltonian_energy = -5.265069744203856, hamiltonian_energy_error = -0.08207873139361865, max_hamiltonian_energy_error = 0.20214560470675647, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 6.755472757704979, hamiltonian_energy = -6.599417158753484, hamiltonian_energy_error = -0.006101422836073844, max_hamiltonian_energy_error = -0.10441597040346817, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9314067032948041, log_density = 7.270590606181067, hamiltonian_energy = -3.2718684055733553, hamiltonian_energy_error = 0.10582881515137998, max_hamiltonian_energy_error = 0.15559902184676488, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.980307131443512, log_density = 7.918821321869187, hamiltonian_energy = -5.869611705695402, hamiltonian_energy_error = 9.889341082214287e-5, max_hamiltonian_energy_error = -0.06643986243394107, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9851447420340662, log_density = 6.520181497814164, hamiltonian_energy = -4.725877329752263, hamiltonian_energy_error = -0.049030647974840136, max_hamiltonian_energy_error = -0.08253697634522972, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8560735157221626, log_density = 7.839393275426717, hamiltonian_energy = -3.166232708340009, hamiltonian_energy_error = 0.04477336396143006, max_hamiltonian_energy_error = 0.3747181447663177, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9477808095260973, log_density = 7.9807757835765365, hamiltonian_energy = -6.41973247453459, hamiltonian_energy_error = -0.019703202936388386, max_hamiltonian_energy_error = -0.15921608311457192, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9813555773479412, log_density = 7.635516141416721, hamiltonian_energy = -6.7464994048858475, hamiltonian_energy_error = 0.03234790689073286, max_hamiltonian_energy_error = -0.07363513756288675, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9931448548496019, log_density = 7.99305422664348, hamiltonian_energy = -6.594997048927462, hamiltonian_energy_error = 0.0006945883713616041, max_hamiltonian_energy_error = -0.07862516133552866, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6598746865735861, log_density = 3.5566273484887656, hamiltonian_energy = 1.668051150234585, hamiltonian_energy_error = 0.6377323479152475, max_hamiltonian_energy_error = 0.6377323479152475, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 5.440125473625578, hamiltonian_energy = -2.307050464248366, hamiltonian_energy_error = -0.31325762442847993, max_hamiltonian_energy_error = -0.5982606857643888, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 6.943605671831168, hamiltonian_energy = -5.336497690489018, hamiltonian_energy_error = -0.1305897398721143, max_hamiltonian_energy_error = -0.29036581932857164, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9041154194928336, log_density = 7.123224094796138, hamiltonian_energy = -4.528782856396983, hamiltonian_energy_error = 0.12837280892107117, max_hamiltonian_energy_error = 0.3066785366925071, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9933255855979615, log_density = 7.1116482108169645, hamiltonian_energy = -5.739712782358892, hamiltonian_energy_error = -0.03226661657503804, max_hamiltonian_energy_error = -0.13368538688171494, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7180653606064599, log_density = 6.358644207066702, hamiltonian_energy = -4.78744162805006, hamiltonian_energy_error = -0.37707783682429774, max_hamiltonian_energy_error = 0.8935510345837878, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8656920136083595, log_density = 4.261948221735072, hamiltonian_energy = -3.749064463863223, hamiltonian_energy_error = 0.40568724067387496, max_hamiltonian_energy_error = 0.40568724067387496, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9879412158198567, log_density = 3.4251442578859024, hamiltonian_energy = -2.5743532298411047, hamiltonian_energy_error = 0.034903238966496275, max_hamiltonian_energy_error = -0.4729803499409462, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9940554348552387, log_density = 2.7290184473983885, hamiltonian_energy = -1.4167818262827059, hamiltonian_energy_error = 0.09339733534691286, max_hamiltonian_energy_error = -0.4681142685189428, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.975457914439443, log_density = 6.016437580738082, hamiltonian_energy = -1.3367568193293833, hamiltonian_energy_error = -0.31381457851283345, max_hamiltonian_energy_error = -0.5599998407891458, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.43864066439091526, log_density = 5.054032442367689, hamiltonian_energy = -2.3196255572265816, hamiltonian_energy_error = 0.8180845340218657, max_hamiltonian_energy_error = 1.7466990765852093, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9958224668840298, log_density = 7.437158946929058, hamiltonian_energy = -4.38242084868826, hamiltonian_energy_error = -0.2895797422584998, max_hamiltonian_energy_error = -0.2895797422584998, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9872308384314427, log_density = 8.355601725217554, hamiltonian_energy = -6.975790328406623, hamiltonian_energy_error = -0.09899303762655265, max_hamiltonian_energy_error = -0.1505661222731547, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9960393558515499, log_density = 8.660422907456443, hamiltonian_energy = -7.8578826455844455, hamiltonian_energy_error = -0.031037063705453782, max_hamiltonian_energy_error = -0.044782552591835056, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8786981577474132, log_density = 8.34690953303651, hamiltonian_energy = -6.216167332805469, hamiltonian_energy_error = 0.09586614752858758, max_hamiltonian_energy_error = 0.7138016730169783, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9003540361225338, log_density = 7.819415138784819, hamiltonian_energy = -6.214475750323053, hamiltonian_energy_error = 0.08230728664742681, max_hamiltonian_energy_error = 0.20900975014705647, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9837912263400173, log_density = 6.775157421176294, hamiltonian_energy = -6.372640006076881, hamiltonian_energy_error = 0.0385886125208339, max_hamiltonian_energy_error = -0.07402352346539587, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9875673694949663, log_density = 6.989997815445587, hamiltonian_energy = -5.958297196093621, hamiltonian_energy_error = -0.06681748814612032, max_hamiltonian_energy_error = -0.12813474565901828, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9441749090383295, log_density = 7.374841428381408, hamiltonian_energy = -5.387138484836341, hamiltonian_energy_error = 0.04430966944246517, max_hamiltonian_energy_error = 0.15181726792553718, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.954427826962326, log_density = 6.147239118743216, hamiltonian_energy = -3.893371827689058, hamiltonian_energy_error = -0.1456021866342314, max_hamiltonian_energy_error = 0.5712434102053039, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9784004654165415, log_density = 6.5628552082093865, hamiltonian_energy = -4.097183943988211, hamiltonian_energy_error = -0.08142383367711936, max_hamiltonian_energy_error = -0.1374548469970902, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.4329429782389465, hamiltonian_energy = -4.89802321462769, hamiltonian_energy_error = -0.13313434623464282, max_hamiltonian_energy_error = -0.18798069421872032, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9646383854010634, log_density = 5.300768768297395, hamiltonian_energy = -4.3670524187564626, hamiltonian_energy_error = -0.5956741308492566, max_hamiltonian_energy_error = -0.8182960110022641, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6235833159953444, log_density = 2.753145944227466, hamiltonian_energy = -2.540991788503122, hamiltonian_energy_error = 0.5542491419324782, max_hamiltonian_energy_error = 0.5542491419324782, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8404468339741487, log_density = 6.353302282213326, hamiltonian_energy = -2.0969701500187963, hamiltonian_energy_error = -0.4133631225349663, max_hamiltonian_energy_error = -0.7264080027177087, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.913297413054338, log_density = 6.7373395265505245, hamiltonian_energy = -5.403147871986953, hamiltonian_energy_error = 0.11584880097921246, max_hamiltonian_energy_error = 0.7083177290118545, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9629896359686266, log_density = 6.413443394787382, hamiltonian_energy = -5.26571617032271, hamiltonian_energy_error = 0.1290602161159331, max_hamiltonian_energy_error = -0.13702647700723958, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.977598340427641, log_density = 7.299721792491734, hamiltonian_energy = -4.6454882280545515, hamiltonian_energy_error = -0.11098902148175505, max_hamiltonian_energy_error = -0.2810550251774586, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9994895500062742, log_density = 6.115378648166573, hamiltonian_energy = -5.823756652828597, hamiltonian_energy_error = 0.0035795489038656925, max_hamiltonian_energy_error = -0.18004678870722834, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9536519395776416, log_density = 5.319368859284886, hamiltonian_energy = 0.7157830741716644, hamiltonian_energy_error = -0.035021522790747106, max_hamiltonian_energy_error = 0.3083240443712798, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9362527530032972, log_density = 4.6191702307540545, hamiltonian_energy = -2.6077999393816795, hamiltonian_energy_error = 0.12894529013817513, max_hamiltonian_energy_error = 0.25017158624807667, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8235913062548823, log_density = 6.497847269936566, hamiltonian_energy = 0.09021324505893258, hamiltonian_energy_error = 0.1483304946293975, max_hamiltonian_energy_error = 0.5984022078798386, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8901526080866162, log_density = 6.365830988453071, hamiltonian_energy = -2.3069407838604166, hamiltonian_energy_error = 0.34482068630159945, max_hamiltonian_energy_error = 0.37779513654795505, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9446589175191167, log_density = 7.187707446811485, hamiltonian_energy = -2.663040500572345, hamiltonian_energy_error = -0.17292988080684957, max_hamiltonian_energy_error = 1.0672854527959372, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9966588351254233, log_density = 7.065299937166623, hamiltonian_energy = -6.430244011817482, hamiltonian_energy_error = 0.023665997714887865, max_hamiltonian_energy_error = -0.0724685441106665, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 13, is_accept = true, acceptance_rate = 0.9051250587394966, log_density = 6.040557485749584, hamiltonian_energy = -4.185422152014233, hamiltonian_energy_error = 0.17989826881160376, max_hamiltonian_energy_error = 0.24137652949761446, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9059338131758016, log_density = 3.73822703622724, hamiltonian_energy = 0.3581385816919127, hamiltonian_energy_error = -0.006295581085811186, max_hamiltonian_energy_error = -2.8197998408518963, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9936573967853943, log_density = 5.507268024672719, hamiltonian_energy = 0.21278869991824756, hamiltonian_energy_error = -0.04338865447280149, max_hamiltonian_energy_error = -1.504481049823223, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.5800899083479651, log_density = 6.394409939095274, hamiltonian_energy = -2.760477541203471, hamiltonian_energy_error = 1.345712432191032, max_hamiltonian_energy_error = 1.7148752115478119, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9885057710658155, log_density = 8.676394685427802, hamiltonian_energy = -5.1945939970718085, hamiltonian_energy_error = -0.15162384365353443, max_hamiltonian_energy_error = -0.2036146434926014, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9176245856409619, log_density = 7.756954745962409, hamiltonian_energy = -5.725282073417663, hamiltonian_energy_error = 0.09447451290717446, max_hamiltonian_energy_error = 0.15705563302093495, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.7984039391397917, log_density = 5.918096836344645, hamiltonian_energy = -2.94434779777412, hamiltonian_energy_error = 0.22853072368261174, max_hamiltonian_energy_error = 0.3321446899331044, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9884335155849366, log_density = 4.3188828339959, hamiltonian_energy = -3.5221000043141255, hamiltonian_energy_error = 0.05489327303319724, max_hamiltonian_energy_error = -0.1406513921897341, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9611004482452191, log_density = 3.9751702165159415, hamiltonian_energy = -2.127434041259258, hamiltonian_energy_error = -0.0383304585307358, max_hamiltonian_energy_error = 0.09472186529785942, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9100006470891066, log_density = 5.082955816115387, hamiltonian_energy = -2.8112815546369645, hamiltonian_energy_error = 0.10868640417010855, max_hamiltonian_energy_error = 0.18390791887116986, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9797165417530677, log_density = 6.566675652094162, hamiltonian_energy = -4.0125007042487875, hamiltonian_energy_error = -0.12805017462824475, max_hamiltonian_energy_error = -0.15486040131808965, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9611449885338686, log_density = 7.283387635536622, hamiltonian_energy = -4.235082065929005, hamiltonian_energy_error = 0.034963404564723355, max_hamiltonian_energy_error = 0.10637669521491677, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.848789694564414, log_density = 2.1799480031105176, hamiltonian_energy = -1.3530322468621456, hamiltonian_energy_error = 0.2070582336261948, max_hamiltonian_energy_error = 0.7454592265549307, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9236533032986407, log_density = 3.7541204378584148, hamiltonian_energy = 0.38498942661051494, hamiltonian_energy_error = -0.012222509722248809, max_hamiltonian_energy_error = -0.5956017204536685, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9830638950264766, log_density = 6.328615192070892, hamiltonian_energy = -0.9811868355933848, hamiltonian_energy_error = -0.01951960400550945, max_hamiltonian_energy_error = -0.21055016047593744, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9621039494952154, log_density = 7.082150359652719, hamiltonian_energy = -4.844415696025282, hamiltonian_energy_error = -0.22224475201199212, max_hamiltonian_energy_error = -0.3463342932476552, tree_depth = 5, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9663367468691187, log_density = 7.7542944101904006, hamiltonian_energy = -5.460111830902674, hamiltonian_energy_error = -0.13609201475697752, max_hamiltonian_energy_error = 0.6588129898005715, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.991197225176352, log_density = 8.445514139514769, hamiltonian_energy = -7.305520186657651, hamiltonian_energy_error = -0.007804656078196359, max_hamiltonian_energy_error = -0.09284805765632953, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6671356021220374, log_density = 6.879915277449454, hamiltonian_energy = -2.933792086586087, hamiltonian_energy_error = 0.3488444898313423, max_hamiltonian_energy_error = 0.7273800052952231, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8604704445231515, log_density = 5.141708199663192, hamiltonian_energy = -4.448677772147208, hamiltonian_energy_error = 0.3753888134346708, max_hamiltonian_energy_error = 0.3753888134346708, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7169383446454395, log_density = 8.127693845732015, hamiltonian_energy = -2.2053949762710676, hamiltonian_energy_error = 0.30425368597865265, max_hamiltonian_energy_error = 0.6670617685791214, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9852377679397082, log_density = 6.869944484077024, hamiltonian_energy = -6.516392488182342, hamiltonian_energy_error = 0.0375917052520256, max_hamiltonian_energy_error = 0.0375917052520256, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9778453847507352, log_density = 7.1565242665102105, hamiltonian_energy = -5.647455678337179, hamiltonian_energy_error = 0.006453704805551297, max_hamiltonian_energy_error = -0.10189204939629803, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9728511808303199, log_density = 7.129101309996475, hamiltonian_energy = -4.881815780959623, hamiltonian_energy_error = -0.08348212815787814, max_hamiltonian_energy_error = 0.12306338158845431, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9600360020096403, log_density = 7.022225139653285, hamiltonian_energy = -4.056849397277929, hamiltonian_energy_error = 0.021767184700260955, max_hamiltonian_energy_error = 0.18813064050940165, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9708172720503864, log_density = 7.420886265189864, hamiltonian_energy = -3.6200049890632293, hamiltonian_energy_error = -0.19364491846236875, max_hamiltonian_energy_error = -0.1937019419983561, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9887213577508497, log_density = 8.542997197616875, hamiltonian_energy = -6.4163682371394195, hamiltonian_energy_error = -0.009415342781568192, max_hamiltonian_energy_error = -0.08180973900928556, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8242275673881181, log_density = 8.123667625374377, hamiltonian_energy = -6.125261774252039, hamiltonian_energy_error = 0.03675683937723573, max_hamiltonian_energy_error = 0.3751923467625211, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8046346464582207, log_density = 6.686914628704539, hamiltonian_energy = -4.446998184835834, hamiltonian_energy_error = 0.21177323721912522, max_hamiltonian_energy_error = 0.4221979301219694, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9988353608911572, log_density = 7.218777513053816, hamiltonian_energy = -4.93707242176511, hamiltonian_energy_error = -0.181401054474982, max_hamiltonian_energy_error = -0.18412998651425738, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6087028491051028, log_density = 5.742715447803434, hamiltonian_energy = -2.611285583327658, hamiltonian_energy_error = 0.330650902599988, max_hamiltonian_energy_error = 0.6516586578444752, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9509359802419752, log_density = 7.3373048850743, hamiltonian_energy = -3.77733992794777, hamiltonian_energy_error = -0.26788909892649526, max_hamiltonian_energy_error = -0.27316621896464266, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9540832206773815, log_density = 8.264398039822538, hamiltonian_energy = -5.693638834982915, hamiltonian_energy_error = -0.04678959217133638, max_hamiltonian_energy_error = 0.11608584686509804, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.83198839141127, hamiltonian_energy = -7.965217105101054, hamiltonian_energy_error = -0.031519130642610804, max_hamiltonian_energy_error = -0.05195207292175397, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.974936647633002, log_density = 7.00206868124658, hamiltonian_energy = -6.072448440810537, hamiltonian_energy_error = 0.02478755198319238, max_hamiltonian_energy_error = 0.061060299489840375, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7717171727044473, log_density = 5.464402471078016, hamiltonian_energy = 1.3769661268081066, hamiltonian_energy_error = 0.009505746337314491, max_hamiltonian_energy_error = 0.6360797293863389, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9608293784111012, log_density = 6.200195468480537, hamiltonian_energy = -4.658419830188707, hamiltonian_energy_error = -0.10337605387250903, max_hamiltonian_energy_error = 0.29882415442845556, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9922583561186565, log_density = 6.2557473210689505, hamiltonian_energy = -5.0323432881979295, hamiltonian_energy_error = -0.010511552916122824, max_hamiltonian_energy_error = -0.1444212386523409, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9517910674591327, log_density = 4.944404749201638, hamiltonian_energy = -1.3358435055990485, hamiltonian_energy_error = -0.07412218744557109, max_hamiltonian_energy_error = -0.32149774624871785, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.964515374013012, log_density = 5.512799583723812, hamiltonian_energy = -3.7260621080815453, hamiltonian_energy_error = 0.028659693898282157, max_hamiltonian_energy_error = -0.2970818791481289, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9422391818137622, log_density = 6.773704767521263, hamiltonian_energy = -3.8025935964280015, hamiltonian_energy_error = 0.15800699611640567, max_hamiltonian_energy_error = -0.23925247709611996, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9067281546922411, log_density = 4.956958440298422, hamiltonian_energy = -3.063488302809755, hamiltonian_energy_error = 0.1576572684664761, max_hamiltonian_energy_error = 0.38497375731203, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9958611066590796, log_density = 4.1957647143491315, hamiltonian_energy = -3.309027597488984, hamiltonian_energy_error = -0.00043705423866935433, max_hamiltonian_energy_error = -0.3250529963754971, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 5.2796946349626666, hamiltonian_energy = -3.491301960126603, hamiltonian_energy_error = -0.02885355228269537, max_hamiltonian_energy_error = -0.1473497516206721, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 27, is_accept = true, acceptance_rate = 1.0, log_density = 4.3845220460876355, hamiltonian_energy = -2.8350629239439313, hamiltonian_energy_error = -0.1553322890667741, max_hamiltonian_energy_error = -0.3367492444130269, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9754351235958773, log_density = 6.015993805578572, hamiltonian_energy = -3.9019438791872894, hamiltonian_energy_error = -0.18048598780268543, max_hamiltonian_energy_error = 0.18868673341222886, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9822014580124442, log_density = 4.92568397714855, hamiltonian_energy = -4.136195840004229, hamiltonian_energy_error = 0.03697599843683541, max_hamiltonian_energy_error = -0.05189210356667928, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8009511841704641, log_density = 1.7340757911394178, hamiltonian_energy = -0.06135096534601492, hamiltonian_energy_error = 0.4618182582847916, max_hamiltonian_energy_error = 0.5514306472946471, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.5983665137134799, log_density = 0.021135209488935658, hamiltonian_energy = 2.334413131440734, hamiltonian_energy_error = 1.2356439069020495, max_hamiltonian_energy_error = 3.6727992208328812, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6636459770263113, log_density = 5.949012826013993, hamiltonian_energy = 3.834116879259165, hamiltonian_energy_error = -1.460424052344985, max_hamiltonian_energy_error = 2.789731814889164, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9374309268639428, log_density = 5.004168454089889, hamiltonian_energy = -2.8145696104417346, hamiltonian_energy_error = 0.2609875407185305, max_hamiltonian_energy_error = 0.5668334978771425, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9700530003253668, log_density = 4.994463523200829, hamiltonian_energy = -1.7727603330262642, hamiltonian_energy_error = 0.0497201025776679, max_hamiltonian_energy_error = -0.993610420629321, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9001470147294233, log_density = 7.531089585252548, hamiltonian_energy = -2.897595972208171, hamiltonian_energy_error = -0.8289641130233822, max_hamiltonian_energy_error = 1.308145907279469, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8932528906082089, log_density = 8.140295250337472, hamiltonian_energy = -5.679391346185416, hamiltonian_energy_error = -0.016453421785834088, max_hamiltonian_energy_error = 0.2622200149262195, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.825260214610345, log_density = 6.214688749652355, hamiltonian_energy = -3.9718943647011153, hamiltonian_energy_error = 0.29767676399364706, max_hamiltonian_energy_error = 0.4042409806459011, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9757482559605399, log_density = 4.157036959087426, hamiltonian_energy = -2.410180355756101, hamiltonian_energy_error = -0.03881738703421922, max_hamiltonian_energy_error = -0.4792200033641536, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9696763487904876, log_density = 5.975891904071496, hamiltonian_energy = -3.394888623168279, hamiltonian_energy_error = -0.17181761953838892, max_hamiltonian_energy_error = 0.5337815234277898, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8911979811133565, log_density = 5.991583903990964, hamiltonian_energy = -3.764465489537109, hamiltonian_energy_error = 0.09307618306627541, max_hamiltonian_energy_error = 0.5027206993060611, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9353167061870035, log_density = 7.561860718491602, hamiltonian_energy = -3.589966665032355, hamiltonian_energy_error = -0.2896769625737208, max_hamiltonian_energy_error = -0.2896769625737208, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8736648198951106, log_density = 7.110224058716533, hamiltonian_energy = -3.1378018188294154, hamiltonian_energy_error = 0.19663925783699465, max_hamiltonian_energy_error = 0.19663925783699465, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.2420180229925308, log_density = 7.599179684523127, hamiltonian_energy = -1.336087910525559, hamiltonian_energy_error = 0.8273726766702074, max_hamiltonian_energy_error = 1.8468039441459085, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.955726793154849, log_density = 8.18517554784279, hamiltonian_energy = -6.171596729759508, hamiltonian_energy_error = -0.16610191712879008, max_hamiltonian_energy_error = -0.29364127152080055, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8848479420809592, log_density = 6.480067279862286, hamiltonian_energy = -5.6422165461600535, hamiltonian_energy_error = 0.2665314892208075, max_hamiltonian_energy_error = 0.2665314892208075, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9338875323850717, log_density = 7.169056228058741, hamiltonian_energy = -4.946411423346895, hamiltonian_energy_error = -0.03049997817955674, max_hamiltonian_energy_error = 0.646209700554226, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8546931783595688, log_density = 6.317870663220322, hamiltonian_energy = -3.1746435088314766, hamiltonian_energy_error = 0.22832767920119768, max_hamiltonian_energy_error = 0.39475230173831966, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7787681422634101, log_density = 6.412902575483154, hamiltonian_energy = -4.261296285968306, hamiltonian_energy_error = -0.46769649025388205, max_hamiltonian_energy_error = 1.557157686863638, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9384770252905235, log_density = 6.437537062130071, hamiltonian_energy = -4.6445787448475055, hamiltonian_energy_error = -0.2215131607983718, max_hamiltonian_energy_error = 0.35003362954723904, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.983273760050847, log_density = 7.304757328848832, hamiltonian_energy = -4.508040284829592, hamiltonian_energy_error = -0.057934126915418105, max_hamiltonian_energy_error = -0.13413981126052477, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8366434732092929, log_density = 7.068679249251934, hamiltonian_energy = -5.9660991801503815, hamiltonian_energy_error = 0.14303710585944174, max_hamiltonian_energy_error = 0.2818562170355001, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9831862096434766, log_density = 8.106595861123179, hamiltonian_energy = -6.011006131525, hamiltonian_energy_error = -0.018376374128421524, max_hamiltonian_energy_error = -0.11443386220325813, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9592541429043169, log_density = 7.591343602140643, hamiltonian_energy = -6.5031332654421545, hamiltonian_energy_error = -0.032880185261887185, max_hamiltonian_energy_error = 0.15064983985429503, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7345597830073023, log_density = 1.7731932724597321, hamiltonian_energy = -0.4151842577598148, hamiltonian_energy_error = 0.5490536681799392, max_hamiltonian_energy_error = 0.5490536681799392, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9780697051045911, log_density = 6.208638919862764, hamiltonian_energy = 1.0061284568090203, hamiltonian_energy_error = -0.31470109578862093, max_hamiltonian_energy_error = -0.5810134974141468, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.980206189248536, log_density = 7.3438589928554805, hamiltonian_energy = -3.362766787712115, hamiltonian_energy_error = -0.04204310026998348, max_hamiltonian_energy_error = -0.2845867762817629, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9855546906626659, log_density = 7.887063188058111, hamiltonian_energy = -5.543334115193291, hamiltonian_energy_error = -0.01902405502344795, max_hamiltonian_energy_error = -0.1965147780258576, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9886963969668507, log_density = 7.336838819325731, hamiltonian_energy = -6.313773759869083, hamiltonian_energy_error = -0.025669749873928893, max_hamiltonian_energy_error = 0.045192299496809696, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9196665136781306, log_density = 7.868291287552378, hamiltonian_energy = -5.33241307897374, hamiltonian_energy_error = -0.01152156722398523, max_hamiltonian_energy_error = 0.25819757175562863, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9741845792178466, log_density = 7.969647390709088, hamiltonian_energy = -6.5529826577608485, hamiltonian_energy_error = -0.014573009555768124, max_hamiltonian_energy_error = 0.09662481820691315, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8407433588693147, log_density = 7.184341441097846, hamiltonian_energy = -3.9465205269381967, hamiltonian_energy_error = 0.051472525073823494, max_hamiltonian_energy_error = 1.1687001428297519, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8727124276932743, log_density = 6.9228041610060345, hamiltonian_energy = -3.47359847196158, hamiltonian_energy_error = -0.11688263678292987, max_hamiltonian_energy_error = 0.5675801362104114, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.7924594561460652, log_density = 3.294107214936041, hamiltonian_energy = -2.8623112608012113, hamiltonian_energy_error = 0.28377874292273786, max_hamiltonian_energy_error = 0.7077582378768597, tree_depth = 4, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8896799609860868, log_density = 7.119018663628884, hamiltonian_energy = 1.2594774667858868, hamiltonian_energy_error = -0.0391446901375474, max_hamiltonian_energy_error = 0.9024588061888479, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9299738522456205, log_density = 7.626388036397463, hamiltonian_energy = -5.540056348746235, hamiltonian_energy_error = 0.0794247906298331, max_hamiltonian_energy_error = 0.14361573365332259, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.697345121413469, log_density = 3.439209558693811, hamiltonian_energy = -1.973365199747843, hamiltonian_energy_error = 0.6516025570726662, max_hamiltonian_energy_error = 0.8032002777560323, tree_depth = 3, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 5.954585907272882, hamiltonian_energy = -3.7008922349119544, hamiltonian_energy_error = -0.692015047719643, max_hamiltonian_energy_error = -1.439291496516348, tree_depth = 2, numerical_error = false, step_size = 0.12932605646841056, nom_step_size = 0.12932605646841056, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/process_decomposition/script.jl\"","category":"page"},{"location":"examples/process_decomposition/#Process-Decomposition","page":"Process Decomposition","title":"Process Decomposition","text":"","category":"section"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"using AbstractGPs\nusing Plots\nusing Random\nusing Stheno","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Define our model. Define a distribution over f₁, f₂, and f₃, where f₃(x) = f₁(x) + f₂(x).","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f = @gppp let\n    f1 = GP(randn(), SEKernel())\n    f2 = GP(SEKernel())\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Randomly sample N₁ and N₃ locations at which to observe f₁ and f₃ respectively.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"rng, N1, N3 = MersenneTwister(123546), 10, 11;\nx1 = GPPPInput(:f1, sort(rand(rng, N1) * 10));\nx3 = GPPPInput(:f3, sort(rand(rng, N3) * 10));\nx = BlockData(x1, x3);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Generate some toy of f1 and f3, y1 and y3 respectively.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"fx = f(x);\ny = rand(rng, f(x));\ny1, y3 = split(x, y);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Compute the posterior processes.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f_post = posterior(fx, y);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Define some plotting stuff.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Np, S = 500, 25;\nxp_ = range(-2.5, stop=12.5, length=Np);\nxp = BlockData(GPPPInput(:f1, xp_), GPPPInput(:f2, xp_), GPPPInput(:f3, xp_));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Sample jointly from the posterior over each process.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"f_samples = rand(rng, f_post(xp, 1e-9), S);\nf′1_xp, f′2_xp, f′3_xp = split(xp, f_samples);","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Compute posterior marginals.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"ms = marginals(f_post(xp, 1e-9));\nf′1_m, f′2_m, f′3_m = split(xp, mean.(ms));\nf′1_s, f′2_s, f′3_s = split(xp, std.(ms));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot results","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"posterior_plot = plot(ylims=(-5.0, 5.0));","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f1.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′1_m; ribbon=3f′1_s, color=:red, label=\"f1\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′1_xp; color=:red, label=\"\", alpha=0.2, linewidth=1);\nscatter!(posterior_plot, x1.x, y1;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f2.","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′2_m; ribbon=3f′2_s, color=:green, label=\"f2\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′2_xp; color=:green, label=\"\", alpha=0.2, linewidth=1)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"Plot posterior over f3","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"plot!(posterior_plot, xp_, f′3_m; ribbon=3f′3_s, color=:blue, label=\"f3\", fillalpha=0.3);\nplot!(posterior_plot, xp_, f′3_xp; color=:blue, label=\"\", alpha=0.2, linewidth=1);\nscatter!(posterior_plot, x3.x, y3;\n    markercolor=:blue,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n)","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"(Image: )","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"","category":"page"},{"location":"examples/process_decomposition/","page":"Process Decomposition","title":"Process Decomposition","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/extended_mauna_loa/script.jl\"","category":"page"},{"location":"examples/extended_mauna_loa/#CO2-and-temperature","page":"CO2 and temperature","title":"CO2 and temperature","text":"","category":"section"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"(Image: )","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"using AbstractGPs\nusing AbstractGPsMakie\nusing CairoMakie\nusing CSV\nusing DataDeps\nusing DataFrames\nusing Dates\nusing Distributions\nusing KernelFunctions\nusing LinearAlgebra\nusing Optim\nusing ParameterHandling\nusing Random\nusing Statistics\nusing Stheno\nusing Zygote\n\nusing CairoMakie: RGB\n\nENV[\"DATADEPS_ALWAYS_ACCEPT\"] = \"true\"","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"\"true\"","category":"page"},{"location":"examples/extended_mauna_loa/#Obtain-the-data","page":"CO2 and temperature","title":"Obtain the data","text":"","category":"section"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"Use DataDeps.jl to obtain the data.","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"register(DataDep(\n    \"mauna_loa\",\n    \"The classic Mauna Loa CO2 data.\",\n    \"https://scrippsco2.ucsd.edu/assets/data/atmospheric/stations/in_situ_co2/monthly/\" *\n        \"monthly_in_situ_co2_mlo.csv\",\n))\nregister(DataDep(\n    \"hadcrut5_global\",\n    \"Globally-averaged surface temperatures\",\n    \"https://www.metoffice.gov.uk/hadobs/hadcrut5/data/current/analysis/diagnostics/\" *\n        \"HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.csv\",\n))","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"DataDeps.DataDep{Nothing, String, typeof(DataDeps.fetch_default), typeof(identity)}(\"hadcrut5_global\", \"https://www.metoffice.gov.uk/hadobs/hadcrut5/data/current/analysis/diagnostics/HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.csv\", nothing, DataDeps.fetch_default, identity, \"Globally-averaged surface temperatures\")","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"Load and pre-process the data.","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"ml_df, Ttr_df, Tte_df = let\n\n    mauna_loa_co2 = let\n        mauna_loa_data_raw = CSV.read(\n            joinpath(datadep\"mauna_loa\", \"monthly_in_situ_co2_mlo.csv\"), DataFrame;\n            skipto=58, header=false,\n        )\n\n        data = DataFrame(\n            date=map(Date, mauna_loa_data_raw.Column1, mauna_loa_data_raw.Column2),\n            CO2=map(x -> x == -99.99 ? missing : x, mauna_loa_data_raw.Column5),\n        )\n        data = filter(:CO2 => !ismissing, data)\n\n        # standardise CO2 data to have unit mean.\n        m = mean(data.CO2)\n        σ = std(data.CO2)\n        data.CO2 = Float64.(data.CO2 .- m) ./ σ\n\n        # Convert dates into floats.\n        data.float_date = map(x -> x.value, data.date .- Date(1)) ./ 365\n\n        data\n    end\n\n    temperature = let\n        hadcrut5_data_raw = CSV.read(\n            joinpath(\n                datadep\"hadcrut5_global\",\n                \"HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.csv\",\n            ),\n            DataFrame;\n            header=1,\n        )\n\n        tmp = DataFrame(\n            date=hadcrut5_data_raw[!, \"Time\"],\n            temperature=hadcrut5_data_raw[!, \"Anomaly (deg C)\"],\n        )\n\n        # Convert dates into floats.\n        tmp.float_date = map(x -> x.value, tmp.date .- Date(1)) ./ 365\n\n        # Remove any data from before the first Mauna Loa data.\n        time_min = minimum(mauna_loa_co2.date)\n        filter(:date => date -> date >= time_min, tmp)\n    end\n\n    # Split temperature data into train and test.\n    Ntr = 425\n    Ttr_raw = temperature[1:Ntr, :]\n    Tte_raw = temperature[(Ntr + 1):end, :]\n\n    # Standard temperature data using training data.\n    mtr = mean(Ttr_raw.temperature)\n    σtr = std(Ttr_raw.temperature)\n    Ttr = DataFrame(\n        date=Ttr_raw.date,\n        float_date=Ttr_raw.float_date,\n        temperature=(Ttr_raw.temperature .- mtr) ./ σtr,\n    )\n    Tte = DataFrame(\n        date=Tte_raw.date,\n        float_date=Tte_raw.float_date,\n        temperature=(Tte_raw.temperature .- mtr) ./ σtr,\n    )\n\n    mauna_loa_co2, Ttr, Tte\nend;","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"┌ Warning: Checksum not provided, add to the Datadep Registration the following hash line\n│   hash = \"fb45a9f136db4e3dbefda8860d874fce3d768bd50335e66692ce87e6ed0b1109\"\n└ @ DataDeps ~/.julia/packages/DataDeps/ooWXe/src/verification.jl:44\n┌ Warning: Checksum not provided, add to the Datadep Registration the following hash line\n│   hash = \"5e17b6441a20d6c88134e009245a005e3e61b4364bf19d71e9b02c495fe68128\"\n└ @ DataDeps ~/.julia/packages/DataDeps/ooWXe/src/verification.jl:44\n","category":"page"},{"location":"examples/extended_mauna_loa/#Build-and-train-a-model-for-the-data","page":"CO2 and temperature","title":"Build and train a model for the data","text":"","category":"section"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"Model for CO2 and temperature as a function of time.","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"function build_gp(θ)\n    return @gppp let\n\n        # Shared trend process.\n        f_trend = stretch(GP(SEKernel()), θ.λ_trend)\n\n        # Specify model for CO2.\n        f_co2_latent = θ.CO2.σ_latent * f_trend\n        f_co2_wiggle = θ.CO2.σ_wiggle * stretch(GP(SEKernel()), θ.CO2.λ_wiggle)\n        f_co2_period = θ.CO2.σ_period * GP(SEKernel() ∘ PeriodicTransform(θ.CO2.freq))\n        f_co2 = f_co2_latent + f_co2_wiggle + f_co2_period + θ.CO2.σm * GP(ConstantKernel())\n\n        # Specify model for temperature.\n        f_T_trend = θ.T.σ_trend * f_trend\n        f_T_wiggle = θ.T.σ_wiggle * stretch(GP(SEKernel()), θ.T.λ_wiggle)\n        f_T = f_T_trend + f_T_wiggle + θ.T.σm * GP(ConstantKernel())\n    end\nend\n\nx_co2 = ml_df.float_date;\nx_T_tr = Ttr_df.float_date;\nx_T_te = Tte_df.float_date;\n\ny_co2 = ml_df.CO2;\ny_T_tr = Ttr_df.temperature;\ny_T_te = Tte_df.temperature;\n\nx = BlockData(GPPPInput(:f_co2, x_co2), GPPPInput(:f_T, x_T_tr))\ny = vcat(y_co2, y_T_tr)\n\nfunction build_obs_cov(θ)\n    σ²_CO2 = θ.CO2.σ_noise^2\n    σ²_T = θ.T.σ_noise^2\n    return Diagonal(vcat(fill(σ²_CO2, length(y_co2)), fill(σ²_T, length(y_T_tr))))\nend\n\nfunction nlml(θ)\n    f = build_gp(θ)\n    return -logpdf(f(x, build_obs_cov(θ)), y)\nend\n\ninit_params = (\n    λ_trend = positive(1e-1),\n    CO2 = (\n        σ_latent = positive(0.3),\n        σ_wiggle = positive(0.3),\n        λ_wiggle = positive(5.0),\n        σ_period = positive(0.3),\n        freq = fixed(1.0),\n        σ_noise = positive(0.1),\n        σm = positive(1.0),\n    ),\n    T = (\n        σ_trend = positive(1.0),\n        σ_wiggle = positive(1.0),\n        λ_wiggle = positive(0.5),\n        σ_noise = positive(0.1),\n        σm = positive(1.0),\n    ),\n)\n\ndefault_optimizer = LBFGS(;\n    alphaguess=Optim.LineSearches.InitialStatic(; scaled=true),\n    linesearch=Optim.LineSearches.BackTracking(),\n)\n\nfunction optimize_loss(loss, θ_init; optimizer=default_optimizer, maxiter=1_000)\n    options = Optim.Options(; iterations=maxiter, show_trace=true)\n\n    θ_flat_init, unflatten = ParameterHandling.value_flatten(θ_init)\n    loss_packed = loss ∘ unflatten\n\n    # https://julianlsolvers.github.io/Optim.jl/stable/#user/tipsandtricks/#avoid-repeating-computations\n    function fg!(F, G, x)\n        if F !== nothing && G !== nothing\n            val, grad = Zygote.withgradient(loss_packed, x)\n            G .= only(grad)\n            return val\n        elseif G !== nothing\n            grad = Zygote.gradient(loss_packed, x)\n            G .= only(grad)\n            return nothing\n        elseif F !== nothing\n            return loss_packed(x)\n        end\n    end\n\n    result = optimize(Optim.only_fg!(fg!), θ_flat_init, optimizer, options; inplace=false)\n\n    return unflatten(result.minimizer), result\nend\n\nfunction KernelFunctions.kernelmatrix(k::ConstantKernel, x::AbstractVector)\n    return fill(only(k.c), length(x), length(x))\nend\n\nfunction KernelFunctions.kernelmatrix(k::ConstantKernel, x::AbstractVector, y::AbstractVector)\n    return fill(only(k.c), length(x), length(y))\nend\n\nθ_opt, result = optimize_loss(nlml, init_params)","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"((λ_trend = 0.08047196521556993, CO2 = (σ_latent = 1.0946329026341755, σ_wiggle = 0.013609855837622583, λ_wiggle = 5.322707765986851, σ_period = 0.0602128524027026, freq = 1.0, σ_noise = 0.007249130117339505, σm = 0.004058309480032128), T = (σ_trend = 1.678371712018395, σ_wiggle = 0.5791518402965937, λ_wiggle = 3.6336275223139833, σ_noise = 0.4036674107913921, σm = 1.1943117383872695)),  * Status: success\n\n * Candidate solution\n    Final objective value:     -1.971429e+03\n\n * Found with\n    Algorithm:     L-BFGS\n\n * Convergence measures\n    |x - x'|               = 1.39e-17 ≰ 0.0e+00\n    |x - x'|/|x'|          = 2.52e-18 ≰ 0.0e+00\n    |f(x) - f(x')|         = 0.00e+00 ≤ 0.0e+00\n    |f(x) - f(x')|/|f(x')| = 0.00e+00 ≤ 0.0e+00\n    |g(x)|                 = 5.40e-03 ≰ 1.0e-08\n\n * Work counters\n    Seconds run:   133  (vs limit Inf)\n    Iterations:    93\n    f(x) calls:    223\n    ∇f(x) calls:   94\n)","category":"page"},{"location":"examples/extended_mauna_loa/#Plot-the-resulting-model-fit.","page":"CO2 and temperature","title":"Plot the resulting model fit.","text":"","category":"section"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"function colours()\n    return Dict(\n        :blue => RGB(0/255, 107/255, 164/255),\n        :cyan => RGB(75/255, 166/255, 251/255),\n        :red => RGB(200/255, 82 / 255, 0 / 255),\n        :pink => RGB(169/255, 90/255, 161/255),\n        :black => RGB(0.0, 0.0, 0.0),\n        :orange => RGB(245/255, 121/255, 58/255),\n    )\nend\n\nband_alpha() = 0.3\nsample_alpha() = 0.2\npoint_alpha() = 1.0\n\nx_plot = range(\n    minimum(vcat(ml_df.float_date, Ttr_df.float_date)),\n    maximum(vcat(ml_df.float_date, Tte_df.float_date));\n    length=1_500,\n);\n\nf_post = posterior(build_gp(θ_opt)(x, build_obs_cov(θ_opt)), y);\n\nfunction plot_band!(ax, x_plot, fx, colour, label)\n    ms = marginals(fx)\n    symband!(\n        ax, x_plot, mean.(ms), std.(ms);\n        bandscale=3,\n        color=(colours()[colour], 0.5 * band_alpha()),\n        label=label,\n    )\nend\n\nfunction plot_sample!(ax, x_plot, fx, colour)\n    gpsample!(\n        ax, x_plot, fx;\n        samples=4, color=(colours()[colour], sample_alpha()),\n    )\nend\n\nfunction plot_gp!(ax, x_plot, fx, colour, label)\n    plot_band!(ax, x_plot, fx, colour, label)\n    plot_sample!(ax, x_plot, fx, colour)\nend\n\nlet\n    fig = Figure()\n    ga = fig[1, 1] = GridLayout()\n\n    jitter = 1e-6\n\n    # Plot CO2 posterior.\n    let\n        ax = Axis(ga[1, 1])\n        f_post_x = f_post(GPPPInput(:f_co2, x_plot), jitter)\n\n        plot_band!(ax, x_plot, f_post(GPPPInput(:f_co2_latent, x_plot), jitter), :orange, \"CO2 (latent)\")\n        plot_band!(ax, x_plot, f_post(GPPPInput(:f_co2_wiggle, x_plot), jitter), :black, \"CO2 (wiggle)\")\n        plot_band!(ax, x_plot, f_post(GPPPInput(:f_co2_period, x_plot), jitter), :pink, \"CO2 (period)\")\n\n        plot_gp!(ax, x_plot, f_post_x, :blue, \"CO2\")\n        scatter!(ax, x_co2, y_co2; color=(colours()[:blue], point_alpha()), markersize=3)\n\n        axislegend(ax; position=:lt)\n\n        hidexdecorations!(ax; grid=false)\n    end\n\n    # Plot temperature posterior.\n    let\n        ax = Axis(ga[2, 1])\n        f_post_x = f_post(GPPPInput(:f_T, x_plot), jitter)\n\n        plot_band!(ax, x_plot, f_post(GPPPInput(:f_T_trend, x_plot), jitter), :orange, \"T (trend)\")\n        plot_band!(ax, x_plot, f_post(GPPPInput(:f_T_wiggle, x_plot), jitter), :black, \"T (wiggle)\")\n\n        plot_gp!(ax, x_plot, f_post_x, :blue, \"T\")\n        scatter!(ax, x_T_tr, y_T_tr; color=(colours()[:blue], point_alpha()), markersize=3)\n        scatter!(\n            ax, x_T_te, y_T_te;\n            color=(colours()[:pink], point_alpha()),\n            markersize=5,\n            marker=:xcross,\n            label=\"T (test)\"\n        )\n\n        axislegend(ax; position=:lt)\n    end\n\n    rowgap!(ga, 5)\n\n    fig\nend","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"(Image: )","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"","category":"page"},{"location":"examples/extended_mauna_loa/","page":"CO2 and temperature","title":"CO2 and temperature","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/time_varying_blr/script.jl\"","category":"page"},{"location":"examples/time_varying_blr/#Time-Varying-Bayesian-Linear-Regression","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"","category":"section"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"(Image: )","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"using AbstractGPs\nusing ColorTypes\nusing FixedPointNumbers\nusing Plots\nusing Random\nusing Stheno","category":"page"},{"location":"examples/time_varying_blr/#Define-and-inspect-our-model","page":"Time-Varying Bayesian Linear Regression","title":"Define and inspect our model","text":"","category":"section"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"g1 and g2 are time-varying basis functions. In a real application, these might be specified by data.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"w1 and w2 are the time-varying basis functions for these bases, specified by slowly varying GPs.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f is the prediction of the regressor.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"y is the addition of f and rough temporally-correlated \"noise\".","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f = @gppp let\n    g1 = x->x / 4\n    g2 = cos\n    w1 = stretch(GP(SEKernel()), 0.2)\n    w2 = stretch(GP(SEKernel()), 1)\n    f = g1 * w1 + g2 * w2\n    y = f + 0.3 * GP(Matern12Kernel())\nend;","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Sample from the prior from plotting and for conditioning.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"rng, N, Nplot, S = MersenneTwister(123456), 250, 500, 100;\nx = GPPPInput(:y, sort(rand(rng, N) * 10));\nŷ = rand(rng, f(x));","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Compute the posterior.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"f′ = posterior(f(x), ŷ);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Sample from the posterior and write to file.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"xp_ = range(-2.5, stop=12.5, length=Nplot);\nxp_w1 = GPPPInput(:w1, xp_);\nxp_w2 = GPPPInput(:w2, xp_);\nxp_y = GPPPInput(:y, xp_);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Generate joint posterior samples.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"xp = BlockData(xp_w1, xp_w2, xp_y);\nf′_xp = rand(rng, f′(xp, 1e-9), S);\nw1′s, w2′s, y′s = split(xp, f′_xp);","category":"page"},{"location":"examples/time_varying_blr/#Plot-results","page":"Time-Varying Bayesian Linear Regression","title":"Plot results","text":"","category":"section"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"gr();\nposterior_plot = plot(\n    legend=:topleft,\n    legendfont=Plots.Font(\n        \"sans-serif\",\n        10,\n        :hcenter,\n        :vcenter,\n        0.0,\n        RGB{Normed{UInt8, 8}}(0.0,0.0,0.0)\n    ),\n    background_color_legend=RGBA(1, 1, 1, 0),\n    foreground_color_legend=RGBA(1, 1, 1, 0),\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over w1.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_w1); color=:green, label=\"w1\");\nplot!(posterior_plot, xp_, w1′s; color=:green, label=\"\", linewidth=1, alpha=0.2);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over w2.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_w2); color=:magenta, label=\"w2\");\nplot!(posterior_plot, xp_, w2′s; color=:magenta, label=\"\", linewidth=1, alpha=0.2);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot x1 and x2","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, (x->x / 4).(xp_);\n    linecolor=:black,\n    linewidth=1.0,\n    label=\"x / 4\",\n);\nplot!(posterior_plot, xp_, cos.(xp_);\n    linecolor=:black,\n    linewidth=1.0,\n    linestyle=:dash,\n    label=\"cos\",\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot samples against which we're regressing.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"scatter!(posterior_plot, x.x, ŷ;\n    markercolor=:red,\n    markershape=:circle,\n    markerstrokewidth=0.0,\n    markersize=4,\n    markeralpha=0.7,\n    label=\"\",\n);","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"Plot posterior over y.","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"plot!(posterior_plot, xp_, f′(xp_y); color=:blue, label=\"y\");\nplot!(posterior_plot, xp_, y′s; color=:blue, label=\"\", linewidth=1, alpha=0.2);\n\nposterior_plot","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"(Image: )","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"","category":"page"},{"location":"examples/time_varying_blr/","page":"Time-Varying Bayesian Linear Regression","title":"Time-Varying Bayesian Linear Regression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you've yet to take a look at AbstractGPs.jl, it's best to do so before digging into this package, because this package implements the Internal AbstractGPs API for several different concrete subtypes of AbstractGP.","category":"page"}]
}
