var documenterSearchIndex = {"docs":
[{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx_local = randn(5)\n\nx = BlockData(GPPPInput(:f1, x_local), GPPPInput(:f2, x_local), GPPPInput(:f3, x_local))\n\ny = rand(f(x, 1e-12))\n\nf1, f2, f3 = split(x, y)\n\nisapprox(f1 + f2, f3; rtol=1e-4)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPINput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the GP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = wrap(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we that makes use of a variety of packages from the Julia ecosystem. In particular, we'll make use of","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"WARNING: could not import AbstractGPs.approx_posterior into Stheno\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.02.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"23.97098078039214","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well.\n    s_noise = positive(0.1),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-0.9162907691270586, exp, 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-1.6094379869399091, exp, 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(1.6094379094538682, exp, 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-1.490116130486996e-8, exp, 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, typeof(exp), Float64}(-2.3025852420056685, exp, 1.4901161193847656e-8))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     5.228813e+00     3.119492e+01\n * time: 0.07100200653076172\n     1    -1.417255e+01     1.904526e+01\n * time: 1.7622990608215332\n     2    -1.811105e+01     1.637865e+01\n * time: 1.7807319164276123\n     3    -1.951923e+01     1.024580e+01\n * time: 1.7897770404815674\n     4    -2.339074e+01     8.287230e+00\n * time: 1.7987110614776611\n     5    -2.470810e+01     4.571897e+00\n * time: 1.8354260921478271\n     6    -2.563982e+01     1.015414e+00\n * time: 1.8441219329833984\n     7    -2.569566e+01     3.731282e-01\n * time: 1.8525960445404053\n     8    -2.570340e+01     1.421114e-01\n * time: 1.8610150814056396\n     9    -2.570429e+01     2.997461e-02\n * time: 1.8693890571594238\n    10    -2.570432e+01     2.702206e-03\n * time: 1.877716064453125\n    11    -2.570432e+01     8.785318e-05\n * time: 1.890657901763916\n    12    -2.570432e+01     4.515402e-07\n * time: 1.8992609977722168\n    13    -2.570432e+01     7.651163e-09\n * time: 1.9265038967132568\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -0.9781279217131637\n -1.6679812093719337\n  1.6223700230249445\n  0.08355092093461979\n -2.427642497720082","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.4),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-0.9781279217131637, -1.6679812093719337, 1.6223700230249445, 0.08355092093461979, -2.427642497720082], [-0.9781279217131637, -1.6679812093719337, 1.6223700230249445, 0.08355092093461979, -2.427642497720082], [-0.9786842107536561, -2.1271828388098415, 1.197096142448531, -0.07687547821165105, -4.032834727624965], [-0.8699009921739258, -1.9851838256233785, 1.2216846654311315, 0.023208171466386693, -4.0276396762186755], [-1.8450780309142092, -1.5333863707382769, 0.7576788264312836, -0.11466541709926184, -3.6361332255396883], [-1.6004849234042513, -1.6384117399562521, 0.6769382933246467, 0.10488982999219282, -3.7241882028889286], [-1.488782086823812, -1.7608092135249784, 0.4530527894856337, 0.6313927087975761, -3.9201392283057497], [-1.3841021378463694, -1.7439509225983605, 1.948360060953228, -0.1950697830712353, -3.9222839528788103], [-1.2737598906689522, -1.5028836990221326, 0.5718839847008763, -0.40729322014076175, -3.716454304021226], [-1.5937618351325613, -1.782380161881289, 1.2133995044664474, 0.12966148225209972, -4.154365474843468], [-1.6395695743880854, -1.7920797371868413, 1.307040797374717, 0.08512280871716382, -3.9314333826191588], [-1.1903711008184177, -1.7580080035298673, 1.9469772456733965, 0.7562066396528686, -3.886702634581275], [-0.9326448302836172, -1.3667484883532004, 1.6533785095327602, 0.2711717159032612, -3.820298617870948], [-1.0201134983335178, -1.2079833018275052, 1.5691622535970169, 0.3512852739055462, -3.602372247644298], [-1.1274238585196839, -2.235210286431302, 0.9745605083680464, 0.1910120115440619, -3.7733924615175733], [-1.2648894972268407, -1.5583345321855924, 1.2410209911306287, 0.01111835374400328, -3.73055665681084], [-1.405560613973715, -1.7146880390111576, 1.5244390568761519, -0.37256244040074804, -3.980322981722142], [-1.1212061930119164, -2.1395561905078777, 1.7401755693356475, 0.3550880591894182, -3.523702355583613], [-1.6916126556099425, -1.58648418658734, 2.1003115002345405, 0.5813067905694143, -3.8126122044048185], [-1.2746403559187356, -1.593173799192021, 1.078768006871597, -0.06714736154254973, -3.6971777252563287], [-1.126961318841021, -1.9150852110038374, 1.4197927063479976, -0.6687231367454165, -3.9730105685953823], [-1.0651866966671735, -1.9189240216121242, 1.2665731604887664, -0.6145606020504008, -4.006746276078423], [-1.405916679824325, -1.4773346708788504, 1.6652304553363169, 0.6820403461085078, -3.7852658255779157], [-1.297608662439643, -1.5734325022898428, 1.6283141169362174, -0.30758835267733753, -3.7052800050653443], [-1.3962467565882553, -1.5662922464904978, 1.0579500965847606, 0.4822626089861096, -3.874778989951759], [-1.1434155095177791, -1.5172467556406113, 0.7072368637379491, -0.45760252981517285, -3.713813556251059], [-1.7279531669997297, -1.648542027848345, 1.5844425274903264, -0.3925291957783702, -3.975810195545761], [-1.1579470360680981, -1.9423482054324916, 1.2381793821699347, 0.4118373219957515, -3.7315071897656575], [-1.628209110710476, -1.4911934748391298, 2.3674882872208385, 0.6290401047871113, -3.941512150209759], [-1.3776820669970085, -1.6915686914994585, 1.2679611848072747, 0.691141865655699, -3.4681469150319404], [-1.234095664728859, -1.688784962925514, 1.8309577448690981, 0.4437430449246841, -3.8377607109385274], [-1.247916658876197, -1.640848011562688, 1.5735242759962143, 0.1447570011103999, -3.8811390884121297], [-1.0688305631973554, -1.748593501039144, 1.097018186184233, -0.3741472449801759, -3.5635921576733702], [-1.302589564718973, -1.4062214345941275, 1.151367395961723, -0.5311263108211278, -3.9974004685905076], [-1.1777427082532115, -1.829795853071242, 1.588871745051481, -0.017215586142037415, -3.6865689249144444], [-1.4863060445598781, -1.7393571412329472, 1.5393404104812816, -0.3852473393055816, -3.7962691533447983], [-1.3203692211044165, -1.940618200195211, 1.265711290455726, -0.10992497267903477, -3.883899774196551], [-1.1480162107371292, -1.4447867746246157, 1.5347490848177652, -0.15288747932682994, -3.947802793808969], [-1.3024244460409429, -1.6131234328249586, 1.6268877929218148, -0.05122731572444979, -4.10969758175539], [-1.4666997535059771, -1.8658080825604384, 1.4730832292403742, -0.2554287623344151, -3.823763379871706], [-1.5136773605905849, -1.7612402289929565, 1.3289483277813634, -0.11914173776009093, -4.005647913318591], [-1.5911717005263775, -1.6817348773592788, 1.0184773376704934, -0.48996820118655693, -3.6565490504549354], [-1.2903987947414308, -2.0213988484588072, 0.7443751211350763, -0.20184281114995944, -3.734810293380308], [-1.5942947691187803, -1.7647756104156906, 0.3757501015149931, -0.3541348410057088, -3.8744768235784823], [-1.2707127131802534, -1.9246393705407812, 0.9613464560238654, -0.614557878502563, -3.981586436667024], [-1.4744899792946045, -1.5098842661513658, 1.4486938820001045, -0.1431044473990824, -3.676692364169389], [-1.212689815042527, -1.6226381270677779, 1.5674241101045003, 0.2340861076013935, -3.670419800031702], [-1.0877236294894634, -2.04045262421301, 1.414866495476611, -0.5531720593688103, -3.482412444172575], [-0.9728379209042444, -1.8699931047229488, 0.9758882833631592, -0.44512465534509993, -3.6390260093327282], [-1.57291340492044, -1.482679603253145, 0.6590853389272421, -0.6586351050891508, -4.229063017334669], [-0.9721475383998217, -1.774447182842188, 1.1205460454415452, -0.3695206910226143, -3.5307915283780025], [-1.3632206700479321, -1.9964922656756463, 1.47601881431021, -0.15552073976713565, -3.892669972839002], [-1.0674002946595538, -1.5001720765759874, 0.9753961049106634, -0.551575160617589, -4.032338872093048], [-1.1546042884116032, -1.7782940354502808, 1.6461319769299154, -0.2001111071472683, -3.564382986505614], [-1.401957846188772, -1.6427978370402028, 0.8105480440488391, 0.0715553634077962, -4.122954293469943], [-1.706798647997429, -1.8971482542236828, 1.366784629851193, -0.6621129576546743, -3.792583276132165], [-1.3637886069238563, -1.5495535811424896, 1.3045519808097845, 0.07812785745936707, -4.129389867974328], [-1.1371101009048055, -1.6279538827812337, 1.1491488057118748, 0.20108231764363058, -3.7224653596652706], [-0.9650794853357982, -1.3453241478705684, 1.1288665794756925, 0.17133740826407973, -3.743088417215775], [-1.180459358435952, -1.5977453677925004, 1.3479727116011728, 0.14656405527064031, -3.967133408468556], [-1.2984236887790908, -1.3711154499824794, 1.5814014050988623, -0.3370650163518984, -3.7434026967735483], [-1.0380686900783413, -1.5518432238583773, 1.4043008472985272, -0.5052574399413295, -3.9240886844965366], [-1.2360320503049678, -1.6383239967357686, 1.530791302283876, -0.496433879452011, -3.9484908576656403], [-2.0714519781384255, -2.021991711464558, 1.5921242579483268, 0.07457436256572639, -3.8917002582348585], [-1.345895797521272, -1.5180097185890984, 1.154874774159508, 0.12155292487422939, -4.174836382109522], [-1.3531440189406998, -1.536761161512855, 1.3667189813491247, 0.17286828960035538, -4.184316259310271], [-0.82049883128144, -1.616997486682518, 1.108817587011288, -0.4320035351056807, -3.463347825053172], [-1.212890259411135, -1.5432180942831462, 1.8263135961380108, 0.13519666826757124, -3.8997336075350866], [-1.6851542011912368, -1.6650687003779188, 2.0708983147033124, 1.173978668187099, -4.11532905982067], [-1.0775331976159612, -1.7840694814822013, 2.091406306110314, 0.9240841831698546, -3.7534268324233446], [-1.207853910554835, -1.2299987354512236, 0.35415291516874625, -0.822705822770068, -3.5352869881869737], [-1.1538297368827175, -1.384508245752065, 0.601973730085294, -0.6018626659625547, -3.833338717075988], [-1.3133181682300918, -1.8161755593339755, 1.9437701120239284, 1.1488750133193208, -3.798506440213094], [-1.7849980884336456, -1.769534890924351, 1.6156411915961246, 0.04957304548850966, -4.105328244775734], [-1.622307188471349, -1.8883624398945091, 1.6754121977660816, -0.07024725726104587, -3.930920574916927], [-1.1358781247806589, -1.4472149566159054, 1.5901472713288667, 0.6374818216436986, -3.7470495070754675], [-1.0820855782793926, -1.580497001346499, 1.6980401528995228, 0.40642934102319506, -3.993035170784987], [-1.2793445560949022, -1.8023483151442534, 1.2266997413889753, -0.5870629311684633, -3.6979119624100587], [-1.6863944997675284, -1.5791696291628587, 0.8689845683173004, -0.40565180222642216, -4.334618479879609], [-1.4183419309461032, -1.4109221919328305, 0.9472381375001306, -0.22553998977279446, -4.297781077390168], [-1.7082247517000244, -2.078616270931582, 1.2571767009743782, -0.47707924795742634, -3.719084728225923], [-1.1179168191723194, -1.304071197937191, 1.1719504543947359, -0.07570979454383356, -3.8000179583828233], [-1.1314407137903535, -1.6060540119461901, 1.2982827315083212, -0.0782940527155282, -3.6158144365799445], [-1.1602338048138043, -1.5839769143179738, 1.868163413832394, 0.19761733321802621, -3.9753807301560316], [-1.5723184797076144, -1.9202285428632198, 1.653684284099623, 0.6420465547932467, -3.9091836259214015], [-1.443445920052225, -1.5265797797110576, 1.7926470846127656, 0.3159823580506465, -4.119144939033777], [-1.461140126668462, -1.8905425311549076, 1.2453124654226606, 0.1278608085676759, -3.7957246020236224], [-1.0602922135254838, -1.6046955546440356, 1.38664907310641, -0.3259011505998326, -3.605878739745183], [-1.622926091644944, -1.9764069380850482, 1.3979412493257233, -0.5803786948366212, -4.04693234361881], [-1.6250908175590133, -1.9295953644115218, 1.258771331964535, -0.6408559022822711, -3.9812918022887107], [-1.4087600790589931, -1.9639966674536322, 1.7932964503825881, 0.20866608605893386, -3.941507154492704], [-0.9624272931527689, -1.4425764322236923, 1.5994946845193645, 0.6189668748725983, -3.8318376194312904], [-1.7437786377216486, -1.7598777487612574, 1.7498052987468953, 0.08150822683754061, -3.7694977493756694], [-1.5709714678510072, -1.78913079199064, 1.775360972938442, 0.3726010465968425, -3.9899407365142587], [-1.9876908082568752, -1.6716181925314029, 1.6460748401058003, 0.34678307743628645, -3.969132546592215], [-1.9010084976824329, -1.7096057187892377, 1.151676813847307, -0.6547364148106746, -3.8408267153893623], [-1.3108491676654208, -1.8589197123156962, 0.9181713940557924, -0.9850290240864188, -4.136602189498985], [-1.3015398458775342, -1.6559689690190695, 1.350880565759483, 0.00219416950536494, -3.698263911934441], [-1.4003021312059136, -1.6131794207221812, 0.6330089631991055, -0.039597014799189076, -3.9254720028589363], [-1.5153422064308117, -1.873408763828652, 2.051487314557657, -0.28316732012378637, -4.062969130330726], [-1.552447078052881, -1.7352890954029185, 0.7042224883165347, 0.539081306093128, -3.7759897242525224], [-1.565707013868213, -1.8145513074655832, 1.2053587952672733, 0.23569436324633047, -4.220533387401533], [-1.2302718972836082, -1.7042277543163726, 1.9639436997172461, 0.0638003191253974, -3.650524925017888], [-1.3352043878716855, -1.5599927846411554, 1.3354182746562633, 0.6101563111180883, -4.02900750650705], [-1.1089148297489786, -1.5934466696240466, 1.239065179956118, -0.7694426383655742, -3.684554022851145], [-1.2676478964624303, -1.8484226884884567, 0.9861467009323788, -0.6240955696315454, -3.594201940187373], [-1.3833016134539748, -1.6287918071604648, 1.0849909080551756, -0.5552738041333499, -4.132959724460161], [-1.5314709626210385, -1.9740052325393558, 1.637670014279663, 0.19386157319664798, -3.88557289618252], [-1.9029909871071855, -1.7496440131195532, 2.1282807015829786, 0.08576484414086757, -4.076551554246093], [-1.026627609093485, -1.600307730868532, 1.0968961931097179, 0.6392038715781291, -3.512866716338017], [-1.1556420055144203, -1.718261449996358, 1.0402499932772673, -0.027430286144461358, -3.9895653245606613], [-1.3315096779542883, -1.870030192415581, 1.8592545443295785, 0.6500467462480434, -4.0111144215878864], [-1.5914784165851723, -1.648117864302309, 1.4682349682077824, 0.6298780076777243, -3.908419011961661], [-1.320581437150933, -1.6536640871845443, 1.736554010644912, 0.5629568630173942, -4.104125416123138], [-1.442350051394401, -1.8371895834903968, 1.7638709651015299, 0.44054833679259375, -3.7641994080164114], [-1.501971775525305, -1.7356059861342104, 1.7439108527182077, 0.5656880983032504, -3.7129039710623863], [-1.4282591472297694, -1.5629854320559882, 2.209702036184795, 0.6117339950931299, -4.016517223474711], [-1.1101947270428538, -2.1081229110492297, 1.8422861295584179, 0.1542950193592751, -3.712415031587448], [-1.580061049262342, -2.0491742563673596, 1.868666791634565, 0.2790539873959388, -3.2300404986752653], [-1.4976882398382687, -1.867356512774062, 1.1796257871815974, 0.17185786101921363, -3.7928935507869], [-1.1367147782881293, -1.5716183390365106, 1.8330411276896075, -0.09098055871452729, -3.9625646754709725], [-1.4688943286753786, -1.7165112837898167, 1.5452789724548666, 0.7228681332587948, -3.6995470899015954], [-1.2098385562432303, -1.6666141737400784, 2.208090148889218, 0.6720844689834867, -4.0212856343403525], [-1.6061155237390587, -1.6750643365115974, 2.421257473914773, 0.9459196161677506, -3.8949669220485355], [-1.4107806717097533, -2.0498907064826666, 2.2931923235278355, 1.1746647515837443, -4.072835482751293], [-1.5232158468725903, -1.8730757736035528, 2.1461520630237514, 1.3100518919015824, -3.8885064300592878], [-1.6965156504620145, -1.6757153889455063, 2.339568746843871, 1.153699877365976, -3.951910202984527], [-1.189556398046617, -1.7743469377917636, 1.992361930333683, 0.3841026702501886, -3.774600820794795], [-0.9863921206491482, -2.1822028710425667, 1.865342659087719, 0.37349931912137857, -3.8436006430838], [-1.7234950444224382, -1.53500901664241, 1.6218847746805485, 0.1675667267538265, -3.9358574868916305], [-1.5847716170846984, -1.606730237145939, 1.5532518721120478, 0.1307948602949528, -3.9969410068099163], [-1.3176642672168701, -1.8484896583650505, 1.2963666026146892, 0.34718776725830214, -4.096200579149625], [-1.201836118516628, -1.8017879431594608, 1.5953665675169264, -0.1499316554586995, -3.9086239771892064], [-1.5487269972871136, -2.032965501605699, 0.731722571929988, 0.15566698511004531, -3.5843957104787014], [-1.3648406558387804, -1.7764349101923622, 1.2141238020509566, -0.6690785218055783, -3.9404770890961096], [-1.6559914476937743, -1.8863801612412376, 1.3816382856959062, -1.00838519190322, -4.0109059558947955], [-1.3269106859488147, -1.6895049338335313, 0.7201721505912024, 0.0989538323302426, -3.8633982010704546], [-1.49221436035357, -1.6747555689037912, 1.0608671635665168, -0.5195777419344219, -3.9834094628049543], [-1.1825381429608302, -1.7071524493634984, 0.915135330950814, -0.5139976263160064, -3.8866869694749493], [-1.1641012541675981, -1.6683389846398842, 1.1499363159603064, -0.8097104354267729, -3.7299326791474137], [-1.5223096518880839, -1.8362535561825606, 0.8066009143716846, -0.35393811286634846, -3.775114553484074], [-1.5334219599662327, -1.5399816804309994, 0.9644472847058264, -0.5506456383379144, -4.159315662875711], [-1.5803982108158507, -1.6186646603004373, 1.1238947625162297, -0.5074457224728169, -4.1942927778602455], [-1.2689296915362729, -1.950482768427282, 1.6383889220037455, -0.18306073911163823, -3.7999077231563496], [-1.0862161121680611, -1.4831854403394877, 1.266029493711453, -0.05404246303703769, -3.965202823261013], [-1.605605454678921, -1.876904305592023, 2.1612759106070274, 0.9172674140854931, -3.7787782790262514], [-1.2611281935631864, -1.787993178534535, 0.5514911870549577, -0.2000553323120573, -4.185958159015817], [-1.0629770237893523, -1.5588176716005262, 1.7081336581886677, -0.45230137250542013, -3.6849039143611986], [-1.6501144654545103, -1.9207309705597129, 1.0835385034655909, -0.07698179315512663, -4.266042075214693], [-1.690733553599237, -1.5952438268271756, 0.8762590525752268, -0.31933496036733766, -4.078918925189645], [-1.6876652004730568, -1.6949825241919498, 1.4829421914910363, -0.510236899797841, -4.17991499293662], [-1.3833599779469272, -1.8082226144774458, 1.598595007720049, 0.17381605466659159, -3.816390592191708], [-1.6248147294156898, -1.604666330021022, 1.6626552488881428, -0.2249580664073639, -3.708804737668533], [-1.7169045880097293, -1.7417188263043342, 1.7302674814078594, -0.29644311457342937, -3.6595441924225596], [-1.2803764047593107, -1.7965694540462944, 1.066277277861167, -0.15646425910802605, -4.057857835523656], [-1.6809420292245356, -1.6831509437372238, 1.206042484453561, -0.14417931826247687, -3.8049971659177086], [-1.1576424469690019, -1.8724311331682124, 1.4171736728473996, -0.014125117352158743, -4.037242657794413], [-1.102517223608895, -1.3271822416056953, 1.9497438005128607, 0.1792860974102727, -3.4441671633556323], [-1.96729072569165, -1.874102519762626, 1.108406527471958, -0.15534359760734728, -4.18467420246964], [-1.0233103915531359, -1.6178305939901665, 1.297661728357093, 0.2760989429467268, -3.583392776008838], [-0.9999076750232844, -1.3386808005471817, 1.4495159798786017, -0.5242401740591585, -4.116170180045349], [-1.211789402012158, -1.3943346834058103, 1.4809910920053446, -0.08510571300563632, -3.804638130300968], [-1.0067311514384127, -1.7925157205470053, 1.2725223456140584, 0.1717712836995435, -3.865066818264886], [-1.3033159497243592, -1.5132890302671356, 1.2276803049886522, 0.009169365138537278, -3.8119307036722208], [-1.15329379892775, -1.6687376007386396, 1.480780095714519, -0.3466586551562409, -4.134291096680325], [-1.3271758331529153, -1.6625526261383041, 1.2212580113516533, -0.08796059095832354, -3.9953779012797432], [-1.3774635688759609, -1.9630247513000085, 1.9024481823796153, 0.49187253211912607, -4.018273996126926], [-1.6306488877133531, -1.6688443081813953, 1.9038088429777702, 0.37800689040647106, -4.372248013702354], [-1.407493180835234, -1.6233483209698019, 1.717890631095604, 0.553133856586305, -4.160779115241363], [-1.3981355180692763, -1.656728895281502, 1.7444690020918323, 0.3662537179042308, -4.022761125346698], [-1.219543595783339, -1.9827834952130603, 1.8184132806235966, 0.20719866681513177, -3.749681202644816], [-1.3443749007048056, -1.979902511784771, 1.6826731336381322, 0.10656242683053029, -3.700285226662266], [-1.3407291160083854, -1.6296390290048746, 0.697409611241544, -0.8068126670607633, -3.9414690237991596], [-1.1724991770550481, -1.5460559369472684, 0.9884414093880437, -1.0108613465059817, -3.837024630515197], [-1.0566849345616791, -1.5259746397914113, 0.8932861093198353, -0.9859726324170368, -3.779512631551184], [-1.0327719202360102, -1.555408148839647, 0.9234501862385771, -1.065411805034542, -3.7913880996419613], [-1.1312671652100892, -1.5401149094822906, 0.876701831982058, -0.9376423998535521, -3.983195543165609], [-1.4344856773588877, -1.8319244566688613, 1.5084524889590925, -0.4222891821355034, -3.7394298811570352], [-1.332392473615768, -1.9379261376955652, 1.331434869511024, -0.2459314874886534, -3.821105333185457], [-1.7730511338919854, -1.7191437842453372, 1.678091231257743, -0.33161886172109767, -4.00773356264712], [-1.621739311913013, -1.6142312063654831, 1.5447340953456667, -0.4346076300446629, -4.2127952835464875], [-1.0912785287340365, -1.5353372171869155, 1.2511328620891082, 0.04602140075885544, -3.90719678448605], [-1.167183055789703, -1.705794300456502, 1.362167486267516, -0.23581211596273335, -3.9328797427309694], [-1.3226212294480983, -1.7084667722451419, 0.8209228728510453, -0.3975275402922243, -3.9236908132566737], [-1.5154267176317466, -1.6830410363452641, 1.3736036497318294, -0.5775151655956392, -3.906140538829189], [-1.2960293800084908, -1.574339051516495, 1.1114193199439952, -0.07653921352243172, -4.041602606197035], [-1.5896664496560047, -1.590014452795279, 1.0356894622902206, -0.03262593701787464, -3.8593689456659415], [-0.9494410009919707, -1.6459509292237522, 1.448769333054285, -0.10340105689376815, -3.8461413846697488], [-1.8335251722020613, -1.9040582815374902, 1.3422307418347728, -0.2598051227968546, -4.118876743582837], [-1.9194265953741245, -1.851931219928848, 1.4496062135911674, -0.052363823727957115, -4.264248907521585], [-1.7800956400233248, -1.9127407882801697, 1.4616758460822112, 0.051505778633568616, -4.237053735017302], [-0.8260484223638664, -1.5047708259348689, 1.622745785869453, 0.08912146123467582, -3.845815037399266], [-1.0944465523948776, -1.3653133519796756, 1.608670311197496, -0.054066139580534966, -4.038419192891193], [-1.1307668089140321, -1.711203693448597, 0.6446418898787653, -0.3279269050073466, -3.655880187260546], [-1.3028231515275028, -1.5622116483980315, 1.1199047275036296, -0.8162486766547002, -4.072620590947608], [-1.4111531107678212, -1.9107044021726, 1.2245644308558745, 0.2194685019617818, -4.169498520704814], [-1.6195166658656377, -1.707582767618588, 1.153412115982421, 0.09052716218776737, -3.6155895138531826], [-1.3007585097123044, -1.5980122645319808, 1.275347211015551, -0.44982647366509576, -3.92299888503966], [-1.1266372062422352, -1.613514187597727, 1.2931906286240995, -0.34601969040103625, -4.04833839816562], [-1.212438073627757, -1.9557741338744163, 1.4899254661186574, -0.4008134918752291, -3.7962269475473405], [-2.1121499582415897, -1.8023141412302601, 1.4396254956732497, -0.12053851128471757, -3.748380930563808], [-0.8838387142594943, -1.5545097303605404, 1.6272695209471832, -0.3688632754217644, -4.148629709399191], [-1.7882673118937953, -1.6541979452402658, 1.4370414520313561, -0.23544119817457554, -3.7226237972017127], [-0.7835966604292341, -1.803605854719402, 1.4010228071249637, -0.2767547765068185, -3.7382426186503], [-1.6938764845877032, -1.9240049022162107, 1.335281263081642, -0.3684748916589908, -3.6974632865131483], [-1.4811516498922535, -1.9395441563273819, 1.3130887121134553, -0.43178839892396165, -3.896830778172536], [-1.530582565769098, -1.5489118824660102, 1.2314621914622195, 0.014871507601824457, -3.703255635177873], [-1.504132719155021, -1.5345732024803946, 1.4349210565186277, -0.019008770426972715, -3.7820622033164777], [-1.0661304257206767, -1.7357308841455528, 1.2675934759802077, -0.20247169739724918, -3.837321291403846], [-1.3274350942778637, -1.852563334348617, 1.4851552508166401, 0.038362807154738846, -4.141250753044415], [-1.4735547425734916, -1.8105810899360426, 1.4625640563152353, 0.025276898643445907, -3.918632364106629], [-1.1730916180997586, -1.7515763053839841, 1.619802407449543, 0.10962034039008627, -3.8630378782733104], [-1.249351849701854, -1.7306935710741198, 1.7183722740669456, -0.11549447305921041, -3.7487603179691815], [-1.2961916980175554, -1.4070315852492363, 1.3710766968066799, -0.5831499033284124, -4.225160057064794], [-1.1320670600083278, -1.5813677511757624, 1.1491992744605333, -0.014103004842327488, -3.9473916940821545], [-1.3178232663564253, -1.3803416970277567, 1.2685521685673744, 0.261838094560743, -3.8164001544270483], [-1.5805453130535618, -1.8733085692939468, 0.9787014729450025, 0.04963826617026246, -4.2335411470547735], [-1.4953744964147555, -1.7162155991202583, 1.4696759821596188, -0.7803040019252376, -3.6280106123114937], [-1.532145654729152, -1.5462342825980788, 1.0128274080500912, 0.22588738621083232, -4.134854256024676], [-1.2007423070878187, -1.870156444822871, 1.455488485810786, -0.14166462884421122, -3.6500123278724104], [-1.557779365000668, -1.6913181647043238, 1.6951012481189522, 0.4301848142906588, -4.239964448870334], [-0.9773356476494347, -1.6160249459278386, 1.7657581945937146, 0.49422868626789807, -3.6440702495929798], [-1.5579951593130905, -1.9735240294640866, 1.9192220815352112, 0.1998932785352711, -3.8597152209885994], [-1.1371301923669286, -1.709297990551118, 1.410539668472173, 0.18841477328952935, -3.985470477192004], [-1.4098915096749052, -1.4259940967696418, 2.021914846142798, 0.18659064475847922, -4.0189588456637395], [-1.4460116087783814, -1.4681777448141162, 1.9936911917779656, 0.15964272446641142, -3.9431126893921875], [-1.2456801330116352, -1.9627286793398042, 1.4017095416144314, -0.045364229001765885, -3.854716452070824], [-1.5064917046874235, -1.4544386964003535, 1.044949784078122, -0.6597229628375539, -3.8989358208707494], [-1.3302494964708678, -1.4502292460549622, 1.1694412186932692, -0.7866055012358475, -3.832775733527781], [-1.0621080652035997, -1.66153898951976, 0.985948883141377, -0.6004542211638548, -3.698758367312224], [-1.1664826039586336, -1.3620482985370181, 1.068540628266971, -0.39020560739889887, -3.893902426693513], [-1.1339519349211977, -1.8337741058200996, 1.0045418874692296, -0.5287728842504176, -3.6259990103454816], [-1.5393375886875644, -1.6206476518221469, 1.4847798852575183, -0.06825256099375338, -4.172532254693833], [-1.3052075654675341, -1.5604303583914165, 1.4939186257065484, -0.14644699848131376, -3.9573249405877657], [-1.3559389333072933, -1.8279858296863092, 1.1959574241863693, -0.41842925098134587, -3.8272967290271835], [-1.053998266136551, -1.66779296285096, 1.3103528007463408, -0.6116995852074454, -3.931054150913214], [-1.7218760693209232, -1.779667326854227, 0.9640795048487132, -0.3446366301171237, -3.851296032284023], [-1.256249688747888, -1.6565620596968178, 1.3885503763494658, -0.5365048870518921, -3.926340315376182], [-1.7869497213704353, -1.8303910418601017, 1.3467170668650001, 0.08886167197493011, -3.910674038852887], [-1.0814616117250886, -1.7270010758684635, 1.0071771450606608, -0.8169978342666905, -3.815604613084592], [-1.0519915039193737, -1.7986789242329972, 0.9016627806517704, -0.8927139483729928, -3.838975243590326], [-1.4740293757582759, -1.7781265792623373, 2.201437175996605, 1.2888998061850705, -3.61981006577188], [-0.9831410707778776, -1.5968790688683188, 2.45333324475958, 1.2444233186107354, -3.6960649196997752], [-1.5469854070884401, -1.8056647255572364, 1.9728834316773838, 0.9834085830680716, -3.968216180067947], [-1.1464696276829087, -1.6941898679236629, 1.8607910356770645, 0.8650557761943282, -3.6864468213614825], [-1.5362035494369668, -1.6809183468566453, 1.556510187112951, 0.283498620105106, -3.98137429236267], [-1.6510913504737876, -1.9161358016585144, 1.470256565365471, -0.08093435279693399, -4.06067556992231], [-1.0732739393892554, -1.3956243161006479, 1.344499614680206, -0.2806978063192108, -3.6548590227534588], [-1.466765539982979, -1.8269416342454938, 1.184276655497109, -0.3687488285123237, -3.885376200915204], [-1.4506469624108975, -1.531602783418668, 1.5732692281096603, 0.18769211410594575, -3.881285290114996], [-1.7622420083050068, -1.7204615456785717, 1.3023858901548246, 0.04596688003218642, -4.326314345405445], [-1.6481227567669652, -1.8299187352149908, 1.2713237957161116, 0.27043922774671436, -4.008955694563579], [-1.055445083855, -1.891922524157455, 1.6982570812666313, 0.36406212313765934, -3.5767040668718053], [-0.7263984453790044, -1.6769474390430847, 1.4794215712020573, 0.49046055336713407, -3.48773315221254], [-1.3422348905219317, -1.3688339235900477, 1.7143572157433034, 0.1187128952107227, -3.701691079702636], [-1.5091300639169505, -1.8370294306229287, 1.448640211146452, 0.03606852317543698, -3.8071540702489726], [-1.2599557939491974, -1.3344967790593798, 1.17059684662349, -0.4420609651614627, -3.7160707945758675], [-1.4752312957615923, -2.0528504306795208, 1.3191075679195574, -0.7723945694852233, -4.086971752096271], [-1.6106736366452519, -2.058683282230923, 1.3797957913785683, -0.6814076502893923, -3.817303827562242], [-1.5570492859485925, -1.5956964617704226, 1.2801801809586828, 0.003986647170133334, -4.054838334704447], [-1.282653729728835, -1.754764176483842, 1.4484243166943533, 0.008852535668705835, -3.736995469337764], [-1.3463151243798614, -1.7993889053185512, 1.3882910039119414, -0.23083709264548774, -3.813387772582919], [-1.2386393221757814, -1.667537930433277, 1.5235206181120782, -0.3165946275280812, -3.6576911762861974], [-1.5085462437174486, -1.6693270035656542, 1.3619582966883064, 0.5318113897299269, -3.797274786165239], [-1.6295061161698972, -1.8026742463671115, 1.6390291788220244, 0.18374246061014712, -4.256963468146062], [-0.9890662144423512, -1.4040114438534568, 1.8052932126367462, 0.028175945216028786, -3.9234827926136493], [-1.0965048158324682, -1.0441067386551748, 1.5369686582915945, 0.2980803606956724, -3.936320672102576], [-1.17264831961636, -1.8096514493928249, 1.3321386527692398, -0.08714995584458174, -3.8105827294549965], [-1.0082909542661327, -1.2523551507862867, 1.4915615848873502, 0.2904953395279989, -3.7665346038932674], [-1.1294635208700592, -1.620699237663377, 1.557432594497419, 0.060216588455081405, -3.7238706152021566], [-1.3048908690801848, -1.6657505758246727, 1.3393421445449585, -0.37543931336182923, -3.8776458432996], [-1.4205906620875641, -1.6208262065334431, 1.4062481253421688, -0.26908233063533543, -4.236517900128995], [-1.4032416123447493, -2.0260444991824924, 1.482945677779959, 0.027262354503924988, -3.756746571143638], [-1.3130707332574574, -1.473170136337932, 1.0288072632989176, -0.5930712308766868, -3.9700803476035267], [-1.7876016820892273, -2.0216123881155545, 1.2976643741696978, -0.4680007408646269, -3.9773871553086293], [-1.1754212190352507, -1.8161924057976961, 0.9909606138571091, -0.7834672551160069, -3.5912368472660146], [-1.2083262702777005, -1.3463239812688714, 0.973088402297042, 0.0051259486936133525, -4.1491760369828805], [-1.3037819583833603, -1.45031064973801, 1.0180232641854912, 0.1414906410089485, -4.069811236562932], [-1.295316249481159, -1.8686184331864684, 1.5469077427542641, 0.3271940988893864, -3.9333898598042216], [-1.3245443647419402, -1.9288529730646886, 1.446689481444153, -0.4081323564419048, -3.8431472170584433], [-1.261998930790676, -1.5225212888432575, 1.2416944073601135, -0.0009041533108248238, -4.0930132873099465], [-1.3838826670724205, -1.5492250405840877, 1.3524665456604765, 0.1968498116085429, -3.5720384441767177], [-1.042122138415524, -1.3703991688800798, 1.6066869676731308, 0.1360398015730815, -4.013747161213242], [-1.025552569247335, -1.5203946993290298, 1.6913783312030255, 0.1834821292004235, -3.481632106918822], [-1.1292798122801582, -1.4923838565217789, 1.5107952375336804, 0.06423275748443504, -4.11940663220797], [-1.707611982355498, -1.6074762507016351, 1.1434103106241331, -0.3178609234611753, -4.062858492466412], [-1.845600252784737, -1.75140584922762, 1.1471478061784082, -0.5756558508623546, -4.2509931666616225], [-0.9074339816311231, -1.6181078950353172, 0.8581286513709409, -0.5778449425948305, -3.581983612472425], [-1.7451666818908875, -2.034946176529938, 1.4850559787812971, -0.48096142572193173, -3.870588818619119], [-0.9360247951441663, -1.0656763243069927, 1.2603838687191544, 0.30237292297630647, -3.628718920745124], [-1.6762325588985256, -1.9233934242190505, 0.9535940165596966, -0.7773962375322561, -3.915268978823383], [-1.5693945278246046, -1.7960800838280686, 0.8214967063021658, -0.7885372735139963, -3.649125770067386], [-1.1371244700605063, -1.5845267130517886, 1.1142725073440958, -0.3717314986356692, -4.123326078155522], [-1.5431171700552169, -1.547203990674134, 1.344335811103392, -0.9493031780775617, -3.7700050458163736], [-0.8696719768279438, -1.6266287301083096, 1.4301521264258419, -0.5384139047887123, -3.731802258671571], [-1.2998660017155488, -1.6475894233157404, 1.600148583910316, -0.3203217040894988, -3.882096362245715], [-1.0567223242760193, -1.471597166423375, 1.2778629142870408, 0.3463356146783666, -3.7933709490272074], [-1.1138221523828584, -1.495009650664648, 1.5840624530356446, 0.32049012969475343, -3.976359895785677], [-1.2675549015658774, -1.8101812049343395, 2.4795648083201494, 1.5727522945811816, -3.990651323543922], [-1.681847112306856, -1.666971301615541, 2.2403724373421454, 1.1797170501665288, -3.9459706609346212], [-1.6915928676916032, -1.6886773562363184, 2.235657789558636, 1.017774032825358, -3.830164778186023], [-1.0891311450337673, -1.7869345599579154, 1.8855343065421988, 1.3798271713731252, -4.0293950045740745], [-1.4767004109942203, -1.6936835067987557, 1.804928674001825, 0.9243739166693544, -3.7221386025711096], [-1.3916012757763414, -1.399892129136029, 2.162894990528329, 0.7185714638851665, -4.025444413993985], [-1.340671310908235, -1.7156780215478404, 0.924745035467928, 0.27953341626741957, -3.418414427844839], [-1.6663637817606731, -1.7029474299602836, 1.2503965145466203, -0.13279263301375405, -3.548646294024374], [-1.0229725059942871, -1.891548766389648, 1.2822031638125513, -0.4573507850684852, -4.033848338950304], [-1.3511097985127445, -1.6951840374305698, 1.3119770850164736, -0.26680609233995406, -3.9269976952471177], [-1.2486051944433292, -1.4013174482573654, 1.3644404555554726, -0.31392889758702697, -3.9788674238340636], [-1.0988873338983518, -1.7310092901325684, 1.6129999646693631, -0.057430047926693414, -3.6018514859181305], [-1.2224869286468374, -2.00315178911702, 1.6397108494484018, 0.029647322468078288, -3.8363449461978694], [-1.525941693448597, -1.690611780599496, 1.2234999685509673, 0.2687657200393069, -3.649270496878237], [-1.4211624990476448, -1.8069850778532968, 1.592464852977439, 0.12365550999531602, -4.198348716728093], [-1.1924402368565072, -1.6665759085878082, 1.623342036699651, 0.43848463595705567, -3.8649727219624537], [-2.0340238894772287, -1.98660863958905, 1.6719904317218213, 0.1940204476724275, -3.9794035955223714], [-1.7860911039076341, -2.0342684597002694, 1.7232074384772065, 0.22571734493760506, -3.6425088410346795], [-1.4019119133631308, -1.6044367813339155, 1.2847701783376848, -0.2549654436416428, -4.166527390993073], [-1.341372656133091, -1.853583666643401, 1.8588735669132617, 0.6231578819619377, -3.7692084503335357], [-1.2124705291917985, -1.5865273778446123, 1.834402624590737, 0.28839929030790823, -4.1572504092272915], [-1.5892049673945183, -1.6666428925736847, 1.8266842565804384, 0.2598306143116113, -3.855386248094861], [-1.2011982125196714, -1.8179568019195302, 1.3850640297555914, 0.2921585525659974, -3.999240179741472], [-1.2167793250238188, -1.7835404747998316, 1.4095455880071475, -0.5319910006653257, -3.7278686656380673], [-1.1718158277584527, -1.4757274914973464, 1.4260623417208287, -0.5117835711360698, -3.932406200875944], [-1.2106717630421127, -1.5578202187404364, 0.9917141936521743, -0.34730141793768565, -3.8677563960244017], [-1.457053771396783, -1.646511567208234, 1.0230322402857122, -0.6599163640457313, -3.8024992474082175], [-1.6550190888722933, -1.8275666307390523, 1.242802375044926, -0.36444052233335733, -4.250302114570466], [-1.7198973445998813, -1.6643432298072907, 1.2379764457825657, -0.3321671710021878, -3.8991106125523856], [-1.192257175336373, -1.651829951886335, 1.0488173235531102, -0.05506281224897899, -3.7359236950729295], [-1.2541107741111461, -1.5975734625963802, 1.389979660723448, -0.3291113573246374, -3.9839563604721673], [-0.9015674579384533, -1.4740094318880015, 1.1078347418764394, 0.16343074636424673, -3.5738328236751755], [-1.2612468609878107, -1.8312845659376593, 0.8294576502395309, 0.04403909820715034, -3.871258995502015], [-1.2303015968471442, -1.297275571085323, 1.1872085063637718, -0.289045900649384, -3.815363302451613], [-0.8822237367186818, -1.4866077083390277, 1.4505080570427398, 0.019453101380467436, -3.8029387790511593], [-1.734209710951454, -1.9973194738521687, 1.460856150407844, -0.34321444735381385, -3.870779368631702], [-1.3848803667030862, -2.1096498606893967, 1.1314286210143487, -0.4103672817363508, -3.882225624140348], [-1.4020446299055866, -2.0965998139216975, 0.9132945249531905, -0.40085056949402986, -3.86544866260287], [-1.5685362753457581, -1.9660979362441595, 0.9945998425914166, -0.9252244061655588, -3.8459917408956175], [-1.215216525446751, -1.8808725943994649, 1.0832348245390742, -0.47053133342913833, -3.8163446513471597], [-1.1012284432341994, -1.9923958902371415, 1.1774389911523195, 0.4288405491546008, -3.8949227754936646], [-1.5291767409652988, -1.9453177189413404, 2.4325503893962654, 0.8256333249328051, -4.179022126965496], [-1.5231911612301126, -1.854792883075026, 2.121505366389514, 1.175576138319356, -4.0363352701332404], [-1.2883955413097314, -1.7381583285618747, 2.8789776158237728, 1.9172381979457873, -3.704878670377708], [-1.0851702450428118, -1.2452105123184465, 1.4026096632262837, 1.5186666783659382, -4.016485570405555], [-1.1206107125200038, -1.6243721501798842, 1.9964150143092838, 0.7704912029048574, -3.665835442022369], [-1.1646633852482853, -1.4569578972817345, 2.300032529319565, 0.8575679727503995, -4.060550516832984], [-1.3481184931393522, -1.9558251038228407, 1.638898112136517, 0.8381399430523292, -3.80133817442041], [-1.5574024099024313, -1.8353277396576488, 1.3218187721249237, -0.5528913405458498, -4.264898116686934], [-1.007862541420942, -1.3906948135081187, 1.1509043315851484, -0.3611804005899823, -3.5512396904099406], [-1.4262638518213517, -1.8926155480436526, 1.8364049768286301, 0.05095906629620629, -4.016823880084972], [-1.1010781722888778, -1.7819517551023019, 1.8173523505548457, 0.40570587238782274, -3.5723383335509404], [-1.2729666687957533, -1.3386736915027027, 2.132323843735314, 1.142921316408543, -4.2385243926741225], [-1.3195715034034303, -1.9414702766201979, 2.3509713461633983, 1.457267120741012, -3.9024838726682476], [-1.704652723103912, -1.53531776670032, 1.8776963988488442, 1.0353205610977385, -3.8609231284087326], [-1.1114938433897388, -1.834460874729261, 1.7675136185922296, 0.32272831139370883, -4.080437017731704], [-1.174292250545876, -1.5950710658933867, 1.5008049199293927, 0.052956262285454025, -3.76417350438975], [-1.3025701953822444, -1.6657454436162862, 1.1353549023438168, -0.24327699216021453, -3.9023114368440046], [-1.3826202867500288, -2.1709472271213532, 1.107799641599074, -0.16749019706293702, -3.7376014744093706], [-1.4091732739419651, -1.2979877184448625, 0.830390354594598, -0.31819339905560223, -4.028443857014162], [-1.5460505891139653, -1.864357180879485, 1.5315793570637721, -0.845248782711239, -4.055845735798797], [-1.6788128010375047, -1.7465364559214438, 1.2078026472100611, -0.616179695584959, -3.9161383819921367], [-1.4248626342055895, -1.7506761739582046, 1.1838311584980343, -0.462347710613537, -3.912877185196911], [-1.0888483994061269, -1.417086644357934, 1.1676437575722411, -0.1732055271992227, -3.993928260369349], [-1.1403900497433672, -1.425973196977574, 1.1409182065093277, -0.300203260161926, -3.9082634464151993], [-0.9414682568652961, -1.6274187683707575, 0.8375266872544773, -0.6070775054627984, -3.4437200096522607], [-1.302801496838474, -2.005781904031648, 1.3823553436188383, -0.2398892819566027, -3.8201319473355095], [-1.49885607451986, -1.9736275537448735, 1.4254511625031812, -0.3086859678067143, -3.979482474894852], [-1.842751345028094, -1.6552710008561766, 1.6786388780784292, -0.03696713394215853, -4.045709631989634], [-1.1689879316003222, -1.9532700204779812, 1.5671932455329434, 0.3686792066331243, -3.948632997887786], [-1.1478062369457849, -1.345036677153726, 1.2371652983477708, 0.18849585433685398, -3.7875068421788987], [-1.225224242846006, -1.600512676004372, 1.637589792868981, 0.1921553628294953, -3.991970603792416], [-1.5823888835634494, -1.5286287652472699, 1.523989769775553, 0.05887958545188973, -3.8337669202825317], [-1.2042837426596826, -1.9177667086659134, 1.2847597003628046, -0.4505182871113463, -3.871581913384156], [-1.3880127953795511, -1.652470427062366, 1.5547164898121972, -0.3290597402930339, -3.6455329672752224], [-1.2821354501513937, -2.054161329249058, 1.1702251269889457, 0.04896746834878975, -3.8762672002288117], [-1.4674619512560876, -1.7324584838705428, 1.8901015504821552, 0.27600989467943504, -4.184710421172641], [-1.7549409176994564, -1.698712849299673, 1.320655362390312, -0.3673123190066092, -4.015048818347361], [-1.8703748461917187, -1.7007616695827774, 1.2231566176494297, -0.5376052542814265, -4.064856017367356], [-2.0783253231907084, -1.9227206749900292, 1.1316919712076756, -0.5057810759880675, -4.49149012893486], [-1.853383292219612, -1.5936922179301651, 1.2857427516075268, -0.27129974636996074, -4.295335289631721], [-1.097328129977149, -1.6201830232265009, 0.9246514517205227, -0.24893562734904695, -3.951555417891907], [-1.1828638776232574, -1.5182776900162136, 0.8738941183293893, -0.2815076085447918, -3.9780576899804387], [-1.3137645389152066, -1.7713094220360042, 1.748856559050205, 0.007435653203479414, -3.764737690043604], [-1.2432584700383469, -1.6673677999583378, 1.6694129724944062, -0.11069930777216197, -3.7727275872200776], [-1.3953637476825786, -1.8922502626128626, 1.361305943375574, -0.13770844478368804, -3.8577353259105593], [-1.5123641802650183, -1.663068484126943, 0.839618770249294, -0.08565337621106432, -3.951387023785297], [-1.2901249721428525, -1.8858550441544129, 0.9717454352189485, 0.09889026644343088, -4.121451884656957], [-1.2801764551653985, -1.3475703081401798, 1.6602986605889754, -0.285591119102808, -3.7339577185070825], [-1.254350454464883, -2.004738030713176, 1.36274416123009, -0.42047372260434535, -3.6858158917184367], [-1.263315829335995, -1.4642095226250469, 1.4337004592322449, 0.068886002342595, -3.93762681055387], [-1.2822163233691055, -1.7089826970756037, 1.351255857708232, 0.5476817186069389, -3.691506096102689], [-1.1711046259174225, -1.6531870217441271, 1.5542251650523993, 0.533082911279752, -3.9384836386575337], [-1.3386954267815725, -1.7898152467874968, 1.7583591652177815, -0.02994833112641232, -3.9152763350009603], [-1.2324167117822933, -1.5913214544592948, 0.8262725153330401, -0.3978738589679171, -3.865007612940187], [-1.1801656002589382, -1.787670554229688, 1.4805642473985303, -0.2668182319472256, -3.6753360445081884], [-1.2597245182975865, -1.5328111455351663, 1.4847696413658622, -0.1525674290850577, -4.035457483833047], [-1.3140250390509167, -1.6926877574871515, 1.2814315125225604, -0.26271746812815955, -3.7955709371645048], [-1.3744891938840271, -1.671010298294597, 1.4985501725181556, -0.30462032482863627, -4.012704415733452], [-1.1304761847019618, -1.8800938578620368, 1.863985192146828, 0.2040670387815957, -3.531616887796616], [-1.2523830119711528, -1.6170670718241444, 2.01053510426733, -0.0023192947397413363, -3.836344295735577], [-1.1113611059179087, -1.5708833207302921, 1.4134576472055107, 0.46953526957213554, -3.8563789063783998], [-1.460547589510023, -1.6948926173530139, 1.6228159261234412, 0.5150253030405245, -3.904647525218133], [-1.2286313998992517, -1.5894197720143803, 1.2817422325979744, -0.7310847336763366, -3.7878267110649206], [-1.082994779030666, -1.4573474720427857, 1.7263201718131038, -0.398524799613723, -3.9436674888948215], [-1.6690170273796983, -1.9271558955411272, 1.042146856975024, 0.16876815139585877, -3.8474721177741418], [-1.2956113165650724, -1.512394573393127, 1.4528301008018936, -0.7140031583474719, -4.053451426218278], [-1.6006531220716278, -1.5737513535099827, 1.3052221902573802, -0.41244156506924223, -3.887701177713297], [-1.4783367308083686, -1.6233454662266624, 1.520474469966034, -0.44886581651668783, -4.090689627524691], [-1.2703100441270612, -1.9796992156663549, 1.5761868623329889, -0.4099640085465773, -3.8722700319211967], [-1.052792180902298, -1.361234259643968, 0.9011690506928676, -0.34827689412759283, -3.9944954759647455], [-1.0520450338875589, -1.3470201126574568, 1.5344325144831026, -0.04282057999755905, -3.6336477671202196], [-1.1888549312513863, -1.6677344781192538, 1.7115476266518652, -0.1562175287043297, -3.895744558851837], [-2.1590028020719316, -1.801704012305462, 1.1680021640242446, -0.23540616490717822, -4.174227880708987], [-0.7985773189742641, -1.8608897053376625, 1.623381042507999, -0.13535948197554104, -3.7675512180969917], [-0.9809349640806939, -1.713775073399063, 1.6933369967234495, 0.029794048786455182, -3.6902656864549104], [-1.5076381202864055, -1.815118231500352, 0.9257471954574182, -0.3648739318532541, -3.852456721805824], [-1.5029398382348182, -1.8232497632522136, 1.050455226365433, -0.4256299816949305, -3.968220526881839], [-1.0040906707144464, -1.7347502221998186, 1.642222709936579, -0.18101751979546432, -3.5610005045153477], [-1.4809777868192053, -1.550788784795892, 1.3321516428077413, -0.24606297051835455, -4.16517717543595], [-1.5730021793558862, -1.99213255109893, 1.5077210453541887, 0.00283363983439764, -3.664979801001554], [-1.2175259229334576, -1.6105223674782214, 1.2784646256087313, -0.6363795484090853, -4.086850955115952], [-1.2011656350898148, -1.7734072507521357, 0.9355603672567744, 0.21841867779817448, -3.6017185047447056], [-1.7405962609920274, -1.599169443910896, 1.3371314297799575, -0.20043551762754697, -4.413489057883161], [-0.8935554796056339, -1.5683936172194195, 1.0515169777728093, -0.28562945439813314, -3.562144623113344], [-1.8455542769167546, -1.873132860647234, 1.4295514006882055, -0.46235371296498445, -4.226060258505404], [-1.369507217133726, -1.8690233176309308, 1.1410418370580113, -0.13684660030508816, -3.5204260770993776], [-1.3445483514922825, -1.9648442007142153, 1.250321427704842, -0.2119041093348341, -3.8057328406641213], [-1.417089157558807, -1.9821858549265727, 1.6086305888287915, 0.02588577210096632, -3.8642614948438383], [-1.0164759750351042, -1.4114298572704953, 1.5756075529211975, 0.13508551732469137, -3.9592836274331185], [-1.407008422777914, -1.7141252044822455, 0.9581760148985182, -0.11686050934234656, -3.7441133794924872], [-1.256292602557225, -1.551503163538635, 1.372947048737978, -0.22902976312514528, -3.7564632448697113], [-1.60726697190404, -1.6183590381689201, 1.1735957608322238, 0.18463171776697077, -3.8812032214619228], [-1.4470091015198745, -1.6819381299392027, 1.1083072751520289, -0.0633059288370162, -3.7591701538718176], [-1.19420287533271, -1.587847473626132, 1.3968907864683309, -0.3574016912304132, -3.859449962434992], [-1.3044744127390153, -1.4502754688259107, 1.2912109169198964, -0.3169512080651658, -4.112859048905042], [-1.2666783562658284, -1.812825243419547, 1.5694839264918339, -0.461412195177533, -3.734737242894839], [-1.2245124267704934, -1.7493369198252213, 1.2879995589582343, -0.1520851189041133, -3.6249628005918226], [-1.4838253874303367, -1.9640859590760618, 1.165314049790655, 0.053010748608621275, -3.902378382210616], [-1.7801895221486643, -1.636920707416534, 1.2369629474959105, -0.18055430852347792, -3.98369002902254], [-1.005935645259189, -1.7804731896878279, 1.5074932003122052, -0.07016803966707265, -3.7477739532258068], [-1.0271644230191912, -1.3055703177851965, 1.7347349937983947, -0.4226254573603357, -3.696452510055634], [-1.8647825456692875, -1.8459868499469403, 1.2105751403971865, 0.43252003058525373, -3.8729721392354057], [-0.9679307734581213, -1.4494717373475194, 1.705017353713847, 0.04903750949206699, -3.5605387305948946], [-1.8938057361849296, -1.7124406097858396, 0.8622404802231068, -0.5755564284484275, -4.077026331279254], [-0.9062665682005934, -1.3741089016235497, 1.3080015313864868, -0.4408977439198528, -3.751927453508187], [-1.0350033689455729, -0.9637803149712529, 1.3600749879693392, -0.349356592081758, -3.782564297685118], [-1.6762661751285752, -2.018653285334025, 0.9111483755909766, -0.4145462831970993, -3.8399967193116424], [-1.5136864576113092, -1.739606180405234, 1.1511867822349984, -0.8253391031511714, -3.986731513260358], [-1.362796289222733, -1.6188444453650537, 0.907429791628243, -0.8978626874738576, -3.954936922116811], [-1.7111777335553584, -1.686540763853032, 1.0203121738708196, -0.6627886662896167, -4.084258533228428], [-1.2627583313237734, -1.6350158802196528, 1.426185657343916, 0.18394286172892974, -3.8242274757778807], [-1.3470337312172276, -1.9036763993692678, 1.4898904346640303, -0.13460217384119413, -3.8335977757410737], [-1.319999994394953, -1.5748157670337273, 1.1211156704618364, -0.03892685665779475, -3.8527556728002943], [-1.4981300604493701, -1.8326667952234488, 1.555205555653456, 0.24217561914063745, -4.020227605271994], [-1.4630526955249243, -1.3820376158515475, 1.7357663965905525, 0.9121932204037596, -4.133933703807485], [-1.5813146018578441, -1.323990726378739, 1.7561122360167387, 0.881439701168797, -4.168798084176181], [-0.7865244662602899, -1.1586286744233234, 0.9182376220575212, -0.9704826025842339, -3.91368376487485], [-1.2250892449208313, -1.4798286630170632, 0.7852433713610795, -0.02956889525518791, -3.884264767052038], [-1.0754051846860349, -1.884134856559698, 1.7566986513766265, -0.3835406698536828, -3.729056723834798], [-1.2010407737031084, -1.3569994851821392, 1.6269466638561592, -0.14081237186729462, -3.952963391698852], [-1.1705626360779926, -1.9073222609376146, 1.615610485195936, 0.21958454415536935, -3.6863042608243983], [-1.437976635596096, -1.5629981934292536, 1.0791607834305836, -0.6830869443060468, -4.102586137752443], [-0.9426726296625504, -1.2250173376233626, 1.1637707964549402, -0.645163137718357, -3.7299726456060687], [-1.5996610089746806, -1.9177624953420598, 0.9618123827262959, -0.2338607687663445, -3.8073544891824698], [-1.6042922564671522, -2.125296315404805, 0.9298405284240618, -0.24587794437076563, -3.8503695630124843], [-1.1458699355463637, -1.1805127064869183, 0.7057456936834646, -0.4426133010747392, -3.960649208734679], [-1.3864602868979699, -1.5662816825993688, 1.6229052870755343, 0.37895628722096264, -4.301200938145528], [-1.3822177665344646, -1.8372953942724743, 1.7119354293845401, -0.16060186134492163, -3.7118877353460573], [-1.1166577077646456, -1.339887693360533, 0.891337430777134, -0.121902125802271, -3.842522804310531], [-1.247835441329775, -1.643065458564061, 1.5734409867841572, -0.4222123661866583, -3.8498853855485144], [-1.0733657232336262, -1.7169371634784547, 1.0084920383006304, -0.3873595004960581, -3.7773746812485323], [-1.0259490402536582, -1.5823643887520082, 1.507777000325489, 0.14499419601360675, -3.839600107092816], [-1.3069849437799774, -1.478929975226321, 0.9311298010478567, -0.6598281833768854, -3.9590677527168845], [-1.3857347458615326, -1.505866680423505, 1.4670658810541388, 0.24605711235645877, -4.062265705472494], [-1.2588391171992925, -1.8926170443575552, 1.6191456778317832, 0.44859623877590366, -3.788656732630305], [-1.4784713416307924, -1.7744938808131387, 0.9607763955982325, -0.41902035864565546, -4.227710245804295], [-1.55758407847284, -1.7587279926269928, 0.9749205185166652, -0.18219059787903277, -3.625590897026173], [-0.9320072649009171, -1.3462547912923217, 1.4981693689589655, -0.0942314808164755, -4.172753542965898], [-1.8101808141228743, -1.967421455054335, 1.4869853680923506, -0.3686373465899557, -3.711053915636555], [-1.6827352479763145, -2.0240418399116473, 1.2845100831837881, -0.38830608110471926, -4.017991980182384], [-1.1957546673463395, -1.6549990806018844, 1.4549213058072334, 0.005147862885350081, -4.032072760263399], [-1.1837038002562634, -1.5741250034994507, 1.1864427297124167, 0.2462008732051553, -3.7615210893423248], [-1.3574382515404202, -1.8571255081867681, 1.4083647428704749, 0.7456410609845545, -3.71748917657996], [-1.2397548987440854, -1.9811236075757706, 1.931462289139617, 0.7341374622663308, -3.8017400533520207], [-1.5424219508062431, -1.3114218011108143, 1.978875492925377, 1.1415435269982557, -4.128843971532442], [-1.3297754482247353, -1.5514721539524365, 1.948320018802302, 1.1182537620632953, -3.9582587229211588], [-1.484315318822173, -1.3331432812516169, 1.8242685510667465, 1.0386982395568065, -3.8644729474045048], [-0.9738760210699304, -1.8745978766893727, 1.7383730073539716, 0.6677748148786846, -3.844404405976126], [-1.3920519557807618, -1.716053698452916, 1.7555456984693034, 0.7225939928753848, -3.705548384712859], [-1.5213522111880788, -1.7218472402489398, 1.8587302300887312, 0.33123226856242816, -4.187698731614671], [-1.277094772026912, -1.6594188437427333, 1.3727602762932305, 0.21094312247314542, -3.5457194201880453], [-1.3170342790522989, -1.8170152884519293, 0.693190941296009, -0.48359448544242506, -4.0991106228542185], [-1.3613130047268094, -1.7842094685760947, 0.49788457844664635, -0.5724391762774406, -3.893880754547408], [-1.585179582261409, -1.5371085231659094, 1.4929375788347272, -0.41119402703236535, -3.791003607475169], [-0.55260066222175, -1.3642333564869962, 1.28116651707991, -0.2700238417128366, -3.5358350425434066], [-0.842351056039977, -1.7251169679737082, 1.3805733520643004, -0.3347124078912252, -3.551675406750909], [-1.318321703688783, -1.342008225530291, 1.295248410238445, -0.3177657599341168, -3.4592696971868224], [-1.1731389085145199, -1.6701193655992344, 1.487801285824823, -0.5094700276023425, -3.5862133814226564], [-1.4476246243448765, -1.5871186784834035, 1.342844432004125, 0.16346156627584157, -4.092575252674471], [-1.0212025060235759, -1.2366932080624915, 1.2585426022118724, -0.28478458840425497, -3.859679971009864], [-1.6144917091995965, -1.940945149902519, 1.5540361388496549, 0.22533689615252922, -3.91045222959722]], NamedTuple[(n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -9.849181730115294, hamiltonian_energy = 13.836667988008484, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 747.6411798899254, tree_depth = 1, numerical_error = false, step_size = 0.4, nom_step_size = 0.4, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -9.849181730115294, hamiltonian_energy = 12.539892195068203, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 3.5423737882273445e10, tree_depth = 0, numerical_error = true, step_size = 0.9340259163636535, nom_step_size = 0.9340259163636535, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9302782339990282, log_density = 6.420493427190946, hamiltonian_energy = 10.335986671164266, hamiltonian_energy_error = -0.9568619378502081, max_hamiltonian_energy_error = -1.1375766456801095, tree_depth = 3, numerical_error = false, step_size = 0.09209433883419865, nom_step_size = 0.09209433883419865, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.9875412762047442, log_density = 6.31102833793172, hamiltonian_energy = -2.5755078293821643, hamiltonian_energy_error = 0.03498791641555998, max_hamiltonian_energy_error = -0.4927704074150032, tree_depth = 3, numerical_error = false, step_size = 0.07965394224948195, nom_step_size = 0.07965394224948195, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9961204149113446, log_density = 6.145583938714196, hamiltonian_energy = -2.030690547057878, hamiltonian_energy_error = -0.25764799706497854, max_hamiltonian_energy_error = -1.0029071109921013, tree_depth = 3, numerical_error = false, step_size = 0.10258347035566051, nom_step_size = 0.10258347035566051, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9294246022095548, log_density = 8.679585496076454, hamiltonian_energy = -4.899403239302123, hamiltonian_energy_error = -0.7984038674848977, max_hamiltonian_energy_error = -1.6310025116823539, tree_depth = 3, numerical_error = false, step_size = 0.15696833545082328, nom_step_size = 0.15696833545082328, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.8037674315176968, log_density = 4.875101318503203, hamiltonian_energy = -2.601609558306027, hamiltonian_energy_error = -0.09427054493298392, max_hamiltonian_energy_error = -1.6089236226220827, tree_depth = 2, numerical_error = false, step_size = 0.213783467300345, nom_step_size = 0.213783467300345, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.13991028897564503, log_density = 11.060241440538203, hamiltonian_energy = -2.2297312924730193, hamiltonian_energy_error = -1.9103784002576116, max_hamiltonian_energy_error = 14.675340791807892, tree_depth = 3, numerical_error = false, step_size = 0.20604740519360362, nom_step_size = 0.20604740519360362, is_adapt = true), (n_steps = 63, is_accept = true, acceptance_rate = 0.9993526973721325, log_density = 10.790545235196152, hamiltonian_energy = -8.485743091117346, hamiltonian_energy_error = 0.00027994742317005716, max_hamiltonian_energy_error = -0.007378748118304301, tree_depth = 5, numerical_error = false, step_size = 0.02515388770407971, nom_step_size = 0.02515388770407971, is_adapt = true), (n_steps = 23, is_accept = true, acceptance_rate = 0.9960245733537646, log_density = 12.263684506953066, hamiltonian_energy = -4.71752052746717, hamiltonian_energy_error = -0.014096443183031937, max_hamiltonian_energy_error = 0.02076044307832614, tree_depth = 4, numerical_error = false, step_size = 0.04606408953352173, nom_step_size = 0.04606408953352173, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9993701607392652, log_density = 12.942958798533008, hamiltonian_energy = -11.903774424544814, hamiltonian_energy_error = -0.022815441565406047, max_hamiltonian_energy_error = -0.023902422965475623, tree_depth = 3, numerical_error = false, step_size = 0.08509106910086814, nom_step_size = 0.08509106910086814, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.7107437768552413, log_density = 11.820340932057324, hamiltonian_energy = -8.695748691231689, hamiltonian_energy_error = -0.16039578185003123, max_hamiltonian_energy_error = 1.0204868028985237, tree_depth = 3, numerical_error = false, step_size = 0.16042693424879287, nom_step_size = 0.16042693424879287, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.92962183185235, log_density = 11.546571352167724, hamiltonian_energy = -9.218472150492662, hamiltonian_energy_error = 0.11097554486287287, max_hamiltonian_energy_error = 0.16647455185106708, tree_depth = 4, numerical_error = false, step_size = 0.12229479834116003, nom_step_size = 0.12229479834116003, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.8951280508431724, log_density = 10.082041678897752, hamiltonian_energy = -9.804612577594392, hamiltonian_energy_error = 0.27229468193971407, max_hamiltonian_energy_error = 0.27229468193971407, tree_depth = 2, numerical_error = false, step_size = 0.18646625670182998, nom_step_size = 0.18646625670182998, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.2869474724243694, log_density = 7.0441298631290845, hamiltonian_energy = -3.0068199577134855, hamiltonian_energy_error = 0.08536791702839164, max_hamiltonian_energy_error = 30.061182771957952, tree_depth = 2, numerical_error = false, step_size = 0.25511052357349256, nom_step_size = 0.25511052357349256, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9991331024813236, log_density = 12.833481882037825, hamiltonian_energy = -6.264381120108169, hamiltonian_energy_error = -0.11009905652421459, max_hamiltonian_energy_error = -0.11413571708434489, tree_depth = 3, numerical_error = false, step_size = 0.05295364888574679, nom_step_size = 0.05295364888574679, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9992500745315244, log_density = 13.276987648462647, hamiltonian_energy = -12.190781804040876, hamiltonian_energy_error = -0.029477370428310223, max_hamiltonian_energy_error = -0.047448646323372756, tree_depth = 3, numerical_error = false, step_size = 0.10069462798802041, nom_step_size = 0.10069462798802041, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.3746786466736266, log_density = 9.493837017008033, hamiltonian_energy = -6.798366561770569, hamiltonian_energy_error = 0.8219096465869864, max_hamiltonian_energy_error = 1.4310510149825646, tree_depth = 2, numerical_error = false, step_size = 0.19016285624522447, nom_step_size = 0.19016285624522447, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9681056654221638, log_density = 9.728613890052207, hamiltonian_energy = -5.038029428878897, hamiltonian_energy_error = 0.0197053241870222, max_hamiltonian_energy_error = 0.11663884906603084, tree_depth = 4, numerical_error = false, step_size = 0.05365610443686411, nom_step_size = 0.05365610443686411, is_adapt = true), (n_steps = 19, is_accept = true, acceptance_rate = 0.9820136207984992, log_density = 12.507464242694976, hamiltonian_energy = -7.1845892931456, hamiltonian_energy_error = -0.14126473915883686, max_hamiltonian_energy_error = -0.2009199911710544, tree_depth = 4, numerical_error = false, step_size = 0.09206959851017509, nom_step_size = 0.09206959851017509, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.7843012833441401, log_density = 10.537029874087331, hamiltonian_energy = -7.187212337250047, hamiltonian_energy_error = 0.07596277906663129, max_hamiltonian_energy_error = 0.6672608202086012, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9635425787518239, log_density = 10.197833264046993, hamiltonian_energy = -8.753387225424182, hamiltonian_energy_error = 0.16101198379437953, max_hamiltonian_energy_error = -0.2447724853953943, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9974806631024062, log_density = 10.855665700277815, hamiltonian_energy = -7.332132957664436, hamiltonian_energy_error = -0.1960965554837859, max_hamiltonian_energy_error = -0.400547274629087, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.992763276914197, log_density = 12.338215712288143, hamiltonian_energy = -8.648992224733135, hamiltonian_energy_error = -0.07432493826830822, max_hamiltonian_energy_error = -0.2754816387457595, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9486339286923636, log_density = 10.591466152307913, hamiltonian_energy = -9.776061843707062, hamiltonian_energy_error = 0.07914664536739124, max_hamiltonian_energy_error = 0.11189197279453289, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9604145807975322, log_density = 11.79639452367508, hamiltonian_energy = -6.470475609635179, hamiltonian_energy_error = -0.1782671955584494, max_hamiltonian_energy_error = -0.3353027653904368, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9660185054228432, log_density = 11.775203030681759, hamiltonian_energy = -10.539973453322444, hamiltonian_energy_error = 0.09873485250570191, max_hamiltonian_energy_error = 0.09873485250570191, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9428702422970573, log_density = 10.742063827490352, hamiltonian_energy = -8.822781679397036, hamiltonian_energy_error = 0.07745929076449443, max_hamiltonian_energy_error = 0.13033112301415706, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9414916966490655, log_density = 7.857410413320075, hamiltonian_energy = -7.024640820377017, hamiltonian_energy_error = 0.14784321524562483, max_hamiltonian_energy_error = 0.18125182483102265, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9975260819027475, log_density = 8.239808604705047, hamiltonian_energy = -6.714638801420801, hamiltonian_energy_error = 0.017469127240790527, max_hamiltonian_energy_error = -0.31101123456632784, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9985298533409751, log_density = 12.797460152260783, hamiltonian_energy = -7.51438663774574, hamiltonian_energy_error = -0.41257643246439546, max_hamiltonian_energy_error = -0.41257643246439546, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9791169043684957, log_density = 13.489019090003039, hamiltonian_energy = -12.388841987445712, hamiltonian_energy_error = -0.0063806417655474235, max_hamiltonian_energy_error = 0.04367326143164085, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8684063239942115, log_density = 11.904836163142097, hamiltonian_energy = -9.517620402855862, hamiltonian_energy_error = 0.14770917822431429, max_hamiltonian_energy_error = 0.21632708368077225, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9869928524929265, log_density = 12.197875302346436, hamiltonian_energy = -10.7663233009472, hamiltonian_energy_error = -0.03424121058427687, max_hamiltonian_energy_error = -0.07455499453427272, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9910578993626977, log_density = 12.835707021901564, hamiltonian_energy = -10.448367662356635, hamiltonian_energy_error = -0.05259945741585881, max_hamiltonian_energy_error = -0.07612472448216678, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8739871670427358, log_density = 12.880027349936563, hamiltonian_energy = -9.813432703572381, hamiltonian_energy_error = 0.045744899026182395, max_hamiltonian_energy_error = 0.267698607787473, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9468454194629655, log_density = 12.940621195551959, hamiltonian_energy = -10.541681655970727, hamiltonian_energy_error = 0.01424282447916525, max_hamiltonian_energy_error = 0.12983058365949063, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9695086927752481, log_density = 12.955232309826673, hamiltonian_energy = -11.413825279169624, hamiltonian_energy_error = -0.035836757578923795, max_hamiltonian_energy_error = 0.06783790472647944, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9282948077149662, log_density = 12.69248551081859, hamiltonian_energy = -9.069439475323986, hamiltonian_energy_error = 0.07092438840084547, max_hamiltonian_energy_error = 0.21506558858363078, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9992218121935189, log_density = 13.360186602277444, hamiltonian_energy = -12.093312806614376, hamiltonian_energy_error = -0.05705459994211104, max_hamiltonian_energy_error = -0.06919670691038249, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9898639586768735, log_density = 13.625005999483216, hamiltonian_energy = -12.796530723458208, hamiltonian_energy_error = -0.019799725708995908, max_hamiltonian_energy_error = 0.024346644789293492, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8443208909753904, log_density = 11.438855422308212, hamiltonian_energy = -10.139921676847703, hamiltonian_energy_error = 0.23239609634232394, max_hamiltonian_energy_error = 0.340561738985091, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9857480932233472, log_density = 10.159299140079924, hamiltonian_energy = -8.663843726592669, hamiltonian_energy_error = -0.0015788746487217509, max_hamiltonian_energy_error = -0.22992271262887698, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.913511117820078, log_density = 9.26346362140221, hamiltonian_energy = -5.647183208012068, hamiltonian_energy_error = -0.05432122900411063, max_hamiltonian_energy_error = 0.25447714523585674, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9202733253494361, log_density = 11.7511860515948, hamiltonian_energy = -7.299692745435036, hamiltonian_energy_error = 0.00843486523785586, max_hamiltonian_energy_error = 0.21303911883333893, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9463281776157784, log_density = 11.5896286149113, hamiltonian_energy = -10.247159585857059, hamiltonian_energy_error = 0.1300351955759016, max_hamiltonian_energy_error = 0.19570784603909175, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.980865313631391, log_density = 12.675925328245036, hamiltonian_energy = -9.876215151173918, hamiltonian_energy_error = -0.25856141680259803, max_hamiltonian_energy_error = -0.31107976186324393, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6333953016988075, log_density = 9.788657151686774, hamiltonian_energy = -5.630146461683335, hamiltonian_energy_error = 0.36034139516802366, max_hamiltonian_energy_error = 0.622076219575372, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9911717995653141, log_density = 10.907956605797558, hamiltonian_energy = -7.523852076659552, hamiltonian_energy_error = 0.01217701666371962, max_hamiltonian_energy_error = -0.21789635728661594, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9967611517342283, log_density = 9.788801101881845, hamiltonian_energy = -8.439846479670383, hamiltonian_energy_error = -0.056789102270382585, max_hamiltonian_energy_error = -0.16273638723059314, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9970712430554897, log_density = 11.177614301741704, hamiltonian_energy = -7.95290360169477, hamiltonian_energy_error = -0.023196650979214084, max_hamiltonian_energy_error = -0.1610913948845365, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9752823412103806, log_density = 12.734708029218448, hamiltonian_energy = -9.315732423027175, hamiltonian_energy_error = -0.04278681895607228, max_hamiltonian_energy_error = -0.15242222777491143, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9460042802388305, log_density = 12.008543400597013, hamiltonian_energy = -10.260933250719667, hamiltonian_energy_error = -0.010092142106323365, max_hamiltonian_energy_error = 0.19521939670136845, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8987409872977113, log_density = 11.870557106670134, hamiltonian_energy = -7.776445870865201, hamiltonian_energy_error = 0.05050464827046497, max_hamiltonian_energy_error = 0.16819271048367757, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.945717254963735, log_density = 10.70897433440836, hamiltonian_energy = -9.356937004693977, hamiltonian_energy_error = 0.10089889610325464, max_hamiltonian_energy_error = 0.10089889610325464, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9708520426682264, log_density = 11.390087070530683, hamiltonian_energy = -8.726873458865498, hamiltonian_energy_error = -0.08502633760143574, max_hamiltonian_energy_error = 0.11367941738805243, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.995451541401428, log_density = 12.395944301788397, hamiltonian_energy = -10.499478896644995, hamiltonian_energy_error = -0.055068427043607926, max_hamiltonian_energy_error = -0.13733869922946518, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9960762484131445, log_density = 12.206820227778524, hamiltonian_energy = -11.040059290005527, hamiltonian_energy_error = -0.036200290887997255, max_hamiltonian_energy_error = -0.06150266816048422, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9078009629324324, log_density = 11.322905687613918, hamiltonian_energy = -9.041798718458464, hamiltonian_energy_error = 0.011495639695516147, max_hamiltonian_energy_error = 0.23323606814581943, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.987608361132204, log_density = 13.062525010610536, hamiltonian_energy = -10.217818539203682, hamiltonian_energy_error = -0.051014837468619234, max_hamiltonian_energy_error = -0.10080223631748275, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7925543517983069, log_density = 11.291555317021073, hamiltonian_energy = -9.278447489750729, hamiltonian_energy_error = 0.28400369923594226, max_hamiltonian_energy_error = 0.3919393365674466, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9934490525535543, log_density = 12.40645654431411, hamiltonian_energy = -10.58132168907274, hamiltonian_energy_error = -0.18784124563883076, max_hamiltonian_energy_error = -0.18784124563883076, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9999582606742163, log_density = 12.78055905618439, hamiltonian_energy = -11.697424941568892, hamiltonian_energy_error = -0.039013819449184695, max_hamiltonian_energy_error = -0.09670796634639167, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8325213539286777, log_density = 9.01317228953649, hamiltonian_energy = -5.304278674297326, hamiltonian_energy_error = 0.1885508295091718, max_hamiltonian_energy_error = 0.2927126386310004, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9607802696171711, log_density = 11.427797547101866, hamiltonian_energy = -6.4821591836328425, hamiltonian_energy_error = 0.08729686396808933, max_hamiltonian_energy_error = -0.2723775083081197, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9925715805960602, log_density = 11.806652480366676, hamiltonian_energy = -9.605411493402752, hamiltonian_energy_error = -0.0120277640674189, max_hamiltonian_energy_error = -0.17430909470219547, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.968617828804805, log_density = 10.010716547739863, hamiltonian_energy = -8.619306163108496, hamiltonian_energy_error = 0.03002575855433598, max_hamiltonian_energy_error = -0.08394516115817652, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9887654285478535, log_density = 12.737427067351963, hamiltonian_energy = -7.5050750492631835, hamiltonian_energy_error = -0.22519981308749948, max_hamiltonian_energy_error = -0.22519981308749948, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9274838379127069, log_density = 9.815658254365722, hamiltonian_energy = -8.61594253916039, hamiltonian_energy_error = 0.05734483343615793, max_hamiltonian_energy_error = 0.11902600280349418, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9717067900212386, log_density = 10.551395816071024, hamiltonian_energy = -8.470241144499852, hamiltonian_energy_error = 0.017901209508206506, max_hamiltonian_energy_error = 0.08876434173316028, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.5664850358864851, log_density = 6.340112142923417, hamiltonian_energy = -1.9714913366148181, hamiltonian_energy_error = 0.6275092986036235, max_hamiltonian_energy_error = 0.9266996513189949, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 11.20470964528123, hamiltonian_energy = -6.0861174501029405, hamiltonian_energy_error = -0.4344606717829853, max_hamiltonian_energy_error = -0.4344606717829853, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9342290056857808, log_density = 10.59550008797353, hamiltonian_energy = -8.365535764067987, hamiltonian_energy_error = 0.05053036760557639, max_hamiltonian_energy_error = 0.1261087878734699, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9573165337698906, log_density = 12.373374420842257, hamiltonian_energy = -6.961185588649781, hamiltonian_energy_error = -0.010913917556602648, max_hamiltonian_energy_error = 0.15108842674889544, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9963270729149087, log_density = 12.80814838749427, hamiltonian_energy = -11.704782233134532, hamiltonian_energy_error = -0.009864014281687261, max_hamiltonian_energy_error = -0.04091647258861464, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9829579741392868, log_density = 11.472855831905095, hamiltonian_energy = -10.735469870417043, hamiltonian_energy_error = 0.0380179714363269, max_hamiltonian_energy_error = 0.05944834707520563, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9261988499759146, log_density = 12.137617434643172, hamiltonian_energy = -10.234413604738764, hamiltonian_energy_error = -0.024405617892179876, max_hamiltonian_energy_error = 0.22359550093266556, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9797305085854499, log_density = 12.769429011470766, hamiltonian_energy = -10.129701153371311, hamiltonian_energy_error = -0.04213574030957723, max_hamiltonian_energy_error = -0.07748473101962894, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9372328149670438, log_density = 10.334554077632918, hamiltonian_energy = -9.972987630183285, hamiltonian_energy_error = 0.1434337505890202, max_hamiltonian_energy_error = 0.1434337505890202, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9111031815104061, log_density = 9.93095976932806, hamiltonian_energy = -4.680296762568994, hamiltonian_energy_error = 0.2127138679000673, max_hamiltonian_energy_error = 0.2127138679000673, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9957771185881387, log_density = 11.006173013306107, hamiltonian_energy = -9.18810497855924, hamiltonian_energy_error = -0.07758580399169013, max_hamiltonian_energy_error = -0.22403088678550276, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9934895295471365, log_density = 12.119816487857127, hamiltonian_energy = -10.428188999494106, hamiltonian_energy_error = -0.0882173491180751, max_hamiltonian_energy_error = -0.16352182371959145, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9097265180049846, log_density = 12.611893207228807, hamiltonian_energy = -7.196619732849396, hamiltonian_energy_error = 0.0037555164563407573, max_hamiltonian_energy_error = 0.35187678696545976, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9376533588366546, log_density = 12.438078046168917, hamiltonian_energy = -10.263273835198616, hamiltonian_energy_error = -0.07158983124501361, max_hamiltonian_energy_error = 0.15666340295448222, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9781704965393982, log_density = 11.735780490394312, hamiltonian_energy = -10.907495445608074, hamiltonian_energy_error = 0.03178242093710004, max_hamiltonian_energy_error = 0.05132206489198232, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9578048376376859, log_density = 11.971064042382512, hamiltonian_energy = -10.600785415229232, hamiltonian_energy_error = 0.017420853907424316, max_hamiltonian_energy_error = 0.0847967167398469, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.985487873235739, log_density = 12.586187400815813, hamiltonian_energy = -10.709979785999838, hamiltonian_energy_error = -0.003949023261172968, max_hamiltonian_energy_error = 0.062069961922563976, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8707973763004216, log_density = 12.401810331742489, hamiltonian_energy = -9.119667919620628, hamiltonian_energy_error = -0.008348046612409732, max_hamiltonian_energy_error = 0.28918467926294156, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9701397908690012, log_density = 11.732268610328966, hamiltonian_energy = -9.362861293613989, hamiltonian_energy_error = 0.013766120953736305, max_hamiltonian_energy_error = -0.13573584239192726, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9977781649331308, log_density = 12.266795402270226, hamiltonian_energy = -10.851341716194336, hamiltonian_energy_error = -0.08271527653191413, max_hamiltonian_energy_error = -0.16918906894674635, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9961482115379037, log_density = 12.280964698977126, hamiltonian_energy = -11.71943850402319, hamiltonian_energy_error = 0.005311359494426071, max_hamiltonian_energy_error = -0.07231046435200206, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9001317407336025, log_density = 11.074356357096484, hamiltonian_energy = -9.669042622860811, hamiltonian_energy_error = -0.008212593665376744, max_hamiltonian_energy_error = 0.292054257997755, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7759022194696319, log_density = 11.501834587995294, hamiltonian_energy = -8.698950282826004, hamiltonian_energy_error = 0.2624967886127685, max_hamiltonian_energy_error = 0.43539377486074393, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9856630179671567, log_density = 12.807192560579121, hamiltonian_energy = -10.565902434572248, hamiltonian_energy_error = -0.19058636107300586, max_hamiltonian_energy_error = -0.19058636107300586, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8289249228020531, log_density = 9.38846425769296, hamiltonian_energy = -8.867780403427705, hamiltonian_energy_error = 0.3526791691927862, max_hamiltonian_energy_error = 0.3526791691927862, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 10.126846498414476, hamiltonian_energy = -7.756145624215737, hamiltonian_energy_error = -0.07195125703433458, max_hamiltonian_energy_error = -0.4255356542100044, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9964746221750846, log_density = 9.127051383195573, hamiltonian_energy = -6.087718359754023, hamiltonian_energy_error = 0.023279274302097974, max_hamiltonian_energy_error = -0.23085787454561135, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9808572914823445, log_density = 13.065001690667078, hamiltonian_energy = -6.318879745015088, hamiltonian_energy_error = -0.16201578508094983, max_hamiltonian_energy_error = -0.23978284186597776, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8872856423235137, log_density = 10.626071701317642, hamiltonian_energy = -7.758936738076082, hamiltonian_energy_error = 0.04577706703593787, max_hamiltonian_energy_error = 0.2972398664257794, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9597122517308239, log_density = 7.791141161546735, hamiltonian_energy = -7.138005551776171, hamiltonian_energy_error = 0.34961539131309216, max_hamiltonian_energy_error = 0.34961539131309216, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.935786305946945, log_density = 7.094519717406294, hamiltonian_energy = -4.146631261213017, hamiltonian_energy_error = 0.0929162636562193, max_hamiltonian_energy_error = -0.3504774903131711, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.99743315922293, log_density = 11.296041476055674, hamiltonian_energy = -6.118722592862436, hamiltonian_energy_error = -0.12659137872741244, max_hamiltonian_energy_error = -0.2950111102710862, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9946368955649797, log_density = 11.344115686055574, hamiltonian_energy = -10.47672272976068, hamiltonian_energy_error = -0.03899816747411933, max_hamiltonian_energy_error = -0.17725203687161972, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9985861136046493, log_density = 11.242881083510984, hamiltonian_energy = -9.864404283833768, hamiltonian_energy_error = -0.025520372768555788, max_hamiltonian_energy_error = -0.08670986623252652, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9977014689526008, log_density = 11.785960337179812, hamiltonian_energy = -9.352840065797205, hamiltonian_energy_error = -0.07438374870192632, max_hamiltonian_energy_error = -0.1012526108997811, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9723950755241005, log_density = 11.73361881187921, hamiltonian_energy = -10.010737334212596, hamiltonian_energy_error = 0.011374412507347387, max_hamiltonian_energy_error = 0.07441145579587705, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9974606212684076, log_density = 12.476035584371107, hamiltonian_energy = -11.122358961275122, hamiltonian_energy_error = -0.026626310582962276, max_hamiltonian_energy_error = -0.09615176506585854, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9981090743688718, log_density = 12.572291784917233, hamiltonian_energy = -11.024844979514596, hamiltonian_energy_error = -0.013621946201027413, max_hamiltonian_energy_error = -0.08397466948206045, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8424183237232802, log_density = 7.82035800790095, hamiltonian_energy = -6.118508812416001, hamiltonian_energy_error = 0.23728485411482403, max_hamiltonian_energy_error = 0.3031498865990816, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.424819438984079, hamiltonian_energy = -7.18911869974942, hamiltonian_energy_error = -0.15255509020556435, max_hamiltonian_energy_error = -0.40744235019407515, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9861971855535411, log_density = 12.249374458862917, hamiltonian_energy = -6.450449604663657, hamiltonian_energy_error = -0.15936292622944315, max_hamiltonian_energy_error = -0.24753162584518318, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9636095755305729, log_density = 11.746899139714618, hamiltonian_energy = -9.71264561041087, hamiltonian_energy_error = 0.003582038617482297, max_hamiltonian_energy_error = 0.1502263511734352, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9534714998381837, log_density = 11.41495856681107, hamiltonian_energy = -9.353015141156458, hamiltonian_energy_error = 0.010325144131535069, max_hamiltonian_energy_error = 0.1419854950521131, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.961268437052631, hamiltonian_energy = -10.779349051712515, hamiltonian_energy_error = -0.023882370360329475, max_hamiltonian_energy_error = -0.08159941006083216, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.481776658074018, hamiltonian_energy = -11.784430762588077, hamiltonian_energy_error = -0.03721683273648679, max_hamiltonian_energy_error = -0.05537209192931236, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9533864214993455, log_density = 11.759345330153607, hamiltonian_energy = -10.884700151766053, hamiltonian_energy_error = 0.06299108894167738, max_hamiltonian_energy_error = 0.09287260815900034, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9649465095171664, log_density = 10.642365026754423, hamiltonian_energy = -8.182160617753127, hamiltonian_energy_error = -0.047601988809748974, max_hamiltonian_energy_error = 0.1674985144304042, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8409849248529923, log_density = 10.062182096094823, hamiltonian_energy = -5.630832418455834, hamiltonian_energy_error = 0.15914693023941684, max_hamiltonian_energy_error = 0.3757638628278901, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8070339164300245, log_density = 5.998020493219684, hamiltonian_energy = -4.304814317593873, hamiltonian_energy_error = 0.3891612527098953, max_hamiltonian_energy_error = 0.3891612527098953, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.961954016033804, log_density = 12.204951683567552, hamiltonian_energy = -1.3421944919169366, hamiltonian_energy_error = -0.34504473157472226, max_hamiltonian_energy_error = -0.4301295433496861, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9994217992840545, log_density = 12.17390785937167, hamiltonian_energy = -11.703845248388497, hamiltonian_energy_error = 0.004055617923427235, max_hamiltonian_energy_error = -0.08481702607464214, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8538523113050714, log_density = 10.960419826966518, hamiltonian_energy = -9.214445625033518, hamiltonian_energy_error = 0.14415720270022092, max_hamiltonian_energy_error = 0.337782522126151, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9914731012591987, log_density = 10.770911600239586, hamiltonian_energy = -9.900789880554951, hamiltonian_energy_error = -0.0725707741767927, max_hamiltonian_energy_error = -0.14302594296533577, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.907694267555009, log_density = 9.107011909507223, hamiltonian_energy = -7.181868398988884, hamiltonian_energy_error = 0.06352107952864294, max_hamiltonian_energy_error = 0.18502620343415366, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9002944506004094, log_density = 7.952158265844016, hamiltonian_energy = -6.317360444606743, hamiltonian_energy_error = 0.1703312502226746, max_hamiltonian_energy_error = 0.2265409791070052, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.829631713692079, hamiltonian_energy = -7.613571162550544, hamiltonian_energy_error = -0.2830432713928106, max_hamiltonian_energy_error = -0.2830432713928106, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9654652763819384, log_density = 9.243440384896003, hamiltonian_energy = -8.329831521051803, hamiltonian_energy_error = 0.0481001291881622, max_hamiltonian_energy_error = 0.06612026849707675, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.5879130552649101, log_density = 12.03338292625099, hamiltonian_energy = -1.2303762293699911, hamiltonian_energy_error = -0.10692813146525637, max_hamiltonian_energy_error = 1.1083474389038543, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6387486935230536, log_density = 7.5914881939938414, hamiltonian_energy = -6.804503232293714, hamiltonian_energy_error = 0.5780686126758612, max_hamiltonian_energy_error = 0.5780686126758612, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9457055942090341, log_density = 11.193996531406718, hamiltonian_energy = -5.854315982416858, hamiltonian_energy_error = -0.2747000531168391, max_hamiltonian_energy_error = -0.6722068191808734, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9834087691469947, log_density = 12.887539778353949, hamiltonian_energy = -10.884729323284418, hamiltonian_energy_error = -0.242079809473573, max_hamiltonian_energy_error = -0.26412316717814655, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9251709621204286, log_density = 11.391838357899616, hamiltonian_energy = -10.749703707006365, hamiltonian_energy_error = 0.14899534325881625, max_hamiltonian_energy_error = 0.15131225689133743, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9675045656025567, log_density = 13.144117413471225, hamiltonian_energy = -10.63254767698861, hamiltonian_energy_error = -0.18417798625910997, max_hamiltonian_energy_error = -0.18417798625910997, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7801823917437879, log_density = 7.388293501450864, hamiltonian_energy = -5.727132323783169, hamiltonian_energy_error = 0.34867482225293234, max_hamiltonian_energy_error = 0.3511452241911641, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9973656484214926, log_density = 12.924434156132577, hamiltonian_energy = -6.307503965750478, hamiltonian_energy_error = -0.37864214053249157, max_hamiltonian_energy_error = -0.37864214053249157, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8582576002550771, log_density = 8.831926907824464, hamiltonian_energy = -7.115301540041048, hamiltonian_energy_error = 0.19327599115371008, max_hamiltonian_energy_error = 0.43429663972454424, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.722836378782057, hamiltonian_energy = -6.5989550140021365, hamiltonian_energy_error = -0.14019638503955711, max_hamiltonian_energy_error = -0.14019638503955711, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9770368532942373, log_density = 13.173461134662269, hamiltonian_energy = -9.610724955955465, hamiltonian_energy_error = -0.12824890771400987, max_hamiltonian_energy_error = -0.12824890771400987, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.945075867932944, log_density = 12.844375077570243, hamiltonian_energy = -10.870391635753986, hamiltonian_energy_error = 0.025053292933149507, max_hamiltonian_energy_error = 0.07607559541453845, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9582726638203759, log_density = 11.97258178068481, hamiltonian_energy = -11.271991217646084, hamiltonian_energy_error = 0.03377265811083241, max_hamiltonian_energy_error = 0.06632888140391913, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8804835699486562, log_density = 11.80531957715374, hamiltonian_energy = -8.452281392725633, hamiltonian_energy_error = 0.03443492724278663, max_hamiltonian_energy_error = 0.19986181101342737, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9906241107362737, log_density = 11.88415837277114, hamiltonian_energy = -10.630064910291772, hamiltonian_energy_error = -0.023371334776491892, max_hamiltonian_energy_error = -0.030740605539126165, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9972661571023677, log_density = 12.360163933523543, hamiltonian_energy = -11.404338538986199, hamiltonian_energy_error = -0.023644274349248207, max_hamiltonian_energy_error = -0.07350704899035954, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8946667660128822, log_density = 12.514310261193287, hamiltonian_energy = -9.922537635092615, hamiltonian_energy_error = 0.06602565240075187, max_hamiltonian_energy_error = 0.15865535185592172, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9953567617893262, log_density = 12.87492367260252, hamiltonian_energy = -11.676848335319775, hamiltonian_energy_error = -0.051024548985470375, max_hamiltonian_energy_error = -0.0587469968515979, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8896180050045176, log_density = 10.31505157612835, hamiltonian_energy = -6.783884072427242, hamiltonian_energy_error = 0.05132043380700235, max_hamiltonian_energy_error = 0.23415219835829326, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7639050294444961, log_density = 8.515852785369255, hamiltonian_energy = -0.5689606003952337, hamiltonian_energy_error = 0.26441630168476404, max_hamiltonian_energy_error = 0.7272851534472498, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.278485383370928, hamiltonian_energy = -8.008200650916097, hamiltonian_energy_error = -0.31412838379861086, max_hamiltonian_energy_error = -0.3352390184701175, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8673201249930148, log_density = 10.722000251672387, hamiltonian_energy = -8.99336838789156, hamiltonian_energy_error = 0.17023623173553126, max_hamiltonian_energy_error = 0.20259598979423288, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9974729942865467, log_density = 11.513849135016084, hamiltonian_energy = -9.05682004671846, hamiltonian_energy_error = -0.12427393302587397, max_hamiltonian_energy_error = -0.27002774564275, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6783439543437397, log_density = 11.953295506740869, hamiltonian_energy = -6.1931085658911345, hamiltonian_energy_error = -0.09679536771922681, max_hamiltonian_energy_error = 0.6999273340810959, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9995030008417987, log_density = 13.329911140112603, hamiltonian_energy = -10.841457275970377, hamiltonian_energy_error = -0.062000281081573405, max_hamiltonian_energy_error = -0.06828059023701982, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8613432967608067, log_density = 11.048339496344555, hamiltonian_energy = -9.501619838821805, hamiltonian_energy_error = 0.2569996933315757, max_hamiltonian_energy_error = 0.33056519999960265, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9841072105427209, log_density = 10.115998935670975, hamiltonian_energy = -8.89834362206395, hamiltonian_energy_error = 0.023764292332872472, max_hamiltonian_energy_error = -0.3082879701264538, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.45415552182113, hamiltonian_energy = -9.052329148152168, hamiltonian_energy_error = -0.12802534972840007, max_hamiltonian_energy_error = -0.26560702220044874, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9388873750405068, log_density = 12.23256032380323, hamiltonian_energy = -10.923380271132771, hamiltonian_energy_error = 0.05400333737452101, max_hamiltonian_energy_error = 0.180876487092684, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9706558427711532, log_density = 11.931722998573655, hamiltonian_energy = -11.064142906491398, hamiltonian_energy_error = 0.07649114238022037, max_hamiltonian_energy_error = -0.1941325489675343, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.890733771796991, log_density = 8.509090612872075, hamiltonian_energy = -7.369061686122216, hamiltonian_energy_error = 0.22663708146677752, max_hamiltonian_energy_error = 0.31007753264356275, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9682296557909069, log_density = 10.281155967358288, hamiltonian_energy = -5.72447500098448, hamiltonian_energy_error = -0.23861189986438447, max_hamiltonian_energy_error = -0.36499917847571695, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8375330955347425, log_density = 11.30982240214236, hamiltonian_energy = -5.46239927843667, hamiltonian_energy_error = 0.06353382054638335, max_hamiltonian_energy_error = 0.3978571607530057, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9326958618045212, log_density = 10.46116950937402, hamiltonian_energy = -8.329206939372389, hamiltonian_energy_error = 0.11003586845722069, max_hamiltonian_energy_error = 0.20936489699728966, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9752652710331843, log_density = 12.599453513592916, hamiltonian_energy = -9.25351045316763, hamiltonian_energy_error = -0.04603098144186113, max_hamiltonian_energy_error = 0.18354722296006543, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9152206691381899, log_density = 11.39714545988011, hamiltonian_energy = -10.120664311324546, hamiltonian_energy_error = 0.16314824734443256, max_hamiltonian_energy_error = 0.16314824734443256, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.992343290313809, log_density = 12.820719814448045, hamiltonian_energy = -10.984148822430342, hamiltonian_energy_error = -0.12388891613063358, max_hamiltonian_energy_error = -0.2562328999084169, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9491822521608845, log_density = 11.819681385531332, hamiltonian_energy = -10.893610353797245, hamiltonian_energy_error = 0.12350943135451686, max_hamiltonian_energy_error = 0.13836416822008424, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.429347046480437, hamiltonian_energy = -10.795810780132914, hamiltonian_energy_error = -0.20763484875623917, max_hamiltonian_energy_error = -0.20763484875623917, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8731465902022558, log_density = 11.413282182631747, hamiltonian_energy = -8.700467701227334, hamiltonian_energy_error = 0.1230719811532559, max_hamiltonian_energy_error = 0.21085883427694796, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8704200441861186, log_density = 10.29934505672693, hamiltonian_energy = -7.6566950778142875, hamiltonian_energy_error = -0.09368128574753509, max_hamiltonian_energy_error = 0.2942141403370897, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9783250816300757, log_density = 11.70889368325683, hamiltonian_energy = -8.829519367972843, hamiltonian_energy_error = -0.05117263878996248, max_hamiltonian_energy_error = 0.12141758969395333, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9963817773264432, log_density = 12.852075162538412, hamiltonian_energy = -10.209937246993855, hamiltonian_energy_error = -0.08294059574929591, max_hamiltonian_energy_error = -0.08558950982044422, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9263833786031286, log_density = 11.787523399907485, hamiltonian_energy = -11.058211020162725, hamiltonian_energy_error = 0.0915578451956538, max_hamiltonian_energy_error = 0.16659630519159663, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9908425888780648, log_density = 12.267353009915663, hamiltonian_energy = -10.229114389547089, hamiltonian_energy_error = -0.015963130622440147, max_hamiltonian_energy_error = -0.11367014725465197, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9927529864892711, log_density = 11.39381717161487, hamiltonian_energy = -9.495527862407846, hamiltonian_energy_error = -0.06303456356405945, max_hamiltonian_energy_error = -0.094911253557866, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9630423066935181, log_density = 10.710621042274738, hamiltonian_energy = -9.202610266229767, hamiltonian_energy_error = 0.04584189797563987, max_hamiltonian_energy_error = 0.06444348662513022, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9991459154232106, log_density = 10.47363063067769, hamiltonian_energy = -9.52772931486917, hamiltonian_energy_error = 0.0021791649833851068, max_hamiltonian_energy_error = -0.07307072483962784, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9713016302268628, log_density = 9.687565461154007, hamiltonian_energy = -9.579807218465815, hamiltonian_energy_error = 0.06916692760015941, max_hamiltonian_energy_error = 0.06916692760015941, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9849127508622424, log_density = 10.808106261105078, hamiltonian_energy = -7.896035079621641, hamiltonian_energy_error = -0.09114255802370064, max_hamiltonian_energy_error = -0.09114255802370064, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9987200092397496, log_density = 12.733635052143924, hamiltonian_energy = -9.135610154160075, hamiltonian_energy_error = -0.03645169888221389, max_hamiltonian_energy_error = -0.050618315471956166, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9974352738036542, log_density = 13.163799187481636, hamiltonian_energy = -12.125309604142092, hamiltonian_energy_error = -0.019089126197149753, max_hamiltonian_energy_error = -0.03643024242290949, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.921866891889846, log_density = 11.524252036470612, hamiltonian_energy = -8.752480745202616, hamiltonian_energy_error = -0.03224227285665293, max_hamiltonian_energy_error = 0.19570009406032973, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9938626850718233, log_density = 11.772418687687694, hamiltonian_energy = -10.181174165652072, hamiltonian_energy_error = -0.07758172591269918, max_hamiltonian_energy_error = -0.08479187876362282, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9218885648385632, log_density = 12.931161635600041, hamiltonian_energy = -9.214150822739487, hamiltonian_energy_error = -0.07121319282101624, max_hamiltonian_energy_error = 0.1753972668307835, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9709447092692407, log_density = 13.47165812329784, hamiltonian_energy = -11.790140789630678, hamiltonian_energy_error = -0.0031493138321199154, max_hamiltonian_energy_error = 0.08224713627773106, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9482336729313755, log_density = 12.660874434030472, hamiltonian_energy = -9.4359595439079, hamiltonian_energy_error = -0.008202693240933812, max_hamiltonian_energy_error = 0.157276631299478, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9814401077696304, log_density = 12.860638315952645, hamiltonian_energy = -11.436246717630835, hamiltonian_energy_error = 0.013446505481864435, max_hamiltonian_energy_error = 0.049492377963160195, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9416815864976614, log_density = 12.809098100883073, hamiltonian_energy = -10.556674341173576, hamiltonian_energy_error = 0.04740960152116891, max_hamiltonian_energy_error = 0.10674961000702154, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9323731668781142, log_density = 11.804606210802206, hamiltonian_energy = -10.849845008573057, hamiltonian_energy_error = 0.1036378979864292, max_hamiltonian_energy_error = 0.16826557111828677, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9879010877971597, log_density = 12.077776877199835, hamiltonian_energy = -10.634017189782673, hamiltonian_energy_error = -0.04534308048779678, max_hamiltonian_energy_error = -0.2287279474890056, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.020103532970946, hamiltonian_energy = -11.31655358379286, hamiltonian_energy_error = -0.03861978953621481, max_hamiltonian_energy_error = -0.1867545686212111, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7629656046126916, log_density = 10.914242024270894, hamiltonian_energy = -7.358895004272986, hamiltonian_energy_error = 0.02371509168124053, max_hamiltonian_energy_error = 0.5665107170684731, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9908531886118336, log_density = 11.508440465281193, hamiltonian_energy = -9.844757813514933, hamiltonian_energy_error = 0.0041821695533137415, max_hamiltonian_energy_error = -0.11627676218010485, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9766713925852191, log_density = 10.535802326345081, hamiltonian_energy = -9.3257158767696, hamiltonian_energy_error = 0.12077142054683065, max_hamiltonian_energy_error = 0.12077142054683065, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9963879866532513, log_density = 12.05394672932324, hamiltonian_energy = -6.556246042931161, hamiltonian_energy_error = -0.9015691074130601, max_hamiltonian_energy_error = -0.9015691074130601, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9877132118920059, log_density = 10.976838743608042, hamiltonian_energy = -9.576749548226518, hamiltonian_energy_error = 0.042408822068008334, max_hamiltonian_energy_error = -0.058804018266055635, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.591616905258036, hamiltonian_energy = -10.267951447349, hamiltonian_energy_error = -0.01696913825159463, max_hamiltonian_energy_error = -0.087112322791711, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9941111493159693, log_density = 10.829272725086534, hamiltonian_energy = -6.216950708966963, hamiltonian_energy_error = -0.12446475863469164, max_hamiltonian_energy_error = -0.4042523604062698, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.981072323317909, log_density = 10.62604427251836, hamiltonian_energy = -8.426722667076403, hamiltonian_energy_error = 0.005248238012983464, max_hamiltonian_energy_error = -0.23992526827000304, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9879415215981419, log_density = 13.469913733251184, hamiltonian_energy = -9.668529663631189, hamiltonian_energy_error = -0.29850678629827243, max_hamiltonian_energy_error = -0.29850678629827243, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9135760594040534, log_density = 12.751827850157332, hamiltonian_energy = -11.255874616003277, hamiltonian_energy_error = 0.011801809791160522, max_hamiltonian_energy_error = 0.27311123106609436, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9187689414368582, log_density = 12.29880386196201, hamiltonian_energy = -10.121318716258639, hamiltonian_energy_error = 0.01414305965844953, max_hamiltonian_energy_error = 0.1490130529259357, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6125546875650043, log_density = 8.342319109526018, hamiltonian_energy = -5.240364432971303, hamiltonian_energy_error = 0.5315787978106323, max_hamiltonian_energy_error = 0.7219970536557687, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9960552167106498, log_density = 7.626197059715141, hamiltonian_energy = -4.009690716386198, hamiltonian_energy_error = -0.24159606831228242, max_hamiltonian_energy_error = -1.1142949080457436, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.779361573672148, hamiltonian_energy = -7.28493761625278, hamiltonian_energy_error = -0.5106692960826784, max_hamiltonian_energy_error = -0.9657919375825159, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9744567015264154, log_density = 9.862624067608504, hamiltonian_energy = -7.274798712045191, hamiltonian_energy_error = 0.050419533502260805, max_hamiltonian_energy_error = -0.44439422877088663, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9846084923702139, log_density = 11.882219684644513, hamiltonian_energy = -7.437596191415198, hamiltonian_energy_error = -0.11505341775887246, max_hamiltonian_energy_error = -0.19852376481070344, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9170300455768874, log_density = 13.03893948894927, hamiltonian_energy = -9.445976352627643, hamiltonian_energy_error = -0.12982424875048437, max_hamiltonian_energy_error = 0.22848709432269132, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8688181362613456, log_density = 11.439823124883926, hamiltonian_energy = -10.252357467481621, hamiltonian_energy_error = 0.23797521801794375, max_hamiltonian_energy_error = 0.28049876745239644, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9825835688654466, log_density = 12.28576151426292, hamiltonian_energy = -9.84765343082401, hamiltonian_energy_error = -0.07114617248717003, max_hamiltonian_energy_error = -0.28667680507208537, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9725208186813276, log_density = 12.932292303180837, hamiltonian_energy = -10.56161865382378, hamiltonian_energy_error = -0.19066013403076276, max_hamiltonian_energy_error = -0.19419870562035157, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8887606376378309, log_density = 12.144194537889106, hamiltonian_energy = -9.206505314606826, hamiltonian_energy_error = 0.1716883714106494, max_hamiltonian_energy_error = 0.2739075744980113, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9178558963712194, log_density = 13.590922253637746, hamiltonian_energy = -10.66378532541686, hamiltonian_energy_error = -0.1528757584784053, max_hamiltonian_energy_error = 0.2829364320191239, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9814740576548571, log_density = 13.249810419419548, hamiltonian_energy = -12.753394993935887, hamiltonian_energy_error = 0.017642900360918645, max_hamiltonian_energy_error = 0.03952653778655879, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9895092262645019, log_density = 12.927131438254817, hamiltonian_energy = -12.453708506477744, hamiltonian_energy_error = 0.014163466841511152, max_hamiltonian_energy_error = -0.026800935195209874, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9120539885687122, log_density = 10.36005362857986, hamiltonian_energy = -8.640038046135507, hamiltonian_energy_error = 0.18997279941674883, max_hamiltonian_energy_error = 0.18997279941674883, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 1.0, log_density = 12.906526315447842, hamiltonian_energy = -8.501182082371809, hamiltonian_energy_error = -0.32815406139299164, max_hamiltonian_energy_error = -0.32815406139299164, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8996880549957836, log_density = 11.265004798151494, hamiltonian_energy = -10.379199396774863, hamiltonian_energy_error = 0.20218511000182993, max_hamiltonian_energy_error = 0.20218511000182993, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9943184343645051, log_density = 10.419517464725356, hamiltonian_energy = -8.361095963612918, hamiltonian_energy_error = 0.01678369191698792, max_hamiltonian_energy_error = -0.25846513933849913, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9868152362560406, log_density = 10.005935315050252, hamiltonian_energy = -8.158117475104547, hamiltonian_energy_error = 0.006265476878336784, max_hamiltonian_energy_error = -0.2728691296447536, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.864611262878634, hamiltonian_energy = -8.541816054801517, hamiltonian_energy_error = -0.14990953396624285, max_hamiltonian_energy_error = -0.23387339731418066, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9888320644905682, log_density = 12.74228123605241, hamiltonian_energy = -10.073946568441283, hamiltonian_energy_error = -0.08551442174657709, max_hamiltonian_energy_error = -0.08551442174657709, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.991172941252104, log_density = 11.771161892361539, hamiltonian_energy = -11.422345170695687, hamiltonian_energy_error = 0.037126469234568305, max_hamiltonian_energy_error = -0.053547690718636076, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9449350989606986, log_density = 11.281783539587016, hamiltonian_energy = -8.949510759448566, hamiltonian_energy_error = 0.012074952513083659, max_hamiltonian_energy_error = 0.13721283863835865, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9862229139885811, log_density = 11.622982794098204, hamiltonian_energy = -9.18818437912691, hamiltonian_energy_error = 0.01590352912060311, max_hamiltonian_energy_error = -0.06873573989565251, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9427370144019466, log_density = 12.64570288789151, hamiltonian_energy = -9.506031837108136, hamiltonian_energy_error = 0.02570609880612018, max_hamiltonian_energy_error = 0.12491508519605254, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9719391409374667, log_density = 10.542096146070662, hamiltonian_energy = -9.458437267662482, hamiltonian_energy_error = 0.06644437373334355, max_hamiltonian_energy_error = 0.10987110752913942, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.932376660278862, hamiltonian_energy = -10.178397332523904, hamiltonian_energy_error = -0.0007121484959178304, max_hamiltonian_energy_error = -0.17946149898683217, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.988387154245584, log_density = 12.705697707498324, hamiltonian_energy = -9.897396726565766, hamiltonian_energy_error = -0.07236173024042536, max_hamiltonian_energy_error = -0.08624642742901045, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7928936537446798, log_density = 11.424997755356404, hamiltonian_energy = -8.152636303329835, hamiltonian_energy_error = 0.10056708705559103, max_hamiltonian_energy_error = 0.4966503488683083, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9752147406355941, log_density = 11.446414372983233, hamiltonian_energy = -8.724482807305002, hamiltonian_energy_error = -0.0056245056508856806, max_hamiltonian_energy_error = -0.26156658982428027, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9965400403747433, log_density = 12.260511292605454, hamiltonian_energy = -10.238790507704735, hamiltonian_energy_error = -0.10887044384488576, max_hamiltonian_energy_error = -0.1246291627065439, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9973617983199821, log_density = 12.53819464196452, hamiltonian_energy = -11.585471523141324, hamiltonian_energy_error = -0.00975219104664049, max_hamiltonian_energy_error = -0.05698426823109948, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9125558137872832, log_density = 11.973929108151339, hamiltonian_energy = -10.80268617154762, hamiltonian_energy_error = 0.07718479923965305, max_hamiltonian_energy_error = 0.16748321212861583, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9688925962847194, log_density = 12.820333108993863, hamiltonian_energy = -10.22526590369261, hamiltonian_energy_error = -0.044741526875275994, max_hamiltonian_energy_error = -0.09387449620607313, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9875616648755697, log_density = 13.41425514594096, hamiltonian_energy = -12.00624578083103, hamiltonian_energy_error = -0.03422922624301172, max_hamiltonian_energy_error = -0.06494435785519315, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.924324906847382, log_density = 13.474798529213055, hamiltonian_energy = -11.861246564260513, hamiltonian_energy_error = -0.003682371910160853, max_hamiltonian_energy_error = 0.1719573760908215, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9407218311399047, log_density = 12.107475481590567, hamiltonian_energy = -11.14313247727074, hamiltonian_energy_error = 0.12084436732046022, max_hamiltonian_energy_error = 0.12084436732046022, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9709590156192333, log_density = 11.97047691714714, hamiltonian_energy = -10.97703019276845, hamiltonian_energy_error = 0.030282481240799797, max_hamiltonian_energy_error = 0.14410887839549247, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9994444854739025, log_density = 13.173060645729594, hamiltonian_energy = -11.65515628383267, hamiltonian_energy_error = -0.09127793015054486, max_hamiltonian_energy_error = -0.10007483703357423, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9427986529561908, log_density = 12.153537087578236, hamiltonian_energy = -11.07789282923067, hamiltonian_energy_error = 0.08498358286436947, max_hamiltonian_energy_error = 0.14246460852316467, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8845685739462099, log_density = 11.576573951508362, hamiltonian_energy = -8.472242206017171, hamiltonian_energy_error = -0.08434259256542376, max_hamiltonian_energy_error = 0.2938576520319529, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8926523770613789, log_density = 10.346624500911005, hamiltonian_energy = -9.631176937731952, hamiltonian_energy_error = 0.1272557101069225, max_hamiltonian_energy_error = 0.2263378447711375, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9871750433589116, log_density = 8.810462211758082, hamiltonian_energy = -6.905727339846795, hamiltonian_energy_error = 0.028801262451217724, max_hamiltonian_energy_error = 0.07550680024984491, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9702046775721191, log_density = 8.29093552584073, hamiltonian_energy = -5.5181369742502255, hamiltonian_energy_error = -0.14658513971004972, max_hamiltonian_energy_error = -0.3566517618203582, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9867101610064942, log_density = 11.193651564990434, hamiltonian_energy = -7.024191925732479, hamiltonian_energy_error = -0.05097421608646968, max_hamiltonian_energy_error = -0.07970137426448609, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9764039332760943, log_density = 11.173525702098567, hamiltonian_energy = -9.928292472688483, hamiltonian_energy_error = 0.010215911063889749, max_hamiltonian_energy_error = 0.04695697030317092, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.976570786227487, log_density = 13.059949202525859, hamiltonian_energy = -9.718101951753361, hamiltonian_energy_error = -0.021334977093060203, max_hamiltonian_energy_error = 0.0529127093919346, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.950745845224292, log_density = 12.857696684295778, hamiltonian_energy = -10.839395891872858, hamiltonian_energy_error = 0.020650506663773882, max_hamiltonian_energy_error = 0.08904844153128799, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8947517487493776, log_density = 12.259150542265179, hamiltonian_energy = -10.33162077739106, hamiltonian_energy_error = 0.1351630601069278, max_hamiltonian_energy_error = 0.20486621810531425, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9455912723525123, log_density = 13.515217120989375, hamiltonian_energy = -10.762120973284368, hamiltonian_energy_error = -0.08807754582255001, max_hamiltonian_energy_error = 0.16216136583259733, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9395910459074618, log_density = 12.628716953443906, hamiltonian_energy = -11.810298870418185, hamiltonian_energy_error = 0.10542258828815498, max_hamiltonian_energy_error = 0.13668605059109318, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9079915069297996, log_density = 11.277639338316051, hamiltonian_energy = -8.513369405884854, hamiltonian_energy_error = -0.18047104691508764, max_hamiltonian_energy_error = -0.24985761935413464, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9968481051070677, log_density = 12.221809623926859, hamiltonian_energy = -10.191431849000644, hamiltonian_energy_error = -0.06823692285433935, max_hamiltonian_energy_error = -0.0925060170112495, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8909613995228266, log_density = 11.050492449711498, hamiltonian_energy = -8.781499694564697, hamiltonian_energy_error = 0.11613158034523252, max_hamiltonian_energy_error = 0.26637339130673965, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9357821865397913, log_density = 8.60658892922124, hamiltonian_energy = -6.715969050622474, hamiltonian_energy_error = 0.030788697487695416, max_hamiltonian_energy_error = -0.27215429908420496, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9478457722919575, log_density = 10.784626127936626, hamiltonian_energy = -6.360011758581637, hamiltonian_energy_error = 0.043301828171568246, max_hamiltonian_energy_error = 0.16060772663694944, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.265701256706722, hamiltonian_energy = -10.424621748579957, hamiltonian_energy_error = -0.23853024758967756, max_hamiltonian_energy_error = -0.29084158296050333, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9323859449719004, log_density = 11.429650198536816, hamiltonian_energy = -11.021221281883832, hamiltonian_energy_error = 0.17581210947491854, max_hamiltonian_energy_error = 0.17581210947491854, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9429574158867918, log_density = 9.805365823283648, hamiltonian_energy = -7.230275584861562, hamiltonian_energy_error = -0.02860480415735278, max_hamiltonian_energy_error = -0.29218156487598, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9893961911789099, log_density = 10.81725496645469, hamiltonian_energy = -8.344487452937667, hamiltonian_energy_error = -0.1785260175280321, max_hamiltonian_energy_error = -0.20433526720682593, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.88381770190615, hamiltonian_energy = -10.23467309060955, hamiltonian_energy_error = -0.10422968132015953, max_hamiltonian_energy_error = -0.16754614416203317, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9698528103029859, log_density = 13.407812773788084, hamiltonian_energy = -11.833464443256272, hamiltonian_energy_error = -0.022773012960426442, max_hamiltonian_energy_error = 0.09547513929862639, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.999550564712211, log_density = 13.682537405594154, hamiltonian_energy = -12.801036881183595, hamiltonian_energy_error = -0.01921905251761835, max_hamiltonian_energy_error = -0.02353256722065389, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9227781470366582, log_density = 12.771797429982243, hamiltonian_energy = -12.377500303956737, hamiltonian_energy_error = 0.07741450966015329, max_hamiltonian_energy_error = 0.10493210450396973, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9205294684412568, log_density = 11.480600083469044, hamiltonian_energy = -8.89354017841108, hamiltonian_energy_error = 0.05918487856913046, max_hamiltonian_energy_error = 0.26050811503778704, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.989802283361142, log_density = 11.97791412642802, hamiltonian_energy = -9.44553720376149, hamiltonian_energy_error = -0.043228960940936645, max_hamiltonian_energy_error = 0.06639541654491765, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.5595743690994663, log_density = 11.629797233113473, hamiltonian_energy = -5.022016620295927, hamiltonian_energy_error = 0.13108810749217348, max_hamiltonian_energy_error = 0.8828772333716035, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7508652204600572, log_density = 9.435734348478285, hamiltonian_energy = -7.379447815250849, hamiltonian_energy_error = 0.3355057627701754, max_hamiltonian_energy_error = 0.5058013962235544, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.275425484328608, hamiltonian_energy = -9.25217514358657, hamiltonian_energy_error = -0.24386863712367912, max_hamiltonian_energy_error = -0.24386863712367912, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9554258663631562, log_density = 11.393052096520787, hamiltonian_energy = -10.110520017437427, hamiltonian_energy_error = 0.04350481573627185, max_hamiltonian_energy_error = 0.1013207726116736, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8509441336437938, log_density = 13.11068414002813, hamiltonian_energy = -10.086253810798812, hamiltonian_energy_error = 0.04546593868737148, max_hamiltonian_energy_error = 0.2542919111173827, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9563453884347918, log_density = 13.697699033696505, hamiltonian_energy = -10.572763474835032, hamiltonian_energy_error = -0.041329407914771465, max_hamiltonian_energy_error = 0.14127816197452425, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8942581148873775, log_density = 12.127077283951746, hamiltonian_energy = -11.332809516526709, hamiltonian_energy_error = 0.14235254178515433, max_hamiltonian_energy_error = 0.23231202975551568, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9496796116606019, log_density = 12.407935614847524, hamiltonian_energy = -10.137998747268721, hamiltonian_energy_error = 0.006998664688197209, max_hamiltonian_energy_error = 0.12777536121980582, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9950596716964267, log_density = 12.448398087429387, hamiltonian_energy = -10.669082823284224, hamiltonian_energy_error = -0.0295154847409691, max_hamiltonian_energy_error = -0.08320804715195251, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9070426327179878, log_density = 11.529217971396303, hamiltonian_energy = -8.859875464683718, hamiltonian_energy_error = -0.020057325010661486, max_hamiltonian_energy_error = 0.39161902637884793, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9490848307378206, log_density = 11.132824941225765, hamiltonian_energy = -7.807291491288792, hamiltonian_energy_error = 0.015644646477748658, max_hamiltonian_energy_error = 0.16246739473793603, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9767534726437409, log_density = 10.477776020849454, hamiltonian_energy = -9.033794102037815, hamiltonian_energy_error = 0.09147620747929608, max_hamiltonian_energy_error = -0.1053578141196656, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 11.251225320800053, hamiltonian_energy = -8.968172287505393, hamiltonian_energy_error = -0.08676142958156774, max_hamiltonian_energy_error = -0.20876925753756126, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9728508915866044, log_density = 12.731031477599299, hamiltonian_energy = -9.348295968340505, hamiltonian_energy_error = -0.07409310018081605, max_hamiltonian_energy_error = -0.14272734500134376, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9319883166125014, log_density = 12.877519337345351, hamiltonian_energy = -10.614953245472385, hamiltonian_energy_error = -0.005452567992037416, max_hamiltonian_energy_error = 0.2263535959246159, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9974712835017063, log_density = 12.508378125803159, hamiltonian_energy = -12.255420797414956, hamiltonian_energy_error = 0.01785955208791634, max_hamiltonian_energy_error = -0.037679887644863186, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8157613635718396, log_density = 10.91919951409707, hamiltonian_energy = -8.868113527999684, hamiltonian_energy_error = 0.28184406486232483, max_hamiltonian_energy_error = 0.35993291708868114, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9644151309052914, log_density = 11.960944753852976, hamiltonian_energy = -9.2162816535293, hamiltonian_energy_error = -0.4674772621313181, max_hamiltonian_energy_error = -0.4674772621313181, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8549297276829436, log_density = 10.749220055617181, hamiltonian_energy = -8.844347241729464, hamiltonian_energy_error = 0.1505492060588498, max_hamiltonian_energy_error = 0.29387410735163755, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9756593554125751, log_density = 12.028362985010052, hamiltonian_energy = -9.81471065993475, hamiltonian_energy_error = -0.1099258984055318, max_hamiltonian_energy_error = -0.21987099638431573, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9961041369727597, log_density = 12.330046354884958, hamiltonian_energy = -11.082679742378506, hamiltonian_energy_error = -0.08304025710158314, max_hamiltonian_energy_error = -0.16598763411489692, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9631847358750214, log_density = 11.143898881208802, hamiltonian_energy = -9.922288895180195, hamiltonian_energy_error = -0.02014179679931516, max_hamiltonian_energy_error = -0.1002811187271817, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9931706784614952, log_density = 10.60338640587298, hamiltonian_energy = -9.410761226644693, hamiltonian_energy_error = 0.023461673489789447, max_hamiltonian_energy_error = -0.09382915406334469, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9380144886984841, log_density = 11.124485345609061, hamiltonian_energy = -7.14218925767042, hamiltonian_energy_error = 0.013259586303567161, max_hamiltonian_energy_error = -0.4234290869587056, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9622693548732316, log_density = 9.146192817703476, hamiltonian_energy = -8.546058086607896, hamiltonian_energy_error = 0.09464886439034714, max_hamiltonian_energy_error = -0.25830792359942123, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9755957704085536, log_density = 11.362615385980451, hamiltonian_energy = -6.241375625119431, hamiltonian_energy_error = -0.15873219831894492, max_hamiltonian_energy_error = -0.18240886582553006, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9694204810625023, log_density = 10.430589897321044, hamiltonian_energy = -9.465209053027035, hamiltonian_energy_error = 0.08891047234518723, max_hamiltonian_energy_error = 0.08891047234518723, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9686197637842985, log_density = 12.058955111469471, hamiltonian_energy = -7.44948260280767, hamiltonian_energy_error = -0.013483734213169285, max_hamiltonian_energy_error = -0.13466052980223253, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7873714379822875, log_density = 9.199763292520743, hamiltonian_energy = -5.964127926713595, hamiltonian_energy_error = 0.3088855216062969, max_hamiltonian_energy_error = 0.5308583279603418, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9969498689967567, log_density = 10.796571392088392, hamiltonian_energy = -6.891537811981868, hamiltonian_energy_error = -0.1385136173188002, max_hamiltonian_energy_error = -0.3688844036045422, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 13.188374769243698, hamiltonian_energy = -9.347860050853845, hamiltonian_energy_error = -0.11074210241654114, max_hamiltonian_energy_error = -0.1667879779843151, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9727536472077515, log_density = 11.950217034413079, hamiltonian_energy = -11.22155343200276, hamiltonian_energy_error = 0.023087817316065795, max_hamiltonian_energy_error = 0.06927643183598242, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.990807050312594, log_density = 12.512688268604515, hamiltonian_energy = -10.91795030412972, hamiltonian_energy_error = -0.008330682089763286, max_hamiltonian_energy_error = 0.04443324894370271, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9321201291318861, log_density = 8.365586042113126, hamiltonian_energy = -6.263546452378626, hamiltonian_energy_error = 0.06632726899731001, max_hamiltonian_energy_error = 0.2342114862161777, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9885247816322712, log_density = 9.567453474343553, hamiltonian_energy = -7.622347396475169, hamiltonian_energy_error = 0.024036841085612437, max_hamiltonian_energy_error = -0.05578597611875935, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9765343550997628, log_density = 9.512819204792104, hamiltonian_energy = -7.862452191662916, hamiltonian_energy_error = 0.05057767010017322, max_hamiltonian_energy_error = 0.10407907185186005, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9717143073829109, log_density = 7.976343679402513, hamiltonian_energy = -7.502880257891931, hamiltonian_energy_error = 0.1453836188731854, max_hamiltonian_energy_error = 0.1453836188731854, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.68779323370661, hamiltonian_energy = -7.082140726811882, hamiltonian_energy_error = -0.1518068074521679, max_hamiltonian_energy_error = -0.3040033994607576, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9527909001451002, log_density = 9.839844462055005, hamiltonian_energy = -7.497975097481898, hamiltonian_energy_error = 0.010272174627025343, max_hamiltonian_energy_error = 0.18233199686630108, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8796414310115175, log_density = 8.019614448454167, hamiltonian_energy = -4.9017284555381835, hamiltonian_energy_error = 0.3032583054480966, max_hamiltonian_energy_error = 0.41955898737403974, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9486275135249613, log_density = 10.36217307324698, hamiltonian_energy = -4.254376430467893, hamiltonian_energy_error = -0.07436049920872989, max_hamiltonian_energy_error = -0.4078374815943251, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9789556777479959, log_density = 10.050741530194172, hamiltonian_energy = -9.254354531241882, hamiltonian_energy_error = 0.15935952070651993, max_hamiltonian_energy_error = -0.3682840540089334, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 13.807907977732683, hamiltonian_energy = -10.101083984424907, hamiltonian_energy_error = -0.4935465484703556, max_hamiltonian_energy_error = -0.4935465484703556, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.925259342062118, log_density = 12.608312035037246, hamiltonian_energy = -12.149362153024484, hamiltonian_energy_error = 0.11350396249419958, max_hamiltonian_energy_error = 0.11350396249419958, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9718943812068701, log_density = 12.308051531135536, hamiltonian_energy = -10.900531693795083, hamiltonian_energy_error = 0.02840610749897543, max_hamiltonian_energy_error = 0.09608539538980132, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8691402736410454, log_density = 12.124012835516792, hamiltonian_energy = -6.901046797068062, hamiltonian_energy_error = -0.05867203094515716, max_hamiltonian_energy_error = 0.5413884164003129, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9014832981677284, log_density = 11.036494816765597, hamiltonian_energy = -7.629200898820259, hamiltonian_energy_error = 0.03352064846899783, max_hamiltonian_energy_error = 0.19673741819465018, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 12.074322629120715, hamiltonian_energy = -10.680549498900916, hamiltonian_energy_error = -0.06317686748064943, max_hamiltonian_energy_error = -0.2188729231292612, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.868315367951476, hamiltonian_energy = -9.804476270904207, hamiltonian_energy_error = -0.19211212702238178, max_hamiltonian_energy_error = -0.19211212702238178, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7979648272348342, log_density = 9.500671175173318, hamiltonian_energy = -8.628443104377004, hamiltonian_energy_error = 0.28729991384036246, max_hamiltonian_energy_error = 0.35680025144131733, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9992359307685602, log_density = 9.996854051110564, hamiltonian_energy = -7.439619318159842, hamiltonian_energy_error = -0.03302445041919455, max_hamiltonian_energy_error = -0.19636026367997683, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9876445256283122, log_density = 12.69518635638694, hamiltonian_energy = -8.576575863309522, hamiltonian_energy_error = -0.21833902111340642, max_hamiltonian_energy_error = -0.21833902111340642, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9156737731284781, log_density = 12.091219198134546, hamiltonian_energy = -9.961895383554374, hamiltonian_energy_error = -0.01296884552380817, max_hamiltonian_energy_error = 0.20655659138996185, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.868982094419262, log_density = 11.450252831472216, hamiltonian_energy = -9.000328567988502, hamiltonian_energy_error = 0.08586555550870223, max_hamiltonian_energy_error = 0.2432378448302437, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9914069339665292, log_density = 12.295628842510816, hamiltonian_energy = -10.010674692288433, hamiltonian_energy_error = -0.06470324921100712, max_hamiltonian_energy_error = -0.11067038189243306, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9682476961017821, log_density = 12.165558199124703, hamiltonian_energy = -11.113759077644646, hamiltonian_energy_error = 0.049333670279237296, max_hamiltonian_energy_error = 0.09042095208075018, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.898084294037181, log_density = 12.771423177563797, hamiltonian_energy = -10.05716958256196, hamiltonian_energy_error = -0.03668588783902926, max_hamiltonian_energy_error = 0.3181934964970097, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9983654198722609, log_density = 12.711974516792953, hamiltonian_energy = -11.940797102849388, hamiltonian_energy_error = -0.010588328306068817, max_hamiltonian_energy_error = -0.018825662080567795, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9659753968370787, log_density = 13.174281020435716, hamiltonian_energy = -10.935961123360471, hamiltonian_energy_error = -0.01770032738485483, max_hamiltonian_energy_error = 0.0815470542651795, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.943386972990926, log_density = 12.485719126093652, hamiltonian_energy = -11.684705926309846, hamiltonian_energy_error = 0.08321576118478902, max_hamiltonian_energy_error = 0.11170195516493919, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9414639597955466, log_density = 12.191208210187135, hamiltonian_energy = -9.695653387770871, hamiltonian_energy_error = 0.014073440641396928, max_hamiltonian_energy_error = 0.15516870413321193, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6188309250673262, log_density = 12.436145223552368, hamiltonian_energy = -7.357542405780868, hamiltonian_energy_error = 0.21256048016488105, max_hamiltonian_energy_error = 0.7520343542367449, tree_depth = 1, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9352495753586899, log_density = 12.738029043398384, hamiltonian_energy = -9.996260808357489, hamiltonian_energy_error = -0.15872257696367775, max_hamiltonian_energy_error = 0.23069911958891787, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9953424521044082, log_density = 13.4445783343033, hamiltonian_energy = -12.283823566291915, hamiltonian_energy_error = -0.03553209718182515, max_hamiltonian_energy_error = -0.050230007306170776, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8819973985423056, log_density = 10.388974159753705, hamiltonian_energy = -7.99302209378595, hamiltonian_energy_error = 0.14873986241051806, max_hamiltonian_energy_error = 0.20534645601109514, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9928172291913504, log_density = 11.195804703528673, hamiltonian_energy = -8.137829087975971, hamiltonian_energy_error = -0.026821900747751926, max_hamiltonian_energy_error = -0.15627242186449486, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8700162152575847, log_density = 11.78574490610716, hamiltonian_energy = -7.194694596873432, hamiltonian_energy_error = 0.11844720503871731, max_hamiltonian_energy_error = 0.2720475048543669, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9980445673670016, log_density = 11.577934851568134, hamiltonian_energy = -9.150174430082263, hamiltonian_energy_error = -0.009667748313233915, max_hamiltonian_energy_error = -0.2883879009897541, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.948051927675781, hamiltonian_energy = -9.974061717968688, hamiltonian_energy_error = -0.046574450951494484, max_hamiltonian_energy_error = -0.15056359617312154, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9284562991596245, log_density = 11.443645461776821, hamiltonian_energy = -8.998290482586375, hamiltonian_energy_error = 0.11217972650714181, max_hamiltonian_energy_error = 0.2194706991806239, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9875852738628603, log_density = 10.874887610861325, hamiltonian_energy = -9.119740940773694, hamiltonian_energy_error = 0.02903897552072543, max_hamiltonian_energy_error = -0.24328875345273104, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.935379444951778, log_density = 10.518205824265166, hamiltonian_energy = -7.2405375880818585, hamiltonian_energy_error = -0.11113277013842726, max_hamiltonian_energy_error = 0.18368872672661585, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9974303698062356, log_density = 12.79724259221118, hamiltonian_energy = -9.442003243248934, hamiltonian_energy_error = -0.06208930358944009, max_hamiltonian_energy_error = -0.09154496248810773, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8513430087513257, log_density = 9.265524619923022, hamiltonian_energy = -8.189528511773926, hamiltonian_energy_error = 0.3098774930184742, max_hamiltonian_energy_error = 0.4613510141292547, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9927254349075417, log_density = 7.365485898874356, hamiltonian_energy = -4.676708587098203, hamiltonian_energy_error = -0.024873494740045743, max_hamiltonian_energy_error = -0.4987137333814937, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.242439659353916, hamiltonian_energy = -6.246171087786944, hamiltonian_energy_error = -0.30411417872091207, max_hamiltonian_energy_error = -0.30411417872091207, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8506374581585109, log_density = 5.560927840068633, hamiltonian_energy = -1.525344960721723, hamiltonian_energy_error = 0.05270499808625395, max_hamiltonian_energy_error = 0.3102149925751494, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8309217210144001, log_density = 5.430684649089802, hamiltonian_energy = -0.3187872978249908, hamiltonian_energy_error = 0.24975484801407788, max_hamiltonian_energy_error = 0.38147470536688655, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.996934307873034, log_density = 11.157114387008573, hamiltonian_energy = -5.19877664284632, hamiltonian_energy_error = -0.18789762024242318, max_hamiltonian_energy_error = -0.2622692770502377, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9464973701650968, log_density = 9.592554788200694, hamiltonian_energy = -7.936727372577737, hamiltonian_energy_error = 0.04751129974463186, max_hamiltonian_energy_error = 0.13044572704551438, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 10.813012479229045, hamiltonian_energy = -9.190021857044036, hamiltonian_energy_error = -0.01860023677590128, max_hamiltonian_energy_error = -0.11596220377854216, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9598186918229957, log_density = 11.447159185091639, hamiltonian_energy = -6.267379369503126, hamiltonian_energy_error = 0.02813632014700751, max_hamiltonian_energy_error = 0.14483862773081402, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9644817270514657, log_density = 11.35341153950624, hamiltonian_energy = -9.27194358850969, hamiltonian_energy_error = 0.017078202821377175, max_hamiltonian_energy_error = -0.2965133976387051, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9913448442586872, log_density = 12.219961903160929, hamiltonian_energy = -8.747948055893335, hamiltonian_energy_error = -0.0038657646703867954, max_hamiltonian_energy_error = -0.13825548471931093, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9890011522619244, log_density = 11.375240937589439, hamiltonian_energy = -9.756956583344877, hamiltonian_energy_error = -0.025533011765261904, max_hamiltonian_energy_error = -0.14593920018657514, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.856659849976641, log_density = 7.3768370312449285, hamiltonian_energy = -4.558154435989435, hamiltonian_energy_error = 0.28433404278495544, max_hamiltonian_energy_error = 0.28433404278495544, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9280456967170316, log_density = 8.720479638077016, hamiltonian_energy = -3.7026010503405207, hamiltonian_energy_error = -0.15356554033464187, max_hamiltonian_energy_error = 0.21146075175335577, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8950852291122591, log_density = 8.776545162827285, hamiltonian_energy = -5.232115218562054, hamiltonian_energy_error = 0.2114891828407517, max_hamiltonian_energy_error = 0.2406445937953814, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9407259069965483, log_density = 10.767846712949659, hamiltonian_energy = -6.523884617745257, hamiltonian_energy_error = -0.012165218230820507, max_hamiltonian_energy_error = 0.321395866330648, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 13.325376721497179, hamiltonian_energy = -9.414715893496492, hamiltonian_energy_error = -0.3555841521656813, max_hamiltonian_energy_error = -0.3555841521656813, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9052904728536858, log_density = 13.596167066152052, hamiltonian_energy = -11.867347976545181, hamiltonian_energy_error = 0.006181602490372029, max_hamiltonian_energy_error = 0.2376360246468785, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8635093216844069, log_density = 10.621096042953011, hamiltonian_energy = -10.186063046744664, hamiltonian_energy_error = 0.23538826580292138, max_hamiltonian_energy_error = 0.23902029432423078, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9970104604559036, log_density = 10.26724661801863, hamiltonian_energy = -8.670679076570142, hamiltonian_energy_error = -0.01351857376632104, max_hamiltonian_energy_error = -0.17159815376747645, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9701383547327039, log_density = 9.681583075252906, hamiltonian_energy = -5.444923400040077, hamiltonian_energy_error = -0.017851598414882375, max_hamiltonian_energy_error = 0.10921457779183008, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.514177560905662, hamiltonian_energy = -9.304010123373704, hamiltonian_energy_error = -0.22148620273954478, max_hamiltonian_energy_error = -0.2300495234281943, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9976203349173477, log_density = 13.568375411096856, hamiltonian_energy = -12.36649998133117, hamiltonian_energy_error = -0.059490709350079385, max_hamiltonian_energy_error = -0.059490709350079385, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9223979079818735, log_density = 12.62077243487878, hamiltonian_energy = -10.23858264565116, hamiltonian_energy_error = 0.05480096930457101, max_hamiltonian_energy_error = 0.17633158983128894, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9956452567876997, log_density = 13.004477395547998, hamiltonian_energy = -11.83047123789522, hamiltonian_energy_error = -0.02840863900338242, max_hamiltonian_energy_error = -0.05154689645685551, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8522170936053592, log_density = 9.709780372413672, hamiltonian_energy = -9.099954760925245, hamiltonian_energy_error = 0.21199519661306176, max_hamiltonian_energy_error = 0.22960697318186973, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9958997513873453, log_density = 12.650948676022642, hamiltonian_energy = -7.334826685952116, hamiltonian_energy_error = -0.13371050622147607, max_hamiltonian_energy_error = -0.21283204454932658, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9477316216160431, log_density = 12.76470503597167, hamiltonian_energy = -9.943654624237142, hamiltonian_energy_error = 0.03973349252454206, max_hamiltonian_energy_error = 0.20653819846746657, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9655314938227655, log_density = 11.287394902126898, hamiltonian_energy = -9.714443840044334, hamiltonian_energy_error = 0.09393621452540124, max_hamiltonian_energy_error = 0.09393621452540124, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9659564859502602, log_density = 11.376265837588088, hamiltonian_energy = -9.664548513221316, hamiltonian_energy_error = 0.06788214232351564, max_hamiltonian_energy_error = 0.21660178383860718, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.933075948960676, log_density = 11.811595107653503, hamiltonian_energy = -8.422448892615252, hamiltonian_energy_error = -0.11673193746571187, max_hamiltonian_energy_error = 0.21134792121868884, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9825472704148879, log_density = 13.097570365568082, hamiltonian_energy = -10.730044626469645, hamiltonian_energy_error = -0.0820190537145482, max_hamiltonian_energy_error = -0.15653954815041438, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8956568365866419, log_density = 11.975118347769834, hamiltonian_energy = -7.369295684963413, hamiltonian_energy_error = 0.03894639921179799, max_hamiltonian_energy_error = 0.22514047420581473, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9676815787613049, log_density = 12.659178664916025, hamiltonian_energy = -10.474369686787771, hamiltonian_energy_error = -0.12819461233920748, max_hamiltonian_energy_error = -0.18926142742515317, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9427704265553104, log_density = 12.182562169487163, hamiltonian_energy = -10.682398180545801, hamiltonian_energy_error = 0.06808215548529262, max_hamiltonian_energy_error = 0.14163277263751972, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9899668959265554, log_density = 11.254479498609541, hamiltonian_energy = -10.26220891192356, hamiltonian_energy_error = 0.0728198943282301, max_hamiltonian_energy_error = -0.1354271291510738, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9906085106532195, log_density = 11.790069707491352, hamiltonian_energy = -9.491232927308733, hamiltonian_energy_error = -0.13841089453155675, max_hamiltonian_energy_error = -0.22440350508076, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 12.59670016899772, hamiltonian_energy = -8.5690722174574, hamiltonian_energy_error = -0.054723839240514494, max_hamiltonian_energy_error = -0.11823738956582552, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9132931677890369, log_density = 11.357286187507952, hamiltonian_energy = -10.588483302429266, hamiltonian_energy_error = 0.094713783681593, max_hamiltonian_energy_error = 0.18603293029926782, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9319603493767136, log_density = 6.8513029305324995, hamiltonian_energy = -6.290785921093251, hamiltonian_energy_error = 0.2331113750445244, max_hamiltonian_energy_error = 0.2331113750445244, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9819151298099648, log_density = 10.500975895330068, hamiltonian_energy = -5.716657546610977, hamiltonian_energy_error = -0.06046546084707405, max_hamiltonian_energy_error = -0.14444049346952248, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.986870999752299, log_density = 12.41028337660875, hamiltonian_energy = -8.080462168042096, hamiltonian_energy_error = -0.29519687045477916, max_hamiltonian_energy_error = -0.29519687045477916, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.996626181627479, log_density = 12.485897623394042, hamiltonian_energy = -11.724228673385834, hamiltonian_energy_error = -0.06583201049954113, max_hamiltonian_energy_error = -0.07170884550377288, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9968507200607027, log_density = 12.993408116170727, hamiltonian_energy = -11.581855596527932, hamiltonian_energy_error = -0.032649461743524455, max_hamiltonian_energy_error = -0.05240110430188771, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9861771808253126, log_density = 13.19186359150569, hamiltonian_energy = -12.313971308495708, hamiltonian_energy_error = -0.006093597101218151, max_hamiltonian_energy_error = 0.04985523249602686, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9886404421476584, log_density = 13.450387221524435, hamiltonian_energy = -12.535632624674488, hamiltonian_energy_error = -0.007621341872312115, max_hamiltonian_energy_error = 0.03792438508970797, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9397508230847514, log_density = 11.860864938384541, hamiltonian_energy = -11.024209603069513, hamiltonian_energy_error = 0.057494211900619874, max_hamiltonian_energy_error = 0.09357513626313718, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8845942964810046, log_density = 10.204562775706208, hamiltonian_energy = -9.133241913439193, hamiltonian_energy_error = 0.2749951058993503, max_hamiltonian_energy_error = 0.3383934054969835, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.943862180373138, hamiltonian_energy = -9.061884427642177, hamiltonian_energy_error = -0.06262090746470328, max_hamiltonian_energy_error = -0.2855070823059318, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9741242254267224, log_density = 12.13246629663094, hamiltonian_energy = -9.110332824922384, hamiltonian_energy_error = -0.1746530160386186, max_hamiltonian_energy_error = -0.24245499100074852, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9947480522077446, log_density = 12.921304020045046, hamiltonian_energy = -11.323365682671087, hamiltonian_energy_error = -0.06902320555905916, max_hamiltonian_energy_error = -0.11439296904610607, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9616164407305334, log_density = 11.493306318700698, hamiltonian_energy = -10.362888981971993, hamiltonian_energy_error = 0.04257440636470555, max_hamiltonian_energy_error = 0.073829017832999, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.362650170612397, hamiltonian_energy = -10.837249528583344, hamiltonian_energy_error = -0.059181132212083654, max_hamiltonian_energy_error = -0.10451656317434832, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9402671461399734, log_density = 13.061030406813602, hamiltonian_energy = -10.14767624454451, hamiltonian_energy_error = -0.025764344351921764, max_hamiltonian_energy_error = 0.13419538197766379, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9900131898678588, log_density = 12.710242711289117, hamiltonian_energy = -11.71092125563969, hamiltonian_energy_error = 0.010815181001717633, max_hamiltonian_energy_error = 0.03566322107951159, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.96193355706026, log_density = 12.950718835569493, hamiltonian_energy = -11.360516239013748, hamiltonian_energy_error = 0.023358548401267498, max_hamiltonian_energy_error = 0.0924831606472285, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9939686576708358, log_density = 13.088246292492624, hamiltonian_energy = -12.221336151461424, hamiltonian_energy_error = -0.0027895546102580937, max_hamiltonian_energy_error = -0.03246787022894537, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9996631111044397, log_density = 13.677316500343945, hamiltonian_energy = -12.833112457782015, hamiltonian_energy_error = -0.03747191135460248, max_hamiltonian_energy_error = -0.03747191135460248, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8833389668741363, log_density = 13.382794261422774, hamiltonian_energy = -9.95893656003053, hamiltonian_energy_error = -0.003156608215654444, max_hamiltonian_energy_error = 0.2107042858316177, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9129419591248442, log_density = 10.865560401998158, hamiltonian_energy = -8.98666667458376, hamiltonian_energy_error = 0.10560259703734332, max_hamiltonian_energy_error = 0.16227891807905337, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9361673848747175, log_density = 11.385800011561553, hamiltonian_energy = -8.26195783308869, hamiltonian_energy_error = -0.04469193869286414, max_hamiltonian_energy_error = 0.16465419407107795, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.22487974931626, hamiltonian_energy = -10.802577992207107, hamiltonian_energy_error = -0.056365332136273594, max_hamiltonian_energy_error = -0.10285109944987347, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.97729358165671, log_density = 12.640245102408821, hamiltonian_energy = -10.822347255570914, hamiltonian_energy_error = -0.013394982130778388, max_hamiltonian_energy_error = 0.061164549706692384, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9854819362978274, log_density = 12.379780594755939, hamiltonian_energy = -10.026123503930616, hamiltonian_energy_error = -0.02647158105559022, max_hamiltonian_energy_error = 0.0470070205722255, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9757272389865796, log_density = 11.5774104294416, hamiltonian_energy = -9.752735489121816, hamiltonian_energy_error = 0.05273198709491744, max_hamiltonian_energy_error = -0.07597721851758621, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9967827596573786, log_density = 10.932140064246202, hamiltonian_energy = -10.737243337297391, hamiltonian_energy_error = 0.016440977384824862, max_hamiltonian_energy_error = -0.12185832877315939, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9941226258760186, log_density = 11.357338437525957, hamiltonian_energy = -10.00004595430076, hamiltonian_energy_error = 0.010926918727452772, max_hamiltonian_energy_error = -0.15046700707722138, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.975269756816876, log_density = 12.498836877650819, hamiltonian_energy = -9.613275417700649, hamiltonian_energy_error = -0.008995608612890393, max_hamiltonian_energy_error = 0.1064930631546197, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8933275954385985, log_density = 12.566951596583204, hamiltonian_energy = -10.238119839900682, hamiltonian_energy_error = -0.06131565807088357, max_hamiltonian_energy_error = 0.2650052605845463, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8340459570756806, log_density = 11.887923981025313, hamiltonian_energy = -9.488909409439952, hamiltonian_energy_error = 0.10232970190945068, max_hamiltonian_energy_error = 0.32690847336474604, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9755164328712818, log_density = 11.919689314744334, hamiltonian_energy = -9.657201340299913, hamiltonian_energy_error = -0.06739808345581011, max_hamiltonian_energy_error = 0.09448648934697879, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9560923089036549, log_density = 11.729252832701075, hamiltonian_energy = -9.036272449996996, hamiltonian_energy_error = 0.06250913414333148, max_hamiltonian_energy_error = 0.15963830780029298, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9988226787123325, log_density = 12.998906993414003, hamiltonian_energy = -11.152253074194107, hamiltonian_energy_error = -0.1025563738021038, max_hamiltonian_energy_error = -0.1025563738021038, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.797001292651949, log_density = 8.620822070224186, hamiltonian_energy = -6.483785414792335, hamiltonian_energy_error = 0.260458551491487, max_hamiltonian_energy_error = 0.2894128303485779, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9635841898061912, log_density = 9.346371379755418, hamiltonian_energy = -7.032222663822482, hamiltonian_energy_error = 0.11906993152116119, max_hamiltonian_energy_error = -0.2031310301309066, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.99390035315649, log_density = 11.897923759943794, hamiltonian_energy = -9.078158550552274, hamiltonian_energy_error = -0.27110053399882084, max_hamiltonian_energy_error = -0.41316072942703563, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9898150539194049, log_density = 12.705320075103998, hamiltonian_energy = -8.234177126548307, hamiltonian_energy_error = -0.033340279638823134, max_hamiltonian_energy_error = -0.07108526817793503, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9838389519888364, log_density = 13.1876455170568, hamiltonian_energy = -11.771285092896173, hamiltonian_energy_error = -0.029023246480150533, max_hamiltonian_energy_error = 0.04030053258183486, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9488120867912347, log_density = 11.411476763306643, hamiltonian_energy = -10.158012757510324, hamiltonian_energy_error = 0.0856599604614523, max_hamiltonian_energy_error = 0.13973500718759624, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9977784972206176, log_density = 12.617036187029413, hamiltonian_energy = -10.695266024731993, hamiltonian_energy_error = -0.049573840216602605, max_hamiltonian_energy_error = -0.13429170893237696, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.980797842062179, log_density = 11.908142240333394, hamiltonian_energy = -11.197814248435163, hamiltonian_energy_error = 0.04055571885159104, max_hamiltonian_energy_error = -0.08213204929263895, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9817379271441398, log_density = 12.170413812971233, hamiltonian_energy = -9.56266686254635, hamiltonian_energy_error = -0.04898124981678187, max_hamiltonian_energy_error = -0.10846190683502854, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9240450800136991, log_density = 10.378222034056018, hamiltonian_energy = -8.767867777509542, hamiltonian_energy_error = 0.12478360025092705, max_hamiltonian_energy_error = 0.12478360025092705, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9812961859793969, log_density = 10.491725903030193, hamiltonian_energy = -7.795809211987967, hamiltonian_energy_error = 0.04250822302413848, max_hamiltonian_energy_error = 0.0935519375311804, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8815770852885294, log_density = 11.043815284690801, hamiltonian_energy = -6.898775226721817, hamiltonian_energy_error = 0.19360312421184744, max_hamiltonian_energy_error = 0.2488733878473024, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9968751930121397, log_density = 11.154129652848631, hamiltonian_energy = -9.881021526400847, hamiltonian_energy_error = -0.017553906217038673, max_hamiltonian_energy_error = -0.14377586159488764, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9393727467948184, log_density = 11.395305131887351, hamiltonian_energy = -8.653988469902696, hamiltonian_energy_error = 0.09185586983817728, max_hamiltonian_energy_error = 0.11835697065813378, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9983079418583104, log_density = 12.915336813921629, hamiltonian_energy = -10.917310407395787, hamiltonian_energy_error = -0.11674347444065525, max_hamiltonian_energy_error = -0.11674347444065525, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9371674858333604, log_density = 12.743228913460182, hamiltonian_energy = -9.17247624871894, hamiltonian_energy_error = 0.0006333994208134186, max_hamiltonian_energy_error = 0.21967859877056384, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.991026749304126, log_density = 12.212176860792518, hamiltonian_energy = -11.770814327249383, hamiltonian_energy_error = 0.03843609938387971, max_hamiltonian_energy_error = -0.06898012793139152, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7779404668991278, log_density = 12.322468135460118, hamiltonian_energy = -8.934691244093926, hamiltonian_energy_error = 0.1700022862936379, max_hamiltonian_energy_error = 0.48440972029298557, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9398469989512402, log_density = 13.26739139209322, hamiltonian_energy = -10.850199646225157, hamiltonian_energy_error = -0.03749734532568283, max_hamiltonian_energy_error = 0.12720741003637137, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9039217183989586, log_density = 11.805630019915487, hamiltonian_energy = -8.8765323198134, hamiltonian_energy_error = 0.10492650442272833, max_hamiltonian_energy_error = 0.24022179458485482, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9924150957456266, log_density = 12.672590465533686, hamiltonian_energy = -10.71339463903685, hamiltonian_energy_error = -0.05356306771619934, max_hamiltonian_energy_error = -0.15101168885767002, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9876118350061063, log_density = 13.516804459173972, hamiltonian_energy = -12.045133284414186, hamiltonian_energy_error = -0.1377014971569004, max_hamiltonian_energy_error = -0.1377014971569004, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7839136675424877, log_density = 12.28365743973705, hamiltonian_energy = -9.051102774869236, hamiltonian_energy_error = 0.1672011439097787, max_hamiltonian_energy_error = 0.3278922499985928, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 12.460755260686025, hamiltonian_energy = -11.19849489356223, hamiltonian_energy_error = -0.03194030146495308, max_hamiltonian_energy_error = -0.09158417032064392, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9665275165138535, log_density = 12.855334192080537, hamiltonian_energy = -10.886415927192594, hamiltonian_energy_error = 0.02871804065363115, max_hamiltonian_energy_error = 0.0681998642496513, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.958589530296509, log_density = 12.227990365340078, hamiltonian_energy = -10.537292084664202, hamiltonian_energy_error = 0.03176655550249485, max_hamiltonian_energy_error = 0.12205232252959775, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9891314916097949, log_density = 11.97265787416356, hamiltonian_energy = -10.888839097044205, hamiltonian_energy_error = 0.04402996476789589, max_hamiltonian_energy_error = -0.11831203964165127, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9892102366226644, log_density = 12.282203502653317, hamiltonian_energy = -11.119707970349877, hamiltonian_energy_error = -0.08767914806062649, max_hamiltonian_energy_error = -0.1842708498002512, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9595603300389671, log_density = 10.568417593636394, hamiltonian_energy = -9.078300553713902, hamiltonian_energy_error = -0.046942108651675696, max_hamiltonian_energy_error = 0.11092769871455843, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9822982378627151, log_density = 9.688724763209532, hamiltonian_energy = -6.549400748613488, hamiltonian_energy_error = -0.24044686500510792, max_hamiltonian_energy_error = -0.24383539097233076, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9968069543186711, log_density = 11.099623481365011, hamiltonian_energy = -8.353741690094523, hamiltonian_energy_error = -0.07194509846512531, max_hamiltonian_energy_error = -0.3197396766702667, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9979625625988684, log_density = 10.351529008825796, hamiltonian_energy = -9.992865278649791, hamiltonian_energy_error = 0.028995169777184415, max_hamiltonian_energy_error = -0.13448249724975803, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9828501210436537, log_density = 11.697335886364737, hamiltonian_energy = -7.628774038658575, hamiltonian_energy_error = 0.008077279390708014, max_hamiltonian_energy_error = -0.07778165087361089, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9420987907004343, log_density = 9.370154618318038, hamiltonian_energy = -8.509773384484086, hamiltonian_energy_error = 0.16430776470207142, max_hamiltonian_energy_error = 0.16430776470207142, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9611103627339184, log_density = 11.166082505570095, hamiltonian_energy = -5.451369525968932, hamiltonian_energy_error = -0.05576625296384563, max_hamiltonian_energy_error = -0.2020089329137571, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9978781102520237, log_density = 12.065590893891084, hamiltonian_energy = -10.055445504686851, hamiltonian_energy_error = -0.09027458942343358, max_hamiltonian_energy_error = -0.10549010143388138, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9470075621293771, log_density = 11.475129751066895, hamiltonian_energy = -7.746441396122853, hamiltonian_energy_error = 0.06488980946557721, max_hamiltonian_energy_error = 0.11897699461395028, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9928383401522604, log_density = 11.991537389137251, hamiltonian_energy = -10.012727180617919, hamiltonian_energy_error = -0.041252058258987034, max_hamiltonian_energy_error = -0.09451082840289438, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9067384283768286, log_density = 13.304542927896351, hamiltonian_energy = -8.056959121305805, hamiltonian_energy_error = 0.047314873372815924, max_hamiltonian_energy_error = 0.23865303302839536, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9406612328524718, log_density = 13.32487491032323, hamiltonian_energy = -12.144382974519882, hamiltonian_energy_error = 0.026982281193790314, max_hamiltonian_energy_error = 0.12185014110888837, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9616054393256618, log_density = 12.993440552759614, hamiltonian_energy = -12.24883536605785, hamiltonian_energy_error = 0.0268832126178129, max_hamiltonian_energy_error = 0.07057602864419721, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9898097427486399, log_density = 13.075215162508387, hamiltonian_energy = -11.72048667976955, hamiltonian_energy_error = -0.03410445989106492, max_hamiltonian_energy_error = -0.06683537864094191, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8613572770925945, log_density = 9.258418444844327, hamiltonian_energy = -7.5415430531321395, hamiltonian_energy_error = 0.18550346674786944, max_hamiltonian_energy_error = 0.2581033964848487, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9448459809468893, log_density = 8.066792169252432, hamiltonian_energy = -7.6643299913705745, hamiltonian_energy_error = 0.16845115378702147, max_hamiltonian_energy_error = 0.16845115378702147, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.672326386596199, hamiltonian_energy = -3.9485543318825664, hamiltonian_energy_error = -0.12759847401634516, max_hamiltonian_energy_error = -0.4922466536060437, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 11.524467799937085, hamiltonian_energy = -5.873259032858336, hamiltonian_energy_error = -0.39202573314878286, max_hamiltonian_energy_error = -0.5699554083812384, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9021438024982261, log_density = 10.544036693565733, hamiltonian_energy = -8.284291542046086, hamiltonian_energy_error = 0.1106053497274555, max_hamiltonian_energy_error = 0.1888731150691001, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9786182418208066, log_density = 12.165769454055035, hamiltonian_energy = -8.959013654482401, hamiltonian_energy_error = -0.14805090679281996, max_hamiltonian_energy_error = -0.18355174365210836, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9960371761449093, log_density = 12.268184636923776, hamiltonian_energy = -11.314926519313667, hamiltonian_energy_error = -0.014195228335207588, max_hamiltonian_energy_error = -0.09267280210838713, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 47, is_accept = true, acceptance_rate = 0.9800205611468179, log_density = 12.125409167809348, hamiltonian_energy = -10.636646888986434, hamiltonian_energy_error = -0.014286145758628521, max_hamiltonian_energy_error = -0.09882048715672731, tree_depth = 5, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8842230159813058, log_density = 11.025017197722072, hamiltonian_energy = -8.540498302352137, hamiltonian_energy_error = -0.0982168509889334, max_hamiltonian_energy_error = 0.4046708173280784, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9809338134833744, log_density = 11.979043014174007, hamiltonian_energy = -9.25695274939567, hamiltonian_energy_error = 0.012220913089931784, max_hamiltonian_energy_error = 0.08572757747938375, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8706988374182739, log_density = 10.264356428336052, hamiltonian_energy = -9.40248537858188, hamiltonian_energy_error = 0.16056454050089286, max_hamiltonian_energy_error = 0.24966234391466458, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9657393049837036, log_density = 10.310027415288026, hamiltonian_energy = -6.80729793948664, hamiltonian_energy_error = 0.002029012756345594, max_hamiltonian_energy_error = -0.32406005739843025, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.997207219556758, log_density = 10.513700437491647, hamiltonian_energy = -9.272838123225778, hamiltonian_energy_error = 0.042794466323352154, max_hamiltonian_energy_error = -0.20655127412241825, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 12.51056532068609, hamiltonian_energy = -9.112279562903147, hamiltonian_energy_error = -0.17334697131963317, max_hamiltonian_energy_error = -0.2682235092887666, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9697792642797741, log_density = 11.814644225291572, hamiltonian_energy = -10.287927847484163, hamiltonian_energy_error = -0.032110649575727734, max_hamiltonian_energy_error = 0.09119447587295326, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9526717644616781, log_density = 12.971646578723249, hamiltonian_energy = -10.503590259060063, hamiltonian_energy_error = -0.0310575071073238, max_hamiltonian_energy_error = 0.10881187780493029, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8986826247302186, log_density = 12.647427779789314, hamiltonian_energy = -10.16876564082936, hamiltonian_energy_error = 0.04639077386928747, max_hamiltonian_energy_error = 0.17533151445219985, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 39, is_accept = true, acceptance_rate = 0.9619759047713131, log_density = 12.70744021089624, hamiltonian_energy = -11.414823527597154, hamiltonian_energy_error = -0.047960640732037874, max_hamiltonian_energy_error = 0.15021652693049425, tree_depth = 5, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9930448189384334, log_density = 12.178786053964805, hamiltonian_energy = -9.778452094048856, hamiltonian_energy_error = -0.041599809832661094, max_hamiltonian_energy_error = -0.07998398010687424, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9608044559850957, log_density = 12.379252972694722, hamiltonian_energy = -9.882917504351763, hamiltonian_energy_error = 0.02373007998835064, max_hamiltonian_energy_error = 0.09606732902023118, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9931565320638219, log_density = 12.357936183038905, hamiltonian_energy = -11.34186026894922, hamiltonian_energy_error = -0.016802889019279732, max_hamiltonian_energy_error = -0.07944783598003546, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9189014765854092, log_density = 11.631018457292882, hamiltonian_energy = -8.354107442528107, hamiltonian_energy_error = 0.13347428721300503, max_hamiltonian_energy_error = 0.21535150077622944, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9954645924154917, log_density = 11.221111967710154, hamiltonian_energy = -10.241531728021888, hamiltonian_energy_error = 0.03226274328176437, max_hamiltonian_energy_error = -0.11331170110530486, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.967182691848158, log_density = 9.462326652037756, hamiltonian_energy = -8.297084447637166, hamiltonian_energy_error = 0.2299945163442274, max_hamiltonian_energy_error = -0.30638415067455327, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.839158580344588, hamiltonian_energy = -8.072036157166579, hamiltonian_energy_error = -0.16998715819167387, max_hamiltonian_energy_error = -0.2565190878863337, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9949943214640358, log_density = 12.009484163432417, hamiltonian_energy = -9.807051831347174, hamiltonian_energy_error = -0.05633067196314201, max_hamiltonian_energy_error = -0.09208180598811211, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9553111981335461, log_density = 13.125793216912786, hamiltonian_energy = -10.491444823521258, hamiltonian_energy_error = -0.1755302600442512, max_hamiltonian_energy_error = 0.2199580311169651, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 5, is_accept = true, acceptance_rate = 0.964310254430232, log_density = 12.321683839525555, hamiltonian_energy = -10.987650586435034, hamiltonian_energy_error = 0.005535457412152667, max_hamiltonian_energy_error = 0.08883805815213819, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8545615017831873, log_density = 10.679467338975018, hamiltonian_energy = -7.266880423581965, hamiltonian_energy_error = 0.07805903701990058, max_hamiltonian_energy_error = 0.3362992511134353, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9848013049334691, log_density = 10.978098511576224, hamiltonian_energy = -7.855862724192404, hamiltonian_energy_error = -0.023848397127174792, max_hamiltonian_energy_error = -0.07667329329719763, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8877766765510201, log_density = 7.4449332914688355, hamiltonian_energy = -6.262853360130695, hamiltonian_energy_error = 0.16688288328492895, max_hamiltonian_energy_error = 0.28763222552358236, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8724752838363106, log_density = 10.561513159637954, hamiltonian_energy = -4.316882356823953, hamiltonian_energy_error = -0.0902476894812132, max_hamiltonian_energy_error = 0.4821962962180546, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.865937137696332, log_density = 8.144642091806215, hamiltonian_energy = -7.673055155402754, hamiltonian_energy_error = 0.31876290392016315, max_hamiltonian_energy_error = 0.31876290392016315, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9966594882236368, log_density = 9.908850263636237, hamiltonian_energy = -7.536417673374666, hamiltonian_energy_error = -0.10571652909746909, max_hamiltonian_energy_error = -0.46450947482171934, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 11.563477865392057, hamiltonian_energy = -9.654879072641918, hamiltonian_energy_error = -0.17002318370844094, max_hamiltonian_energy_error = -0.25992833493580214, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9925151781374294, log_density = 11.990555412428495, hamiltonian_energy = -10.591290829419298, hamiltonian_energy_error = -0.02172773722140242, max_hamiltonian_energy_error = -0.08692680277376397, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8868233276514869, log_density = 11.546897378189804, hamiltonian_energy = -9.06172419846092, hamiltonian_energy_error = 0.17419283833898014, max_hamiltonian_energy_error = 0.2423611095154783, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9838001731297923, log_density = 10.84901702402549, hamiltonian_energy = -7.770363805261034, hamiltonian_energy_error = -0.013540097299314269, max_hamiltonian_energy_error = -0.16138904633743856, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.750761625220676, hamiltonian_energy = -9.529190006949092, hamiltonian_energy_error = -0.12762624333403672, max_hamiltonian_energy_error = -0.18720479743135243, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8509315434147547, log_density = 11.513591397768739, hamiltonian_energy = -7.893529667136053, hamiltonian_energy_error = 0.17493737899770156, max_hamiltonian_energy_error = 0.35144023885353004, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9726533453662215, log_density = 8.957764581159466, hamiltonian_energy = -6.931699395135388, hamiltonian_energy_error = -0.15909780053437927, max_hamiltonian_energy_error = -0.16508844367943798, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9752833244516631, log_density = 10.637589691109863, hamiltonian_energy = -8.181534313355558, hamiltonian_energy_error = 0.054505040461805265, max_hamiltonian_energy_error = -0.14257904656642495, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7938493031042777, log_density = 8.85503437956076, hamiltonian_energy = -6.574225260845468, hamiltonian_energy_error = 0.36523895017340635, max_hamiltonian_energy_error = 0.4424654485196582, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9986665078284966, log_density = 11.847277016291049, hamiltonian_energy = -7.856137979313258, hamiltonian_energy_error = -0.4219998439374981, max_hamiltonian_energy_error = -0.6418970342262051, tree_depth = 2, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9970517124356962, log_density = 12.652438016932383, hamiltonian_energy = -10.934666897476355, hamiltonian_energy_error = -0.026226943931664692, max_hamiltonian_energy_error = -0.1089848693402331, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9333679909240832, log_density = 12.061719262648031, hamiltonian_energy = -9.203556663575618, hamiltonian_energy_error = 0.052420277368785406, max_hamiltonian_energy_error = 0.12074305629950466, tree_depth = 4, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9723455159219329, log_density = 12.595652569828909, hamiltonian_energy = -10.007982289869695, hamiltonian_energy_error = -0.08115648122493369, max_hamiltonian_energy_error = 0.08999212842878279, tree_depth = 3, numerical_error = false, step_size = 0.11141066524130372, nom_step_size = 0.11141066524130372, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other WrappedGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising WrappedGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#AbstractGP","page":"Internals","title":"AbstractGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP and CompositeGP implement the AbstractGPs.jl API. Please refer to the AbstractGPs.jl docs for more info on this.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#WrappedGP","page":"Internals","title":"WrappedGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a WrappedGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = wrap(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for WrappedGPs in terms of the AbstractGP that they wrap. So if you want a particular behaviour, just make sure that the AbstractGP that you wrap has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = wrap(GP(mf, kf), gpc)\ng = wrap(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = wrap(GP(mf, kf), GPC())\ng = wrap(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and GPs. We describe the implemented transformations below.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of WrappedGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = wrap(GP(SEKernel()), gpc)\nf2 = wrap(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"}]
}
