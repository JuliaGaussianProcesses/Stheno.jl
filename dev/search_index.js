var documenterSearchIndex = {"docs":
[{"location":"api/#Public-API","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Stheno","category":"page"},{"location":"api/#GPPP","page":"API","title":"GPPP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Core functionality for working with GPPPs.","category":"page"},{"location":"api/","page":"API","title":"API","text":"@gppp\nGPPPInput\nBlockData\nsplit","category":"page"},{"location":"api/#Stheno.@gppp","page":"API","title":"Stheno.@gppp","text":"@gppp(model_expression)\n\nConstruct a GaussianProcessProbabilisticProgramme (GPPP) from a code snippet.\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = GPPPInput(:f3, randn(5))\n\ny = rand(f(x, 0.1))\n\nlogpdf(f(x, 0.1), y) ≈ elbo(f(x, 0.1), y, f(x, 1e-9))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"api/#Stheno.GPPPInput","page":"API","title":"Stheno.GPPPInput","text":"GPPPInput(p, x::AbstractVector)\n\nAn collection of inputs for a GPPP. p indicates which process the vector x should be extracted from. The required type of p is determined by the type of the keys in the GPPP indexed.\n\njulia> x = [1.0, 1.5, 0.3];\n\njulia> v = GPPPInput(:a, x)\n3-element GPPPInput{Symbol, Float64, Vector{Float64}}:\n (:a, 1.0)\n (:a, 1.5)\n (:a, 0.3)\n\njulia> v isa AbstractVector{Tuple{Symbol, Float64}}\ntrue\n\njulia> v == map(x_ -> (:a, x_), x)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#Stheno.BlockData","page":"API","title":"Stheno.BlockData","text":"BlockData{T, TV<:AbstractVector{T}, TX<:AbstractVector{TV}} <: AbstractVector{T}\n\nA strictly ordered collection of AbstractVectors, representing a ragged array of data.\n\nVery useful when working with GPPPs. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\n# Specify a `BlockData` set that can be used to index into\n# the `f2` and `f3` processes in `f`.\nx = BlockData(\n    GPPPInput(:f2, randn(4)),\n    GPPPINput(:f3, randn(3)),\n)\n\n# Index into `f` at the input.\nf(x)\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.split","page":"API","title":"Base.split","text":"Base.split(x::BlockData, Y::AbstractVecOrMat)\n\nConvenience functionality to make working with the output of operations on GPPPs easier. Splits up the rows of Y according to the sizes of the data in x.\n\njulia> Y = vcat(randn(5, 3), randn(4, 3));\n\njulia> x = BlockData(randn(5), randn(4));\n\njulia> Y1, Y2 = split(x, Y);\n\njulia> Y1 == Y[1:5, :]\ntrue\n\njulia> Y2 == Y[6:end, :]\ntrue\n\nWorks with any BlockData, so blocks can e.g. be GPPPInputs. This is particularly helpful for working with the output from rand and marginals from a GPPP indexed at BlockData. For example\n\nf = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend\n\nx = BlockData(GPPPInput(:f2, randn(3)), GPPPInput(:f3, randn(4)))\ny = rand(f(x))\ny2, y3 = split(x, y)\n\nFunctionality also works with any AbstractVector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Building-GPPPs","page":"API","title":"Building GPPPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"If in doubt about what any of these transformations can do, play around with them!","category":"page"},{"location":"api/","page":"API","title":"API","text":"+\n*\nstretch\nperiodic\nshift\nselect","category":"page"},{"location":"api/#Base.:+","page":"API","title":"Base.:+","text":"+(fa::AbstractGP, fb::AbstractGP)\n\nProduces an AbstractGP f satisfying f(x) = fa(x) + fb(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.:*","page":"API","title":"Base.:*","text":"*(f, g::AbstractGP)\n\nProduce an AbstractGP h satisfying to h(x) = f(x) * g(x), for some deterministic function f.\n\nIf f isa Real, then h(x) = f * g(x).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.stretch","page":"API","title":"Stheno.stretch","text":"stretch(f::AbstractGP, l::Union{AbstractVecOrMat{<:Real}, Real})\n\nThis is the primary mechanism by which to introduce length scales to your programme.\n\nIf l isa Real or l isa AbstractMatrix{<:Real}, stretch(f, l)(x) == f(l * x) for any input x. In the l isa Real case, this is equivalent to scaling the length scale by 1 / l.\n\nl isa AbstractVector{<:Real} is equivalent to stretch(f, Diagonal(l)).\n\nEquivalent to f ∘ Stretch(l).\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.periodic","page":"API","title":"Stheno.periodic","text":"periodic(g::AbstractGP, f::Real)\n\nProduce an AbstractGP with period f.\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.shift","page":"API","title":"Stheno.shift","text":"shift(f::AbstractGP, a::Real)\nshift(f::AbstractGP, a::AbstractVector{<:Real})\n\nReturns the GP g given by g(x) = f(x - a)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stheno.select","page":"API","title":"Stheno.select","text":"select(f::AbstractGP, idx)\n\nSelect the dimensions of the input to f given by idx.\n\n\n\n\n\n","category":"function"},{"location":"input_types/#Input-Types","page":"Input Types","title":"Input Types","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Stheno enables the user to handle any type of input domain they wish and provides a common API that users must implement when considering a new way of representing input data to ensure that the package knows how to handle them appropriately.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"This interface has now been adopted throughout the JuliaGaussianProcesses ecosystem.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Discussed below is this interface's core assumptions, a detailed account of a couple of important concrete input types.","category":"page"},{"location":"input_types/#The-Central-Assumption","page":"Input Types","title":"The Central Assumption","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"The central assumption made in all user-facing and internal functions is this: when a collection of inputs are required, they subtype AbstractVector. For example, x isa AbstractVector when indexing into a GP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f(x, σ²)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"or computing the covariance matrix associated with a kernel:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"kernelmatrix(SqExponentialKernel(), x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When computing the cross-covariance matrix between two GPs","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"cov(f, g, x_f, x_g)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_f and x_g must be AbstractVectors. All other operations involving collections of inputs have the same restrictions. Always AbstractVectors.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"For example, this means that when handling multi-dimensional inputs stored in a Matrix they must be wrapped so that the package knows to treat them as a vector — more on this in below in D-dimensional Euclidean Spaces.","category":"page"},{"location":"input_types/#Dimensional-Euclidean-Space","page":"Input Types","title":"1-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"When constructing a GP whose domain is the real-line, for example when using a GP to solve some kind of time-series problem, it is sufficient to work with Vector{<:Real}s of inputs. As such, the following is completely valid:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"using Stheno: GPC\nf = wrap(GP(SqExponentialKernel()), GPC())\nx = randn(10)\nf(x)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"It is also possible to work with other AbstractArrays that represent a vector of 1-dimensional points, e.g.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = range(-5.0, 5.0; length=100)\nf(x)","category":"page"},{"location":"input_types/#D-Dimensional-Euclidean-Space","page":"Input Types","title":"D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Many applications of interest involve more than a single input-dimension, such as spatio-temporal modeling or Machine Learning tasks. For these cases, we provide ColVecs <: AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"X_data = randn(5, 100)\nX = ColVecs(X_data)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"tells Stheno that it should treat each column of X_data as a vector-valued input. Phrased differently, X is an AbstractVector{T} where T <: Vector{<:Real}, which stores its elements in memory as a dense matrix. This approach has the advantage of making it completely explicit how Stheno treats a matrix of data, and also simplifies quite a bit of the internal machinery, as all vectors of inputs can be assumed to be a subtype of AbstractVector.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If, on the other hand, each row of X_data corresponds to a vector-valued input, use RowVecs(X_data).","category":"page"},{"location":"input_types/#Structure-in-D-Dimensional-Euclidean-Space","page":"Input Types","title":"Structure in D-Dimensional Euclidean Space","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Consider a rectilinear grid of points in D-dimensional Euclidean space. Such grids of points can be represented in a more memory-efficient manner than can arbitrarily locate sets of points. Moreover, this structure can be exploited to accelerate inference for certain types of problems dramatically. Other such examples exist e.g., uniform grids in N-dimensions, and can be exploited to more efficiently represent input data and to accelerate inference.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"Work to exploit these kinds of structures is on-going at the time of writing and will be documented before merging.","category":"page"},{"location":"input_types/#GPPPInput-and-BlockData","page":"Input Types","title":"GPPPInput and BlockData","text":"","category":"section"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"A GPPPInput is a special kind of AbstractVector, specifically designed for GPPPs. Given a GPPP:","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"a GPPPInput like","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x_ = randn(5)\nx = GPPPInput(:f3, x_)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"applied to f","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"fx = f(x, 0.1)","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"constructs a FiniteGP comprising f3 at x_. GPPPInput(:f2, x_) and GPPPInput(:f1, x_) are the analogues for f1 and f2.","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"If you wish to refer to multiple processes in f at the same time, use a BlockData. For example","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"x = BlockData(GPPPInput(:f2, x_), GPPPInput(:f3, x_))","category":"page"},{"location":"input_types/","page":"Input Types","title":"Input Types","text":"would pull out a 10-dimensional FiniteGP, the first 5 dimensions being f2 at x_, the last 5 dimensions being f3 at x_.","category":"page"},{"location":"kernel_design/#Kernel-Design","page":"Kernel Design","title":"Kernel Design","text":"","category":"section"},{"location":"kernel_design/","page":"Kernel Design","title":"Kernel Design","text":"Please refer to KernelFunctions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"EditURL = \"https://github.com/JuliaGaussianProcesses/Stheno.jl/blob/master/examples/getting_started/script.jl\"","category":"page"},{"location":"examples/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"You are seeing the HTML output generated by Documenter.jl and Literate.jl from the Julia source file. The corresponding notebook can be viewed in nbviewer.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here we document how to do some basic stuff, including learning and inference in kernel parameters, with Stheno.jl. To do this, we that makes use of a variety of packages from the Julia ecosystem. In particular, we'll make use of","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl to perform Bayesian inference in our model parameters,\nOptim.jl for point-estimates of our model parameters,\nParameterHandling.jl to make it easy to work with our model's parameters, and to ensure that it plays nicely with Optim and AdvancedHMC,\nZygote.jl to compute gradients.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This guide assumes that you know roughly what's going on conceptually with GPs. If you're new to Gaussian processes, an excellent introduction can be found in either this video lecture or this one.","category":"page"},{"location":"examples/getting_started/#Exact-Inference-in-a-GP-in-2-Minutes","page":"Getting Started","title":"Exact Inference in a GP in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only a slightly more interesting version of the first example on the README. It's slightly more interesting in that we give the kernels some learnable parameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Import the packages we'll need for this bit of the demo.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AbstractGPs\nusing LinearAlgebra\nusing Stheno\nusing Plots","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"WARNING: Method definition rrule(typeof(Base.copysign), Number, Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/5iZFH/src/rulesets/Base/fastmath_able.jl:187 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition rrule(typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/5iZFH/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition frule(Any, typeof(Base.copysign), Number, Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/5iZFH/src/rulesets/Base/fastmath_able.jl:187 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition frule(Any, typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/5iZFH/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition rrule(typeof(Base.copysign), Number, Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/5iZFH/src/rulesets/Base/fastmath_able.jl:187 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition rrule(typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/5iZFH/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition frule(Any, typeof(Base.copysign), Number, Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/5iZFH/src/rulesets/Base/fastmath_able.jl:187 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition frule(Any, typeof(Base.Math.sincospi), Number) in module ChainRules at /home/runner/.julia/packages/ChainRules/5iZFH/src/rulesets/Base/fastmath_able.jl:53 overwritten on the same line (check for duplicate calls to `include`).\n  ** incremental compilation may be fatally broken for this module **\n\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Short length-scale and small variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l1 = 0.4\ns1 = 0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"0.2","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Long length-scale and larger variance.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"l2 = 5.0\ns2 = 1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"1.0","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Specify a GaussianProcessProbabilisticProgramme object, which is itself a GP built from other GPs.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f = @gppp let\n    f1 = s1 * stretch(GP(Matern52Kernel()), 1 / l1)\n    f2 = s2 * stretch(GP(SEKernel()), 1 / l2)\n    f3 = f1 + f2\nend;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Generate a sample from f3, one of the processes in f, at some random input locations. Add some iid observation noise, with zero-mean and variance 0.02.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"const x = GPPPInput(:f3, collect(range(-5.0, 5.0; length=100)));\nσ²_n = 0.02;\nfx = f(x, σ²_n);\nconst y = rand(fx);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Compute the log marginal likelihood of this observation, just because we can.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"logpdf(fx, y)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"19.462115231219187","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"fx should be thought of as \"f at x\", and is just as a multivariate Normal distribution, with zero mean and covariance matrix","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"heatmap(cov(f, x) + σ²_n * I)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As such samples can be drawn from it, and the log probability any particular value under it can be computed, in the same way that you would an MvNormal from Distributions.jl.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can visualise x and y with Plots.jl","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"plt = plot();\nscatter!(plt, x.x, y; color=:red, label=\"\");\ndisplay(plt)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"It's straightforward to compute the posterior over f:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior = posterior(fx, y);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_posterior is another GP, the posterior over f given noisy observations y at inputs x.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The plotting recipes from AbstractGPs.jl can be utilised to easily print whichever component of the GPPP is needed.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"x_plot = range(-7.0, 7.0; length=1000);\nxp = GPPPInput(:f3, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp);\n    ribbon_scale=3, label=\"\", color=:blue, fillalpha=0.2, linewidth=2,\n)\nplot!(\n    plt, x_plot, rand(f_posterior(xp, 1e-9), 10);\n    samples=10, markersize=1, alpha=0.3, label=\"\", color=:blue,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you've built a simple GP probabilistic programme, performed inference in it, and looked at the posterior. We've only looked at one component of it though – we could look at others. Consider f2:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"xp2 = GPPPInput(:f2, x_plot);\nplot!(\n    plt, x_plot, f_posterior(xp2);\n    ribbon_scale=3, label=\"\", color=:red, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior(xp2, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:red,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-NelderMead-in-2-Minutes","page":"Getting Started","title":"Fit a GP with NelderMead in 2 Minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Stheno.jl is slightly unusual in that it declines to provide a fit or train function. Why is this? In short, because there's really no need – the ecosystem now contains everything that is needed to easily do this yourself. By declining to insist on an interface, Stheno.jl is able to interact with a wide array of tools, that you can use in whichever way you please.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Optim requires that you provide an objective function with a single Vector{<:Real} parameter for most of its optimisers. We'll use ParameterHandling.jl to build one of these in a way that doesn't involve manually writing code to convert between a structured, human-readable, representation of our parameters (in a NamedTuple) and a Vector{Float64}.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"First, we'll put the model from before into a function:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function build_model(θ::NamedTuple)\n    return @gppp let\n        f1 = θ.s1 * stretch(GP(SEKernel()), 1 / θ.l1)\n        f2 = θ.s2 * stretch(GP(SEKernel()), 1 / θ.l2)\n        f3 = f1 + f2\n    end\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"build_model (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've assumed that the parameters will be provided as a NamedTuple, so let's build one and check that the model can be constructed:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\n\nθ = (\n    # Short length-scale and small variance.\n    l1 = positive(0.4),\n    s1 = positive(0.2),\n\n    # Long length-scale and larger variance.\n    l2 = positive(5.0),\n    s2 = positive(1.0),\n\n    # Observation noise variance -- we'll be learning this as well.\n    s_noise = positive(0.1),\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(l1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-0.9162907691270586, Bijectors.Exp{0}(), 1.4901161193847656e-8), s1 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.6094379869399091, Bijectors.Exp{0}(), 1.4901161193847656e-8), l2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(1.6094379094538682, Bijectors.Exp{0}(), 1.4901161193847656e-8), s2 = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-1.490116130486996e-8, Bijectors.Exp{0}(), 1.4901161193847656e-8), s_noise = ParameterHandling.Positive{Float64, Bijectors.Exp{0}, Float64}(-2.3025852420056685, Bijectors.Exp{0}(), 1.4901161193847656e-8))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We've used ParameterHandling.jls positive constraint to ensure that all of the parameters remain positive during optimisation. Note that there's no magic here, and Optim knows nothing about positive. Rather, ParameterHandling knows how to make sure that Optim will optimise the log of the parameters which we want to be positive.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can make this happen with the following:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using ParameterHandling\nusing ParameterHandling: value, flatten\n\nθ_flat_init, unflatten = flatten(θ);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Concrete types used for clarity only.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"unpack = value ∘ unflatten;","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now easily define a function which accepts the flat form of the parameters, and return the negative log marginal likelihood (nlml) of the parameters θ:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"function nlml(θ::NamedTuple)\n    f = build_model(θ)\n    return -logpdf(f(x, θ.s_noise + 1e-6), y)\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"nlml (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can use any gradient-free optimisation technique from Optim.jl to find the parameters whose negative log marginal likelihood is locally minimal:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Optim\nresults = Optim.optimize(\n    nlml ∘ unpack,\n    θ_flat_init + randn(length(θ_flat_init)),\n    NelderMead(),\n)\nθ_opt = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that we just added some noise to the initial values to make the optimisation more interesting.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"We can now use this to construct the posterior GP and look at the posterior in comparison to the true posterior with the known hyperparameters","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_opt = build_model(θ_opt);\nf_posterior_opt = posterior(f_opt(x, θ_opt.s_noise), y);\nms_opt = marginals(f_posterior_opt(xp));\nplot!(\n    plt, x_plot, mean.(ms_opt);\n    ribbon=3std.(ms_opt), label=\"\", color=:green, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_opt(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:green,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Of course, the exact posterior has not been recovered because the exact hyperparameters cannot be expected to be recovered given a finite amount of data over a finite width window.","category":"page"},{"location":"examples/getting_started/#Fit-a-GP-with-BFGS-in-2-minutes","page":"Getting Started","title":"Fit a GP with BFGS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"The BFGS algorithm is generally the preferred choice when optimising the hyperparameters of fairly simple GPs. It requires access to the gradient of our nlml function, which can be straightforwardly obtained via reverse-mode algorithmic differentiation, which is provided by Zygote.jl:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Zygote: gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This will probably take a while to get going as Zygote needs to compile.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"results = Optim.optimize(\n    nlml ∘ unpack,\n    θ->gradient(nlml ∘ unpack, θ)[1],\n    θ_flat_init + 0.1 * randn(length(θ_flat_init)),\n    BFGS(),\n    Optim.Options(\n        show_trace=true,\n    );\n    inplace=false,\n)\nθ_bfgs = unpack(results.minimizer);","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Iter     Function value   Gradient norm \n     0     1.113920e+01     3.155082e+01\n * time: 0.02388310432434082\n     1    -4.255980e+00     2.505775e+01\n * time: 1.5093419551849365\n     2    -9.652844e+00     2.204797e+01\n * time: 1.5268139839172363\n     3    -1.260341e+01     2.010571e+01\n * time: 1.5382170677185059\n     4    -1.908553e+01     8.942825e+00\n * time: 1.549562931060791\n     5    -1.976092e+01     5.683760e+00\n * time: 1.5608420372009277\n     6    -2.073000e+01     2.183854e+00\n * time: 1.5720269680023193\n     7    -2.092382e+01     6.032173e-01\n * time: 1.583172082901001\n     8    -2.094199e+01     8.266003e-02\n * time: 1.59450101852417\n     9    -2.094234e+01     1.042586e-02\n * time: 1.632901906967163\n    10    -2.094234e+01     7.377336e-03\n * time: 1.6444830894470215\n    11    -2.094234e+01     1.193309e-03\n * time: 1.6557669639587402\n    12    -2.094234e+01     1.099915e-05\n * time: 1.6670489311218262\n    13    -2.094234e+01     6.550408e-08\n * time: 1.6837410926818848\n    14    -2.094234e+01     2.002958e-10\n * time: 1.700627088546753\n","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Once more visualising the results:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"f_bfgs = build_model(θ_bfgs);\nf_posterior_bfgs = posterior(f_bfgs(x, θ_bfgs.s_noise), y);\nms_bfgs = marginals(f_posterior_bfgs(xp));\nplot!(\n    plt, x_plot, mean.(ms_bfgs);\n    ribbon=3std.(ms_bfgs), label=\"\", color=:orange, fillalpha=0.2, linewidth=2,\n);\nplot!(\n    plt, x_plot, rand(f_posterior_bfgs(xp, 1e-9), 10);\n    alpha=0.3, label=\"\", color=:orange,\n);\nplt","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Notice that the two optimisers produce (almost) indistinguishable results.","category":"page"},{"location":"examples/getting_started/#Inference-with-NUTS-in-2-minutes","page":"Getting Started","title":"Inference with NUTS in 2 minutes","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"AdvancedHMC.jl provides a state-of-the-art implementation of the No-U-Turns sampler, which we can use to perform approximate Bayesian inference in the hyperparameters of the GP. This is slightly longer than the previous examples, but it's all set up associated with AdvancedHMC, which is literally a copy-paste from that package's README:","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdvancedHMC, Zygote","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define the log marginal joint density function and its gradient","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"ℓπ(θ_flat) = -nlml(unpack(θ_flat)) - 0.5 * sum(abs2, θ_flat)\nfunction ∂ℓπ∂θ(θ_flat)\n    lml, back = Zygote.pullback(ℓπ, θ_flat)\n    ∂θ_flat = first(back(1.0))\n    return lml, ∂θ_flat\nend","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"∂ℓπ∂θ (generic function with 1 method)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Sampling parameter settings","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"n_samples, n_adapts = 500, 20","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(500, 20)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perturb the initialisation a little bit.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"θ0_flat = θ_flat_init + 0.1 * randn(length(θ_flat_init))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"5-element Vector{Float64}:\n -1.071659349448826\n -1.5550083716507732\n  1.7180814936460116\n -0.07858973007245683\n -2.2606155386817792","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Define metric space, Hamiltonian, sampling method and adaptor","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"metric = DiagEuclideanMetric(5)\nh = Hamiltonian(metric, ℓπ, ∂ℓπ∂θ)\nint = Leapfrog(find_good_eps(h, θ0_flat))\nprop = NUTS{MultinomialTS, GeneralisedNoUTurn}(int)\nadaptor = StanHMCAdaptor(n_adapts, Preconditioner(metric), NesterovDualAveraging(0.8, int.ϵ))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"StanHMCAdaptor(\n    pc=WelfordVar,\n    ssa=NesterovDualAveraging(γ=0.05, t_0=10.0, κ=0.75, δ=0.8, state.ϵ=0.4),\n    init_buffer=75, term_buffer=50, window_size=25,\n    state=window(76, -30), window_splits()\n)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Perform inference.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"samples, stats = sample(h, prop, θ0_flat, n_samples, adaptor, n_adapts; progress=true)","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"([[-1.071659349448826, -1.5550083716507732, 1.7180814936460116, -0.07858973007245683, -2.2606155386817792], [-1.071659349448826, -1.5550083716507732, 1.7180814936460116, -0.07858973007245683, -2.2606155386817792], [-0.8665488205102592, -1.5096872953118952, 1.7088486353480832, -0.18990128607192638, -2.9144704395681877], [-0.5968794373657538, -1.5905203281774452, 1.6352775911808355, -0.16306291374608867, -3.5711087498130047], [-0.8943577994665803, -1.4371732263895864, 1.5813253432365864, -0.0027638133515723723, -3.5946155605537813], [-1.0557222844938898, -1.529222271256719, 1.3671675200428757, -0.4171790705538391, -3.9537230697354233], [-0.422944112558213, -0.5967928815549293, 0.9676003512639257, -0.15409500660029615, -3.644416876920566], [-1.0056752954822912, -1.4987738060615379, 1.3471717217907841, 0.015222916063945602, -3.737786199688804], [-1.0125705983266904, -1.4104769961128385, 1.3323269399071884, -0.13276569862675328, -3.9228531248861374], [-0.9703696433320113, -1.5449037270473487, 0.9720829617611937, 0.7240571202906592, -3.786575532601975], [-0.695402991715345, -0.8496840590627136, 1.7142244328011935, -0.2242776641138351, -3.835701754635105], [-0.8355122830841513, -1.4279463420994922, 0.30463411456935563, 0.27180904655865595, -3.886339371175847], [-0.814218407428199, -1.0830559981760632, 1.1533409947771178, 0.09088604932735049, -3.7525294345527165], [-0.6828249001282927, -0.9137969555294032, 0.9358952779811812, 0.09987519717131021, -3.616933532306222], [-0.6343261059454707, -0.9758660584246347, 0.934502025128257, 0.06363209908362377, -3.6781890861082127], [-0.7544989929570446, -1.0682515711473095, 0.7303504898452244, 0.14040035518478364, -4.011919387241474], [-0.688932585903055, -1.2549363307924908, 1.6122147712160324, -0.35542609150433924, -3.6238377441548573], [-0.6092831581445558, -1.0711720047121458, 1.536567310339559, -0.05427399475008646, -3.816873642974458], [-0.8787262880825886, -1.4736485727691668, 1.2856973771079858, 0.33982663829621357, -3.899063899963275], [-0.9306787551144672, -1.5390541194392693, 1.2273043979226783, 0.17417810255276514, -4.160337038358681], [-0.4773190589853027, -1.2034432147010323, 1.810266518643805, 0.26258169552491056, -3.3054013559149937], [-1.0034165250704188, -1.039177456594915, 1.7912836823124065, -0.21390125014433267, -4.165161211301256], [-0.654171877055904, -1.0466577048508952, 1.6756659014365904, 0.403218114478016, -3.4939015980840287], [-0.800716806044893, -1.170374667383082, 0.8248518930683264, 0.33908348622560974, -3.8330774483912156], [-0.9819675568891746, -1.498267294384657, 0.5331387367409545, 0.3610286808100471, -3.7138833904241713], [-0.8675197332658767, -1.6738855431327337, 0.7135798193410301, 0.3699189592972081, -3.769692352729238], [-1.0269937551527282, -1.3770586751355023, 0.49647431840517947, 0.10856734444256941, -3.5363930260131182], [-0.4040953991940066, -1.1198545909569266, 1.6447331015931703, -0.0934750860566996, -3.612975495070679], [-0.5877920126303584, -0.7377435574563647, 1.044281864310543, 0.7541036958855081, -3.9559165670861107], [-0.7840479056424229, -1.296012364051594, 1.5406003050300716, -0.5870222462176866, -4.053461747307933], [-0.8969922898127513, -1.4049870093407226, 1.22995548394905, -0.1845971042234547, -3.559241052920297], [-0.7740330655616814, -1.1657874018894143, 1.5272696754833828, 0.505841260209076, -4.020950062218415], [-0.5936786131978576, -1.086505143073491, 1.7365661271780912, 0.37835464238626354, -3.3782468504214904], [-0.9876030771576446, -1.3454825742084247, 1.0387262960035502, 0.2506369093378463, -4.1905734094825915], [-0.7610928438387285, -1.2704867586849358, 2.071176082685145, 0.777158360099205, -3.396735087328363], [-0.8672459928659906, -1.4965358046283908, 2.003862222248641, 0.7609386931743288, -3.4567651972184716], [-1.0329540451616686, -1.4807713148121973, 1.7777088268833874, 0.8479618774719625, -4.118410831605658], [-0.9538803851770588, -1.7922753542939487, 1.6774528247074088, 1.015911325711918, -4.3611386098018885], [-1.2229139436010499, -1.3516623803223382, 1.9374773451310814, 0.5680707280213426, -3.8642691391031123], [-0.5952029084362616, -1.2403530547921473, 1.464986581772624, 0.9673557645244298, -3.9945627631863507], [-0.8480710164566634, -1.3337263286609837, 1.5703727959578526, -0.27527603580604465, -4.010949630722772], [-1.0186996713517307, -0.9340440362956968, 1.5519816558732034, 1.0953294218279837, -3.8216960581832935], [-0.5358405924137376, -1.0834013933171953, 1.7486987345356126, 0.2850868200935997, -3.7986930979008275], [-0.5516448492636974, -1.049747691921863, 1.6028639620504503, 0.20147811057456527, -3.884800135735108], [-0.7062335736095443, -1.2108776892216648, 0.738763137489716, -0.1573666894944244, -3.8761448016916717], [-0.7358668946965802, -1.159741383678032, 1.2633001586074724, -0.032290260901679545, -3.4257303784741606], [-0.6127543163635883, -1.1928184847350134, 1.180289616640913, -0.09166016320301629, -3.511526656818243], [-0.7275406235570602, -0.9502696747198616, 1.6115447994515122, 0.44937489577121437, -3.9357773958226345], [-0.7514438251728259, -1.3372122416571275, 0.8003930910658557, -0.2124748715436343, -3.6517366792003885], [-0.7496138839543707, -1.4042761694938655, 0.7847482264500605, -0.23708892383038088, -3.504991918817562], [-1.3116428807054705, -1.793124814325653, 0.6677641757092652, 0.19833772539473613, -4.042086862123055], [-0.4073721909506512, -0.4023095339887015, 1.0741930636960657, -0.10045364228687279, -3.962713917573862], [-0.5273630566258544, -0.6371251426818367, 1.69272079735979, 0.2509993174356833, -3.859618400527973], [-0.8361144233954175, -1.1499875224469984, 1.5465839102068675, 0.7905980276282543, -3.5528625854621274], [-0.7653376990724943, -1.4128399307822828, 1.1062015039266635, 0.2370967138185631, -3.9978213022626266], [-0.4634566171200438, -0.7180681218752336, 0.8206438323094494, -0.16115467454549748, -3.8297001126710732], [-0.9398779770932404, -1.5009696044943157, 1.1600235489407797, -0.13942435234767125, -3.9381629985749105], [-0.7681228774384832, -1.1740612193623685, 0.9792664197246419, 0.6658234640099214, -3.797199275804759], [-0.680460685426991, -1.1092855710762308, 1.0489286330041525, 0.4396390536841699, -3.797562347701726], [-0.9983009380467729, -1.4064131059821379, 1.00811624758049, -0.07718407367782915, -4.071895381158904], [-0.859991726429552, -1.4397312743565591, 0.6625766964876535, 0.03979840285877073, -3.9055838153226916], [-0.9909207847705265, -1.1883830776069355, 1.5039463853785993, -0.2038787553360818, -3.813164500562821], [-0.6967736107098552, -1.0817696551735898, 1.5712783794051493, 0.8298220024259036, -3.6499476373501913], [-0.5560338657644271, -0.9979701192792404, 1.5188349088416762, 0.8558812967186906, -3.6079629007342993], [-0.4967779580603287, -0.8298210113058234, 1.4452459845042436, 1.0295377584960819, -3.826204820889152], [-0.626181409505438, -0.8183011963001151, 1.218228779681542, 0.9614878061451285, -3.8480110711693722], [-0.6416359258401838, -0.9053676370160815, 1.022656017850612, 0.7201926978287188, -3.6996362520774144], [-0.5600265381476874, -0.8805668643388166, 1.0567077028329463, 0.06662018682426071, -3.992768188647559], [-0.6117781593750674, -0.8069095295414154, 1.1577599267617638, 0.22663852786942262, -3.787125976871984], [-0.8934681760140284, -1.432942098191363, 0.5568793510145973, -0.24193522008027496, -3.7698228126277096], [-0.9126804304737871, -1.907694271373362, 0.545236074189708, -0.09155326415266198, -3.7896964516172704], [-1.1140117286771827, -1.3497055250116072, 0.4685843294461819, -0.2523830319881547, -3.5890553805921046], [-0.9269930906421511, -1.6433331861759368, 0.29008709063137816, -0.3265463858519224, -3.654349553891595], [-0.9603765653911238, -1.1323079644552656, 1.5974096365282826, 0.5829693327656346, -3.7978681056268546], [-0.8914044009957315, -1.2467863421039382, 1.540740436519991, -0.24220424847987554, -3.7688665224205202], [-0.8033705987753398, -1.051946391434225, 1.2587529109431652, 0.16639700829760845, -3.809688285192868], [-0.6396405937281533, -0.8767886868809663, 1.867443828840935, 0.9351594634343494, -3.748502902374228], [-0.9724453876176334, -1.6811386118036258, 1.704359344397615, 0.5228883234933077, -3.929310532572356], [-0.8640090664898441, -1.1311686969686692, 1.8335658292371368, 0.18537088988134098, -3.695910170446575], [-0.7614320294773511, -1.1517321603304704, 1.7458451195382458, 0.2130296085387281, -3.7870527157673943], [-0.7196132284254751, -1.275984421898366, 1.8031803116937986, 0.25086659845703835, -3.8525821923730517], [-0.7868056563759014, -1.3361456298256504, 0.35200001150013466, -0.16053229822113307, -4.046462768057746], [-0.8722140570977484, -1.1855705485458663, 0.4187252355908351, -0.2895624078141226, -3.7935310331707957], [-0.6431387081591218, -1.1801892505516796, 0.667838663545546, -0.13111018507356448, -3.7672662852376804], [-0.6059644071823443, -0.9550681104582598, 1.265914516327739, -0.3708247428422125, -3.7394739841386317], [-0.9690449023381567, -1.4765559948079652, 1.1848872259654946, 0.6651646321393516, -3.6717095972489964], [-0.6995089795977463, -1.0925147385343066, 0.5990078863897789, -0.5745784555170672, -3.6504347267235793], [-0.6309181241387088, -1.1197616045189975, 0.6523209954021285, -0.47123051998359516, -3.644521885188737], [-0.7363359456510828, -1.0082125814159397, 1.6752897308509727, 0.10687733279661477, -3.8978385164373304], [-0.7520739699415976, -1.4950380539494241, 1.5018390846966292, 0.3150049194807427, -3.7319134351034], [-0.7130976216271822, -1.207067020501711, 0.7501734877436511, -0.16110998408013322, -3.804651999025658], [-0.8713235210904934, -1.3714235434993836, 0.44050004707668067, -0.3697697017864613, -3.8481088879783214], [-1.0203001577138902, -1.4755195396807572, 1.0217723657092108, -0.4985954775529992, -4.018613524354063], [-0.5370229412383125, -0.6440893020975075, 1.4934731680403204, 0.4258448310511107, -4.024889357365824], [-1.3126452365690118, -1.4545079964638732, 1.098097140448485, -0.03991508750747699, -4.0698380719425735], [-0.9609713858816353, -1.5336034630045023, 1.6233041233992063, 0.15771570868902324, -3.7218555140455387], [-0.3444772302069364, -0.8044721659977146, 0.6589265025696416, -0.13430952482509068, -3.6700537760054113], [-0.4276685976835373, -0.6840300147388834, 0.5913326239757596, 0.0033782335415886294, -3.7121950563493384], [-0.567967332670327, -0.9388229843251048, 0.8218389246444514, 0.011101258633548588, -3.567193591798343], [-0.8282377499281748, -1.2410006445760935, 1.6173757447197141, 0.029194450186977437, -3.9962590358699304], [-0.8904640530241946, -1.3078922210985553, 1.7183342946656264, 0.006506302091812084, -3.743342658887377], [-0.8183559531432694, -1.470517042940104, 1.1500590578514671, 0.08729623192263121, -3.917107701310514], [-0.6192634284627, -1.1794365966595852, 1.8029130684501116, 0.5794519132385737, -3.8187787559903237], [-0.6946593648771833, -0.8659772397842036, 1.1494019910166038, -0.2615878555844167, -3.8801588913552294], [-0.5126989300446145, -0.7988636012377741, 0.9754019955057738, -0.05558563335297799, -3.8911052404991704], [-0.5102568619952467, -0.9368079243821739, 0.9195036327780048, -0.1468632108607085, -3.793385748415217], [-0.6275953624148101, -0.7485258558542242, 1.0392117103712561, -0.19643607933656532, -3.948971487118495], [-0.8772961218896168, -1.4150362707726691, 0.8801364581049018, -0.11177004088486037, -3.6601565929129114], [-0.6995351215570429, -1.1465073734380349, 0.8691868449499466, 0.12379810975532152, -3.976163152090358], [-0.6345797791133402, -1.0917664954806352, 0.7455020480796964, -0.020205532172707763, -3.8156092685516763], [-0.8567190925600366, -1.4720416582929488, 1.5762667243045718, 0.9923957427937837, -3.8305240595281815], [-0.7743887375467111, -1.1220736297853422, 2.0845876608954987, 0.07610088459746292, -3.8021911875251546], [-0.6821711603979714, -1.020512074100458, 1.7441742887162455, 0.1767361068244669, -3.974902346211374], [-0.5376385137361841, -0.9147452217922234, 0.7332276720841051, 0.874889596215245, -3.6522739518272687], [-0.6942712645395297, -1.2296868316087213, 0.5912235652199267, 0.1491856319242032, -3.702902059289117], [-0.9086494561778052, -1.0938767363687227, 1.03974105966001, -0.0005878612560236696, -3.7840718666775666], [-0.6414772697528238, -1.1947127887076077, 0.8094255825274372, 0.06227256725752924, -3.71917858673457], [-0.8220199971865112, -1.225593111525011, 1.5417415336793336, -0.19992023202618872, -3.6959811600645165], [-0.7840992934038938, -1.300582482333836, 1.5721783180504985, 0.37893788753939917, -3.8570784391663584], [-0.6712167332844856, -1.2355189178058406, 1.3582750181562224, 0.07869813798716783, -3.742808091509461], [-0.9111934345288267, -1.371314167076592, 1.4199757397239825, 0.21825047782765933, -3.7014108783238595], [-0.7329268021659289, -1.1153074481258876, 1.175243726520715, 0.20252505528526082, -4.163581829726415], [-0.7246214601818699, -1.2971322714163678, 1.199409282176847, 0.3715372347164406, -3.8918636060749514], [-0.9004968424986107, -1.389955594217842, 1.1436720511464988, 0.26574399015655276, -4.0257742998243735], [-0.7307552081644442, -1.086864882345864, 1.9773480224802873, -0.3153965716719867, -3.5949540762266343], [-0.5291584220973198, -0.8767056917595148, 0.8515537747516071, 0.46740274283622824, -3.6842519777756384], [-0.6698393572139274, -0.8299858956966797, 0.8788750821220062, 0.5606355874414142, -3.749182805180528], [-0.8407232578849118, -1.3050443830656764, 0.6532176811189211, 0.005134827230194788, -3.8129319653326204], [-0.7390967411233211, -1.4098945409338783, 1.1611204650797238, -0.14957391828613995, -3.596877196992093], [-0.6188759619428966, -0.9179476370059734, 1.168838003320643, -0.08511760658789584, -3.7785634336148326], [-0.5369569811012209, -1.0184761705570917, 1.3466284989729724, -0.49838725937607353, -3.800076059737486], [-0.5968905634302614, -1.036430200325366, 1.5750160285100205, -0.45198530425813616, -3.621972913656017], [-0.6887326682916406, -0.8544527108626646, 1.2508321367340813, -0.43809298518291834, -3.981526362561662], [-0.8274337668635303, -1.4784437626504883, 1.1947489443348418, 0.6191414454797276, -3.9770145086135265], [-0.9089342131290389, -1.326361217092136, 0.8493712365062989, -0.03654160586725497, -3.639442137503664], [-1.0188162337351367, -1.2584267636894966, 0.8535915505235498, -0.12979821420658605, -3.6018262917220194], [-0.652264517937189, -1.1842727586260984, 1.016295893771405, -0.08642734608486721, -4.115194375569767], [-0.7459775638723862, -1.1711126082547763, 1.0344334117300886, 0.03350381920931962, -4.024760521326237], [-0.5946341707342905, -1.1678737294838804, 1.197402676436547, -0.0950453330190265, -3.5749676594094564], [-0.9590500260071219, -1.316292363931796, 1.2358862197419926, -0.16374269362422525, -3.9491392644712353], [-0.7735076313762588, -1.273643839794916, 1.4208252527099952, 0.37751128128979283, -3.6633800828782435], [-0.6526617213995166, -1.3410372880711499, 0.9152010115997735, 0.05585763990188075, -3.9196158947488935], [-0.6388829837331647, -1.1564608281202282, 0.7978400844101526, 0.0760379161775042, -3.7322636095719695], [-0.6523372848568204, -0.8182175692732709, 1.6835892437915223, 0.29917793590853653, -3.6976580444726985], [-0.8226095654336629, -0.9939335968891073, 1.3747745645296288, -0.20942425395292497, -3.8509635736606294], [-0.6421772158625255, -1.1571546544918743, 1.1735740195412026, -0.5087426597678424, -3.7191228753001218], [-0.8224339119087349, -0.9059988767578284, 1.3562974194470525, 0.07772198970623892, -3.852129262679128], [-0.5751484873684757, -1.2082523021295923, 1.5765001983858975, 0.1667754988988686, -3.716100674955608], [-0.6674646928171614, -1.0582828808454814, 1.030215262240033, 0.09292732971161163, -3.663482663734258], [-0.8738421213221101, -1.749368019870775, 1.0666195516004446, 0.00786402663938679, -3.7403399627230773], [-1.0508113452811778, -1.2931990120955918, 0.7106910677683345, -0.1321708948433024, -3.7769037276170927], [-0.8077991006682355, -1.2016578683380232, 0.9527731556722594, 0.4173371967997167, -3.8036764806883734], [-0.6983868405507883, -1.210998828654755, 0.635941532487766, -0.24586626632693734, -3.843947384440802], [-0.6540684421912809, -1.1872523966925963, 0.5141986042257968, -0.20502675656792776, -3.980082375552613], [-0.6476954067839902, -1.072337674250388, 1.79340639239891, 0.10962253450069584, -3.672204135432255], [-0.6976596391365246, -1.2777548557883212, 0.9917581251000457, 0.18729169160498646, -3.7399376480649598], [-0.6406230530100591, -0.6871461530222428, 0.852232524523017, -0.45085573391026995, -3.8608015918981313], [-0.8004866551068843, -1.4719166269879287, 1.0508534520507702, -0.00264200256074526, -3.37177517702463], [-0.8545456199127128, -1.3614070744690423, 0.8279012082584326, -0.40330854960127077, -4.233694731177677], [-0.8409645927914619, -1.1501821746041723, 1.8075536530034468, 0.32889485134998236, -4.076001651754139], [-0.4313476701766521, -0.7196394943390553, 0.7703322319964316, -0.7443495334612367, -3.7898796042860865], [-0.6450454443404747, -0.7533904746289016, 0.6716776351707403, -0.5419283420807376, -3.60365941466613], [-0.9433290998971361, -1.387286733372576, 1.7545260538216265, 0.09830169987834847, -3.4868286892669937], [-1.0293666702409494, -1.5869683660403995, 1.2661369121721797, 0.38364359630129263, -3.9556823625222934], [-0.7757139945055485, -1.002637063426041, 1.3118340599305165, 0.6224325244726303, -3.62310011352127], [-0.7386503101083403, -1.3332829464953349, 1.2779601322160117, -0.31429970647364724, -4.0763619242267115], [-0.7331302712238458, -0.9409219928987176, 0.9565253666359379, 0.23744469537874752, -4.025650233087048], [-0.4536788278792866, -0.8548596817188848, 1.3365538264954289, -0.22969784362981494, -3.5270391894481423], [-0.5606777985625552, -0.6146607563254969, 1.1350339233230056, 0.47318472865572053, -4.149125637745494], [-0.6155347297736569, -0.7561774569070212, 1.10416304661299, 0.3754624879359591, -4.010909211608112], [-0.8576295784660093, -1.5474408850861059, 1.4045134713525378, 0.4323930308816014, -3.740682756545785], [-0.8136323401227173, -0.98307948999095, 1.5858786724810485, 0.1861395963824773, -3.804693697244168], [-0.9030974178184894, -1.2077377721107507, 0.4782801496081497, 0.26594367903756105, -3.7679456187369875], [-0.560805984081762, -1.0446147383777837, 1.3749701553944538, -0.4752330835189343, -3.7936038903836233], [-0.7688893412775949, -1.1547819041298297, 1.474369025277916, -0.5911607030669441, -3.853719419483725], [-0.6683754445494743, -1.2852085671849824, 0.9648020830972377, -0.06483018359777101, -3.7982571201051067], [-0.8972740177303345, -1.2792737445719513, 0.7327791451259781, 0.057063919878640096, -3.3989298563599086], [-1.0068728832416403, -1.7191270454484242, 0.5320924992984402, -0.029397810843370176, -4.108006254132406], [-0.6569605341507126, -0.7442702693087865, 1.3614735986569992, -0.239986868868667, -3.944281350047404], [-0.8832361842462015, -1.4674291529609091, 0.11615497859763232, -0.13556671363260345, -3.866507140167219], [-0.7922680321301396, -1.1658229606748858, 0.6063591465853072, -0.6192829253054576, -3.9993916420738405], [-0.5925636879919953, -0.8470593054194467, 0.7736373899710747, 0.32276858303921435, -3.8947499568751605], [-0.6526236739367526, -1.0495455823410869, 1.4296601879427748, 0.13132844652568615, -3.697799803941644], [-0.6401553735252767, -0.9957211203543821, 1.3852048773043624, 0.17007757369713944, -3.6650128146560648], [-0.6131995297823193, -0.9358329911937129, 1.3723149766996525, 0.047116367042179155, -3.6897120286671767], [-1.1002035401353893, -1.6609985908058797, 1.3448787720626343, 0.1980514386687027, -3.937975178874547], [-0.6952812196418644, -0.7208583369341319, 1.9979822848126423, 0.9520102841418605, -3.7545060978680778], [-0.34291139319487546, -0.6417912828630798, 2.1239573017122835, 0.8332493703592802, -3.7633470306693515], [-0.34686098198982507, -0.7973161954312694, 1.5235997765016978, 0.2768801027491903, -3.758123104082522], [-0.7157537626520517, -0.8354843294556057, 1.4296981541218634, 0.22454358468511684, -3.624055487430811], [-0.8815195408244713, -1.1366751056208364, 1.3099482248956777, -0.3101952465877444, -3.6259174329966424], [-0.595469035185599, -1.075239774034006, 0.8029354319078525, -0.03798972916974083, -3.8689592330169247], [-0.8974209204522405, -1.1875808405262056, 1.3615061536732653, 0.18551866887387983, -3.7644730938401936], [-0.5736224833016932, -1.2358180466310111, 1.3313209648885604, 0.2259042912736931, -3.607269945483073], [-0.9143581034500641, -1.2825532491633815, 1.323329546786517, 0.08663771668180334, -3.618925335960334], [-0.5504647898956098, -1.1481885240214313, 1.233070683272278, -0.13565560536087748, -3.939804401820483], [-0.5154630803279497, -1.172486317499815, 1.2038814860362268, -0.13558957706956914, -3.9454681281632746], [-1.09827395125846, -1.4764379741458646, 1.3899957558956824, -0.3895301360162025, -3.6997029717011345], [-0.7905170787710845, -1.6316528107618706, 1.3612204962582386, -0.3930480491878532, -3.8421395006192953], [-0.6608770775198007, -1.1928325427383444, 0.15286242912957287, 0.24974086963391678, -3.866979881802384], [-0.42364724058979636, -0.5729369171984379, 0.9683447529091669, -0.7965754715786224, -3.810198854483438], [-0.5269510683961184, -0.8871186183242552, 1.8796682326637042, -0.045834220139399806, -3.7068595185170126], [-0.7539170520053463, -1.0720180766498775, 1.748462853968178, 0.2857018205761316, -3.867237211029981], [-1.016202934530926, -1.414243259594532, 0.9301510006846782, 0.20904121497826283, -3.826881667463782], [-0.9418689413875363, -1.7420795114329006, 1.0550848792658294, 0.024780444105170427, -3.9207726538504097], [-0.8673081454102204, -1.2367863206375262, 0.9657371858730838, -0.045814924999184437, -3.587928684033455], [-0.8492314035416698, -1.236809361886552, 0.9012607238859435, 0.036296776008625395, -3.9236298412947517], [-0.9075896425370034, -1.1850783711386705, 0.9196264172532905, -0.15530711219610066, -3.7444175940250632], [-0.5993885591081676, -1.1292871366858077, 0.9124816224566675, 0.29251040356914537, -3.799936234789912], [-0.799575275966889, -1.3166953495031481, 1.606637176414201, 0.11593396302430346, -3.756034539984987], [-0.8812696553625888, -1.2832089759805416, 1.2171288647360539, -0.022405687949989126, -3.780667128023228], [-0.924306979300452, -1.2343663676704515, 1.2188430138153612, -0.04795872711235879, -3.730735473165402], [-0.7385686813441957, -1.3474768049518484, 1.2809566928989409, -0.32407151680396895, -3.8582513928664186], [-1.1634336341749083, -1.5990524841327136, 1.119689274705001, -0.4646582143669047, -3.876927796892678], [-1.1094176675746235, -1.6689883976507027, 1.1333722410049758, -0.03806368989146017, -3.7175225096857423], [-0.829125409062242, -1.3796575300118668, 1.011758999424757, -0.40086579454658766, -3.716676282829538], [-0.542033416544087, -1.0825982493871547, 1.5424654019632829, 0.6370431182969591, -3.7606452258234446], [-0.836998796170609, -0.954054620652696, 1.6049720254597553, -0.26946876225976163, -3.763671122541211], [-0.7997371781328686, -1.7143242188251033, 0.8010259583947633, 0.10662473524490337, -3.858333788279186], [-1.0490401496515473, -0.9889149243101959, 0.965598244577763, -0.020063938466487796, -3.6389830115257493], [-0.8793040659907951, -0.6027277044185787, 1.2001250106371169, 0.016396727754020426, -3.681363998071376], [-1.0185580991076852, -0.8678054457607, 0.6267407585795899, 0.08847046027602323, -3.7418393091581432], [-0.4252665755094689, -1.1813138535325975, 1.2159145669592943, -0.5022769087504316, -3.6034319004956386], [-0.5938610247903899, -1.1120422128803789, 1.0814269456911512, -0.4302092891891573, -3.64879071989433], [-1.1777785217810322, -1.4867671836843532, 1.6996868563427296, 0.9222323464869279, -3.667745171754824], [-0.46956297731285646, -0.4131214745196578, 0.9954418254229995, -0.46152066793849855, -3.601601900254771], [-0.44648572603700254, -0.2717083522860755, 0.9731740433847397, -0.19240463461824903, -3.751914577517541], [-0.26793631059284667, -0.15914132701048522, 0.7887824085723545, -0.26498715499638686, -3.5000962474932242], [-0.4759785810389545, -0.8009967003289784, 0.9548155604140374, -0.339109093534717, -4.03516709150193], [-0.5216228490175808, -0.8701116619141184, 1.0404659023025264, -0.5110709635367776, -3.977191274884503], [-0.8381087666093954, -1.1218068896640487, 2.11145152329517, 1.537816049498905, -3.9516274520190757], [-0.7242936798643673, -1.171870696965943, 2.029787558581907, 1.1953759650942175, -3.570573069954445], [-0.6352729812380109, -1.0697550730074894, 2.480314742672058, 1.0297677834427164, -3.873120440844241], [-1.0184346489427945, -1.3725200586912567, 0.24758902488260653, -0.49636230820890903, -3.852438023892378], [-0.7549332295805293, -1.7478514796014726, 0.4367928526633841, -0.1330944428584639, -3.5824778762414313], [-0.3222790512895158, -0.6980361163287891, 1.3284222130608763, 0.04638226961939545, -3.7192046905778016], [-0.4258850903843062, -0.5410961814725039, 1.265865779528282, 0.1049579327755239, -3.725808543033178], [-1.0586482111285744, -1.610168169521644, 1.0071717048851865, -0.25221578964588964, -3.581415702436728], [-1.063831024856722, -1.264476976438735, 0.7447518062735812, -0.006264057060526865, -3.7003969760834177], [-0.701223938104165, -1.2645889213014663, 0.5783955802546229, -0.16472622116550892, -3.749342265961668], [-0.6560982421644842, -1.0144576652285406, 0.47944554615089646, -0.13355446755816977, -3.4826796741496917], [-0.5627767996129257, -1.1981148010652203, 0.4101166383197507, -0.41812060713759736, -3.9158828457430115], [-0.5576628832151136, -1.0304403315744481, 1.5110888062786736, 0.13821637829432087, -3.9056846890198225], [-0.7417422475104847, -0.7850992471929753, 1.5062704379434793, 0.060041466609467936, -3.972489212014044], [-0.7158570354016871, -1.36723172086602, 1.2163771555553606, 0.28915521680098355, -3.528415752414918], [-0.9219351111935862, -1.4455340152370217, 0.984912121828828, 0.19354826907569758, -4.110519357241048], [-0.7733177890929528, -1.0837166088311256, 0.8847701459212466, 0.008691991616818384, -3.5038368520207164], [-1.0911887668803124, -1.2205364652571773, 1.8841602459512197, 0.6211311812095102, -3.6814683686424816], [-0.9897854356289476, -1.3938549234730715, 1.142290177984853, 0.1251421103118362, -3.824875218398208], [-0.8332966673797927, -1.51537293403154, 1.3826601299897512, 0.2682249007899321, -3.8322532776161924], [-1.1716125029632247, -1.4965119684108918, 1.5712894381644118, -0.5562014488502869, -3.936963748645727], [-0.5674819421426721, -1.2734312351959272, 1.141997601495485, -0.23093439660159315, -3.6236131499759545], [-0.8208089033402717, -1.073349303411797, 1.1099989084905793, -0.06134039605198974, -3.516510813530679], [-0.7055700595158014, -1.4304902831673094, 1.3978605159944641, 0.590149339125492, -3.603947796949587], [-1.0121244956842066, -1.588337524101346, 1.3931586999602272, 0.17191737992210895, -3.850124849144147], [-0.5858576808848006, -0.9975551294324705, 0.8838601721914985, -0.3533144712300506, -3.8805012662492957], [-0.6848283496200448, -0.7859119675207954, 0.5294598561898564, -0.37270990547472044, -4.043057498070249], [-0.6394069161213457, -1.0303198680649834, 0.7868760662854664, -0.08115614048474276, -3.7002248064381575], [-1.0956992026278038, -1.7010632026226948, 1.1686741411889205, -0.43103082026765904, -3.9259857063382855], [-0.9160541882069118, -1.603718289373391, 1.1406921101257446, -0.25386152901276854, -3.8314835485508842], [-0.9315234698026791, -1.56949159745709, 0.9649505528217388, -0.15424280348367161, -3.5428420212686245], [-0.7106322579141896, -0.8878417296131258, 0.5722664426340058, 0.3146347459102722, -4.064085145386272], [-0.7017272460200674, -1.1801541508432343, 1.605250842195249, 1.3513699090571252, -4.0182426216587865], [-0.5739602763318314, -1.0808197957784464, 1.7912709911623017, 0.7603899455628322, -3.627458420750884], [-0.7291141566930601, -0.9871799555186695, 0.8649552203983204, -0.4262674204257157, -3.9899280835105566], [-0.6246116159192661, -1.0653316406823108, 0.7887487777032824, -0.5406914468706858, -3.9424711055744726], [-0.7567389553598922, -0.9675605546482015, 0.8129826439727018, -0.6112790805649637, -3.7386781293616513], [-0.6008837273011254, -1.2828734842780967, 1.945668227212065, 0.4470290427998934, -3.630916243836589], [-0.7262718252331469, -1.3538679242143623, 0.7195564270016724, -0.4802084743112982, -3.773440117493162], [-0.7563359336993976, -1.057671994287898, 0.0835459898995058, 0.09911927850467973, -3.7687113795212612], [-0.6600593744457736, -0.9562723324646608, 0.32063852188782044, -0.13921754320381816, -3.6684383809075998], [-0.6982175193104379, -1.0660227888664315, 0.1543973060663105, -0.49988681470201385, -3.8818493966704497], [-0.5465739757317257, -0.9274474180580426, 1.9255695312141135, 0.3909219770321639, -3.6540553216615264], [-0.7255918195890687, -1.5300337720526895, 1.5237043550090614, 0.5297259588176908, -3.996036754759681], [-0.7101884165814666, -0.9169776092514129, 1.275992344871762, 0.8971338361143417, -3.6530105220827345], [-0.39303411229121804, -1.1127801460127136, 1.4047394567963114, 1.0552985386782552, -3.732968945882092], [-0.4730463528978608, -0.7650197497690983, 1.5074261549653925, -0.42596400326056283, -3.679226332289985], [-0.6764119325677532, -0.6292092405165667, 1.3490561322666688, 0.22055684654118027, -4.1145152258505515], [-0.5707677801940086, -0.6459344692852722, 1.2896649760359682, 0.14853943184101848, -4.087426523700722], [-0.5643147987053203, -0.6980240722265219, 1.7019131091154418, 0.3014775496859686, -3.883149531758333], [-0.5304157837635428, -0.537068509159652, 1.9498237137086796, -0.2475376821604166, -3.7985203040200153], [-0.45218737342118237, -0.7969665202001376, 1.4223030519853794, -0.18665611557305878, -3.6193429991400716], [-0.6965295891695186, -0.8973144871690811, 1.7889877800512486, -0.498520988308267, -3.863564398871728], [-0.47210305088332793, -0.8893493356181669, 1.429504621018003, -0.10574645117642337, -3.786261703704014], [-0.5720524943855139, -0.6105004903252957, 0.4658158276769404, 0.6522763879966224, -3.800429379326], [-0.5577679485893333, -0.5012067748033957, 1.7282941192152241, 0.13063426545826748, -3.590374037408516], [-0.7599270018625738, -1.4225319200164215, 1.335092256401959, 0.3976718471262964, -3.942895216224883], [-0.7924023742875472, -1.1131009448171763, 1.566828599020684, 0.6740010378054302, -3.685124059690885], [-0.6379732937415558, -1.3988303043896757, 1.3480534271150353, -0.1819446292240292, -3.8965557574817358], [-0.8355279393894927, -1.3209748030785062, 1.3230597614483208, -0.10734084521141818, -3.891062819821793], [-0.8354057452050563, -1.399819021149297, 1.6383516302703562, -0.16967264416139913, -3.6628575832190267], [-0.9686706190611453, -1.3965743364710694, 1.5188438217549376, -0.19417110062428822, -4.047615336882231], [-0.5462523273587938, -0.9657860583588332, 1.4825417059872787, 0.7043874030046807, -3.738913328438267], [-0.5967402251404221, -1.0979961591499856, 1.5340520928664156, 0.6215058642437804, -3.8591785143276], [-0.5150173150372722, -0.9531131144886069, 1.9103805436062236, 0.7161554132322787, -3.5446364969597517], [-0.6183307171735402, -0.7372526213594117, 2.26249621543936, 0.5080258233615385, -4.005786931890926], [-0.5381315340887063, -0.787957792118765, 1.058872528550548, -0.25410679513125023, -3.551072210331193], [-0.6667637930542252, -1.0340950470812078, 0.9122665527972454, 0.07574227194621756, -3.9869156436682327], [-0.8141691195610563, -1.3499083290205194, 1.3314681276419074, 0.21763280762342266, -3.712608995087632], [-0.7446214053018699, -1.3498436005364491, 0.8080472925082495, 0.002484946378539646, -3.9056060258653558], [-0.8700146194966225, -1.3238143334372847, 0.9905875078578856, 0.13650993032609732, -3.509556459684192], [-0.736762964862109, -1.3820083737958484, 1.1053231317811236, 0.68401480497313, -3.828354760761484], [-0.9182786553045298, -1.3188359412435289, 1.1896637179705, 0.673150168413047, -3.7294969479003406], [-0.6055149383606739, -1.0446490314375532, 1.8006023220709686, 0.8561924538613018, -3.8615779907759307], [-0.8219818563256701, -1.6452803287671904, 1.6924356791775514, 0.504254642314008, -3.6280118164312998], [-1.1034443375217335, -1.5104790134493675, 1.6540588853197622, 0.0765163618177772, -3.6955259874550443], [-0.7616586585190671, -1.4932155360186148, 1.5068417119310549, 0.43788668727547947, -3.679301371308856], [-0.5801396497667419, -0.7103146061862627, 1.6375200923937052, 0.5134754972335268, -3.700773153099353], [-0.6453033980740036, -1.0674906487966567, 1.567764554389675, 0.547162696924671, -3.692623036157888], [-0.7910601242244452, -1.1108514913915042, 0.9730726579051941, 0.039648699659325104, -3.596349911641534], [-0.907344629454974, -1.0843225274412533, 0.8916129723226912, 0.014142341098024376, -3.6750173123127956], [-0.4907369775618927, -1.1243204542725993, 0.3026111129974599, -0.2159341688697578, -4.055171012413405], [-0.6691167640211698, -0.9620193328858345, 0.3691022973896285, -0.10470114462117253, -4.000672843000329], [-0.533361603064075, -1.008104481344608, 0.7450316169226489, 0.002464719363072909, -3.5391972282270774], [-1.1494839539302315, -1.4397342458636224, 1.5130952578740298, 0.07277034191761012, -3.5315400407806363], [-1.073371600619512, -1.2251704502580167, 1.281786173008149, -0.18499120486275078, -3.707935215970992], [-0.6318277637940792, -1.258514627131194, 0.8354306331004728, -0.12769051669476045, -3.7369068513810006], [-0.7720889121582593, -1.1357068669264854, 0.7041541075485163, 0.17523734585923473, -3.7764666686012456], [-0.9434812793818189, -1.3273130657848045, 0.8043396502486224, -0.39361218119567926, -3.824076217330891], [-0.9784475996402751, -1.3125580766170164, 0.7928640333889223, -0.43907735325799535, -3.7704499843185437], [-0.6481062526705872, -1.0981378196660754, 1.9895872609837015, 0.8162438738485807, -3.6953459091560887], [-0.5757550447626962, -0.9010445396921192, 1.2541375734437097, 0.439262913848007, -3.7935816285101946], [-0.6999260246094373, -1.139943363974942, 1.6679614618076248, 0.0302256793144529, -3.7793633325791265], [-0.8733503170096618, -1.3562806638617706, 0.8491637193740341, -0.05172859983201408, -3.8808560194695914], [-0.6318018703193938, -1.4208637850670263, 0.49411156132797235, -0.015590852381754098, -4.055799049088467], [-0.614010651435251, -1.249767026480531, 0.4277321821696666, 0.10632027815842701, -3.9709875329470075], [-1.2865901504721926, -1.403879547818439, 1.2230652837344542, 0.14399566973280134, -3.5607766696430083], [-0.7784956486736943, -1.1233689770154345, 0.5677604002440286, -0.5673100680384017, -3.9111846769799037], [-0.731764944332731, -1.228963223168727, 1.1130878802131785, -0.14009266903993295, -3.695556357255083], [-0.5042603629930056, -1.0778477268878777, 1.6053215501327567, -0.12718543705852917, -3.9364423364007552], [-0.740513809721559, -1.1052736318696925, 2.0084632195772842, 0.13188988563553797, -3.924771195766212], [-0.7084477534039133, -0.8915321594677388, 1.5898703138909838, -0.23011592694726923, -3.840143541318838], [-0.5667506285303291, -0.645599071568208, 1.5002779588840882, 0.13972441945041647, -3.775168771948076], [-0.7082663265729843, -1.0438201669680032, 1.219209229914836, 0.04890086375832882, -3.7595123531780805], [-0.7598056595315272, -1.3335195043926538, 1.0590131024500093, -0.22425397288301557, -3.8774971817792556], [-0.9124827566506302, -1.0438041340974964, 1.5014925251821587, 0.3730749567888074, -3.7847022872150826], [-0.4297660682896201, -1.1518289493510792, 0.6925487591002335, -0.011763362408806502, -3.76991389399616], [-0.4038983488475424, -1.2548280452395215, 0.6823993042307721, -0.07701770804366363, -3.7675612686844784], [-0.6439217895969408, -1.2506642910202679, 0.6773252332838507, -0.13141223155146498, -3.598397478984718], [-0.7662405897468096, -1.1462056410133767, 1.8439610277222858, 0.25942994687491966, -3.650054317137299], [-0.6412820647813944, -1.127871431537502, 2.05065710962756, 0.17375518356662784, -3.7050465941466353], [-0.8035107863746701, -1.5781650540008247, 0.991199977044549, 0.5899946495116977, -3.818674807200963], [-0.6610813993170986, -0.7238692968237181, 1.2423027259933752, -0.4270355917961256, -3.7203224445966856], [-0.6834086425946241, -0.7618944541279665, 1.1792921530240348, -0.42558489083553297, -3.8988455396606443], [-0.4408616249346211, -0.538595520986295, 1.4584782042728184, -0.030454563605372145, -3.6975912440529544], [-0.536294886738666, -0.6161397875097603, 1.4292862803247843, 0.3056991899475854, -3.61188157576982], [-0.7640094883160911, -1.2499311104555209, 1.9200384158385706, 1.1029861681495996, -3.7180442230131567], [-0.675003500363533, -1.101600302148992, 2.006614030756955, 0.8944970611498848, -3.782042417078303], [-1.0089426028080668, -1.3012852276997378, 1.8826879963930088, 0.9046337376497807, -3.715391035825256], [-0.8221990987364405, -1.6490647921528383, 1.923135674701634, 0.9366616830185989, -3.7707061730411606], [-0.7711158953004325, -1.1943862061353117, 1.7845398628719271, 0.8730789442388993, -3.632934954068968], [-1.105178202962284, -1.755474324126495, 2.15715062372641, 1.0411828109347736, -4.04267390593105], [-0.7239323493483829, -1.0649534865696513, 1.5819380339940006, 0.720609622250659, -3.7262050075775925], [-0.513956218509801, -1.094061018448092, 1.45422052684196, 0.8123269817296904, -3.281955012293781], [-0.4726895393940853, -1.2656472719636878, 1.529892747109967, 0.8012029143786645, -3.3926805064511467], [-0.7223774504494935, -0.9440075423030285, 1.788317003989101, 0.7940354747735705, -3.553559792525644], [-0.5549224090284616, -0.8922602256657587, 1.7624461141929466, 0.8109213830817169, -3.7022324534943705], [-0.8535754007062425, -1.2162105256580988, 2.121016174048777, 0.539272509952674, -4.170297371831333], [-0.6633121898193355, -1.3466595731248223, 1.2028407423053162, 0.2965229519878365, -3.430484283781524], [-0.7712242625081054, -1.291446850655855, 1.578822366781603, 0.011702946867120173, -3.7382700539648073], [-0.7458070408646134, -1.1522348849511244, 1.7044112731885301, -0.02322493033343206, -3.755163727671285], [-0.7580064284728976, -1.240413528708637, 1.4942193662970011, -0.17449077774652302, -3.9445306091028978], [-0.8084214192150174, -1.3172925138056673, 1.0967276862055342, 0.1987209515511047, -3.982293244569051], [-1.0603551194241372, -1.635317536108988, 1.4195363520030506, 0.10152911319700879, -3.484443895899275], [-0.6837460582957379, -1.1930106591808707, 1.1399059447657416, 0.5964098066254019, -3.993523853897423], [-0.7161558011884552, -1.0970613186853841, 1.2760713506892107, 0.5943755774181871, -3.8917070960983913], [-0.45526575256966595, -0.986745013340673, 0.9277215758178161, -0.014615688365909707, -3.742991994467874], [-0.42207414904389223, -0.8779280901601987, 0.9290811461034398, -0.5489467485541647, -3.638238321490131], [-0.6617699941714066, -0.7331537752825549, 1.1767710417073474, -0.30794904315017707, -3.8134023966023296], [-0.446759697945843, -0.44408015567952197, 1.0702430289806246, 0.11059140255901767, -3.5304844048462916], [-0.6708997045122799, -0.8531160031624243, 1.3171593977815492, -0.2484630004659829, -3.9698277583292056], [-0.7166496640818081, -1.0991360530944247, 0.9946885869829508, -0.20231067834887148, -3.6025970750063996], [-0.71800778350964, -1.3482421840479792, 1.3258763546928642, 0.290360162951829, -3.6340899694140965], [-0.9925673909164114, -1.4413120297235513, 1.502189846651572, 0.2930323701683221, -3.8253735106950963], [-0.8330885562036284, -1.4105152452297498, 1.7662413715902074, 0.16164033565586938, -3.769860868411374], [-0.5364726392614628, -0.7756917718597655, 0.7593087457218666, 0.42716616939619234, -3.8658748920775503], [-0.7467611475475306, -0.7904456115300658, 0.33526049883641257, -0.6598156451069387, -3.728698759981659], [-0.8497223652623331, -0.9062230521726022, 0.24797772128753842, -0.7104698775097864, -3.6622418722510104], [-0.8101647922503493, -1.1614844922035374, 0.8049430906722981, 0.33090943668675715, -3.8956080706113236], [-0.6929709182975502, -1.2493941782847784, 0.9307743673575372, -0.29747678304767655, -3.9150725710963377], [-0.6939210761280334, -1.2834404205365877, 0.9482464158676996, -0.29915954729036937, -3.8887959930765987], [-0.41963651286284054, -1.3170447249286659, 1.0391284678337194, -0.15521573384221465, -3.722174851032318], [-0.7778406391828729, -1.2603348930040579, 1.1279923651206993, -0.10721524195807874, -3.60537500262247], [-0.8099619162978923, -1.3987761986731297, 1.4071338410791712, -0.31458211600159536, -3.7744955146164543], [-0.7023476407629898, -1.0269813272843684, 1.1941845822584771, -0.06734629875489558, -3.8352234981695195], [-0.6773264389472939, -1.0464580107404409, 1.4908549247842453, 0.16576043949295388, -3.7316145485080363], [-0.8101174485576161, -1.4052357808759688, 1.9251593141221341, 0.8444238580044103, -3.716121055289251], [-0.8200581614581113, -1.2663277412905363, 2.0134095243611627, 1.627644952709975, -3.8241199942053896], [-0.7290460183513272, -1.6312865155498792, 1.7473763500599828, 0.2759237036454889, -3.6918975392084654], [-1.0118453704055461, -1.1812278052787846, 1.4914943894197359, -0.1696331652982483, -3.8708433747097013], [-0.8230663551641676, -1.6309322697896664, 0.8631883311373928, -0.5655509682273039, -3.86573279888702], [-0.3617774255280365, -0.5269625418220895, 1.5493621622623923, 0.17406514816089894, -3.8308054316179962], [-0.9762320654077333, -1.8183727174053603, 0.9511645511460932, 0.20849393306233288, -3.9063751843485646], [-0.9587791601217455, -1.21979670000324, 1.2275061478771387, 0.4047018604014911, -3.712507175977111], [-0.9998984997936036, -1.5961633761399256, 0.9590537399012269, 0.23202311322207775, -3.839582308339121], [-0.7848324159429549, -1.6064694733669918, 1.142615191744246, 0.29855635939771324, -3.5516508564697578], [-0.7305982024127358, -0.7814384614348674, 1.3941498494011022, -0.056473289362310664, -4.026146248636472], [-0.6786598365238304, -0.8876932048896528, 1.1063169417940821, -0.43833617187666823, -3.7105465908794324], [-0.5974072835544114, -1.0594342953840408, 1.54911648884489, -0.4830909542701093, -3.850062062045197], [-0.7979367905256045, -1.4212512643947284, 0.3116196531099409, 0.5279142978523046, -3.9482313551069455], [-0.7069287408046954, -0.9909420239622676, 0.7809349517352844, 0.504447947824229, -3.5932091759717557], [-0.600993515454537, -0.9432562358569444, 0.8459328470511309, 0.32762885380248197, -3.7807094329912756], [-0.6587155562462329, -1.152362761390048, 1.2120355815310828, 0.41885110088224914, -3.73644771940564], [-0.9505828471982489, -1.6473564903034257, 1.158955206551075, 0.46497802701051516, -3.6804811974288394], [-0.6284912235786256, -0.943697263993588, 1.9921459736730915, 1.1967101921202457, -3.873956082778358], [-0.5359614434204183, -0.716311105806144, 1.8476867799333043, 1.1740243640553023, -3.7054848442993924], [-0.7823870101755899, -1.6305181562582858, 2.298416612918495, 1.3054097486244407, -3.7259110984238655], [-0.8212740059610195, -1.0647745374944186, 2.1614974407853564, 0.8851726672392165, -3.968824267138043], [-0.5299553454674666, -1.0642383944724225, 1.845267136544095, 0.35196821681121476, -3.648462239210773], [-1.082512337263207, -1.6025764260969033, 0.9511946220026113, -0.46621515923001783, -3.981280768574516], [-0.42061922754583814, -0.9478561242663205, 1.1926877457619203, -0.26082601004322686, -3.9762135793227453], [-1.2628277594583501, -1.7117567672858989, 1.2433359497065246, 0.06471657154927798, -3.568896994885322], [-1.2071315889817178, -1.568563689764366, 1.324649530023408, 0.19183395100333814, -3.8131527090790773], [-0.7607058684255678, -1.3015010084825924, 1.4887312255591791, 0.25663999064487636, -4.122811095551415], [-0.86545347683077, -1.3021479670406937, 1.3386607828347585, 0.23523143692746085, -3.7922464760267403], [-0.715796305367969, -1.0543677091187467, 0.834929939723046, 0.2229494555820701, -3.9844480662455593], [-0.8487868295993323, -1.119491485593667, 0.7543659887454118, 0.0601172355936693, -3.7788105360617243], [-0.42986683700590744, -0.8538150116848995, 0.8225474220294318, -0.017057933856613357, -3.8228508776368435], [-0.5704460037932858, -1.0785474541065072, 1.2039319607098027, 0.5527190337859372, -3.7423605032824967], [-0.7311975453094839, -1.4127057175743085, 1.8688835489639881, 0.3585792869667521, -3.961770202501263], [-0.608103373770144, -1.3016985737294837, 1.880274478416485, 0.4818421946548739, -3.739580807791153], [-0.9002873710636186, -1.1737631240802482, 1.7655436067331962, 0.9593062318738867, -3.9147541272681194], [-0.7656632325875947, -1.4795383003732718, 2.153178897255193, 0.9341858813792139, -3.591676698758015], [-0.6726894406431638, -1.0089921859955628, 1.1375997338341934, 0.3124410043501872, -3.5522304723718108], [-0.533313966397746, -0.8838024614625931, 1.182045733735305, 0.2059111968071812, -3.832769913673494], [-0.6042153722139276, -0.7070797987917274, 1.3841296767712603, 0.18160825240005302, -3.67243466883826], [-0.47219709707050117, -0.784043531124284, 1.169129274292067, 0.23554989982885094, -3.8140538772940182], [-0.7400159656804682, -1.120438286889141, 1.4561205923071618, 0.19107919406210117, -3.8344896487135314], [-1.2082869675682102, -1.0525542956807896, 1.4531736653252842, 0.29440207082601527, -3.5615748955417343], [-0.796611648120328, -1.39062370949017, 2.1030941671203434, 1.176829869907978, -3.864288087749033], [-0.44824422643364514, -0.7892200644239652, 1.4048577748885258, 0.030152786609260934, -3.666631368376402], [-1.0007999056428019, -1.4587417033823398, 1.3605600708159056, 0.5354029186796231, -3.8921785667608875], [-0.8919223406639559, -1.165142843940031, 1.2570979518687868, 0.06999468909198289, -3.7818582733956205], [-0.852704216768882, -0.955193097359975, 1.2306033185525993, -0.0936378122956737, -3.659683169512683], [-0.661210879429319, -1.3115657801343812, 1.0558842888828568, -0.623244001660409, -3.73115896488464], [-0.6370200529988749, -1.211164870096912, 1.9437413834115698, 1.322170945030743, -3.7695385764375735], [-0.7452436345078598, -1.0391035343217654, 1.548177809779785, 1.010187704876666, -3.629648608411407], [-0.9448462041967133, -1.3160581454130387, 1.5435145378995838, -0.2867505047572804, -3.6920762024317835], [-0.5900084577895061, -1.159147339044966, 1.1314655704167076, -0.6876960059113408, -3.80175592757085], [-1.0900922426776787, -1.0346048719531413, 1.3043403046984836, -0.7325999220544922, -4.078881756839307], [-0.9324346897167812, -0.9597679384669415, 1.542362134792189, -0.3242136998199926, -4.1179030094356674], [-0.7377159323688761, -1.4368342512676047, 0.44415416949755354, -0.048274667344005595, -3.149301582065865], [-0.8730076495164559, -1.4482531888951542, 0.41494258636679915, -0.18061978059811215, -3.402232502018783], [-0.8694567965222544, -1.3909259428680236, 1.1813350811980299, -0.07489714846035808, -4.071889716014656], [-0.8921287416410324, -1.4267444614993738, 1.4328030789690283, 0.12103331878707907, -3.889856064691768], [-0.641781661548667, -1.1253928956717218, 0.29107625924934205, -0.2670524477050428, -3.911243500052377], [-0.8237251257345999, -1.207196824520436, 1.8157756778505973, 0.6404894080096718, -3.890670044629108], [-0.622723573211833, -0.7387309623178162, 0.5452183919047782, 0.18875407144054113, -3.4806250107896886], [-0.298926110538863, -0.47274795283130466, 0.9060472173631516, 0.49123877343809885, -3.7075835455660333], [-0.4526951574280574, -0.8072232151466187, 1.2914619426217446, 0.05123038136668663, -3.9066457738228904], [-0.39673922128535416, -0.8364203718014636, 1.3410237419135194, -0.03662299486993924, -3.49880153075954], [-0.7311536630083368, -1.2286153572102536, 0.38679757194675846, 0.00369698223002473, -3.4676787364109787], [-0.7026345508207475, -1.3372665685042084, 0.5844015688015454, 0.15421879144998357, -3.6395289288573487], [-0.8111324956970879, -1.1878219164026704, 0.4816854863469901, -0.09413004781634958, -3.7856416392228605], [-1.0526501660932746, -1.7365469921546877, 0.2049583035943995, -0.2997442927044445, -3.809346020664766], [-0.48153389544189845, -0.7344230182758961, 2.236428525000576, 0.6284346859224162, -3.7024978034483573], [-0.40061644930957624, -0.24657205794301756, 1.9685615713416706, 0.6025501042247351, -4.066609198584977], [-0.3787305296746968, -0.10166443602503528, 1.5560742508041443, 0.027299342587462472, -3.6550406053473097], [-0.6368014021343572, -0.8456808090033459, 1.324086798930908, -0.9126475302517809, -3.8807320343408573], [-0.832391049089559, -1.497702615604906, 1.1768724867106892, 1.0145415145304992, -3.932961527735393], [-1.1184518581430587, -1.5211280529476465, 1.0160843930737764, 0.8928541421951658, -3.7461304334052947], [-0.9092392105967648, -1.822343248952594, 0.5622353605382269, 0.7210244016610581, -3.737790375898133], [-0.35175429728324153, -1.1474214759654366, 0.9686499777919552, -0.7320834138838579, -3.742824054860825], [-0.8336219004937404, -1.0766663462867778, 0.8552312677143935, -0.7030820090169042, -3.8149595006071486], [-0.7900675419679829, -1.3157038323626458, 1.0370094735584447, 0.5713701824269551, -3.9327965130868154], [-0.4627894650913379, -1.2276812436868045, 0.9709318059756877, 0.21900781971344443, -3.678667542868415], [-1.1486458069285677, -1.5481339823649107, 1.2202180782177234, -0.1475904963313472, -3.910193490757027], [-0.9786288787234839, -1.4789043574870093, 1.701502916027495, 0.04544924801341754, -3.7495611697366265], [-0.8277734752977562, -1.1943146847704909, 1.6405425172387365, 0.10939599479980405, -3.838289004058262], [-0.8454528283547158, -0.9362583392924332, 1.3239736669502866, 0.23920508455671438, -3.857183845911304], [-0.7037291080627334, -1.068182312200356, 2.0052924920437656, 0.01878075807132149, -3.7126147731552206], [-0.6707488070585966, -1.0892476210750024, 1.6464008909524794, 0.17752686874464313, -3.94757831168616], [-1.0040343923933925, -1.6185006530496093, 1.892669400183706, 0.7610545926221288, -3.663640661121293], [-0.756443053442806, -1.5445205980254721, 1.7844523063501088, 0.6329328029881981, -3.6939204276345756], [-0.8525491654686623, -1.5912292617469779, 1.9719724264172815, 0.4168634481278132, -3.6414454205064666], [-0.9589190850326246, -1.441464830286305, 1.8856916108881119, 0.41295032067619947, -3.461230300892389], [-0.8370051704719511, -1.412571436332524, 1.71103184595216, 0.8612146940373326, -4.157271223631163], [-0.9268511868157007, -1.3446940465346722, 2.1507217289100318, 1.0560996764247468, -3.345039540577999], [-0.7343287671087522, -1.3337114810315382, 2.056423405047075, 1.1564128195409131, -4.1120999114790004], [-0.5541079645354651, -1.0719389292443264, 1.8370251349948938, 1.2684788634090527, -3.4963866362748193], [-0.5396202524505362, -1.0723894256793685, 1.8035962926150741, 1.0931502482246735, -4.090212841347113], [-0.7751290814368096, -0.8129645701017532, 2.0240949462462776, 1.1445383423800881, -3.7290190794264517], [-0.667426499493659, -1.3251016187319966, 1.20305480391336, 0.33596813377277224, -3.8098549467835006], [-0.8321994140161387, -1.0103053123484138, 1.3950435724995212, 0.3576104559973765, -4.020932276474847], [-0.6911317346699446, -1.3821504162685456, 1.2063382399908407, 0.28395496456262403, -3.571911203758123], [-0.7629564775014311, -1.432716963721557, 1.2483037736173042, 0.1275901458729831, -3.823772205818293], [-0.8003549208305266, -1.1848359183542445, 1.541011800493801, 0.003094605145092258, -3.7634944392863274], [-0.633014464077474, -1.3466310131002928, 1.6888702541035854, 0.039516439382243945, -3.7070576465908553], [-0.9954051507831081, -1.316099434528038, 1.4733886033307533, 0.28535776795030815, -3.7868239365642147], [-0.6001750168872234, -1.409643348449194, 1.4369843962460944, -0.12124134418917096, -3.7424760336512786], [-1.1744683370657532, -1.3838548384231246, 1.3807851963363296, 0.2554375275368232, -3.90848679829577], [-0.7682956418081861, -0.796894634794431, 1.1386189399942133, -0.27576535571811756, -3.7108724479102015], [-0.38550802396310485, -0.8593217545686214, 1.0751522529445046, -0.1468611424272338, -3.9832049883270386], [-0.8528134928531875, -1.562000410347918, 0.9774345989048583, 0.19496257819221569, -3.8894836278317215], [-0.6794639183417339, -1.4514543298080564, 0.930504155009613, -0.25372604645348706, -3.750181154399092], [-0.7334809142014788, -1.5115219336957544, 0.951427042373979, -0.31817105471569246, -3.600748894137756], [-1.135459194839612, -1.4797798392834989, 0.6898119022508761, -0.8303198650874526, -4.010466609149199], [-0.795344126693399, -1.461074785452649, 0.7953685046249478, -0.6542701689275436, -3.887240192420543], [-0.7161162048297255, -1.3458028473697534, 0.7818670280425222, -0.5904406999284509, -3.839931470245426], [-0.8405885443831352, -1.2279261977794078, 1.03557164722663, 0.19177573615222243, -3.6797772753078695]], NamedTuple[(n_steps = 1, is_accept = true, acceptance_rate = 1.75838454439266e-179, log_density = -19.934805182913102, hamiltonian_energy = 23.865816746237996, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 411.5983361308912, tree_depth = 1, numerical_error = false, step_size = 0.4, nom_step_size = 0.4, is_adapt = true), (n_steps = 1, is_accept = true, acceptance_rate = 0.0, log_density = -19.934805182913102, hamiltonian_energy = 22.961099122794884, hamiltonian_energy_error = 0.0, max_hamiltonian_energy_error = 7.401767517110593e9, tree_depth = 0, numerical_error = true, step_size = 0.9340259163636535, nom_step_size = 0.9340259163636535, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = -2.060876947658917, hamiltonian_energy = 20.729315825057604, hamiltonian_energy_error = -0.5673975884828621, max_hamiltonian_energy_error = -0.5673975884828621, tree_depth = 2, numerical_error = false, step_size = 0.09209433883419865, nom_step_size = 0.09209433883419865, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.9822284166220178, log_density = 6.219154412502775, hamiltonian_energy = 4.306425689776873, hamiltonian_energy_error = -0.37226477592736273, max_hamiltonian_energy_error = -0.37226477592736273, tree_depth = 2, numerical_error = false, step_size = 0.09591656221537206, nom_step_size = 0.09591656221537206, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 9.716392646689643, hamiltonian_energy = -6.236953659671521, hamiltonian_energy_error = -0.614865732870304, max_hamiltonian_energy_error = -0.7497664968144315, tree_depth = 3, numerical_error = false, step_size = 0.1233100923764434, nom_step_size = 0.1233100923764434, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.7278467664630162, log_density = 8.456646493910691, hamiltonian_energy = -4.48728011983426, hamiltonian_energy_error = 0.030618078349376354, max_hamiltonian_energy_error = 1.3928589534952494, tree_depth = 2, numerical_error = false, step_size = 0.1924124115861204, nom_step_size = 0.1924124115861204, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9441103011891541, log_density = 8.77829812591936, hamiltonian_energy = -6.554473031603285, hamiltonian_energy_error = -0.14304431591938815, max_hamiltonian_energy_error = 0.228086500822422, tree_depth = 3, numerical_error = false, step_size = 0.14214534149495148, nom_step_size = 0.14214534149495148, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.39160892554343657, log_density = 10.114820430570239, hamiltonian_energy = -4.731706691582796, hamiltonian_energy_error = 0.025591437996106414, max_hamiltonian_energy_error = 5.630054633557126, tree_depth = 3, numerical_error = false, step_size = 0.21062123186340026, nom_step_size = 0.21062123186340026, is_adapt = true), (n_steps = 31, is_accept = true, acceptance_rate = 0.9845670657403578, log_density = 10.060612392281847, hamiltonian_energy = -7.720794331728027, hamiltonian_energy_error = -0.0008088642554717751, max_hamiltonian_energy_error = 0.04099307864974211, tree_depth = 4, numerical_error = false, step_size = 0.05672369689913357, nom_step_size = 0.05672369689913357, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.7663931993995018, log_density = 8.000718464175119, hamiltonian_energy = -2.8325565406152187, hamiltonian_energy_error = 0.04126404784516158, max_hamiltonian_energy_error = 0.5918312334977691, tree_depth = 3, numerical_error = false, step_size = 0.09952952161028834, nom_step_size = 0.09952952161028834, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.9877266942235969, log_density = 8.919640911981977, hamiltonian_energy = -6.911762314016248, hamiltonian_energy_error = 0.029046130354223543, max_hamiltonian_energy_error = -0.08621268289021344, tree_depth = 3, numerical_error = false, step_size = 0.08903716163263954, nom_step_size = 0.08903716163263954, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.7434598382059022, log_density = 7.7049392948423385, hamiltonian_energy = -5.069744039174203, hamiltonian_energy_error = 0.011499859181536287, max_hamiltonian_energy_error = 1.0273330657381639, tree_depth = 3, numerical_error = false, step_size = 0.16179673340033937, nom_step_size = 0.16179673340033937, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.9401945977550953, log_density = 10.620789239932142, hamiltonian_energy = -6.247366091077309, hamiltonian_energy_error = 0.06096473205034325, max_hamiltonian_energy_error = 0.1940620076651678, tree_depth = 3, numerical_error = false, step_size = 0.1367206794268532, nom_step_size = 0.1367206794268532, is_adapt = true), (n_steps = 11, is_accept = true, acceptance_rate = 0.09807240222522663, log_density = 9.703944500733837, hamiltonian_energy = -8.697727752550225, hamiltonian_energy_error = 0.09781242180666538, max_hamiltonian_energy_error = 106.93930574956168, tree_depth = 3, numerical_error = false, step_size = 0.2153815832178047, nom_step_size = 0.2153815832178047, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9984979456665007, log_density = 10.399722598795154, hamiltonian_energy = -9.033248246499552, hamiltonian_energy_error = -0.005315212296098437, max_hamiltonian_energy_error = -0.00605479035863965, tree_depth = 3, numerical_error = false, step_size = 0.024527837547757794, nom_step_size = 0.024527837547757794, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9839010919189458, log_density = 9.384884992286361, hamiltonian_energy = -7.630076620302872, hamiltonian_energy_error = 0.010391078334692772, max_hamiltonian_energy_error = 0.0329053343034289, tree_depth = 4, numerical_error = false, step_size = 0.046850154532466756, nom_step_size = 0.046850154532466756, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9371518826103797, log_density = 8.98576614126648, hamiltonian_energy = -5.723433345576687, hamiltonian_energy_error = -0.0019195195449128732, max_hamiltonian_energy_error = 0.18473790793574896, tree_depth = 4, numerical_error = false, step_size = 0.08508156578170051, nom_step_size = 0.08508156578170051, is_adapt = true), (n_steps = 3, is_accept = true, acceptance_rate = 0.47569907331271216, log_density = 10.59417963750878, hamiltonian_energy = -4.667527187159952, hamiltonian_energy_error = -0.9073658496516916, max_hamiltonian_energy_error = 2.4602955700995466, tree_depth = 2, numerical_error = false, step_size = 0.13308503699068386, nom_step_size = 0.13308503699068386, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.9991625961850824, log_density = 10.247322578530124, hamiltonian_energy = -9.994552746395511, hamiltonian_energy_error = -7.009900392240809e-5, max_hamiltonian_energy_error = -0.0103947701931979, tree_depth = 4, numerical_error = false, step_size = 0.051142183404934476, nom_step_size = 0.051142183404934476, is_adapt = true), (n_steps = 15, is_accept = true, acceptance_rate = 0.8926746565626573, log_density = 7.896968861341826, hamiltonian_energy = -7.245616625875128, hamiltonian_energy_error = 0.23178088824702847, max_hamiltonian_energy_error = 0.2547067145831159, tree_depth = 3, numerical_error = false, step_size = 0.09638067456617025, nom_step_size = 0.09638067456617025, is_adapt = true), (n_steps = 7, is_accept = true, acceptance_rate = 0.8243786037128916, log_density = 5.278108008433829, hamiltonian_energy = -0.771789419702035, hamiltonian_energy_error = 0.19662283335385933, max_hamiltonian_energy_error = 0.41155039717757624, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8856178811848797, log_density = 4.453497723944967, hamiltonian_energy = -0.16232841292956302, hamiltonian_energy_error = 0.18424478221525842, max_hamiltonian_energy_error = -0.3474126937964055, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9737857063873125, log_density = 8.919669464876227, hamiltonian_energy = -0.8961449474005576, hamiltonian_energy_error = -0.40394633907304023, max_hamiltonian_energy_error = -0.40394633907304023, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9261207742012477, log_density = 9.894129675401837, hamiltonian_energy = -6.047538172209934, hamiltonian_energy_error = -0.05431623939263108, max_hamiltonian_energy_error = 0.31062552394330023, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8957611140435705, log_density = 7.990680848597316, hamiltonian_energy = -6.5131550665558695, hamiltonian_energy_error = 0.10170029801733449, max_hamiltonian_energy_error = 0.19511299759497636, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9823176527072851, log_density = 7.807862323098917, hamiltonian_energy = -6.844947204861222, hamiltonian_energy_error = 0.05084520706828943, max_hamiltonian_energy_error = -0.0968140111749829, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9046596029207762, log_density = 7.192480523065418, hamiltonian_energy = -4.156959153476876, hamiltonian_energy_error = 0.1359266321954582, max_hamiltonian_energy_error = 0.38136077287630243, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9464095432858676, log_density = 7.175597775910731, hamiltonian_energy = -4.314014835337609, hamiltonian_energy_error = -0.03146609223063557, max_hamiltonian_energy_error = -0.35858439131386, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9985244628209061, log_density = 7.476526004973762, hamiltonian_energy = -4.090653652352312, hamiltonian_energy_error = -0.479899811751463, max_hamiltonian_energy_error = -0.479899811751463, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9682392713888819, log_density = 7.2415892496579755, hamiltonian_energy = -5.136145008828796, hamiltonian_energy_error = 0.09176395113985514, max_hamiltonian_energy_error = 0.10520988043086987, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.659274433043713, hamiltonian_energy = -6.436824148579907, hamiltonian_energy_error = -0.07344669819493532, max_hamiltonian_energy_error = -0.15305856609471213, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9320624628200097, log_density = 9.794163092008485, hamiltonian_energy = -5.975543768128286, hamiltonian_energy_error = -0.12422028732172485, max_hamiltonian_energy_error = 0.15562369541488952, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8933166994080659, log_density = 7.469799243417238, hamiltonian_energy = -7.171381881183053, hamiltonian_energy_error = 0.1771440627238663, max_hamiltonian_energy_error = 0.21227312917749597, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9912826887100145, log_density = 7.478230207195903, hamiltonian_energy = -6.437384173292659, hamiltonian_energy_error = 0.06296235490566016, max_hamiltonian_energy_error = -0.19672635320626597, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9835255610688265, log_density = 6.348190644895094, hamiltonian_energy = -3.3201493106433233, hamiltonian_energy_error = -0.023038579637386647, max_hamiltonian_energy_error = -0.2229826885942945, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9954411215487193, log_density = 6.994840853000735, hamiltonian_energy = -2.8982458790918493, hamiltonian_energy_error = -0.08680738406493971, max_hamiltonian_energy_error = -0.18847788672949983, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.217454764467348, hamiltonian_energy = -5.529689450281042, hamiltonian_energy_error = -0.016940360229476426, max_hamiltonian_energy_error = -0.12115172478854852, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.5879340328398354, log_density = -1.0076328996489359, hamiltonian_energy = 2.0274009704433573, hamiltonian_energy_error = 0.9201725976423432, max_hamiltonian_energy_error = 0.9201725976423432, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 7.064184748597089, hamiltonian_energy = 3.257908913517465, hamiltonian_energy_error = -0.7337673538619538, max_hamiltonian_energy_error = -0.828146584564474, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9545531990699985, log_density = 7.039467088647301, hamiltonian_energy = -3.4743736560116645, hamiltonian_energy_error = -0.04060497695016796, max_hamiltonian_energy_error = -0.35718914406858104, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9736921725583166, log_density = 9.33612482470795, hamiltonian_energy = -6.096126009838562, hamiltonian_energy_error = -0.1878108901451352, max_hamiltonian_energy_error = -0.2840751853650696, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7247652063836737, log_density = 4.573990889602047, hamiltonian_energy = -3.4626641937029228, hamiltonian_energy_error = 0.5264913231865944, max_hamiltonian_energy_error = 0.8663228042474005, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9637452112696624, log_density = 9.4317256214946, hamiltonian_energy = -2.457340480602098, hamiltonian_energy_error = -0.6901429004298989, max_hamiltonian_energy_error = -0.6901429004298989, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9924261977296065, log_density = 9.86437605612316, hamiltonian_energy = -7.5586730908231345, hamiltonian_energy_error = -0.014502554801918421, max_hamiltonian_energy_error = -0.15957585924518014, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9981702322228444, log_density = 10.553389280825453, hamiltonian_energy = -8.470577014201673, hamiltonian_energy_error = -0.06714486390186991, max_hamiltonian_energy_error = -0.14410669506350615, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.828601773938273, log_density = 8.903005567982369, hamiltonian_energy = -6.870544173067185, hamiltonian_energy_error = 0.2171261512085385, max_hamiltonian_energy_error = 0.4060127809655345, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9808713497715877, log_density = 9.58595769943804, hamiltonian_energy = -7.625014323795277, hamiltonian_energy_error = -0.07862814447242883, max_hamiltonian_energy_error = -0.21279715336183092, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9936056648026539, log_density = 9.81102292684929, hamiltonian_energy = -8.038133633941126, hamiltonian_energy_error = -0.06105317380303976, max_hamiltonian_energy_error = -0.1204145697854786, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9933384789316447, log_density = 10.263780260346872, hamiltonian_energy = -9.209477723795573, hamiltonian_energy_error = -0.008943965042782054, max_hamiltonian_energy_error = -0.05386722902022356, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.953501910518607, log_density = 8.949037831973175, hamiltonian_energy = -8.91160853812977, hamiltonian_energy_error = 0.08161781647618582, max_hamiltonian_energy_error = 0.08161781647618582, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.915176314928995, log_density = 5.785144194439084, hamiltonian_energy = -2.498117585207951, hamiltonian_energy_error = 0.10676895539303732, max_hamiltonian_energy_error = 0.2088350424532699, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9795598211081443, log_density = 7.406778774274375, hamiltonian_energy = -3.3244184149589753, hamiltonian_energy_error = -0.09041107928055059, max_hamiltonian_energy_error = 0.15790988075300794, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9200284070433208, log_density = 8.762886028831243, hamiltonian_energy = -2.7605703401857262, hamiltonian_energy_error = -0.09693985421961049, max_hamiltonian_energy_error = 0.26403988944579426, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8367551782985176, log_density = 8.306357029163618, hamiltonian_energy = -5.2806738151933885, hamiltonian_energy_error = 0.21560658227470242, max_hamiltonian_energy_error = 0.3571465079071663, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9977657168928413, log_density = 9.765421090801095, hamiltonian_energy = -6.682777424130339, hamiltonian_energy_error = -0.06366153851187928, max_hamiltonian_energy_error = -0.18780848552248486, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9206696488826055, log_density = 9.322058722372226, hamiltonian_energy = -6.546813787878327, hamiltonian_energy_error = -0.06921286235474344, max_hamiltonian_energy_error = 0.18503436301256126, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.999900886889603, log_density = 10.192754799906318, hamiltonian_energy = -8.601053405240965, hamiltonian_energy_error = -0.03738048631113955, max_hamiltonian_energy_error = -0.05805263005852446, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9988942376429044, log_density = 9.170657429690605, hamiltonian_energy = -5.080990327596766, hamiltonian_energy_error = -0.06219166102691709, max_hamiltonian_energy_error = -0.13084651192724284, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.203216676543938, hamiltonian_energy = -8.929127256537017, hamiltonian_energy_error = -0.02394161352972901, max_hamiltonian_energy_error = -0.044860702066017666, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.805540057679179, log_density = 9.273784494292968, hamiltonian_energy = -4.58682374839353, hamiltonian_energy_error = 0.0744204074010586, max_hamiltonian_energy_error = 0.41064079085931304, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9960761900375178, log_density = 9.829596632425877, hamiltonian_energy = -7.136821399712373, hamiltonian_energy_error = -0.07463067669419488, max_hamiltonian_energy_error = -0.12828990206748525, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8822187296153781, log_density = 9.345481961963264, hamiltonian_energy = -6.433031981409789, hamiltonian_energy_error = 0.1485094110553602, max_hamiltonian_energy_error = 0.39440019901903245, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9639847424080623, log_density = 9.208677443448055, hamiltonian_energy = -5.700449630298975, hamiltonian_energy_error = -0.21536713860910783, max_hamiltonian_energy_error = -0.22949953356518105, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.988646358604497, log_density = 8.36815020003914, hamiltonian_energy = -8.151515769337918, hamiltonian_energy_error = 0.03974490943362419, max_hamiltonian_energy_error = 0.03974490943362419, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9549516463125567, log_density = 7.426303875976192, hamiltonian_energy = -6.060087339617772, hamiltonian_energy_error = 0.013994878014176315, max_hamiltonian_energy_error = 0.1239011007972346, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9948523146256378, log_density = 7.668643345000362, hamiltonian_energy = -6.183263013071102, hamiltonian_energy_error = -0.06820525027493751, max_hamiltonian_energy_error = -0.08682673535426133, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9854502959734577, log_density = 8.41997942097836, hamiltonian_energy = -6.179790750243118, hamiltonian_energy_error = 0.006095113567763377, max_hamiltonian_energy_error = -0.09156597937811206, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.978245708598043, log_density = 9.552983613738213, hamiltonian_energy = -6.805663756357701, hamiltonian_energy_error = 0.05498661374938152, max_hamiltonian_energy_error = 0.08205443599470197, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 10.09060500450893, hamiltonian_energy = -8.792352277809531, hamiltonian_energy_error = -0.09738619399582937, max_hamiltonian_energy_error = -0.11707009433109228, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9967340950701378, log_density = 9.720207078211631, hamiltonian_energy = -8.684082039672433, hamiltonian_energy_error = -0.011838875650671099, max_hamiltonian_energy_error = -0.028012676306152784, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8736985885516825, log_density = 6.596045635009979, hamiltonian_energy = -4.932583403973377, hamiltonian_energy_error = 0.2019239893877689, max_hamiltonian_energy_error = 0.2019239893877689, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9509945443915836, log_density = 6.894853595248005, hamiltonian_energy = -4.938433854094466, hamiltonian_energy_error = 0.07413673312357005, max_hamiltonian_energy_error = -0.4436350730013219, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9877528749885639, log_density = 7.666443107754413, hamiltonian_energy = -5.244906696947824, hamiltonian_energy_error = -0.19017764571311346, max_hamiltonian_energy_error = -0.23993309572519728, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9154708257066033, log_density = 9.021842643866865, hamiltonian_energy = -3.549259946228439, hamiltonian_energy_error = 0.10734600043822606, max_hamiltonian_energy_error = 0.35276120788144816, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9435570344562554, log_density = 10.075478002329916, hamiltonian_energy = -5.8890014409742495, hamiltonian_energy_error = -0.1278219018705835, max_hamiltonian_energy_error = 0.2630126234334771, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9937272933421413, log_density = 10.611339215234942, hamiltonian_energy = -9.648404052860046, hamiltonian_energy_error = -0.00653822272603044, max_hamiltonian_energy_error = -0.0927180417938871, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9841224441389921, log_density = 8.549776181817471, hamiltonian_energy = -7.175243943617468, hamiltonian_energy_error = -0.049100473725117944, max_hamiltonian_energy_error = -0.09059990205461155, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8641864298528503, log_density = 8.377277525632227, hamiltonian_energy = -5.740372612392967, hamiltonian_energy_error = 0.09878734044601245, max_hamiltonian_energy_error = 0.3213625045311108, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9635597319952378, log_density = 9.176058667195909, hamiltonian_energy = -6.631020395303537, hamiltonian_energy_error = 0.033504797722505586, max_hamiltonian_energy_error = -0.16942465660336836, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9834871875557462, log_density = 10.484730293026121, hamiltonian_energy = -8.57976505662688, hamiltonian_energy_error = -0.15040501370755344, max_hamiltonian_energy_error = -0.15040501370755344, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9635933805653053, log_density = 10.126622055796656, hamiltonian_energy = -9.70975874574028, hamiltonian_energy_error = 0.031169184372844327, max_hamiltonian_energy_error = 0.06459706721746272, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9654204214841282, log_density = 8.257117662638596, hamiltonian_energy = -7.82440060871236, hamiltonian_energy_error = 0.08775686338704691, max_hamiltonian_energy_error = 0.10444256303600064, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9839354222860821, log_density = 9.031859257406879, hamiltonian_energy = -7.375240161594343, hamiltonian_energy_error = -0.012739061613113556, max_hamiltonian_energy_error = 0.09670543816074417, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9940482868808991, log_density = 10.242282158150555, hamiltonian_energy = -8.056487617857105, hamiltonian_energy_error = -0.0669132430034649, max_hamiltonian_energy_error = -0.08069677038398115, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.990672542576636, log_density = 10.32781777520394, hamiltonian_energy = -8.452324692292635, hamiltonian_energy_error = -0.022921506324321328, max_hamiltonian_energy_error = -0.0368323044608303, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9744814735087337, log_density = 8.777612323697308, hamiltonian_energy = -7.966353033917621, hamiltonian_energy_error = 0.05181365896291634, max_hamiltonian_energy_error = 0.05181365896291634, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9793289432004848, log_density = 8.562621124595568, hamiltonian_energy = -5.7858214998995114, hamiltonian_energy_error = 0.011980210285283732, max_hamiltonian_energy_error = -0.095396963091674, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9947941621095138, log_density = 9.189181376199976, hamiltonian_energy = -7.916588981963839, hamiltonian_energy_error = -0.020136179945937194, max_hamiltonian_energy_error = -0.07182692321761053, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9781484747047178, log_density = 10.19665211469626, hamiltonian_energy = -7.368367927390825, hamiltonian_energy_error = -0.01908815950367959, max_hamiltonian_energy_error = 0.06650769888990915, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8692773927200835, log_density = 9.980403808122281, hamiltonian_energy = -6.278189656631033, hamiltonian_energy_error = 0.09563589800663141, max_hamiltonian_energy_error = 0.23154239454809833, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9972334919548261, log_density = 10.707700092206354, hamiltonian_energy = -8.864076796305502, hamiltonian_energy_error = -0.09333183093009367, max_hamiltonian_energy_error = -0.10074469725551616, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9208558273517399, log_density = 9.18419534420694, hamiltonian_energy = -6.941699667814302, hamiltonian_energy_error = 0.014875438314192913, max_hamiltonian_energy_error = 0.156567949389391, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8837611088509816, log_density = 8.371449829037694, hamiltonian_energy = -4.951663165116373, hamiltonian_energy_error = 0.10360662707230883, max_hamiltonian_energy_error = 0.22972587339910078, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9931693299781446, log_density = 7.955088033158152, hamiltonian_energy = -6.298332946292054, hamiltonian_energy_error = -0.008491358776447022, max_hamiltonian_energy_error = -0.0899133209016929, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8555565428030356, log_density = 7.254936885595692, hamiltonian_energy = -4.9395163726877485, hamiltonian_energy_error = 0.17998822497095013, max_hamiltonian_energy_error = 0.36404840419435036, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9926437888312986, log_density = 9.907364158794213, hamiltonian_energy = -6.052919679146015, hamiltonian_energy_error = -0.1850086587609585, max_hamiltonian_energy_error = -0.2970090022028007, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8621417165544434, log_density = 7.519910761270998, hamiltonian_energy = -5.434926525205642, hamiltonian_energy_error = 0.2481563519173493, max_hamiltonian_energy_error = 0.3105734892066554, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8130332112981721, log_density = 8.513366463796189, hamiltonian_energy = -5.508253420764222, hamiltonian_energy_error = -0.220974586593643, max_hamiltonian_energy_error = 0.5722354072889848, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9939093189490118, log_density = 9.455361739705022, hamiltonian_energy = -6.684985876368723, hamiltonian_energy_error = -0.008964895991381283, max_hamiltonian_energy_error = -0.10134413277307353, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9995138449115378, log_density = 10.171977635072171, hamiltonian_energy = -8.312586913417295, hamiltonian_energy_error = -0.043312812683463875, max_hamiltonian_energy_error = -0.08618187640789188, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8221166009785238, log_density = 9.985713127805628, hamiltonian_energy = -6.155197796571645, hamiltonian_energy_error = 0.05136867472100182, max_hamiltonian_energy_error = 0.3486522300692645, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9281602789658745, log_density = 10.43164084159097, hamiltonian_energy = -6.7837152571110515, hamiltonian_energy_error = 0.044419737902562595, max_hamiltonian_energy_error = 0.17537579195010533, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9898885510879173, log_density = 9.71406264323311, hamiltonian_energy = -7.753118588639866, hamiltonian_energy_error = -0.03363316023227192, max_hamiltonian_energy_error = -0.09013442714752529, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.96073024279661, log_density = 10.156834608847648, hamiltonian_energy = -6.365844541119198, hamiltonian_energy_error = 0.01818151556443226, max_hamiltonian_energy_error = 0.11018421982810711, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9978557120066051, log_density = 9.775235603126914, hamiltonian_energy = -9.099587593471137, hamiltonian_energy_error = 0.007776729016130801, max_hamiltonian_energy_error = -0.06027763905260208, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9728923121828322, log_density = 10.035763629593374, hamiltonian_energy = -7.780276863161047, hamiltonian_energy_error = 0.025334491847671003, max_hamiltonian_energy_error = 0.10273682287954777, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8814294808756563, log_density = 9.564307557903005, hamiltonian_energy = -5.681357212314422, hamiltonian_energy_error = -0.07993644472363659, max_hamiltonian_energy_error = 0.26108941391474616, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9540267141724402, log_density = 10.323690228525708, hamiltonian_energy = -7.6608043037446185, hamiltonian_energy_error = -8.518137778867896e-5, max_hamiltonian_energy_error = 0.1342586133026744, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9937975758107643, log_density = 10.153907892887169, hamiltonian_energy = -9.539569180087748, hamiltonian_energy_error = 0.011042483965331584, max_hamiltonian_energy_error = -0.02204559872099665, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9932993314287499, log_density = 10.452401844112053, hamiltonian_energy = -9.24813088401538, hamiltonian_energy_error = -0.03517949727370251, max_hamiltonian_energy_error = -0.03675270002902131, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9888033362256683, log_density = 8.673260570641846, hamiltonian_energy = -7.595227506600725, hamiltonian_energy_error = 0.026027132781413442, max_hamiltonian_energy_error = -0.030583260775452814, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9821716833999897, log_density = 7.482011103234072, hamiltonian_energy = -4.469848595719894, hamiltonian_energy_error = 0.054222346545729216, max_hamiltonian_energy_error = -0.11098171677314284, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.707928951033704, hamiltonian_energy = -6.916434965101907, hamiltonian_energy_error = -0.0875883080854516, max_hamiltonian_energy_error = -0.0875883080854516, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8266965976871202, log_density = 6.027689697559375, hamiltonian_energy = -3.3522745433354215, hamiltonian_energy_error = 0.1738535660202185, max_hamiltonian_energy_error = 0.2846671503758431, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9363617805270147, log_density = 9.562709761836002, hamiltonian_energy = -2.30008868802822, hamiltonian_energy_error = -0.08979605604305485, max_hamiltonian_energy_error = 0.20310412045831017, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8717202808177876, log_density = 9.92147410934613, hamiltonian_energy = -7.3733221686910895, hamiltonian_energy_error = 0.16311652015999734, max_hamiltonian_energy_error = 0.24034159887828643, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9921623179007225, log_density = 10.328190028825563, hamiltonian_energy = -8.727356401561815, hamiltonian_energy_error = -0.16482834994574347, max_hamiltonian_energy_error = -0.19397181543123132, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9975663379853809, log_density = 10.29912013430495, hamiltonian_energy = -9.557119538082754, hamiltonian_energy_error = -0.007473674846066203, max_hamiltonian_energy_error = -0.04866755701262804, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9933147744945897, log_density = 10.837966420088495, hamiltonian_energy = -9.15432247764713, hamiltonian_energy_error = -0.05052260487487281, max_hamiltonian_energy_error = -0.05052260487487281, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9511340872097788, log_density = 10.991736582035044, hamiltonian_energy = -10.077035492356837, hamiltonian_energy_error = 0.024370392811526642, max_hamiltonian_energy_error = 0.09260200719927525, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.972967881887212, log_density = 10.541758195037744, hamiltonian_energy = -9.915585516419556, hamiltonian_energy_error = 0.026098008702765796, max_hamiltonian_energy_error = 0.0648404854548783, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8759567783743094, log_density = 8.464506523046188, hamiltonian_energy = -5.387944417339433, hamiltonian_energy_error = 0.1250431807172241, max_hamiltonian_energy_error = 0.2403354040085368, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9929357411496217, log_density = 10.403363525979128, hamiltonian_energy = -7.45916521429027, hamiltonian_energy_error = -0.1833278944339387, max_hamiltonian_energy_error = -0.1833278944339387, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9826270228996744, log_density = 9.810313489505532, hamiltonian_energy = -9.039412153498764, hamiltonian_energy_error = 0.037932048752315595, max_hamiltonian_energy_error = 0.052938765747759575, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9009727900951959, log_density = 6.151590226261993, hamiltonian_energy = -3.3201888442280794, hamiltonian_energy_error = 0.11681860623260398, max_hamiltonian_energy_error = 0.3601706755885985, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8943520986648349, log_density = 8.682344389177647, hamiltonian_energy = 4.6317968119576225, hamiltonian_energy_error = -0.12541249385030717, max_hamiltonian_energy_error = 0.39230300029051257, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9895735525566725, log_density = 8.42942906258167, hamiltonian_energy = -8.02694695299342, hamiltonian_energy_error = 0.02638356297558886, max_hamiltonian_energy_error = -0.06445303165765282, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9943553775794893, log_density = 10.234295684752142, hamiltonian_energy = -7.074832668054798, hamiltonian_energy_error = -0.06760963361070615, max_hamiltonian_energy_error = -0.11110518603756958, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8902165933923365, log_density = 10.045845252169125, hamiltonian_energy = -6.853213551744177, hamiltonian_energy_error = 0.09765440371470113, max_hamiltonian_energy_error = 0.22013201521261827, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9945527049716099, log_density = 10.780323407113828, hamiltonian_energy = -8.655060490011895, hamiltonian_energy_error = -0.07071544034371868, max_hamiltonian_energy_error = -0.09308763237346973, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9166272992579583, log_density = 9.330357300974562, hamiltonian_energy = -7.164319433976258, hamiltonian_energy_error = 0.10188860834929869, max_hamiltonian_energy_error = 0.1704080340714107, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9887956560096216, log_density = 8.735852961533189, hamiltonian_energy = -7.572607886444117, hamiltonian_energy_error = -0.0259493854902324, max_hamiltonian_energy_error = -0.10663435077171624, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9938389990407658, log_density = 9.166789004028333, hamiltonian_energy = -7.069992050969935, hamiltonian_energy_error = 0.0020796804039839856, max_hamiltonian_energy_error = 0.04191580850380028, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9916845242452103, log_density = 8.899290461889905, hamiltonian_energy = -7.491400090109606, hamiltonian_energy_error = 0.002142146940832923, max_hamiltonian_energy_error = -0.057302229951761596, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9993559665807666, log_density = 10.006799293176512, hamiltonian_energy = -7.2845282689657855, hamiltonian_energy_error = -0.028272180152437265, max_hamiltonian_energy_error = -0.11573656260097742, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9121644902294769, log_density = 8.692956766196847, hamiltonian_energy = -7.883981663165825, hamiltonian_energy_error = 0.14225168831009327, max_hamiltonian_energy_error = 0.24988876587053177, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9663989706981311, log_density = 8.774731128561465, hamiltonian_energy = -6.7419192808956945, hamiltonian_energy_error = -0.20348567212458768, max_hamiltonian_energy_error = 0.3361270164701713, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9767604762515179, log_density = 10.258594344527028, hamiltonian_energy = -8.195820986106188, hamiltonian_energy_error = -0.2160028848742872, max_hamiltonian_energy_error = -0.2160028848742872, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9919921362610322, log_density = 10.008931999910267, hamiltonian_energy = -9.850264373182487, hamiltonian_energy_error = 0.03750741141453773, max_hamiltonian_energy_error = -0.05291732926686166, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9920783810694646, log_density = 10.231908062984886, hamiltonian_energy = -8.972049966679258, hamiltonian_energy_error = -0.021600711199715406, max_hamiltonian_energy_error = -0.08066138991031302, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9894751924531443, log_density = 10.525429043818734, hamiltonian_energy = -9.216781362869025, hamiltonian_energy_error = -0.04105141739232643, max_hamiltonian_energy_error = -0.07938343639247947, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.914292398905972, log_density = 9.763560391473039, hamiltonian_energy = -8.425318961256345, hamiltonian_energy_error = 0.1535676991065955, max_hamiltonian_energy_error = 0.177717438916007, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.960834386873936, log_density = 10.35671829388896, hamiltonian_energy = -5.993397346769005, hamiltonian_energy_error = -0.14114574952783254, max_hamiltonian_energy_error = -0.19860876540628958, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9611156495991527, log_density = 9.446471091858868, hamiltonian_energy = -7.592033621452206, hamiltonian_energy_error = 0.047677795261073186, max_hamiltonian_energy_error = 0.09290382071262826, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.957970647077689, log_density = 10.021571530534668, hamiltonian_energy = -7.554914991189152, hamiltonian_energy_error = 0.07149221450424914, max_hamiltonian_energy_error = 0.12868498582526744, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9977797264544458, log_density = 9.930215913090633, hamiltonian_energy = -8.916773392977174, hamiltonian_energy_error = -0.09639221066893633, max_hamiltonian_energy_error = -0.14605931936583794, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8377235630197876, log_density = 9.564688439015859, hamiltonian_energy = -7.080539377446617, hamiltonian_energy_error = 0.18894258553812282, max_hamiltonian_energy_error = 0.30458907913308764, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9999630424912602, log_density = 10.029707965403716, hamiltonian_energy = -9.004618515094645, hamiltonian_energy_error = -0.07075184056620465, max_hamiltonian_energy_error = -0.22365800621624743, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9884690275643767, log_density = 10.59201981160384, hamiltonian_energy = -8.492381385006823, hamiltonian_energy_error = -0.08999229830386035, max_hamiltonian_energy_error = -0.13866046329507853, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.902924522921207, log_density = 8.647327451757926, hamiltonian_energy = -6.216978807668628, hamiltonian_energy_error = 0.08534718201900748, max_hamiltonian_energy_error = -0.310782025971835, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9836679194684027, log_density = 9.024803532473394, hamiltonian_energy = -7.475506222473069, hamiltonian_energy_error = 0.012899272476994739, max_hamiltonian_energy_error = -0.15576273753924497, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9846862839817688, log_density = 10.051428847936258, hamiltonian_energy = -7.34857035932086, hamiltonian_energy_error = -0.18064375263376142, max_hamiltonian_energy_error = -0.2562769424628444, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9709874411234551, log_density = 10.248574020081323, hamiltonian_energy = -8.290235888802682, hamiltonian_energy_error = -0.021183845427581005, max_hamiltonian_energy_error = 0.08571260435853034, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.91580901578824, log_density = 9.09569120163657, hamiltonian_energy = -8.72081438187536, hamiltonian_energy_error = 0.10828943302555238, max_hamiltonian_energy_error = 0.1408203879173051, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 9.696975454129648, hamiltonian_energy = -8.628056990699895, hamiltonian_energy_error = -0.081447103282974, max_hamiltonian_energy_error = -0.1146479560542275, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8886605212344105, log_density = 10.624232018988442, hamiltonian_energy = -6.4378636565247405, hamiltonian_energy_error = -0.008733305240520295, max_hamiltonian_energy_error = 0.22027455705613086, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9085585093670839, log_density = 8.78238990491209, hamiltonian_energy = -7.299229363973762, hamiltonian_energy_error = 0.06557885737062374, max_hamiltonian_energy_error = 0.28292951136996347, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.5699304568461995, log_density = 7.79299159355822, hamiltonian_energy = -1.4387996606441602, hamiltonian_energy_error = 0.46950150497518095, max_hamiltonian_energy_error = 0.8717154553861395, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9844372730812495, log_density = 6.631201264774882, hamiltonian_energy = -6.044511233588828, hamiltonian_energy_error = 0.10370334545679505, max_hamiltonian_energy_error = -0.19654617061909008, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.9632471594606831, log_density = 8.733093239036762, hamiltonian_energy = -2.734149630142772, hamiltonian_energy_error = -0.2064481893624075, max_hamiltonian_energy_error = -0.29365437060726585, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9308695864954167, log_density = 7.334455408277556, hamiltonian_energy = -2.6952997397589433, hamiltonian_energy_error = -0.11527752737876362, max_hamiltonian_energy_error = 0.1949415071355265, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9787890289008494, log_density = 7.783487255264667, hamiltonian_energy = -6.044456825942339, hamiltonian_energy_error = 0.06096429798820502, max_hamiltonian_energy_error = -0.12236192578321425, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9165926231923618, log_density = 8.052136285967636, hamiltonian_energy = -2.458926466381744, hamiltonian_energy_error = 0.08278990321437352, max_hamiltonian_energy_error = 0.24923743544349808, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9901516254033458, log_density = 9.143501149588415, hamiltonian_energy = -6.082627031368828, hamiltonian_energy_error = -0.12152842044861067, max_hamiltonian_energy_error = -0.2370989338318612, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9628936605766482, log_density = 8.815461105232508, hamiltonian_energy = -7.398996279270376, hamiltonian_energy_error = 0.091636202312257, max_hamiltonian_energy_error = -0.15212149082380755, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9939181982867237, log_density = 9.076139456141155, hamiltonian_energy = -5.728277136190956, hamiltonian_energy_error = -0.02052519227741989, max_hamiltonian_energy_error = -0.19885362356679792, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9960707843615514, log_density = 9.185285802027975, hamiltonian_energy = -6.97613063842332, hamiltonian_energy_error = -0.05631636306362342, max_hamiltonian_energy_error = -0.13873910589761884, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9922022885011985, log_density = 8.692269261387324, hamiltonian_energy = -7.300190119521391, hamiltonian_energy_error = 0.024337531360512088, max_hamiltonian_energy_error = -0.09563184768981081, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9495069109576261, log_density = 6.068803871543036, hamiltonian_energy = -4.266371494319972, hamiltonian_energy_error = 0.08522864748114056, max_hamiltonian_energy_error = -0.20754345698346732, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 8.629010337780263, hamiltonian_energy = -5.873776905518505, hamiltonian_energy_error = -0.1778430039377623, max_hamiltonian_energy_error = -0.1778430039377623, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9925138967969781, log_density = 9.780503757030443, hamiltonian_energy = -6.481489999145105, hamiltonian_energy_error = -0.08898874935098977, max_hamiltonian_energy_error = -0.1204826373944714, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8365123359819879, log_density = 9.963819955417998, hamiltonian_energy = -7.4576641237169685, hamiltonian_energy_error = 0.08207004701442244, max_hamiltonian_energy_error = 0.3505584299798592, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9115947180355846, log_density = 8.303407486731135, hamiltonian_energy = -5.162645852701377, hamiltonian_energy_error = 0.07263130068353973, max_hamiltonian_energy_error = 0.24509053962276894, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9875238451403724, log_density = 9.54746441534689, hamiltonian_energy = -6.162304823776518, hamiltonian_energy_error = -0.08367863326847669, max_hamiltonian_energy_error = -0.1399911519181556, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9094142161322722, log_density = 8.935080863457987, hamiltonian_energy = -5.284838055432707, hamiltonian_energy_error = 0.006386705889529942, max_hamiltonian_energy_error = 0.2284649392459448, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.985850550361846, log_density = 10.722558871767793, hamiltonian_energy = -8.254328544225952, hamiltonian_energy_error = -0.0018864784867496098, max_hamiltonian_energy_error = -0.06137797698396952, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.759011119367543, log_density = 7.255346410898775, hamiltonian_energy = -5.689653422386433, hamiltonian_energy_error = 0.3515487690910639, max_hamiltonian_energy_error = 0.4661073498722521, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 6.797619565259783, hamiltonian_energy = -4.9919313979391, hamiltonian_energy_error = -0.07943563890442285, max_hamiltonian_energy_error = -0.13982899972890728, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9769208307853672, log_density = 9.27084454421601, hamiltonian_energy = -6.082532017081922, hamiltonian_energy_error = -0.2753507035379501, max_hamiltonian_energy_error = -0.31861311399191994, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9335821510262715, log_density = 7.6128915312337355, hamiltonian_energy = -5.144610228956249, hamiltonian_energy_error = 0.0011872680620275133, max_hamiltonian_energy_error = 0.15834846787981594, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8820075107944686, log_density = 7.9289599258118795, hamiltonian_energy = -2.793116711118296, hamiltonian_energy_error = 0.06105249752233899, max_hamiltonian_energy_error = 0.2635356746305839, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9949029013912238, log_density = 9.15589070539263, hamiltonian_energy = -6.226780404094775, hamiltonian_energy_error = -0.06648276073000581, max_hamiltonian_energy_error = -0.09205844903906879, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9991845900686781, log_density = 10.839600549772186, hamiltonian_energy = -8.677310110904806, hamiltonian_energy_error = -0.04184224048370666, max_hamiltonian_energy_error = -0.060573106746479866, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.996130812048274, log_density = 10.577313573672429, hamiltonian_energy = -10.28643545282766, hamiltonian_energy_error = 0.013041470835354119, max_hamiltonian_energy_error = -0.016705725880017397, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9989322232228879, log_density = 10.590223132637792, hamiltonian_energy = -9.49004030329889, hamiltonian_energy_error = -0.006661455153706086, max_hamiltonian_energy_error = -0.026628803894553243, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9763582636588232, log_density = 8.718769332873755, hamiltonian_energy = -8.086083144877012, hamiltonian_energy_error = 0.04581107043099486, max_hamiltonian_energy_error = 0.04581107043099486, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9849293257652076, log_density = 6.885220997107419, hamiltonian_energy = -5.86479126931386, hamiltonian_energy_error = 0.03395868994162754, max_hamiltonian_energy_error = -0.14980355843208315, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9808458778420069, log_density = 5.384022728882485, hamiltonian_energy = -5.04501254816357, hamiltonian_energy_error = 0.05917943098655254, max_hamiltonian_energy_error = -0.1885491847212748, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8626948756983915, log_density = 7.625856200505485, hamiltonian_energy = -2.173425982140853, hamiltonian_energy_error = 0.08871057682234218, max_hamiltonian_energy_error = 0.37257187351121157, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 9.222532269781045, hamiltonian_energy = -7.137613337426469, hamiltonian_energy_error = -0.12991218158216533, max_hamiltonian_energy_error = -0.3465276214140953, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9388140854956013, log_density = 9.476793552079334, hamiltonian_energy = -6.5556016211388854, hamiltonian_energy_error = 0.07490568790480179, max_hamiltonian_energy_error = 0.3175647379600326, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9904495290064652, log_density = 10.262581786000103, hamiltonian_energy = -8.305783310263237, hamiltonian_energy_error = -0.1514934412218807, max_hamiltonian_energy_error = -0.1514934412218807, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9604953626627442, log_density = 10.505574092689454, hamiltonian_energy = -8.844088684195322, hamiltonian_energy_error = 0.06200401166343816, max_hamiltonian_energy_error = 0.11199067474151114, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9181354865183187, log_density = 9.635455941392882, hamiltonian_energy = -7.199247495615095, hamiltonian_energy_error = 0.08640736544128025, max_hamiltonian_energy_error = 0.17820451602234044, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9988728718945121, log_density = 10.094417407464242, hamiltonian_energy = -8.866376120433719, hamiltonian_energy_error = -0.019473887466238793, max_hamiltonian_energy_error = -0.167590344630689, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9769102053171598, log_density = 9.555759892063044, hamiltonian_energy = -8.530109253265362, hamiltonian_energy_error = 0.10264783259719934, max_hamiltonian_energy_error = -0.17351768971111348, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 1, is_accept = true, acceptance_rate = 0.8224470327038259, log_density = 8.785580209318823, hamiltonian_energy = -8.528903023721073, hamiltonian_energy_error = 0.19547119634472487, max_hamiltonian_energy_error = 0.19547119634472487, tree_depth = 1, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.383389435952596, hamiltonian_energy = -7.298822020811299, hamiltonian_energy_error = -0.14274391461744074, max_hamiltonian_energy_error = -0.4253930671762127, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9737492563670742, log_density = 8.155560173353038, hamiltonian_energy = -6.828782116598957, hamiltonian_energy_error = 0.07499335662776652, max_hamiltonian_energy_error = -0.11521297179507606, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9920370773322543, log_density = 6.645931004268281, hamiltonian_energy = -5.158517928196824, hamiltonian_energy_error = -0.12534761550473128, max_hamiltonian_energy_error = -0.24007086103050135, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 7.176733392852109, hamiltonian_energy = -4.282213006063666, hamiltonian_energy_error = -0.08246993115683665, max_hamiltonian_energy_error = -0.1284674447556906, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9806813763572457, log_density = 8.47377553902708, hamiltonian_energy = -4.392624712607363, hamiltonian_energy_error = 0.008376718647765458, max_hamiltonian_energy_error = -0.07398062181785203, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 10.276727897389614, hamiltonian_energy = -7.795459909974236, hamiltonian_energy_error = -0.06382598134848472, max_hamiltonian_energy_error = -0.07384435923402144, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9523537693551212, log_density = 9.84513554267777, hamiltonian_energy = -8.711773577548753, hamiltonian_energy_error = 0.060821288219839786, max_hamiltonian_energy_error = 0.10281627386586933, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9642523637141499, log_density = 8.640789616624135, hamiltonian_energy = -8.10742306223435, hamiltonian_energy_error = 0.08775964958729077, max_hamiltonian_energy_error = 0.10107382622262051, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9335929267947412, log_density = 9.916431759330994, hamiltonian_energy = -5.613571952844145, hamiltonian_energy_error = -0.11738543471299501, max_hamiltonian_energy_error = 0.13690724425668765, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8598754045740539, log_density = 10.583278358818829, hamiltonian_energy = -4.487048562938382, hamiltonian_energy_error = -0.1732968753516495, max_hamiltonian_energy_error = 0.5039269955563488, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9126808750632432, log_density = 10.2027979887133, hamiltonian_energy = -8.803707972268995, hamiltonian_energy_error = 0.09608552509460999, max_hamiltonian_energy_error = 0.25178875246689714, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9888117693324089, log_density = 9.935796707224341, hamiltonian_energy = -8.942692854353178, hamiltonian_energy_error = -0.054963128711506215, max_hamiltonian_energy_error = -0.12408784246786375, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9869862816824552, log_density = 10.889060516368165, hamiltonian_energy = -8.967772234626926, hamiltonian_energy_error = -0.08884349418651283, max_hamiltonian_energy_error = -0.08884349418651283, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9594188447856347, log_density = 10.97487674145339, hamiltonian_energy = -8.773572695966617, hamiltonian_energy_error = 0.02474773062615654, max_hamiltonian_energy_error = 0.07727588355656145, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8790739461854217, log_density = 10.463802255492164, hamiltonian_energy = -9.547306049447455, hamiltonian_energy_error = 0.07634988389079922, max_hamiltonian_energy_error = 0.17245313809878304, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.989376306729249, log_density = 10.474967854284394, hamiltonian_energy = -9.512613727515621, hamiltonian_energy_error = -0.07148268212542952, max_hamiltonian_energy_error = -0.10196747041320542, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8941242254627665, log_density = 7.852180698009365, hamiltonian_energy = -5.887806546264129, hamiltonian_energy_error = 0.07970537855288473, max_hamiltonian_energy_error = 0.3946888368405226, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9976414721583315, log_density = 8.966596330012415, hamiltonian_energy = -6.440394094294687, hamiltonian_energy_error = -0.023837860185578208, max_hamiltonian_energy_error = -0.0772781442147874, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9987601135251052, log_density = 10.236244512953506, hamiltonian_energy = -7.522156942317654, hamiltonian_energy_error = -0.05779972205026951, max_hamiltonian_energy_error = -0.06630806551924984, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9613410240985428, log_density = 9.330702813699219, hamiltonian_energy = -6.764389711480692, hamiltonian_energy_error = 0.059666233230466936, max_hamiltonian_energy_error = 0.07803632135136418, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9382110872567022, log_density = 8.704690241050534, hamiltonian_energy = -5.952050471910884, hamiltonian_energy_error = 0.11873714491805298, max_hamiltonian_energy_error = 0.1812151266205282, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9654727852016757, log_density = 7.882587583042328, hamiltonian_energy = -6.146596410532723, hamiltonian_energy_error = 0.02618634752461979, max_hamiltonian_energy_error = -0.36755435979679074, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8835635729367849, log_density = 6.506347730254923, hamiltonian_energy = -3.8028379098286815, hamiltonian_energy_error = 0.28582614752840607, max_hamiltonian_energy_error = -0.43977204904046197, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9674578540591857, log_density = 4.839400066567517, hamiltonian_energy = -3.5338792258707152, hamiltonian_energy_error = -0.15785005019353537, max_hamiltonian_energy_error = -1.038682245099913, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9552165227228772, log_density = 5.075494129146856, hamiltonian_energy = -1.4869178854433125, hamiltonian_energy_error = -0.08874952871109665, max_hamiltonian_energy_error = -0.9888938748181464, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9734990981154884, log_density = 7.029474939880025, hamiltonian_energy = -2.427849698592345, hamiltonian_energy_error = -0.39748608951599795, max_hamiltonian_energy_error = -0.6790238159603685, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.853855597374501, hamiltonian_energy = -5.817566716947361, hamiltonian_energy_error = -0.3853168067648909, max_hamiltonian_energy_error = -0.3853168067648909, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8207527930987224, log_density = 7.01826924710269, hamiltonian_energy = -5.315580737486005, hamiltonian_energy_error = 0.27367649776779324, max_hamiltonian_energy_error = 0.4124278109585289, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9941621738675697, log_density = 7.324601917045898, hamiltonian_energy = -4.629809892118468, hamiltonian_energy_error = -0.020295071631325712, max_hamiltonian_energy_error = -0.31988688020180067, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9854700733607137, log_density = 7.318050993044497, hamiltonian_energy = -5.032302632332733, hamiltonian_energy_error = -0.04559842959479177, max_hamiltonian_energy_error = -0.0938590600714484, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9811651859563054, log_density = 5.3536825660148954, hamiltonian_energy = -4.4992789481458235, hamiltonian_energy_error = 0.02888136722484891, max_hamiltonian_energy_error = -0.14208529156098937, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9075317965419009, log_density = 8.019005842592215, hamiltonian_energy = -4.340666188538726, hamiltonian_energy_error = 0.19739336409281805, max_hamiltonian_energy_error = 0.20787239853747508, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7054561468714499, log_density = 8.637031916824633, hamiltonian_energy = -5.006679309953788, hamiltonian_energy_error = -0.08026042395641841, max_hamiltonian_energy_error = 0.9356130434656857, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9994157768707123, log_density = 6.547374912078144, hamiltonian_energy = -5.01273499315009, hamiltonian_energy_error = 0.00880197087966117, max_hamiltonian_energy_error = -0.14356805520689786, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.983207798464519, log_density = 7.56460432535407, hamiltonian_energy = -5.758876938796018, hamiltonian_energy_error = -0.010947996517623793, max_hamiltonian_energy_error = -0.09761839513615556, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9514697886274278, log_density = 5.641762373892286, hamiltonian_energy = -4.453521300267919, hamiltonian_energy_error = 0.051120772980857154, max_hamiltonian_energy_error = 0.10701812821149392, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8423682863465061, log_density = 6.866301886949406, hamiltonian_energy = -2.959823118830106, hamiltonian_energy_error = 0.1439206868316263, max_hamiltonian_energy_error = 0.34935799512938237, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9462830028255479, log_density = 6.673397527956279, hamiltonian_energy = -4.566876028496592, hamiltonian_energy_error = 0.07177703623351661, max_hamiltonian_energy_error = 0.11473972243995245, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9806544308369017, log_density = 7.7684561584763525, hamiltonian_energy = -4.937886292370312, hamiltonian_energy_error = 0.05009075591808809, max_hamiltonian_energy_error = -0.28855705081308436, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.993097834709932, log_density = 8.7501889669139, hamiltonian_energy = -6.424737673176379, hamiltonian_energy_error = -0.3318908239873153, max_hamiltonian_energy_error = -0.3318908239873153, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9683624965831046, log_density = 8.524953822084218, hamiltonian_energy = -5.800265647674207, hamiltonian_energy_error = 0.017752351125615462, max_hamiltonian_energy_error = 0.06657385513108327, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9106849403558444, log_density = 8.514450890127872, hamiltonian_energy = -4.964663978672379, hamiltonian_energy_error = 0.1265302372652668, max_hamiltonian_energy_error = -0.21179062897883227, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.992565030937218, log_density = 10.04623542528466, hamiltonian_energy = -7.250839176785702, hamiltonian_energy_error = -0.3284261482911601, max_hamiltonian_energy_error = -0.378515161118945, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9453223013090835, log_density = 8.053868116257947, hamiltonian_energy = -7.658003489922677, hamiltonian_energy_error = 0.11949790424695905, max_hamiltonian_energy_error = 0.11949790424695905, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8967500802793685, log_density = 7.644899906219399, hamiltonian_energy = -4.374028599130012, hamiltonian_energy_error = 0.08565032761382607, max_hamiltonian_energy_error = 0.2112501072258679, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 10.046098352160493, hamiltonian_energy = -6.963622630606881, hamiltonian_energy_error = -0.1879907242754788, max_hamiltonian_energy_error = -0.2646466350135297, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6948899462662803, log_density = 8.819730945667288, hamiltonian_energy = -5.004106598931372, hamiltonian_energy_error = 0.13188231415780294, max_hamiltonian_energy_error = 0.5522639253384725, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9997992417996338, log_density = 9.36895859433972, hamiltonian_energy = -7.812598483301689, hamiltonian_energy_error = -0.06153391496638694, max_hamiltonian_energy_error = -0.16934400062311195, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9548263388328296, log_density = 8.781606258743707, hamiltonian_energy = -7.032412046905234, hamiltonian_energy_error = 0.012437410474506194, max_hamiltonian_energy_error = 0.1108625769463254, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8830093915217506, log_density = 9.05632445362941, hamiltonian_energy = -5.873814765526828, hamiltonian_energy_error = 0.022141861953877573, max_hamiltonian_energy_error = 0.3919105172675543, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8341453933479218, log_density = 7.380553546058524, hamiltonian_energy = -3.370539767029557, hamiltonian_energy_error = 0.15576152523728304, max_hamiltonian_energy_error = 0.6665249852822699, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9406435351195912, log_density = 10.411840881611193, hamiltonian_energy = -4.352563547022782, hamiltonian_energy_error = -0.23477100474757417, max_hamiltonian_energy_error = -0.5788005420852338, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9935281613289734, log_density = 10.259988899520167, hamiltonian_energy = -9.416238621147915, hamiltonian_energy_error = -0.004248111712261249, max_hamiltonian_energy_error = -0.08519831363662256, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9248786493781601, log_density = 5.767995577849126, hamiltonian_energy = -3.904838635844679, hamiltonian_energy_error = 0.135843696049748, max_hamiltonian_energy_error = 0.1369248621303898, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.498971537026097, hamiltonian_energy = -4.895139906224445, hamiltonian_energy_error = -0.08321926282304482, max_hamiltonian_energy_error = -0.21283376515582209, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9298474402539154, log_density = 9.111356704852813, hamiltonian_energy = -7.817586313805162, hamiltonian_energy_error = 0.07326486058404846, max_hamiltonian_energy_error = -0.20367935569362317, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9988344025500777, log_density = 8.945549646777808, hamiltonian_energy = -6.886434264934739, hamiltonian_energy_error = -0.0954882496971905, max_hamiltonian_energy_error = -0.2645063638741787, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9933381126940992, log_density = 9.765165720987145, hamiltonian_energy = -7.044208106116314, hamiltonian_energy_error = -0.07165075406243648, max_hamiltonian_energy_error = -0.1742811674973126, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9960154519486147, log_density = 10.091520717098525, hamiltonian_energy = -8.551570980075075, hamiltonian_energy_error = 0.003414341243027863, max_hamiltonian_energy_error = -0.04774411762666908, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8890978913124417, log_density = 7.690941209200071, hamiltonian_energy = -6.431557983169828, hamiltonian_energy_error = 0.12962626814690292, max_hamiltonian_energy_error = 0.2168436412567214, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9802735057741901, log_density = 10.44331561128829, hamiltonian_energy = -6.736071707199007, hamiltonian_energy_error = -0.138300185879479, max_hamiltonian_energy_error = -0.138300185879479, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.8856161989072455, log_density = 7.515949096830445, hamiltonian_energy = -6.171560242888175, hamiltonian_energy_error = 0.12955118124054987, max_hamiltonian_energy_error = 0.245556943861172, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9735940535508464, log_density = 9.707317794846935, hamiltonian_energy = -4.456774308268612, hamiltonian_energy_error = -0.10887859531753286, max_hamiltonian_energy_error = -0.10887859531753286, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8436533221748318, log_density = 9.028761389099051, hamiltonian_energy = -3.21928159535077, hamiltonian_energy_error = 0.06636244260585844, max_hamiltonian_energy_error = 0.3279801972949872, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9602625930630406, log_density = 7.312340659650703, hamiltonian_energy = -5.670800505370906, hamiltonian_energy_error = 0.07608169129785125, max_hamiltonian_energy_error = 0.12070684722233871, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.997008168859413, log_density = 6.648795061286062, hamiltonian_energy = -2.4442954143990088, hamiltonian_energy_error = -0.11613749422555308, max_hamiltonian_energy_error = -0.23019074895392322, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9784630226116177, log_density = 8.872166497552051, hamiltonian_energy = -5.731450978145989, hamiltonian_energy_error = -0.022948554022721446, max_hamiltonian_energy_error = -0.09851231566147689, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8764574945709157, log_density = 9.442259721829107, hamiltonian_energy = -7.151757022465351, hamiltonian_energy_error = -0.0002464292101347354, max_hamiltonian_energy_error = 0.2948900372241594, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9580580037960262, log_density = 9.122091994351628, hamiltonian_energy = -7.496533529707112, hamiltonian_energy_error = 0.002249868555588286, max_hamiltonian_energy_error = 0.09984150985585938, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9697229621802005, log_density = 8.665984169798465, hamiltonian_energy = -7.963772547042971, hamiltonian_energy_error = 0.05829859742035559, max_hamiltonian_energy_error = 0.08609113989527994, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.8185928533885395, log_density = 8.327886700065338, hamiltonian_energy = -4.447275304969871, hamiltonian_energy_error = 0.202858086630064, max_hamiltonian_energy_error = 0.5046956657612833, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9972716227520825, log_density = 9.513501461448701, hamiltonian_energy = -5.345155026851242, hamiltonian_energy_error = -0.12960405701890476, max_hamiltonian_energy_error = -0.1580391888484982, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9768403767420254, log_density = 6.96989157717184, hamiltonian_energy = -5.759909398357365, hamiltonian_energy_error = 0.04626200136514047, max_hamiltonian_energy_error = 0.04626200136514047, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9952816380818843, log_density = 8.700425565004913, hamiltonian_energy = -5.808983589292646, hamiltonian_energy_error = -0.05247343514637226, max_hamiltonian_energy_error = -0.060127205355976265, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9637918463062034, log_density = 7.256892074336573, hamiltonian_energy = -6.351848719477563, hamiltonian_energy_error = 0.014910452153173992, max_hamiltonian_energy_error = 0.06874651193503212, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9925567074450622, log_density = 8.667576014610288, hamiltonian_energy = -5.19296681307538, hamiltonian_energy_error = 0.009919275216878631, max_hamiltonian_energy_error = -0.04292684539770519, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.874367007416355, log_density = 8.094845540422497, hamiltonian_energy = -6.606149776189875, hamiltonian_energy_error = 0.3039710811655816, max_hamiltonian_energy_error = 0.3039710811655816, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9648012545261205, log_density = 7.828138925939086, hamiltonian_energy = -3.8169547774804506, hamiltonian_energy_error = -0.2162945935301499, max_hamiltonian_energy_error = -0.4018958488329263, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8346871685290338, log_density = 4.811423323399694, hamiltonian_energy = -4.08632220212884, hamiltonian_energy_error = 0.5311099680778444, max_hamiltonian_energy_error = 0.5311099680778444, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 8.65984318023352, hamiltonian_energy = -2.988663775969881, hamiltonian_energy_error = -0.29141163175846296, max_hamiltonian_energy_error = -0.5898835522198351, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8665733755732237, log_density = 6.798734480500549, hamiltonian_energy = -3.3105613914834366, hamiltonian_energy_error = 0.22667614180831475, max_hamiltonian_energy_error = 0.25273708828005326, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 1.0, log_density = 7.844533685816863, hamiltonian_energy = -6.2679076126334525, hamiltonian_energy_error = -0.19391373378640253, max_hamiltonian_energy_error = -0.323989619193787, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9821846516391467, log_density = 8.991322115074507, hamiltonian_energy = -5.551760955744692, hamiltonian_energy_error = -0.1308544514096317, max_hamiltonian_energy_error = -0.1308544514096317, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8322756015479726, log_density = 7.009542612344008, hamiltonian_energy = -4.2593599198398415, hamiltonian_energy_error = 0.054924441154695636, max_hamiltonian_energy_error = 0.3121059935852113, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9745376812889545, log_density = 9.10627776781042, hamiltonian_energy = -3.0369785513839096, hamiltonian_energy_error = -0.023123799990706573, max_hamiltonian_energy_error = -0.09423165366595043, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9784112973029194, log_density = 7.467968341757349, hamiltonian_energy = -6.101844946862564, hamiltonian_energy_error = 0.018026709134079333, max_hamiltonian_energy_error = 0.048098252952684994, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9034262021246077, log_density = 9.671544500684254, hamiltonian_energy = -5.93073559156157, hamiltonian_energy_error = -0.015187340790070891, max_hamiltonian_energy_error = 0.2621308812156755, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9536689673310363, log_density = 5.7308658017673935, hamiltonian_energy = -3.9755713025870203, hamiltonian_energy_error = -0.008832392702223135, max_hamiltonian_energy_error = 0.2227031343760988, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.940975957773759, log_density = 7.025073588288617, hamiltonian_energy = -2.222157347605087, hamiltonian_energy_error = 0.11355888748786125, max_hamiltonian_energy_error = 0.1899060270447399, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9985440910020384, log_density = 9.859801533640518, hamiltonian_energy = -5.093809000772155, hamiltonian_energy_error = -0.1513616687686854, max_hamiltonian_energy_error = -0.4076748375737722, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.999746022578664, log_density = 9.686894886010787, hamiltonian_energy = -8.986098400685902, hamiltonian_energy_error = -0.03402946149813424, max_hamiltonian_energy_error = -0.09654223690027841, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8922458074118812, log_density = 9.393960378346586, hamiltonian_energy = -7.130288225765399, hamiltonian_energy_error = 0.1671118328676835, max_hamiltonian_energy_error = 0.2869749959708603, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.935826291622884, log_density = 11.007194106039037, hamiltonian_energy = -8.241726282524384, hamiltonian_energy_error = -0.22296525565695724, max_hamiltonian_energy_error = -0.22296525565695724, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9531753259131762, log_density = 9.637376266164566, hamiltonian_energy = -9.08658117080865, hamiltonian_energy_error = 0.06042902442425557, max_hamiltonian_energy_error = 0.08200704800778169, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.895945662054023, log_density = 9.118741503698, hamiltonian_energy = -5.9618033683472875, hamiltonian_energy_error = 0.06358785965009961, max_hamiltonian_energy_error = 0.22077730852359156, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9377779264966961, log_density = 9.231782224264487, hamiltonian_energy = -4.904633851458288, hamiltonian_energy_error = -0.004863763365455576, max_hamiltonian_energy_error = 0.16255949458583707, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9738478392296687, log_density = 9.731392738838302, hamiltonian_energy = -7.152869562275651, hamiltonian_energy_error = 0.022748448236926677, max_hamiltonian_energy_error = 0.08989393678652746, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9498230521440065, log_density = 7.7362981998135005, hamiltonian_energy = -6.233356377748037, hamiltonian_energy_error = 0.0521277408981895, max_hamiltonian_energy_error = 0.15239753484344298, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9939050105151183, log_density = 5.964902340989408, hamiltonian_energy = -5.406671613172594, hamiltonian_energy_error = 0.007969366535711231, max_hamiltonian_energy_error = -0.05845599975028026, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9550381597517458, log_density = 9.155162489741114, hamiltonian_energy = -2.7837148423149385, hamiltonian_energy_error = -0.007764834817975519, max_hamiltonian_energy_error = 0.14082094842616577, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9798116260788313, log_density = 10.101124183765528, hamiltonian_energy = -8.356047432757267, hamiltonian_energy_error = -0.03719434728622062, max_hamiltonian_energy_error = 0.0869706117196607, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9901744153123319, log_density = 10.8424974845367, hamiltonian_energy = -9.204418895410086, hamiltonian_energy_error = -0.03202399920383847, max_hamiltonian_energy_error = -0.04508034621261636, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.956560818978215, log_density = 10.360316277813203, hamiltonian_energy = -9.312250234107136, hamiltonian_energy_error = 0.016789157014210687, max_hamiltonian_energy_error = 0.09790021731725318, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.899103389249375, log_density = 9.224883161977196, hamiltonian_energy = -8.189350304523664, hamiltonian_energy_error = 0.1268241801030321, max_hamiltonian_energy_error = 0.18555981876114735, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9900600534362496, log_density = 9.110910128752604, hamiltonian_energy = -6.749500813795245, hamiltonian_energy_error = -0.07524331938836237, max_hamiltonian_energy_error = -0.17284302897536818, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9874637882451379, log_density = 9.208266167501112, hamiltonian_energy = -7.57488692340123, hamiltonian_energy_error = 0.0029760734726744786, max_hamiltonian_energy_error = -0.05385533800984188, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9701437392296745, log_density = 9.1280499355008, hamiltonian_energy = -7.216728712734104, hamiltonian_energy_error = -0.09443896192228607, max_hamiltonian_energy_error = 0.12047809185815073, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8373629775769271, log_density = 8.404691321637747, hamiltonian_energy = -6.961201237240957, hamiltonian_energy_error = 0.20272988633984035, max_hamiltonian_energy_error = 0.33453980538058925, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9821494647545936, log_density = 8.918414625867342, hamiltonian_energy = -5.774440573130111, hamiltonian_energy_error = -0.05227263710194219, max_hamiltonian_energy_error = -0.1329244237424838, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9913619126787113, log_density = 9.700024346809279, hamiltonian_energy = -7.402571485971904, hamiltonian_energy_error = -0.03497200427387437, max_hamiltonian_energy_error = -0.043671673171999714, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9502324566402056, log_density = 8.883695478638629, hamiltonian_energy = -6.699742817773014, hamiltonian_energy_error = 0.010977881392552291, max_hamiltonian_energy_error = 0.136904566588524, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9970288488728688, log_density = 10.148867177285831, hamiltonian_energy = -7.677609154321679, hamiltonian_energy_error = -0.05177363617651576, max_hamiltonian_energy_error = -0.05530863545231579, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7995638177271334, log_density = 9.972710350274529, hamiltonian_energy = -4.752772707272474, hamiltonian_energy_error = 0.11339315206145884, max_hamiltonian_energy_error = 0.37717442106315424, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9386087233177087, log_density = 9.281620737401992, hamiltonian_energy = -8.11330421306478, hamiltonian_energy_error = 0.11191790547380798, max_hamiltonian_energy_error = 0.2255458559306458, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9084669741424181, log_density = 5.385103113635866, hamiltonian_energy = -3.274607932216585, hamiltonian_energy_error = 0.22955621580808439, max_hamiltonian_energy_error = -0.39184223745731384, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.959629208230236, log_density = 8.510039184392559, hamiltonian_energy = -4.259948118009925, hamiltonian_energy_error = -0.5821492552268537, max_hamiltonian_energy_error = -0.5821492552268537, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9672851574912951, log_density = 8.954428355230183, hamiltonian_energy = -7.4504969086301065, hamiltonian_energy_error = 0.05747365357517431, max_hamiltonian_energy_error = 0.08866684780253031, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6756280474859214, log_density = 7.686531696348336, hamiltonian_energy = -4.339971117112882, hamiltonian_energy_error = 0.4423354656932714, max_hamiltonian_energy_error = 0.687733867073125, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9491232974871129, log_density = 8.76220896173687, hamiltonian_energy = -4.816098036119718, hamiltonian_energy_error = 0.002473272722329334, max_hamiltonian_energy_error = 0.4324091188734389, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9762493781891899, log_density = 10.318398059732209, hamiltonian_energy = -5.248379185536924, hamiltonian_energy_error = -0.3821958037326656, max_hamiltonian_energy_error = -0.43220089943390594, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9845310663407721, log_density = 10.019195658683026, hamiltonian_energy = -8.50660842426843, hamiltonian_energy_error = -0.048415000165928035, max_hamiltonian_energy_error = -0.06506003699429819, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9896084786511066, log_density = 9.820969316602751, hamiltonian_energy = -8.163535743766046, hamiltonian_energy_error = 0.015673845483815896, max_hamiltonian_energy_error = -0.05999899469283143, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9775491736255555, log_density = 9.271837358543909, hamiltonian_energy = -9.131355048226377, hamiltonian_energy_error = 0.04312593280920041, max_hamiltonian_energy_error = -0.062085602532800266, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.991582073831017, log_density = 8.926803615325108, hamiltonian_energy = -7.652640074105491, hamiltonian_energy_error = -0.06840843242953198, max_hamiltonian_energy_error = -0.09314008198859547, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9938881259138134, log_density = 9.938455430820607, hamiltonian_energy = -7.34801424865388, hamiltonian_energy_error = -0.001827124080868714, max_hamiltonian_energy_error = 0.040509447431409384, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9978048983375429, log_density = 10.604019428195937, hamiltonian_energy = -9.314461413307976, hamiltonian_energy_error = -0.021963053873092164, max_hamiltonian_energy_error = -0.021963053873092164, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9795835378190889, log_density = 10.675079435630305, hamiltonian_energy = -9.034480382030942, hamiltonian_energy_error = 0.005383520384935281, max_hamiltonian_energy_error = 0.038639353314136926, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.7983763548289938, log_density = 6.60137262058721, hamiltonian_energy = -5.239727930263355, hamiltonian_energy_error = 0.48633338844325635, max_hamiltonian_energy_error = 0.48633338844325635, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9991220767728185, log_density = 7.845848608906131, hamiltonian_energy = -4.136175497365157, hamiltonian_energy_error = -0.296720981573237, max_hamiltonian_energy_error = -0.5197514795078315, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.5751975379155438, log_density = 6.475466851304551, hamiltonian_energy = -1.504238874960814, hamiltonian_energy_error = 0.692025691523587, max_hamiltonian_energy_error = 1.4202209660664975, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9763295431871503, log_density = 8.61225992633101, hamiltonian_energy = -4.388962363483562, hamiltonian_energy_error = -0.4645833339239114, max_hamiltonian_energy_error = -0.469259890328781, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.998147656682645, hamiltonian_energy = -8.414873580181695, hamiltonian_energy_error = -0.05350816157953808, max_hamiltonian_energy_error = -0.05825880464777278, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8122217878084099, log_density = 8.4749421450487, hamiltonian_energy = -7.489225176710687, hamiltonian_energy_error = 0.2709240875964385, max_hamiltonian_energy_error = 0.4041984040297244, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9947098102508589, log_density = 8.256763403472043, hamiltonian_energy = -4.146286651110588, hamiltonian_energy_error = -0.2453007363421955, max_hamiltonian_energy_error = -0.35049267083908564, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9466153092792305, log_density = 9.613531706059666, hamiltonian_energy = -5.627080678823232, hamiltonian_energy_error = -0.03298087385796755, max_hamiltonian_energy_error = 0.14377071560764598, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9505871629059144, log_density = 9.317002588988498, hamiltonian_energy = -6.606113064380393, hamiltonian_energy_error = -0.06926529248278612, max_hamiltonian_energy_error = 0.13556312030126083, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9990685484761878, log_density = 11.038674300313833, hamiltonian_energy = -8.97795120851184, hamiltonian_energy_error = -0.03485068892547538, max_hamiltonian_energy_error = -0.043754632982571096, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9829709071718571, log_density = 10.838630829989729, hamiltonian_energy = -10.090895948013126, hamiltonian_energy_error = 0.011833801621035533, max_hamiltonian_energy_error = 0.04168847991165592, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.8630331721715697, log_density = 9.30139445355622, hamiltonian_energy = -8.741060869353612, hamiltonian_energy_error = 0.24414220922040109, max_hamiltonian_energy_error = 0.2760928825206257, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.9676747783023851, log_density = 7.43800926132867, hamiltonian_energy = -6.801917140879652, hamiltonian_energy_error = 0.22290567794888183, max_hamiltonian_energy_error = -0.3058751290367425, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9168877784089117, log_density = 5.989981732653099, hamiltonian_energy = -4.974734627585368, hamiltonian_energy_error = 0.34175267033408385, max_hamiltonian_energy_error = -0.4929054976944549, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9966379373308423, log_density = 9.52030458112754, hamiltonian_energy = -5.235360771255983, hamiltonian_energy_error = -0.6912543039115784, max_hamiltonian_energy_error = -0.8777327038156795, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9951350774381034, log_density = 9.563477371308, hamiltonian_energy = -7.792451879557072, hamiltonian_energy_error = -0.02016645263927863, max_hamiltonian_energy_error = -0.07432209118383426, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9795991770173631, log_density = 8.003186313946754, hamiltonian_energy = -7.601519742611329, hamiltonian_energy_error = 0.05456290123856, max_hamiltonian_energy_error = 0.05456290123856, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9434167720187489, log_density = 8.35491377679282, hamiltonian_energy = -6.248047163008602, hamiltonian_energy_error = 0.0756822673252806, max_hamiltonian_energy_error = 0.12273403380458436, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.996164022731, log_density = 8.94354569471063, hamiltonian_energy = -6.725648278626281, hamiltonian_energy_error = -0.051964657080829646, max_hamiltonian_energy_error = -0.18928163886285798, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8682755182310924, log_density = 9.122062667391912, hamiltonian_energy = -6.38551024897116, hamiltonian_energy_error = -0.053815841942998155, max_hamiltonian_energy_error = 0.474190813358109, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9975991466927, log_density = 8.619665486469714, hamiltonian_energy = -6.973796440483673, hamiltonian_energy_error = -0.09907878375883605, max_hamiltonian_energy_error = -0.11865085995743918, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9459728098687845, log_density = 8.515082875879006, hamiltonian_energy = -6.68138085488898, hamiltonian_energy_error = 0.054802075876600576, max_hamiltonian_energy_error = 0.11668063912893789, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9864739317174359, log_density = 8.854992731733306, hamiltonian_energy = -5.116928129095523, hamiltonian_energy_error = -0.09635260126627188, max_hamiltonian_energy_error = -0.12794842198258305, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9677245609760703, log_density = 9.01878162451002, hamiltonian_energy = -8.030759692401832, hamiltonian_energy_error = -0.002022266267699635, max_hamiltonian_energy_error = 0.0656923808011749, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8177358922984552, log_density = 8.356495506142002, hamiltonian_energy = -6.869520274035207, hamiltonian_energy_error = 0.20599975250926406, max_hamiltonian_energy_error = 0.31679259243953517, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.997459102559881, log_density = 7.667891794683147, hamiltonian_energy = -7.173593382334678, hamiltonian_energy_error = 0.017946358951241415, max_hamiltonian_energy_error = -0.12346554117475694, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9988418172745017, log_density = 9.16059527983466, hamiltonian_energy = -6.686817366135854, hamiltonian_energy_error = -0.08464804996589947, max_hamiltonian_energy_error = -0.08464804996589947, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9199199853005958, log_density = 4.793638414806033, hamiltonian_energy = -3.4514120638573393, hamiltonian_energy_error = 0.13429561898888576, max_hamiltonian_energy_error = 0.19215265438256424, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9838758731445102, log_density = 9.80788153398306, hamiltonian_energy = -2.692010715880466, hamiltonian_energy_error = -0.12025880206580819, max_hamiltonian_energy_error = -0.1775002485802295, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.7442641115034604, log_density = 4.891692396670931, hamiltonian_energy = -3.8492139742689524, hamiltonian_energy_error = 0.3363745701204506, max_hamiltonian_energy_error = 0.38364331010613517, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9888179558619125, log_density = 5.354322067648702, hamiltonian_energy = -2.4483222945568905, hamiltonian_energy_error = 0.06231668558400161, max_hamiltonian_energy_error = -0.3445662998700838, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9885633049636604, log_density = 8.00206786063171, hamiltonian_energy = -3.7063044393343345, hamiltonian_energy_error = -0.26490499956794045, max_hamiltonian_energy_error = -0.41795846863165886, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9688709350096827, log_density = 8.80252022510758, hamiltonian_energy = -6.060868467546453, hamiltonian_energy_error = -0.2087077427622166, max_hamiltonian_energy_error = -0.2087077427622166, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8943932099881595, log_density = 5.756178339899648, hamiltonian_energy = -3.8652453556300688, hamiltonian_energy_error = 0.22240681574383503, max_hamiltonian_energy_error = 0.22240681574383503, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8858253999652472, log_density = 8.255719208228737, hamiltonian_energy = -1.2646540506555306, hamiltonian_energy_error = 0.11538927191522319, max_hamiltonian_energy_error = 0.2536856201004203, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9765665871602539, log_density = 10.858511031666398, hamiltonian_energy = -6.758417696297725, hamiltonian_energy_error = -0.21490597591683525, max_hamiltonian_energy_error = -0.23909919469305319, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9845082031244006, log_density = 10.301889169816153, hamiltonian_energy = -9.997297329406754, hamiltonian_energy_error = 0.0310417252192714, max_hamiltonian_energy_error = 0.0310417252192714, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9682131067899529, log_density = 10.527533444312038, hamiltonian_energy = -9.001816318608132, hamiltonian_energy_error = 0.0006518922399045834, max_hamiltonian_energy_error = 0.0768712392007096, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9937265708255727, log_density = 10.398106476994847, hamiltonian_energy = -9.760221648279582, hamiltonian_energy_error = 0.013504219354143032, max_hamiltonian_energy_error = -0.030493375339082363, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.860069146913691, log_density = 7.568911348633257, hamiltonian_energy = -6.090369871787974, hamiltonian_energy_error = 0.16251081434639492, max_hamiltonian_energy_error = 0.2322245977959474, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9977044247731257, log_density = 9.052770875238723, hamiltonian_energy = -5.214774910032242, hamiltonian_energy_error = -0.17289333597743006, max_hamiltonian_energy_error = -0.17289333597743006, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 9.945446534561604, hamiltonian_energy = -8.794514628821041, hamiltonian_energy_error = -0.09972892594552718, max_hamiltonian_energy_error = -0.09972892594552718, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8402856590391858, log_density = 9.28010016377543, hamiltonian_energy = -6.856782693205064, hamiltonian_energy_error = 0.21599919838355852, max_hamiltonian_energy_error = 0.288219696156677, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8368128639344731, log_density = 8.100903944491028, hamiltonian_energy = -2.9353671305459645, hamiltonian_energy_error = -0.06541023035508964, max_hamiltonian_energy_error = 0.5430792372377233, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.507638592854514, hamiltonian_energy = -7.70512076837691, hamiltonian_energy_error = -0.08723769705509277, max_hamiltonian_energy_error = -0.1787631702424779, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9808408096795047, log_density = 7.32486336724176, hamiltonian_energy = -5.457916206203316, hamiltonian_energy_error = 0.000447512555031615, max_hamiltonian_energy_error = -0.14285243871460995, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.75074007225287, hamiltonian_energy = -6.731322470792003, hamiltonian_energy_error = -0.04544709318042006, max_hamiltonian_energy_error = -0.09654043895497377, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9984525979345348, log_density = 10.287978203844037, hamiltonian_energy = -9.367243941317248, hamiltonian_energy_error = -0.0016929608180529243, max_hamiltonian_energy_error = -0.05016185522602079, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.99523586137356, log_density = 10.23165499339731, hamiltonian_energy = -9.006926624922558, hamiltonian_energy_error = 0.007630172913438926, max_hamiltonian_energy_error = -0.05081143289980261, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9858935270719448, log_density = 10.251284745979351, hamiltonian_energy = -9.261107674471317, hamiltonian_energy_error = -0.016852696647955412, max_hamiltonian_energy_error = 0.038797486019863214, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.974370873583762, log_density = 10.120705072237858, hamiltonian_energy = -8.012060359394777, hamiltonian_energy_error = -0.03269714248268407, max_hamiltonian_energy_error = 0.09365006075870053, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8239646048068839, log_density = 8.487131157016053, hamiltonian_energy = -4.8709330073763315, hamiltonian_energy_error = 0.13558000773354628, max_hamiltonian_energy_error = 0.3776864372795883, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8423181641002283, log_density = 5.881405696243949, hamiltonian_energy = -1.8589849053920426, hamiltonian_energy_error = 0.2714569529427653, max_hamiltonian_energy_error = 0.325040074151965, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9722503424344568, log_density = 4.0569235225034594, hamiltonian_energy = -2.5524142798531173, hamiltonian_energy_error = 0.14633218334184583, max_hamiltonian_energy_error = -0.39742044764578566, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9917617522923224, log_density = 9.692073066968934, hamiltonian_energy = -2.750794719240349, hamiltonian_energy_error = -0.3186365051358768, max_hamiltonian_energy_error = -0.4532779288265587, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9793241934128344, log_density = 10.431442031108523, hamiltonian_energy = -7.489301119000263, hamiltonian_energy_error = -0.018118356850938433, max_hamiltonian_energy_error = 0.08161605493447155, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9567827029185035, log_density = 10.454397474723592, hamiltonian_energy = -9.866737314881188, hamiltonian_energy_error = 0.004960714741921279, max_hamiltonian_energy_error = 0.1331925477841036, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.4307858484300943, log_density = 6.595212108901205, hamiltonian_energy = -3.8655933733740224, hamiltonian_energy_error = 0.6949233758101125, max_hamiltonian_energy_error = 1.147459092923956, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.6442278466688948, log_density = 10.517658471364262, hamiltonian_energy = -2.600621110980679, hamiltonian_energy_error = -0.2477311024378075, max_hamiltonian_energy_error = 1.2073220272155694, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.997302681172874, log_density = 10.343592212403195, hamiltonian_energy = -9.310986078905486, hamiltonian_energy_error = -0.034024014393757795, max_hamiltonian_energy_error = -0.034024014393757795, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9890343278378937, log_density = 11.060749395182006, hamiltonian_energy = -9.430611776349517, hamiltonian_energy_error = -0.0036060326130993303, max_hamiltonian_energy_error = 0.035074646514322794, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9769139960937335, log_density = 10.887181488113095, hamiltonian_energy = -9.879339472627288, hamiltonian_energy_error = 0.002324853119493042, max_hamiltonian_energy_error = 0.046292890986936897, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9850716810421749, log_density = 9.283182346487207, hamiltonian_energy = -8.754992055637212, hamiltonian_energy_error = 0.01770162044512169, max_hamiltonian_energy_error = 0.022472645864093366, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9932367016493283, log_density = 7.014739260806191, hamiltonian_energy = -5.788087579243757, hamiltonian_energy_error = 0.0015368272910363245, max_hamiltonian_energy_error = 0.01884196390677051, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.7927120312847061, log_density = 8.116263281565963, hamiltonian_energy = -3.2510712109926327, hamiltonian_energy_error = 0.29180324036601846, max_hamiltonian_energy_error = 0.43463646451916027, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9954429589555377, log_density = 9.200632426554387, hamiltonian_energy = -6.756727129101842, hamiltonian_energy_error = -0.05632633634701989, max_hamiltonian_energy_error = -0.28466623777120503, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9556230306991961, log_density = 7.764930355823122, hamiltonian_energy = -4.20108297521174, hamiltonian_energy_error = -0.07638840619590681, max_hamiltonian_energy_error = -0.3691572504037355, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9943259235062616, log_density = 7.677317935504643, hamiltonian_energy = -5.608179922102431, hamiltonian_energy_error = 0.0049092215595623045, max_hamiltonian_energy_error = -0.1330972748283532, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.943150012053858, log_density = 7.5382218573200905, hamiltonian_energy = -5.686563216350448, hamiltonian_energy_error = 0.07764236221006282, max_hamiltonian_energy_error = 0.20556502178602631, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9842429504043909, log_density = 9.451387648328193, hamiltonian_energy = -6.183423336394057, hamiltonian_energy_error = -0.027154803916661585, max_hamiltonian_energy_error = -0.09590024974598599, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9875960754728675, log_density = 9.600644219617942, hamiltonian_energy = -6.340729073413149, hamiltonian_energy_error = -0.15719108986700459, max_hamiltonian_energy_error = -0.22014131861565023, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9269459650100429, log_density = 8.462077166212078, hamiltonian_energy = -7.382281197242285, hamiltonian_energy_error = 0.12525376871875427, max_hamiltonian_energy_error = 0.15612967379657317, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9916846037043341, log_density = 8.642690443396031, hamiltonian_energy = -7.261352926448236, hamiltonian_energy_error = 0.055115329566588045, max_hamiltonian_energy_error = -0.18559049617742218, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9402737918891619, log_density = 9.781348309997755, hamiltonian_energy = -5.423775523940505, hamiltonian_energy_error = -0.11736524336819176, max_hamiltonian_energy_error = 0.3520943067460749, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9971917458743111, log_density = 9.016457574772957, hamiltonian_energy = -7.97792870043285, hamiltonian_energy_error = 0.012631085846944501, max_hamiltonian_energy_error = -0.0651729926239053, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.947268590845173, log_density = 5.8159394329093566, hamiltonian_energy = -2.9639800970099675, hamiltonian_energy_error = 0.10705514095715962, max_hamiltonian_energy_error = 0.1703472958127259, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9953466866048678, log_density = 8.09385924032317, hamiltonian_energy = -3.915763309563581, hamiltonian_energy_error = -0.036163015656452746, max_hamiltonian_energy_error = -0.17229931232680995, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.730374728499754, hamiltonian_energy = -7.818090613025064, hamiltonian_energy_error = -0.11722790449673148, max_hamiltonian_energy_error = -0.11722790449673148, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9677341880046783, log_density = 10.376146203103135, hamiltonian_energy = -7.981743901880687, hamiltonian_energy_error = 0.003840306080708622, max_hamiltonian_energy_error = 0.08624613123583913, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7598408980352952, log_density = 8.838501171101754, hamiltonian_energy = -5.431663489111803, hamiltonian_energy_error = 0.13454962341735932, max_hamiltonian_energy_error = 0.3851536603049128, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9233257923713887, log_density = 7.84604181021345, hamiltonian_energy = -4.151763182495789, hamiltonian_energy_error = -0.22562348752734085, max_hamiltonian_energy_error = -0.22562348752734085, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9953871328241647, log_density = 6.991867292322377, hamiltonian_energy = -6.5295909343876914, hamiltonian_energy_error = 0.016613892555850995, max_hamiltonian_energy_error = -0.043346173916906316, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.6313787751409851, log_density = 5.547408077760956, hamiltonian_energy = 2.941348796400982, hamiltonian_energy_error = 0.12429636762301399, max_hamiltonian_energy_error = 0.8849170383960772, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9744193816545214, log_density = 7.425896914461424, hamiltonian_energy = -2.835584753905625, hamiltonian_energy_error = -0.05340376379075007, max_hamiltonian_energy_error = -0.11080467784809755, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9886378482000479, log_density = 8.859581548445895, hamiltonian_energy = -5.476896593301118, hamiltonian_energy_error = 0.004530434030018959, max_hamiltonian_energy_error = -0.13783735536801078, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9964231440016865, log_density = 8.097270152247305, hamiltonian_energy = -5.344699151488623, hamiltonian_energy_error = -0.01812192361529341, max_hamiltonian_energy_error = -0.09202465386533909, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.887302354109392, log_density = 7.554898215594616, hamiltonian_energy = -3.15224121129054, hamiltonian_energy_error = 0.26551457849139837, max_hamiltonian_energy_error = -0.32980579808777666, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 6.746196520247196, hamiltonian_energy = -5.207747778411793, hamiltonian_energy_error = -0.2096589946770342, max_hamiltonian_energy_error = -0.5106444828484697, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.949684290751909, log_density = 8.685133163420414, hamiltonian_energy = -2.410193062338049, hamiltonian_energy_error = -0.14128812051145, max_hamiltonian_energy_error = -0.14128812051145, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.9637823926324472, log_density = 8.993607817761257, hamiltonian_energy = -6.428148099363412, hamiltonian_energy_error = 0.008056164657726406, max_hamiltonian_energy_error = 0.14611187346456855, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9972729467529867, log_density = 10.913373615813601, hamiltonian_energy = -8.732626663182543, hamiltonian_energy_error = -0.17269244405184025, max_hamiltonian_energy_error = -0.17269244405184025, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9591072598831103, log_density = 9.714426374778359, hamiltonian_energy = -7.809447378704034, hamiltonian_energy_error = 0.02675674390988725, max_hamiltonian_energy_error = 0.1079767514062775, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 19, is_accept = true, acceptance_rate = 0.8761599942918435, log_density = 9.968429178207991, hamiltonian_energy = -8.133226235587214, hamiltonian_energy_error = 0.09145680854333271, max_hamiltonian_energy_error = 0.24768330612478806, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9859694642018654, log_density = 8.885259243515002, hamiltonian_energy = -8.068533809394271, hamiltonian_energy_error = 0.07450751764595331, max_hamiltonian_energy_error = -0.15450614660354312, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9890495490542094, log_density = 9.490767527252887, hamiltonian_energy = -6.788071406002363, hamiltonian_energy_error = -0.12197538184268453, max_hamiltonian_energy_error = -0.21383012944554025, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9236558058966037, log_density = 8.868242184773775, hamiltonian_energy = -7.113542428699827, hamiltonian_energy_error = 0.06759477188103169, max_hamiltonian_energy_error = 0.22777442475880427, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8744704966356188, log_density = 8.95774080700448, hamiltonian_energy = -6.526285645480433, hamiltonian_energy_error = 0.008629535033976232, max_hamiltonian_energy_error = 0.3211658792986958, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9891600652584387, log_density = 8.655894923088642, hamiltonian_energy = -6.873065819045988, hamiltonian_energy_error = -0.0747439147176232, max_hamiltonian_energy_error = -0.18337326763994088, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9423784678362449, log_density = 7.159754817080092, hamiltonian_energy = -6.184851364808045, hamiltonian_energy_error = 0.021780803168717, max_hamiltonian_energy_error = 0.16975442990601675, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9975755333954844, log_density = 9.453703501891713, hamiltonian_energy = -6.436801135011054, hamiltonian_energy_error = -0.028649711982298598, max_hamiltonian_energy_error = -0.1419984462947106, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.992704059342907, log_density = 10.095437023299793, hamiltonian_energy = -8.390419617693565, hamiltonian_energy_error = -0.06424699975821468, max_hamiltonian_energy_error = -0.11328139978257035, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9951505906293013, log_density = 9.378770930762721, hamiltonian_energy = -9.083649742458904, hamiltonian_energy_error = 0.02896117473913762, max_hamiltonian_energy_error = -0.04525154264999287, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8975788555677823, log_density = 9.465049440902192, hamiltonian_energy = -5.155576148354585, hamiltonian_energy_error = -0.04619814826891577, max_hamiltonian_energy_error = 0.31693148421628603, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 23, is_accept = true, acceptance_rate = 0.8625872738899961, log_density = 11.101685143230288, hamiltonian_energy = -7.8282691069243215, hamiltonian_energy_error = -0.05103679728580879, max_hamiltonian_energy_error = 0.3972980519360121, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.45738778542588854, log_density = 4.2598367442954554, hamiltonian_energy = -3.0658582850062066, hamiltonian_energy_error = 1.013046758427036, max_hamiltonian_energy_error = 1.232006761132363, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9973915726635251, log_density = 8.221310066049572, hamiltonian_energy = -0.4153261040097753, hamiltonian_energy_error = -1.0405871313745525, max_hamiltonian_energy_error = -1.0405871313745525, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9329974871680662, log_density = 9.390836130189642, hamiltonian_energy = -4.393451961347237, hamiltonian_energy_error = 0.07515450226124365, max_hamiltonian_energy_error = 0.12917049252946633, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.992348961709104, log_density = 9.543066193521407, hamiltonian_energy = -7.6359676933937575, hamiltonian_energy_error = -0.037807401823990894, max_hamiltonian_energy_error = -0.06615482863609667, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9848122323911321, log_density = 10.555196526127594, hamiltonian_energy = -7.32972355281905, hamiltonian_energy_error = 0.0179277016873991, max_hamiltonian_energy_error = -0.12547969926259128, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8918441188849077, log_density = 9.181334492303474, hamiltonian_energy = -5.114143180853093, hamiltonian_energy_error = 0.17894919049467273, max_hamiltonian_energy_error = 0.307445073874935, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8961987457287883, log_density = 8.860289584831738, hamiltonian_energy = -5.363159607287013, hamiltonian_energy_error = -0.26354430069345813, max_hamiltonian_energy_error = -0.3395489508537253, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9917895428963545, log_density = 7.755477820006698, hamiltonian_energy = -4.2980416055183195, hamiltonian_energy_error = -0.0005536607777960612, max_hamiltonian_energy_error = -0.09962972085676292, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9815873800504016, log_density = 8.122836310057039, hamiltonian_energy = -6.0360259717102425, hamiltonian_energy_error = 0.033476166069877245, max_hamiltonian_energy_error = -0.07370922495910115, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 9.415141284496602, hamiltonian_energy = -7.587013881210543, hamiltonian_energy_error = -0.012411026000100023, max_hamiltonian_energy_error = -0.09298038861305002, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9806800827154386, log_density = 8.537293722772212, hamiltonian_energy = -6.252560357712433, hamiltonian_energy_error = 0.008834661294101487, max_hamiltonian_energy_error = -0.11108979810910835, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.6322191443283938, log_density = 3.582272698969536, hamiltonian_energy = -1.6194830763139156, hamiltonian_energy_error = 0.6567937635417149, max_hamiltonian_energy_error = 0.6567937635417149, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9841368027598391, log_density = 6.202150823210879, hamiltonian_energy = 0.285034165888451, hamiltonian_energy_error = -0.03175257361113548, max_hamiltonian_energy_error = -0.7028635394808509, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.905859823431304, log_density = 3.0679748945396605, hamiltonian_energy = -1.3706078114754794, hamiltonian_energy_error = 0.15516751193455303, max_hamiltonian_energy_error = -0.36471621006887744, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9826079970330099, log_density = 6.715090217500135, hamiltonian_energy = -2.6226089093718663, hamiltonian_energy_error = -0.1936660009562683, max_hamiltonian_energy_error = -0.43993846818490834, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9958689920768425, log_density = 9.706252418473433, hamiltonian_energy = -5.583936758788775, hamiltonian_energy_error = -0.12978432212703872, max_hamiltonian_energy_error = -0.22597405728570585, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9861281758119934, log_density = 10.724199348113537, hamiltonian_energy = -8.457098573742776, hamiltonian_energy_error = -0.09512760084379579, max_hamiltonian_energy_error = -0.09512760084379579, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9522998296110031, log_density = 8.603199701263305, hamiltonian_energy = -7.322817341534238, hamiltonian_energy_error = 0.062006280895388954, max_hamiltonian_energy_error = 0.09086586262816176, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9900379985004634, log_density = 9.96544684240991, hamiltonian_energy = -7.204747613966147, hamiltonian_energy_error = -0.06145181626092988, max_hamiltonian_energy_error = -0.06145181626092988, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.7819522880221889, log_density = 6.799555463158885, hamiltonian_energy = -2.1583559442645743, hamiltonian_energy_error = 0.24457359648651256, max_hamiltonian_energy_error = 0.5413744589996505, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9850344648802094, log_density = 6.200529968979738, hamiltonian_energy = -0.9880210221009209, hamiltonian_energy_error = -0.08969225468236619, max_hamiltonian_energy_error = -0.26699628035374, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9997059900268604, log_density = 9.134779422710702, hamiltonian_energy = -5.428586923832187, hamiltonian_energy_error = -0.030354041021583456, max_hamiltonian_energy_error = -0.20387379197723643, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7891078808425807, log_density = 8.088463012526093, hamiltonian_energy = -5.238971301955199, hamiltonian_energy_error = 0.04323693298041498, max_hamiltonian_energy_error = 0.42158533729450465, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9688826315685606, log_density = 7.5328172587331625, hamiltonian_energy = -4.905331426706121, hamiltonian_energy_error = -0.009655296093916022, max_hamiltonian_energy_error = 0.15345032697575345, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.031121547253782, hamiltonian_energy = -6.659274545330356, hamiltonian_energy_error = -0.067979074486467, max_hamiltonian_energy_error = -0.1385905667576166, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9790028094311131, log_density = 9.737687066991644, hamiltonian_energy = -7.988277873170034, hamiltonian_energy_error = -0.04453405598299298, max_hamiltonian_energy_error = -0.07453496885571376, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9814869430889294, log_density = 7.201255141433393, hamiltonian_energy = -5.508093350335542, hamiltonian_energy_error = -0.023002454612886858, max_hamiltonian_energy_error = -0.054877176111249426, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9488881171914619, log_density = 6.634780164746672, hamiltonian_energy = -4.3913407339306705, hamiltonian_energy_error = 0.07681637148145448, max_hamiltonian_energy_error = 0.14060146748871105, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.8827703579046009, log_density = 3.510787421465542, hamiltonian_energy = -1.497806397629203, hamiltonian_energy_error = 0.15728054905715183, max_hamiltonian_energy_error = 0.22823073492513268, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9631338454107407, log_density = 5.427912608292081, hamiltonian_energy = 0.5064130080054525, hamiltonian_energy_error = -0.08680592084945182, max_hamiltonian_energy_error = 0.16744067015967312, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 6.7098568838403345, hamiltonian_energy = -3.2753880380919513, hamiltonian_energy_error = -0.03252890991508384, max_hamiltonian_energy_error = -0.12862327421248665, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9789629860161391, log_density = 7.302502891064737, hamiltonian_energy = -5.488675409685511, hamiltonian_energy_error = 0.027057761529288626, max_hamiltonian_energy_error = -0.06628116031207654, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9706260479204938, log_density = 6.485487621243154, hamiltonian_energy = -4.926927257855688, hamiltonian_energy_error = 0.059469919669682625, max_hamiltonian_energy_error = -0.06869722749274665, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9458760350358568, log_density = 4.692916267568693, hamiltonian_energy = -2.6037567111408024, hamiltonian_energy_error = 0.08425317780454256, max_hamiltonian_energy_error = 0.26852402290018595, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9680432800164064, log_density = 4.065560030983404, hamiltonian_energy = -2.297249317933564, hamiltonian_energy_error = 0.37237026165365616, max_hamiltonian_energy_error = -0.45327135124736273, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 1.0, log_density = 8.08004232787841, hamiltonian_energy = -3.7833431021159534, hamiltonian_energy_error = -0.63255930428579, max_hamiltonian_energy_error = -0.7731470901541364, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9894599530035137, log_density = 9.464999142352692, hamiltonian_energy = -7.059471848036706, hamiltonian_energy_error = -0.11798247457614774, max_hamiltonian_energy_error = -0.15077046473882305, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 11, is_accept = true, acceptance_rate = 0.7256646420137848, log_density = 7.912196038795273, hamiltonian_energy = -3.9022892986627573, hamiltonian_energy_error = 0.41481249898292116, max_hamiltonian_energy_error = 0.7157372684278123, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 9.057478466663435, hamiltonian_energy = -6.7664994049073925, hamiltonian_energy_error = -0.22361485959936545, max_hamiltonian_energy_error = -0.3532832987293739, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9881264672077027, log_density = 9.662461790865855, hamiltonian_energy = -7.221161920419171, hamiltonian_energy_error = -0.04568269203395836, max_hamiltonian_energy_error = -0.15023023145104375, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9871454724146673, log_density = 10.703996920351843, hamiltonian_energy = -8.572545139016574, hamiltonian_energy_error = -0.02118508339972891, max_hamiltonian_energy_error = -0.06431567910715685, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.7362329179294149, log_density = 9.381900214672113, hamiltonian_energy = -5.415505304844407, hamiltonian_energy_error = 0.21294278839385328, max_hamiltonian_energy_error = 0.8532538961630411, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9885307042622868, log_density = 8.081716164733859, hamiltonian_energy = -6.3581207442331005, hamiltonian_energy_error = -0.14807959954008165, max_hamiltonian_energy_error = -0.20987228623326715, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.987571970805068, log_density = 10.307909276026333, hamiltonian_energy = -7.377750661727091, hamiltonian_energy_error = -0.08479990774502344, max_hamiltonian_energy_error = -0.08479990774502344, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9875716708575258, log_density = 8.167243231581633, hamiltonian_energy = -6.951357930037881, hamiltonian_energy_error = 0.01845955302333202, max_hamiltonian_energy_error = 0.028294366565190465, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9731486387738852, log_density = 8.887139985182575, hamiltonian_energy = -6.973998037995958, hamiltonian_energy_error = 0.0378407845978348, max_hamiltonian_energy_error = 0.08694591437494203, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.8855496932305768, log_density = 7.844662888774998, hamiltonian_energy = -5.3565274560192595, hamiltonian_energy_error = 0.04574832778769622, max_hamiltonian_energy_error = 0.2813989248689248, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9841433007830167, log_density = 7.415955008206957, hamiltonian_energy = -6.221829613004185, hamiltonian_energy_error = 0.04441821874577023, max_hamiltonian_energy_error = -0.06380597758371298, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9956153728830507, log_density = 7.090629257212768, hamiltonian_energy = -6.083875954939591, hamiltonian_energy_error = 0.031173266300783098, max_hamiltonian_energy_error = -0.18277812942174876, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9375286889653572, log_density = 4.590133058537361, hamiltonian_energy = -3.2847060290133014, hamiltonian_energy_error = 0.11916436264052743, max_hamiltonian_energy_error = 0.22662082453887944, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 6.38788379618423, hamiltonian_energy = -3.986528401978913, hamiltonian_energy_error = -0.1434685873409336, max_hamiltonian_energy_error = -0.2627044111075607, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 6.249987849739107, hamiltonian_energy = -5.371108004281491, hamiltonian_energy_error = -0.09186162809236453, max_hamiltonian_energy_error = -0.21503376658497952, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.7598324512110951, log_density = 5.677631112156909, hamiltonian_energy = -0.7733808604155428, hamiltonian_energy_error = 0.20288749061922395, max_hamiltonian_energy_error = 0.510948220563118, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 6.331405696987506, hamiltonian_energy = -4.565735800306651, hamiltonian_energy_error = -0.1832163412755472, max_hamiltonian_energy_error = -0.44286257972458287, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9816008300422875, log_density = 10.194632397335777, hamiltonian_energy = -1.0613496976669996, hamiltonian_energy_error = -0.23359112103240776, max_hamiltonian_energy_error = -0.27128496504459454, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9826767721467092, log_density = 9.170824371595945, hamiltonian_energy = -8.571384018332695, hamiltonian_energy_error = 0.06912712963790568, max_hamiltonian_energy_error = -0.09141228989404127, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9970758256530057, log_density = 9.525439652535553, hamiltonian_energy = -8.476887165284742, hamiltonian_energy_error = -0.050619640995188675, max_hamiltonian_energy_error = -0.16894620968385254, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9297792830028148, log_density = 10.645610214608734, hamiltonian_energy = -5.298573366864856, hamiltonian_energy_error = -0.09675835755718243, max_hamiltonian_energy_error = 0.23566719027104988, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.998803662570774, log_density = 10.922692012112833, hamiltonian_energy = -10.2184706555715, hamiltonian_energy_error = -0.03667322473957668, max_hamiltonian_energy_error = -0.06484430944501263, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.8720298751732293, log_density = 9.494899142879296, hamiltonian_energy = -8.900880398381947, hamiltonian_energy_error = 0.13811401755579666, max_hamiltonian_energy_error = 0.23835542918823904, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 10.116424337045062, hamiltonian_energy = -9.123908441732706, hamiltonian_energy_error = -0.05802160365964326, max_hamiltonian_energy_error = -0.13587612975583063, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 31, is_accept = true, acceptance_rate = 0.9631314090114139, log_density = 9.213859700505958, hamiltonian_energy = -8.096425071966994, hamiltonian_energy_error = 0.13592241213522627, max_hamiltonian_energy_error = 0.18084161414730815, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.713481441457073, hamiltonian_energy = -8.03912157494998, hamiltonian_energy_error = -0.05214229875339793, max_hamiltonian_energy_error = -0.2356233056061674, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.9911152747256537, log_density = 8.850477479757892, hamiltonian_energy = -6.2622112885954895, hamiltonian_energy_error = 0.028621842772029282, max_hamiltonian_energy_error = -0.2769695239000596, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 3, is_accept = true, acceptance_rate = 0.9428589721935428, log_density = 7.1184211719354895, hamiltonian_energy = -6.232906591719301, hamiltonian_energy_error = 0.18804560806549553, max_hamiltonian_energy_error = -0.43589493934202483, tree_depth = 2, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 9.82320698047246, hamiltonian_energy = -3.043415930992346, hamiltonian_energy_error = -0.36212721047075735, max_hamiltonian_energy_error = -0.6034044065171793, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 0.930136689497932, log_density = 9.734599752091448, hamiltonian_energy = -7.9273615325968425, hamiltonian_energy_error = 0.03864589247171679, max_hamiltonian_energy_error = 0.21072230387526325, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.980463283987684, log_density = 9.121580560536948, hamiltonian_energy = -7.71240143619583, hamiltonian_energy_error = -0.018988182409100496, max_hamiltonian_energy_error = -0.1079726583714331, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9474265870331985, log_density = 3.987791946144391, hamiltonian_energy = -2.112945642119351, hamiltonian_energy_error = 0.11730877319713473, max_hamiltonian_energy_error = 0.19061199008172602, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 15, is_accept = true, acceptance_rate = 1.0, log_density = 8.09236534780016, hamiltonian_energy = -3.4242188799031057, hamiltonian_energy_error = -0.303089537720985, max_hamiltonian_energy_error = -0.303089537720985, tree_depth = 4, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 1.0, log_density = 8.941163047846459, hamiltonian_energy = -7.089481906578338, hamiltonian_energy_error = -0.03426424584759413, max_hamiltonian_energy_error = -0.10161957948453448, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false), (n_steps = 7, is_accept = true, acceptance_rate = 0.9718942549808369, log_density = 10.428134713535762, hamiltonian_energy = -7.570421651171678, hamiltonian_energy_error = -0.0036852589302505123, max_hamiltonian_energy_error = 0.104807568201009, tree_depth = 3, numerical_error = false, step_size = 0.0956460461512333, nom_step_size = 0.0956460461512333, is_adapt = false)])","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"Inspect posterior distribution over hyperparameters.","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"hypers = map(unpack, samples);\nh_l1 = histogram(getindex.(hypers, :l1); label=\"l1\");\nh_l2 = histogram(getindex.(hypers, :l2); label=\"l2\");\nh_s1 = histogram(getindex.(hypers, :s1); label=\"s1\");\nh_s2 = histogram(getindex.(hypers, :s2); label=\"s2\");\nplot(h_l1, h_l2, h_s1, h_s2; layout=(2, 2))","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"As expected, the sampler converges to the posterior distribution quickly. One could combine this code with that from the previous sections to make predictions under the posterior over the hyperparameters.","category":"page"},{"location":"examples/getting_started/#Conclusion","page":"Getting Started","title":"Conclusion","text":"","category":"section"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"So you now know how to fit GPs using Stheno.jl, and to investigate their posterior distributions. It's also straightforward to utilise Stheno.jl inside probabilistic programming frameworks like Soss.jl and Turing.jl (see examples folder).","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"examples/getting_started/","page":"Getting Started","title":"Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Stheno.jl","page":"Home","title":"Stheno.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stheno.jl is a package for probabilistic programming with Gaussian processes.","category":"page"},{"location":"internals/#Interfaces","page":"Internals","title":"Interfaces","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The primary objects in Stheno are some special subtypes of AbstractGP. There are three primary concrete subtypes of AbstractGP:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP: an atomic Gaussian process given by wrapping an AbstractGP.\nCompositeGP: a Gaussian process composed of other WrappedGPs and CompositeGPs, whose properties are determined recursively from the GPs of which it is composed.\nGaussianProcessProbabilisticProgramme / GPPP: a Gaussian process comprising WrappedGPs and CompositeGPs. This is the primary piece of functionality that users should interact with.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This documentation provides the information necessary to understand the internals of Stheno, and to extend it with custom functionality.","category":"page"},{"location":"internals/#AbstractGP","page":"Internals","title":"AbstractGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"WrappedGP and CompositeGP implement the AbstractGPs.jl API. Please refer to the AbstractGPs.jl docs for more info on this.","category":"page"},{"location":"internals/#diag-methods","page":"Internals","title":"diag methods","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It is crucial for pseudo-point methods, and for the computation of marginal statistics at a reasonable scale, to be able to compute the diagonal of a given covariance matrix in linear time in the size of its inputs. This, in turn, necessitates that the diagonal of a given cross-covariance matrix can also be computed efficiently as the evaluation of covariance matrices often rely on the evaluation of cross-covariance matrices. As such, we have the following functions in addition to the AbstractGPs API implemented for WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Function Brief description\nvar(f, x) diag(cov(f, x))\nvar(f, x, x′) diag(cov(f, x, x′))\nvar(f, f′, x, x′) diag(cov(f, f′, x, x′))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The second and third rows of the table only make sense when length(x) == length(x′), of course.","category":"page"},{"location":"internals/#WrappedGP","page":"Internals","title":"WrappedGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"We can construct a WrappedGP in the following manner:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = wrap(GP(m, k), gpc)\n","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"where m is its MeanFunction, k its Kernel. gpc is a GPC object that handles some book-keeping, and is discussed in more depth below.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The AbstractGP interface is implemented for WrappedGPs in terms of the AbstractGP that they wrap. So if you want a particular behaviour, just make sure that the AbstractGP that you wrap has the functionality you want.","category":"page"},{"location":"internals/#Aside:-Example-Kernel-implementation","page":"Internals","title":"Aside: Example Kernel implementation","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"It's straightforward to implement a new kernel yourself: simply following the instructions in KernelFunctions.jl and it'll work fine with GPs in Stheno.jl.","category":"page"},{"location":"internals/#GPC","page":"Internals","title":"GPC","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"This book-keeping object doesn't matter from a user's perspective but, unfortunately, we currently expose it to users. Fortunately, it's straightforward to work with. Say you wish to construct a collection of processes:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS WON'T WORK\nf = GP(mf, kf)\ng = GP(mg, kg)\nh = f + g\n# THIS WON'T WORK","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"You should write","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS GOOD. PLEASE DO THIS\ngpc = GPC()\nf = wrap(GP(mf, kf), gpc)\ng = wrap(GP(mg, kg), gpc)\nh = f + g\n# THIS IS GOOD. PLEASE DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The rule is simple: when constructing GPs that you plan to make interact later in your program, construct them using the same gpc object. For example, DON'T do the following:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"# THIS IS BAD. PLEASE DON'T DO THIS\nf = wrap(GP(mf, kf), GPC())\ng = wrap(GP(mg, kg), GPC())\nh = f + g\n# THIS IS BAD. PLEASE DON'T DO THIS","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"The mistake here is to construct a separate GPC object for each GP. Hopefully, the code errors, but might yield incorrect results.","category":"page"},{"location":"internals/#CompositeGP","page":"Internals","title":"CompositeGP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"CompositeGPs are constructed as affine transformations of CompositeGPs and GPs. We describe the implemented transformations below.","category":"page"},{"location":"internals/#Addition","page":"Internals","title":"Addition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Given AbstractGPs f and g, we define","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f + g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"to be the CompositeGP sastisfying h(x) = f(x) + g(x) for all x.","category":"page"},{"location":"internals/#Multiplication","page":"Internals","title":"Multiplication","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Multiplication of AbstractGPs is undefined since the product of two Gaussian random variables is not itself Gaussian. However, we can scale an AbstractGP by either a constant or (deterministic) function.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = c * f\nh = sin * f","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"will both work, and produce the result that h(x) = c * f(x) or h(x) = sin(x) * f(x).","category":"page"},{"location":"internals/#Composition","page":"Internals","title":"Composition","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = f ∘ g","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for some deterministic function g is the composition of f with g. i.e. h(x) = f(g(x)).","category":"page"},{"location":"internals/#cross","page":"Internals","title":"cross","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"h = cross([f, g])","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"for WrappedGPs and CompositeGPs f and g. Think of cross as having stacked f and g together, so that you can work with their joint.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"For example, if you wanted to sample jointly from f and g at locations x_f and x_g, you could write something like","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"fg = cross([f, g])\nx_fg = BlockData([x_f, x_g])\nrand(fg(x_fg, 1e-6))","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"This particular function isn't part of the user-facing API because it isn't generally needed. It is, however, used extensively in the implementation of the GaussianProcessProbabilisticProgramme.","category":"page"},{"location":"internals/#GPPP","page":"Internals","title":"GPPP","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The GaussianProcessProbabilisticProgramme is another AbstractGP which enables provides a thin layer of convenience functionality on top of WrappedGPs and CompositeGPs, and is the primary way in which it is intended that users will interact with this package.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP like this","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"f = @gppp let\n    f1 = GP(SEKernel())\n    f2 = GP(Matern52Kernel())\n    f3 = f1 + f2\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"is equivalent to manually constructing a GPPP using WrappedGPs and CompositeGPs:","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"gpc = GPC()\nf1 = wrap(GP(SEKernel()), gpc)\nf2 = wrap(GP(SEKernel()), gpc)\nf3 = f1 + f2\nf = Stheno.GPPP((f1=f1, f2=f2, f3=f3), gpc)","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"If you take a look at the gaussian_process_probabilistic_programming.jl source, you'll see that it's essentially just the above, and an implementation of the AbstractGPs API on top of a GPPP.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"A GPPP is a single GP on an extended input domain: (Image: )","category":"page"}]
}
